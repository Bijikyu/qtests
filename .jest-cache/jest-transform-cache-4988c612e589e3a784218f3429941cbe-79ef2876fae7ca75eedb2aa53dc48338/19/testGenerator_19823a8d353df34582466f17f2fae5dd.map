{"file":"/home/runner/workspace/lib/testGenerator.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/lib/testGenerator.ts"],"sourcesContent":["/**\n * Test Generator for qtests Framework - TypeScript Implementation\n * \n * Automatically generates unit tests and API tests by scanning source code.\n * Analyzes JavaScript/TypeScript files to detect exports, imports, and API routes,\n * then creates appropriate test files with proper structure and mocking.\n * \n * Features:\n * - Unit test generation for exported functions/classes\n * - API test generation for Express routes\n * - Automatic mock setup for known libraries\n * - Jest configuration scaffolding\n * - Support for qtests framework integration\n * - TypeScript ES module only (no version duplication)\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { getModuleDirname } from '../utils/esm-globals.js';\n\n// ES Module __dirname equivalent - lazy initialization to avoid Jest issues\nlet moduleDirname: string | undefined;\nfunction getModuleDirnameForTestGenerator(): string {\n  if (moduleDirname === undefined) {\n    // Use a try-catch to handle Jest environment gracefully\n    try {\n      // Use eval to hide import.meta from Jest's static parser\n      const importMetaUrl = (0, eval)('import.meta.url');\n      moduleDirname = getModuleDirname(importMetaUrl);\n    } catch (error) {\n      // Fallback for Jest environment\n      moduleDirname = process.cwd();\n    }\n  }\n  return moduleDirname;\n}\n\n// Type definitions\ninterface TestGeneratorConfig {\n  SRC_DIR: string;\n  TEST_DIR: string;\n  KNOWN_MOCKS: string[];\n  VALID_EXTS: string[];\n  mode?: 'heuristic' | 'ast';\n  unit?: boolean;\n  integration?: boolean;\n  dryRun?: boolean;\n  force?: boolean;\n  include?: string[];\n  exclude?: string[];\n}\n\ninterface ScannedTest {\n  type: 'unit' | 'api';\n  file: string;\n}\n\ninterface FileCategorization {\n  sourceFiles: string[];\n  existingTests: string[];\n}\n\n// Configuration constants - TypeScript ES module only\nconst DEFAULT_CONFIG: TestGeneratorConfig = {\n  SRC_DIR: '.',\n  TEST_DIR: 'generated-tests',\n  KNOWN_MOCKS: ['axios', 'node-fetch', 'pg', 'mongoose', 'fs', 'redis'],\n  VALID_EXTS: ['.ts', '.js', '.tsx', '.jsx']\n};\n\n// Regex patterns for code analysis - Enhanced for both ES modules and CommonJS\nconst PATTERNS = {\n  qtests: /from ['\"]qtests['\"]|require\\(['\"]qtests['\"]\\)/,\n  api: /\\b(app|router)\\.(get|post|put|delete|patch)\\s*\\(\\s*['\"`]([^'\"`]+)['\"`]/gi,\n  // ES module exports: export const, export function, export class\n  exportsES: /^\\s*export\\s+(?:const|function|class)\\s+([a-zA-Z0-9_]+)/gm,\n  // ES module named exports: export { name1, name2, name3 }\n  exportsNamed: /export\\s*\\{\\s*([^}]+)\\s*\\}/g,\n  // ES module default exports: export default SomeName\n  exportsDefault: /export\\s+default\\s+([a-zA-Z0-9_]+)/g,\n  // CommonJS exports: module.exports = {}, module.exports.name =, exports.name =\n  exportsCommonJS: /(?:module\\.exports\\.([a-zA-Z0-9_]+)\\s*=|exports\\.([a-zA-Z0-9_]+)\\s*=|module\\.exports\\s*=\\s*([a-zA-Z0-9_]+))/gm,\n  // Function declarations that might be exported\n  functionDeclarations: /^\\s*(?:async\\s+)?function\\s+([a-zA-Z0-9_]+)\\s*\\(/gm,\n  // Class declarations that might be exported\n  classDeclarations: /^\\s*class\\s+([a-zA-Z0-9_]+)/gm,\n  imports: /from ['\"]([^'\"]+)['\"]|require\\(['\"]([^'\"]+)['\"]\\)/g\n};\n\nclass TestGenerator {\n  private config: TestGeneratorConfig;\n  private scanned: ScannedTest[];\n  private isESModule: boolean;\n  // Precompiled include/exclude regexes for fast filtering\n  private includeRegexes: RegExp[] = [];\n  private excludeRegexes: RegExp[] = [];\n\n  constructor(options: Partial<TestGeneratorConfig> = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...options };\n    this.scanned = [];\n    this.isESModule = this.detectESModule(); // Detect module type once during initialization\n    // Compile include/exclude glob patterns to regex for matching\n    this.includeRegexes = (this.config.include || []).map(this.globToRegExp);\n    this.excludeRegexes = (this.config.exclude || []).map(this.globToRegExp);\n  }\n\n  /**\n   * Detect if the current project uses ES modules or CommonJS\n   * Since we're now \"TypeScript ES module only\", this defaults to true for TypeScript projects\n   */\n  private detectESModule(): boolean {\n    try {\n      // Check package.json for explicit \"type\": \"module\"\n      const packagePath = path.resolve(process.cwd(), 'package.json');\n      if (fs.existsSync(packagePath)) {\n        const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));\n        if (packageJson.type === 'module') {\n          return true;\n        }\n        // For TypeScript ES module only approach, prefer ES modules when TypeScript is detected\n        if (packageJson.devDependencies?.typescript || packageJson.dependencies?.typescript) {\n          return true;\n        }\n      }\n      \n      // Check for ES module patterns in source files (excluding test files and node_modules)\n      const sourceFiles = this.walkProject()\n        .filter(file => {\n          const ext = path.extname(file);\n          const isValidExt = this.config.VALID_EXTS.includes(ext);\n          const isTestFile = this.isTestFile(path.basename(file));\n          const isNodeModules = file.includes('node_modules');\n          return isValidExt && !isTestFile && !isNodeModules;\n        })\n        .slice(0, 10); // Sample first 10 files for performance\n      \n      let esModuleCount = 0;\n      let commonJSCount = 0;\n      \n      for (const file of sourceFiles) {\n        try {\n          const content = fs.readFileSync(file, 'utf8');\n          // Look for ES module patterns (import OR export statements)\n          if (content.includes('import ') || content.includes('export ')) {\n            esModuleCount++;\n          }\n          // Look for CommonJS patterns\n          if (content.includes('require(') || content.includes('module.exports')) {\n            commonJSCount++;\n          }\n        } catch (error) {\n          // Skip files we can't read\n          continue;\n        }\n      }\n      \n      // For TypeScript ES module only approach, prefer ES modules when equal or when TypeScript files are present\n      if (esModuleCount === 0 && commonJSCount === 0) {\n        return true; // Default to ES modules for TypeScript ES module only approach\n      }\n      if (esModuleCount === 0) {\n        return false; // No ES module patterns found, default to CommonJS\n      }\n      return esModuleCount >= commonJSCount; // Changed from > to >= to prefer ES modules\n    } catch (error) {\n      // Default to ES modules for TypeScript ES module only approach\n      return true;\n    }\n  }\n\n  /**\n   * Check if directory should be skipped during discovery\n   */\n  private shouldSkipDirectory(dirName: string): boolean {\n    const skipPatterns = [\n      'node_modules', '.git', '.next', 'dist', 'build', 'coverage',\n      '.vscode', '.idea', 'docs', 'documentation', 'assets', 'public', 'static',\n      '.replit_cache', '.config', '.npm', 'logs',\n      'examples', 'demo', 'demos', 'samples', 'bin',\n      // Skip common test and generated directories\n      '__mocks__', '__tests__', 'tests', 'test', 'generated-tests',\n      // Skip manual test directories and fixtures\n      'manual-tests', 'fixtures', 'test-fixtures'\n    ];\n    return skipPatterns.includes(dirName) || dirName.startsWith('.');\n  }\n\n  /**\n   * Walk entire project directory structure, respecting skip patterns\n   */\n  private walkProject(): string[] {\n    const root = this.config.SRC_DIR\n      ? path.resolve(process.cwd(), this.config.SRC_DIR)\n      : process.cwd();\n    return this.walkRecursive(root);\n  }\n\n  /**\n   * Recursively walk directory and return all file paths, skipping irrelevant directories\n   */\n  private walkRecursive(dir: string): string[] {\n    if (!fs.existsSync(dir)) {\n      return [];\n    }\n    \n    return fs.readdirSync(dir, { withFileTypes: true }).flatMap(entry => {\n      const full = path.resolve(dir, entry.name);\n      \n      if (entry.isDirectory()) {\n        // Skip directories that shouldn't contain tests or source files\n        if (this.shouldSkipDirectory(entry.name)) {\n          return [];\n        }\n        return this.walkRecursive(full);\n      } else {\n        return [full];\n      }\n    });\n  }\n\n  /**\n   * Convert a glob pattern (supports *, **, ?) into a RegExp\n   * - *  matches any sequence except path separator\n   * - ** matches any sequence including path separators\n   * - ?  matches a single character except path separator\n   */\n  private globToRegExp(pattern: string): RegExp {\n    // Normalize to posix style for matching\n    let pat = pattern.replace(/\\\\/g, '/');\n    // Escape regex special chars, except our glob tokens * ?\n    pat = pat.replace(/([.+^${}()|\\[\\]\\\\])/g, '\\\\$1');\n    // Convert ** to a special token first to avoid conflict with *\n    pat = pat.replace(/\\*\\*/g, '::GLOBSTAR::');\n    // Convert remaining * and ?\n    pat = pat.replace(/\\*/g, '[^/]*').replace(/\\?/g, '[^/]');\n    // Convert GLOBSTAR\n    pat = pat.replace(/::GLOBSTAR::/g, '.*');\n    // Anchor pattern\n    pat = '^' + pat + '$';\n    return new RegExp(pat);\n  }\n\n  /**\n   * Check include/exclude patterns against a path (posix normalized)\n   */\n  private pathMatchesFilters(filePath: string): boolean {\n    const posixPath = filePath.replace(/\\\\/g, '/');\n    // Apply exclude first\n    if (this.excludeRegexes.some(rx => rx.test(posixPath))) {\n      return false;\n    }\n    // If includes provided, must match at least one include\n    if (this.includeRegexes.length > 0) {\n      return this.includeRegexes.some(rx => rx.test(posixPath));\n    }\n    return true; // No includes means include all (after excludes)\n  }\n\n  /**\n   * Legacy walk method for backwards compatibility (walks single directory)\n   */\n  private walk(dir: string): string[] {\n    if (!fs.existsSync(dir)) {\n      return [];\n    }\n    \n    return fs.readdirSync(dir, { withFileTypes: true }).flatMap(entry => {\n      const full = path.resolve(dir, entry.name);\n      return entry.isDirectory() ? this.walk(full) : [full];\n    });\n  }\n\n  /**\n   * Check if file should be skipped as a source file (config, setup, etc.)\n   */\n  private shouldSkipSourceFile(file: string): boolean {\n    const basename = path.basename(file);\n    const dirname = path.dirname(file);\n    \n    // Skip files in test-related or excluded directories (path-wise guard)\n    const excludedDirs = ['__mocks__', '__tests__', `${path.sep}test${path.sep}`, `${path.sep}tests${path.sep}`, 'generated-tests', 'manual-tests', 'node_modules', `${path.sep}dist${path.sep}`, `${path.sep}build${path.sep}`, `${path.sep}.git${path.sep}`, 'fixtures'];\n    if (excludedDirs.some(seg => dirname.includes(seg))) {\n      return true;\n    }\n    \n    const skipPatterns = [\n      /^jest\\.config\\./,          // Jest config files\n      /^jest-setup\\./,            // Jest setup files\n      /^setup\\./,                 // Setup files\n      /^config\\./,                // Config files  \n      /-demo\\./,                  // Demo files\n      /-example\\./,               // Example files\n      /\\.config\\./,               // Any config files\n      /^example\\./,               // Files named \"example.*\"\n      /^demo\\./,                  // Files named \"demo.*\"\n      /qtests-runner\\./,          // Generated runner files\n      /setupMultiple/,            // Test setup helpers\n      /reloadCheck/,              // Test utilities\n      /testSetup/,                // Test setup files\n    ];\n    \n    return skipPatterns.some(pattern => pattern.test(basename));\n  }\n\n  /**\n   * Categorize discovered files into source files and existing tests\n   */\n  private categorizeFiles(files: string[]): FileCategorization {\n    const sourceFiles: string[] = [];\n    const existingTests: string[] = [];\n    \n    files.forEach(file => {\n      const ext = path.extname(file);\n      const basename = path.basename(file);\n      \n      // Skip files with invalid extensions\n      if (!this.config.VALID_EXTS.includes(ext)) {\n        return;\n      }\n\n      // Apply CLI include/exclude filters against project-relative path\n      const relFromCwd = path.relative(process.cwd(), file);\n      if (!this.pathMatchesFilters(relFromCwd)) {\n        return;\n      }\n\n      // Skip config, demo, and setup files\n      if (this.shouldSkipSourceFile(file)) {\n        return;\n      }\n      \n      // Check if this is a test file\n      if (this.isTestFile(basename)) {\n        existingTests.push(file);\n      } else {\n        // Check if this source file already has a corresponding test\n        const hasTest = this.hasCorrespondingTest(file, files);\n        if (!hasTest) {\n          sourceFiles.push(file);\n        }\n      }\n    });\n    \n    return { sourceFiles, existingTests };\n  }\n\n  /**\n   * Check if filename indicates it's a test file\n   */\n  private isTestFile(filename: string): boolean {\n    const testPatterns = [\n      /\\.test\\./,\n      /\\.spec\\./,\n      /_test\\./,\n      /_spec\\./,\n      /\\.e2e\\./,\n      /\\.integration\\./\n    ];\n    \n    return testPatterns.some(pattern => pattern.test(filename));\n  }\n\n  /**\n   * Check if a source file has a corresponding test file\n   */\n  private hasCorrespondingTest(sourceFile: string, allFiles: string[]): boolean {\n    const dir = path.dirname(sourceFile);\n    const basename = path.basename(sourceFile, path.extname(sourceFile));\n    const ext = path.extname(sourceFile);\n    \n    // Common test file patterns to look for - TypeScript ES module only\n    const testPatterns = [\n      `${basename}.test.ts`,\n      `${basename}.GenerateTest.test.ts`,  // Updated generated unit test pattern  \n      `${basename}GeneratedTest.test.ts`,  // Legacy pattern for backwards compatibility\n      `${basename}.spec.ts`,\n      `${basename}_test.ts`,\n      `${basename}_spec.ts`,\n      `${basename}.test${ext}`,\n      `${basename}.spec${ext}`\n    ];\n    \n    // Look for test files in the same directory\n    const sameDirectoryTests = testPatterns.map(pattern => \n      path.join(dir, pattern)\n    );\n    \n    // Look for test files in common test directories\n    const testDirectories = ['tests', 'test', '__tests__', 'spec'];\n    const testDirectoryTests = testDirectories.flatMap(testDir => {\n      const testPath = path.join(dir, testDir);\n      return testPatterns.map(pattern => path.join(testPath, pattern));\n    });\n    \n    // Check if any of these test files exist\n    const allTestPaths = [...sameDirectoryTests, ...testDirectoryTests];\n    \n    // Normalize paths for comparison - convert both to absolute paths\n    const normalizedAllFiles = allFiles.map(file => path.resolve(file));\n    const normalizedTestPaths = allTestPaths.map(testPath => path.resolve(testPath));\n    \n    return normalizedTestPaths.some(testPath => \n      normalizedAllFiles.includes(testPath)\n    );\n  }\n\n  /**\n   * Detect if source file or content indicates React usage\n   */\n  private detectReactUsage(file: string, content: string = ''): boolean {\n    // Check file extension\n    if (file.endsWith('.tsx') || file.endsWith('.jsx')) {\n      return true;\n    }\n    \n    // Check for React imports\n    const reactImports = /import.*(?:react|React|@types\\/react)/i.test(content);\n    if (reactImports) return true;\n    \n    // Check for JSX patterns\n    const jsxPatterns = [\n      /<[A-Z][a-zA-Z0-9]*[\\s\\/>]/, // Component tags like <MyComponent\n      /<[a-z]+[\\s\\/>]/, // HTML tags like <div>\n      /React\\.createElement/, // React.createElement calls\n      /jsx.*:/,  // JSX pragma\n    ];\n    \n    return jsxPatterns.some(pattern => pattern.test(content));\n  }\n\n  /**\n   * Detect if export name is likely a React hook\n   */\n  private isReactHook(exportName: string): boolean {\n    return exportName.startsWith('use') && exportName.length > 3;\n  }\n\n  /**\n   * Detect if export name is likely a React component\n   */\n  private isReactComponent(exportName: string, content: string = ''): boolean {\n    // Check if it starts with uppercase (component convention)\n    if (!/^[A-Z]/.test(exportName)) return false;\n    \n    // Check if it's defined as a function that might return JSX\n    const componentPatterns = [\n      new RegExp(`function\\\\s+${exportName}\\\\s*\\\\(`),\n      new RegExp(`const\\\\s+${exportName}\\\\s*=\\\\s*\\\\(`),\n      new RegExp(`export\\\\s+function\\\\s+${exportName}\\\\s*\\\\(`),\n      new RegExp(`${exportName}\\\\s*=\\\\s*\\\\(.*\\\\)\\\\s*=>`) // Arrow function\n    ];\n    \n    return componentPatterns.some(pattern => pattern.test(content));\n  }\n\n  /**\n   * Heuristically detect if a React component likely requires props.\n   * - TS inline prop types without ?: required (e.g., props: { id: string })\n   * - Destructured props without defaults (e.g., function C({ id }: { id: string }))\n   * - propTypes with isRequired\n   */\n  private componentRequiresProps(exportName: string, content: string = ''): boolean {\n    try {\n      // 1) propTypes isRequired\n      const propTypesReq = new RegExp(`${exportName}\\.propTypes\\s*=\\s*\\{[\\s\\S]*?isRequired`, 'm');\n      if (propTypesReq.test(content)) return true;\n\n      // 2) TS inline type with required fields (no ?)\n      // Simple conservative detection for inline typed props/destructuring with inline types\n      const tsInlineSimple = new RegExp(`${exportName}[\\\\s\\\\S]*\\\\(\\\\s*props\\\\s*:\\\\s*\\\\{[^}]+\\\\}`, 'm');\n      const tsDestructuredSimple = new RegExp(`${exportName}[\\\\s\\\\S]*\\\\(\\\\s*\\\\{[^}]+\\\\}\\\\s*:\\\\s*\\\\{[^}]+\\\\}`, 'm');\n      if (tsInlineSimple.test(content) || tsDestructuredSimple.test(content)) {\n        return true;\n      }\n      const tsInline1 = new RegExp(`(?:export\\\\s+)?function\\\\s+${exportName}\\\\s*\\\\(\\\\s*props\\\\s*:\\\\s*\\\\{([\\\\n\\\\r\\\\t \\\\w:<>\\\\|\\\\[\\\\]\\\\n\\\\r,?]+)\\\\}\\\\s*\\\\)`, 'm');\n      const tsInline2 = new RegExp(`(?:export\\s+)?const\\s+${exportName}\\s*=\\s*\\(\\s*props\\s*:\\s*\\{([\\n\\r\\t \\w:<>\\|\\[\\]\\n\\r,?]+)\\}\\s*\\)`, 'm');\n      const tsDestructured = new RegExp(`(?:export\\s+)?function\\s+${exportName}\\s*\\(\\s*\\{([^}=]+)\\}\\s*:\\s*\\{([^}]+)\\}\\s*\\)`, 'm');\n      const tsArrowDestructured = new RegExp(`(?:export\\s+)?const\\s+${exportName}\\s*=\\s*\\(\\s*\\{([^}=]+)\\}\\s*:\\s*\\{([^}]+)\\}\\s*\\)`, 'm');\n\n      const matches = [tsInline1.exec(content), tsInline2.exec(content), tsDestructured.exec(content), tsArrowDestructured.exec(content)];\n      for (const m of matches) {\n        if (!m) continue;\n        const typeBlock = (m[1] || m[2] || '').trim();\n        if (!typeBlock) continue;\n        // If any field lacks ?, assume required\n        const fields = typeBlock.split(',');\n        for (const f of fields) {\n          const field = f.trim();\n          if (!field) continue;\n          // Example: id?: string vs id: string\n          if (/^[A-Za-z_$][\\w$]*\\s*:\\s*[^?]/.test(field)) {\n            return true;\n          }\n        }\n      }\n\n      // 3) Destructured props without default object for param (no = {})\n      const destructuredNoDefaultFn = new RegExp(`(?:export\\s+)?function\\s+${exportName}\\s*\\(\\s*\\{([^}]+)\\}\\s*\\)`, 'm');\n      const destructuredNoDefaultArrow = new RegExp(`(?:export\\s+)?const\\s+${exportName}\\s*=\\s*\\(\\s*\\{([^}]+)\\}\\s*\\)`, 'm');\n      if (destructuredNoDefaultFn.test(content) || destructuredNoDefaultArrow.test(content)) {\n        // If the param includes = {}, it's optional; otherwise assume required\n        const paramWithDefault = new RegExp(`${exportName}[^\\n]*\\(\\s*\\{[^}]+\\}\\s*=\\s*\\{\\}\\s*\\)`);\n        if (!paramWithDefault.test(content)) return true;\n      }\n\n      return false;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Generate test file path based on source file and test type\n   * React-aware: generates .tsx for React components/hooks, .ts otherwise\n   */\n  private getRelativeTestPath(file: string, type: 'unit' | 'api' = 'unit', content: string = ''): string {\n    const dir = path.dirname(file);\n    const basename = path.basename(file, path.extname(file));\n    \n    // Prefer JSX-free tests: choose .tsx ONLY when emitting JSX (we do not)\n    const testExt = '.ts';\n    \n    if (type === 'unit') {\n      // For unit tests, place them alongside the source file with GeneratedTest naming\n      return path.join(dir, `${basename}.GenerateTest.test${testExt}`);\n    } else {\n      // For API/integration tests, use the configured test directory with appropriate extension\n      const rel = path.relative(process.cwd(), file);\n      return path.join(this.config.TEST_DIR, rel.replace(/\\.[tj]sx?$/, `.GenerateTest.test${testExt}`).replace(/[\\\\/]/g, '__'));\n    }\n  }\n\n  /**\n   * Create directory if it doesn't exist\n   */\n  private createDir(p: string): void {\n    const dir = path.dirname(p);\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n  }\n\n  /**\n   * Write file only if it doesn't already exist, unless force flag is set\n   * Supports dry-run mode for previewing planned files\n   */\n  private writeIfMissing(p: string, content: string, dryRun: boolean = false): boolean {\n    const exists = fs.existsSync(p);\n    // Allow overwrite only for files generated by this tool (contain \".GenerateTest\")\n    const isGeneratedTest = p.includes('.GenerateTest');\n    const canWrite = !exists || (Boolean(this.config.force) && isGeneratedTest);\n    \n    if (dryRun) {\n      // In dry-run mode, just log what would be written\n      console.log(`${exists ? '[WOULD OVERWRITE]' : '[WOULD CREATE]'} ${path.relative('.', p)}`);\n      return canWrite;\n    }\n    \n    if (canWrite) {\n      this.createDir(p);\n      fs.writeFileSync(p, content, 'utf8');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Extract imported modules from file content - Enhanced for both ES modules and CommonJS\n   */\n  private getUsedModules(content: string): string[] {\n    return [...content.matchAll(PATTERNS.imports)]\n      .map(m => m[1] || m[2]) // m[1] for ES modules, m[2] for CommonJS\n      .filter(x => x && !x.startsWith('.') && !x.startsWith('/'));\n  }\n\n  /**\n   * Ensure a local copy of API test utilities exists at generated-tests/utils/httpTest.ts\n   * so that generated integration tests work without extra project wiring.\n   * Idempotent: only writes if missing.\n   */\n  private ensureLocalHttpTestUtils(): void {\n    try {\n      const targetDir = path.join(process.cwd(), this.config.TEST_DIR || 'generated-tests', 'utils');\n      const targetFile = path.join(targetDir, 'httpTest.js');\n      if (fs.existsSync(targetFile)) return;\n\n      // Minimal, dependency-free supertest-like shim and express-style matcher\n      const content = `// generated-tests/utils/httpTest.js - minimal local test http helpers (ESM)\nexport function createMockApp() {\n  // Route table keyed by METHOD + space + path\n  const routes = new Map();\n  const add = (m, p, h) => { routes.set(m.toUpperCase() + ' ' + p, h); };\n  const app = {\n    get: (p, h) => add('GET', p, h),\n    post: (p, h) => add('POST', p, h),\n    put: (p, h) => add('PUT', p, h),\n    patch: (p, h) => add('PATCH', p, h),\n    delete: (p, h) => add('DELETE', p, h),\n    async handle(method, url, body) {\n      const key = method.toUpperCase() + ' ' + url;\n      const handler = routes.get(key);\n      const query = (() => {\n        try {\n          const qs = url.includes('?') ? url.split('?')[1] : '';\n          return Object.fromEntries(new URLSearchParams(qs));\n        } catch {\n          return {};\n        }\n      })();\n      const req = { method: method.toUpperCase(), url, body, query };\n      const res = {\n        statusCode: 404,\n        headers: {},\n        body: undefined,\n        _rawBody: undefined,\n        setHeader(name, value) { this.headers[String(name).toLowerCase()] = String(value); },\n        end(payload) {\n          this._rawBody = payload;\n          try {\n            this.body = typeof payload === 'string' ? JSON.parse(payload) : payload;\n          } catch {\n            this.body = payload;\n          }\n        }\n      };\n      if (!handler) {\n        res.statusCode = 404;\n        res.end(JSON.stringify({ error: 'Not Found' }));\n        return res;\n      }\n      // Default to 200 unless handler sets otherwise\n      res.statusCode = 200;\n      await handler(req, res);\n      return res;\n    }\n  };\n  return app;\n}\n\nexport function supertest(app) {\n  const make = (method) => (route) => ({\n    _payload: undefined,\n    send(data) { this._payload = data; return this; },\n    async expect(status) {\n      const res = await app.handle(method, route, this._payload);\n      if (res.statusCode !== status) {\n        throw new Error(\\`Expected status \\${status} but got \\${res.statusCode}\\`);\n      }\n      return res;\n    }\n  });\n  return {\n    get: make('GET'),\n    post: make('POST'),\n    put: make('PUT'),\n    patch: make('PATCH'),\n    delete: make('DELETE')\n  };\n}\n`;\n\n      fs.mkdirSync(targetDir, { recursive: true });\n      fs.writeFileSync(targetFile, content, 'utf8');\n      console.log(`✅ Scaffolded local API test utils at ${path.relative(process.cwd(), targetFile)}`);\n    } catch (err: any) {\n      console.warn('⚠️  Could not scaffold local httpTest utils:', err?.message || String(err));\n    }\n  }\n\n  /**\n   * Detect if code uses Date or Math.random for deterministic test helpers\n   * 🚩AI: DETERMINISM_HELPERS — fake timers and seeded randomness scaffolding\n   */\n  private detectNonDeterministicCode(content: string): { usesDate: boolean; usesRandom: boolean } {\n    const usesDate = /new Date\\(|Date\\.now\\(|\\.getTime\\(/.test(content);\n    const usesRandom = /Math\\.random\\(/.test(content);\n    return { usesDate, usesRandom };\n  }\n\n  /**\n   * Optional TypeScript AST analysis for better type inference\n   * 🚩AI: TYPE_INFERENCE_OPTION — dynamic import('typescript') with heuristics fallback\n   */\n  private async tryTypeScriptAnalysis(file: string, content: string): Promise<{ functions: Array<{ name: string; params: Array<{ name: string; type: string }> }> } | null> {\n    try {\n      // Dynamic import of TypeScript - only if available\n      const ts = await import('typescript').catch(() => null);\n      if (!ts) {\n        return null;\n      }\n\n      // Parse the TypeScript source\n      const sourceFile = ts.createSourceFile(\n        file,\n        content,\n        ts.ScriptTarget.Latest,\n        true\n      );\n\n      const functions: Array<{ name: string; params: Array<{ name: string; type: string }> }> = [];\n\n      // Visitor function to extract function declarations with types\n      const visit = (node: any) => {\n        if (ts.isFunctionDeclaration(node) && node.name) {\n          const funcName = node.name.getText();\n          const params = node.parameters.map((param: any) => ({\n            name: param.name.getText(),\n            type: param.type ? param.type.getText() : 'any'\n          }));\n          \n          functions.push({ name: funcName, params });\n        }\n        \n        ts.forEachChild(node, visit);\n      };\n\n      visit(sourceFile);\n      return { functions };\n\n    } catch (error: any) {\n      // Fallback gracefully if TypeScript analysis fails\n      console.log(`TypeScript analysis failed: ${error.message}`);\n      return null;\n    }\n  }\n\n  /**\n   * Generate sample values based on TypeScript types\n   */\n  private generateSampleValue(type: string): string {\n    const cleanType = type.toLowerCase().trim();\n    \n    switch (cleanType) {\n      case 'string':\n        return `'test-string'`;\n      case 'number':\n        return '42';\n      case 'boolean':\n        return 'true';\n      case 'array':\n      case 'string[]':\n        return `['item1', 'item2']`;\n      case 'number[]':\n        return '[1, 2, 3]';\n      case 'object':\n        return `{ key: 'value' }`;\n      default:\n        if (cleanType.endsWith('[]')) {\n          return '[]';\n        }\n        if (cleanType.includes('|')) {\n          // Union type - pick first option\n          const firstType = cleanType.split('|')[0].trim();\n          return this.generateSampleValue(firstType);\n        }\n        return 'undefined';\n    }\n  }\n\n  /**\n   * Detect if function has parameterized logic suitable for table-driven tests\n   */\n  private detectParameterizedLogic(content: string, functionName: string): boolean {\n    // Look for the function definition\n    const funcRegex = new RegExp(`function\\\\s+${functionName}\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{([^}]+)\\\\}`, 'i');\n    const match = content.match(funcRegex);\n    \n    if (!match) return false;\n    \n    const functionBody = match[1];\n    \n    // Heuristics for parameterized logic\n    const hasConditionals = /if\\s*\\(|switch\\s*\\(|case\\s+/.test(functionBody);\n    const hasArithmetic = /[+\\-*/%]/.test(functionBody);\n    const hasComparisons = /[<>=!]+/.test(functionBody);\n    const hasStringOps = /\\.split\\(|\\.substring\\(|\\.slice\\(/.test(functionBody);\n    \n    return hasConditionals || hasArithmetic || hasComparisons || hasStringOps;\n  }\n\n  /**\n   * Generate realistic test inputs based on function parameters\n   */\n  private generateRealisticInputs(functionName: string, params: Array<{ name: string; type: string }>): { inputs: string[]; expectedPattern: string } {\n    const inputs: string[] = [];\n    const paramNames: string[] = [];\n    \n    params.forEach(param => {\n      paramNames.push(param.name);\n      \n      // Generate contextually appropriate values based on parameter name\n      const paramName = param.name.toLowerCase();\n      const paramType = param.type.toLowerCase();\n      \n      if (paramName.includes('id') || paramName.includes('uuid')) {\n        inputs.push(paramType === 'string' ? `'user-123'` : '123');\n      } else if (paramName.includes('name') || paramName.includes('title')) {\n        inputs.push(`'TestName'`);\n      } else if (paramName.includes('email')) {\n        inputs.push(`'test@example.com'`);\n      } else if (paramName.includes('age') || paramName.includes('count')) {\n        inputs.push('25');\n      } else if (paramName.includes('url') || paramName.includes('path')) {\n        inputs.push(`'/api/test'`);\n      } else if (paramName.includes('data') || paramName.includes('payload')) {\n        inputs.push(`{ test: 'data' }`);\n      } else {\n        inputs.push(this.generateSampleValue(param.type));\n      }\n    });\n    \n    const expectedPattern = `// Expected: meaningful result based on ${paramNames.join(', ')}`;\n    return { inputs, expectedPattern };\n  }\n\n  /**\n   * Generate deterministic helpers for tests that need them\n   */\n  private generateDeterministicHelpers(usesDate: boolean, usesRandom: boolean): string[] {\n    const helpers: string[] = [];\n    \n    if (usesDate || usesRandom) {\n      helpers.push(`// Deterministic test helpers`);\n      helpers.push(`beforeEach(() => {`);\n      \n      if (usesDate) {\n        helpers.push(`  // Fix time for deterministic Date behavior`);\n        helpers.push(`  jest.useFakeTimers().setSystemTime(new Date('2023-01-01T00:00:00Z'));`);\n      }\n      \n      if (usesRandom) {\n        helpers.push(`  // Seed Math.random for deterministic behavior`);\n        helpers.push(`  let seed = 12345;`);\n        helpers.push(`  Math.random = jest.fn(() => {`);\n        helpers.push(`    seed = (seed * 9301 + 49297) % 233280;`);\n        helpers.push(`    return seed / 233280;`);\n        helpers.push(`  });`);\n      }\n      \n      helpers.push(`});`);\n      helpers.push(``);\n      \n      if (usesDate) {\n        helpers.push(`afterEach(() => {`);\n        helpers.push(`  jest.useRealTimers();`);\n        helpers.push(`});`);\n        helpers.push(``);\n      }\n    }\n    \n    return helpers;\n  }\n\n  /**\n   * Generate React component test using React.createElement (no JSX)\n   */\n  private createReactComponentTest(exportName: string, basename: string, useProviders: boolean): string[] {\n    const renderLine = useProviders\n      ? `const { container } = render(React.createElement(Providers as any, {}, React.createElement(Component as any, {})));`\n      : `const { container } = render(React.createElement(Component as any, {}));`;\n    return [\n      `describe('${exportName} Component', () => {`,\n      `  it('renders without crashing', () => {`,\n      `    // Resolve component from exports`,\n      `    const Component = (testModule as any).default ?? (testModule as any)['${exportName}'];`,\n      `    expect(Component).toBeDefined();`,\n      `    // Smoke render using React.createElement (no JSX)`,\n      `    ${renderLine}`,\n      `    expect(container).toBeDefined();`,\n      `  });`,\n      `});`,\n      ``\n    ];\n  }\n\n  /**\n   * Generate React hook test using wrapper component\n   */\n  private createReactHookTest(exportName: string, basename: string, useProviders: boolean): string[] {\n    const probeRender = useProviders\n      ? `render(React.createElement(Providers as any, {}, React.createElement(HookProbe)))`\n      : `render(React.createElement(HookProbe))`;\n    return [\n      `describe('${exportName} Hook', () => {`,\n      `  it('mounts via probe without errors', () => {`,\n      `    // Create hook probe component (never call hooks outside a component)`,\n      `    function HookProbe() {`,\n      `      const hookResult = (testModule as any)['${exportName}']();`,\n      `      return React.createElement('div', { 'data-testid': 'hook-result' }, String(!!hookResult));`,\n      `    }`,\n      `    const { getByTestId } = ${probeRender};`,\n      `    expect(getByTestId('hook-result')).toBeInTheDocument();`,\n      `  });`,\n      `});`,\n      ``\n    ];\n  }\n\n  /**\n   * Generate unit test content for a file - TypeScript ES module with React support\n   * 🚩AI: ENTRY_POINT_FOR_GENERATED_TEST_IMPORTS — insert `import 'qtests/setup'` first\n   * 🚩AI: UNIT_TEMPLATE_SECTION — write per-export describe/it with positive + edge\n   */\n  private createUnitTest(file: string, exports: string[], usesQtests: boolean, mocks: string[], content: string = ''): string {\n    const basename = path.basename(file, path.extname(file));\n    const ext = path.extname(file);\n    \n    const lines = [\n      `// Generated unit test for ${path.basename(file)} - TypeScript ES module`,\n      `// 🚩AI: ENTRY_POINT_FOR_GENERATED_TEST_IMPORTS`,\n      `import 'qtests/setup';`, // Always import qtests/setup first\n      ``\n    ];\n    \n    // Detect if this is a React file and whether it uses common providers\n    const isReactFile = this.detectReactUsage(file, content);\n    const usesReactQuery = /@tanstack\\/react-query/.test(content);\n    const usesReactHookForm = /react-hook-form/.test(content) || /useFormContext|FormProvider/.test(content);\n    const wantsRouter = Boolean((this.config as any).withRouter);\n    const detectsRouter = /react-router(?:-dom)?/.test(content);\n    const usesReactRouter = isReactFile && wantsRouter && detectsRouter;\n    \n    // Import the module being tested (no extension for better ts-jest compatibility)\n    lines.push(`import * as testModule from './${basename}';`);\n    \n    // Add React imports if needed\n    if (isReactFile) {\n      lines.push(`import * as React from 'react';`);\n      lines.push(`import { render } from '@testing-library/react';`);\n      if (usesReactRouter) {\n        // Prefer matching the imported module from source when possible\n        const routerModule = content.includes('react-router-dom') ? 'react-router-dom' : 'react-router';\n        lines.push(`import { MemoryRouter } from '${routerModule}';`);\n      }\n      if (usesReactQuery) {\n        lines.push(`import { QueryClient, QueryClientProvider } from '@tanstack/react-query';`);\n      }\n      if (usesReactHookForm) {\n        lines.push(`import { FormProvider, useForm } from 'react-hook-form';`);\n      }\n      if (usesReactQuery || usesReactRouter || usesReactHookForm) {\n        // Compose providers deterministically: MemoryRouter (outer) -> QueryClientProvider -> FormProvider (inner)\n        lines.push(`// Minimal provider composition for tests`);\n        lines.push(`const Providers: React.FC<{ children?: React.ReactNode }> = ({ children }) => {`);\n        if (usesReactQuery) {\n          lines.push(`  const client = new QueryClient();`);\n        }\n        if (usesReactHookForm) {\n          lines.push(`  const methods = useForm();`);\n        }\n        // Build nested providers without JSX using React.createElement\n        if (usesReactRouter && usesReactQuery && usesReactHookForm) {\n          lines.push(`  return React.createElement(MemoryRouter as any, {},`);\n          lines.push(`    React.createElement(QueryClientProvider as any, { client },`);\n          lines.push(`      React.createElement(FormProvider as any, methods as any, children as any)`);\n          lines.push(`    )`);\n          lines.push(`  );`);\n        } else if (usesReactRouter && usesReactQuery) {\n          lines.push(`  return React.createElement(MemoryRouter as any, {},`);\n          lines.push(`    React.createElement(QueryClientProvider as any, { client }, children as any)`);\n          lines.push(`  );`);\n        } else if (usesReactRouter && usesReactHookForm) {\n          lines.push(`  return React.createElement(MemoryRouter as any, {},`);\n          lines.push(`    React.createElement(FormProvider as any, methods as any, children as any)`);\n          lines.push(`  );`);\n        } else if (usesReactQuery && usesReactHookForm) {\n          lines.push(`  return React.createElement(QueryClientProvider as any, { client },`);\n          lines.push(`    React.createElement(FormProvider as any, methods as any, children as any)`);\n          lines.push(`  );`);\n        } else if (usesReactRouter) {\n          lines.push(`  return React.createElement(MemoryRouter as any, {}, children as any);`);\n        } else if (usesReactQuery) {\n          lines.push(`  return React.createElement(QueryClientProvider as any, { client }, children as any);`);\n        } else if (usesReactHookForm) {\n          lines.push(`  return React.createElement(FormProvider as any, methods as any, children as any);`);\n        }\n        lines.push(`};`);\n      }\n    }\n    \n    // Add console capture if needed\n    if (usesQtests) {\n      lines.push(`import { mockConsole } from 'qtests';`);\n    }\n    \n    lines.push(``);\n    \n    // Replace jest.mock with qtests stub comments for known libraries\n    if (mocks.length > 0) {\n      lines.push(`// External dependencies automatically stubbed by qtests/setup:`);\n      mocks.forEach(lib => {\n        lines.push(`// - ${lib}: stubbed by qtests (no jest.mock needed)`);\n      });\n      lines.push(``);\n    }\n    \n    // Add deterministic helpers if the source code uses Date or Math.random\n    if (content) {\n      const { usesDate, usesRandom } = this.detectNonDeterministicCode(content);\n      const deterministicHelpers = this.generateDeterministicHelpers(usesDate, usesRandom);\n      deterministicHelpers.forEach(helper => lines.push(helper));\n    }\n    \n    // Validate export names for safety; skip reserved or falsy/non-identifiers\n    const reserved = new Set(['default', 'function', 'undefined', 'null', 'NaN', 'Infinity']);\n    const isValidIdent = (name: string) => /^[A-Za-z_$][\\w$]*$/.test(name) && !reserved.has(name);\n    const safeExports = (exports || []).filter(isValidIdent);\n\n    // If React file: test only React components/hooks; avoid generic \"is defined\" blocks alongside\n    if (safeExports.length > 0) {\n      const reactTargets: string[] = [];\n      if (isReactFile) {\n        for (const exportName of safeExports) {\n          if (this.isReactHook(exportName) || this.isReactComponent(exportName, content)) {\n            reactTargets.push(exportName);\n          }\n        }\n      }\n\n      if (isReactFile && reactTargets.length > 0) {\n        // Emit only React tests; skip appending generic tests afterwards\n        for (const exportName of reactTargets) {\n          if (this.isReactHook(exportName)) {\n            const hookTestLines = this.createReactHookTest(exportName, basename, (usesReactQuery || usesReactRouter || usesReactHookForm));\n            lines.push(...hookTestLines);\n          } else if (this.isReactComponent(exportName, content)) {\n            if (this.componentRequiresProps(exportName, content)) {\n              lines.push(`describe('${exportName} Component', () => {`);\n              lines.push(`  it('is defined (fallback: required props detected)', () => {`);\n              lines.push(`    const Component = (testModule as any).default ?? (testModule as any)['${exportName}'];`);\n              lines.push(`    expect(Component).toBeDefined();`);\n              lines.push(`  });`);\n              lines.push(`});`);\n              lines.push('');\n            } else {\n              const componentTestLines = this.createReactComponentTest(exportName, basename, (usesReactQuery || usesReactRouter || usesReactHookForm));\n              lines.push(...componentTestLines);\n            }\n          }\n        }\n      } else {\n        // Non-React path or no React targets: generate safe existence tests\n        safeExports.forEach(exportName => {\n          lines.push(`describe('${exportName}', () => {`);\n          lines.push(`  it('is defined', () => {`);\n          lines.push(`    expect((testModule as any)['${exportName}']).toBeDefined();`);\n          lines.push(`  });`);\n          lines.push(`});`);\n          lines.push('');\n        });\n      }\n    } else {\n      // Fallback test when no exports detected\n      lines.push(`describe('${path.basename(file)} module', () => {`);\n      lines.push(`  it('should load without errors', async () => {`);\n      lines.push(`    expect(testModule).toBeDefined();`);\n      lines.push(`    expect(typeof testModule).toBe('object');`);\n      lines.push(`  });`);\n      lines.push(`});`);\n      lines.push(``);\n    }\n    \n    return lines.join('\\n');\n  }\n\n  /**\n   * Generate API test content for an endpoint - TypeScript ES module only\n   * 🚩AI: INTEGRATION_TEMPLATE_SECTION — createMockApp + supertest + failure path\n   */\n  private createApiTest(method: string, route: string): string {\n    const lines = [\n      `// Generated integration test for ${method.toUpperCase()} ${route} - TypeScript ES module`,\n      `// 🚩AI: ENTRY_POINT_FOR_GENERATED_TEST_IMPORTS`,\n      `import 'qtests/setup';`, // Always import qtests/setup first\n      ``\n    ];\n    \n    // Import testing utilities (omit extension for ts-jest compatibility)\n    lines.push(`import { createMockApp, supertest } from '../utils/httpTest';`);\n    lines.push(``);\n    \n    // 🚩AI: DETERMINISM_HELPERS — fake timers and seeded randomness scaffolding\n    lines.push(`// Deterministic test helpers`);\n    lines.push(`beforeEach(() => {`);\n    lines.push(`  // Use fake timers for deterministic time-based behavior`);\n    lines.push(`  jest.useFakeTimers().setSystemTime(new Date('2023-01-01T00:00:00Z'));`);\n    lines.push(`});`);\n    lines.push(``);\n    lines.push(`afterEach(() => {`);\n    lines.push(`  jest.useRealTimers();`);\n    lines.push(`});`);\n    lines.push(``);\n    \n    // Generate unique test session for API isolation\n    lines.push(`// Deterministic unique route for parallel test safety`);\n    lines.push(`const testHash = require('crypto').createHash('md5').update('${route}').digest('hex').slice(0, 8);`);\n    lines.push(`const uniqueRoute = '${route}' + ('${route}'.includes('?') ? '&' : '?') + 'testId=' + testHash;`);\n    lines.push(``);\n    \n    // TypeScript test suite\n    lines.push(`describe('${method.toUpperCase()} ${route}', () => {`);\n    lines.push(`  let app: ReturnType<typeof createMockApp>;`);\n    lines.push(``);\n    lines.push(`  beforeEach(() => {`);\n    lines.push(`    app = createMockApp();`);\n    lines.push(`  });`);\n    lines.push(``);\n    \n    // Success test case\n    lines.push(`  it('should return success response', async () => {`);\n    lines.push(`    // Setup route handler`);\n    lines.push(`    app.${method.toLowerCase()}(uniqueRoute, (req, res) => {`);\n    lines.push(`      res.statusCode = 200;`);\n    lines.push(`      res.setHeader('content-type', 'application/json');`);\n    lines.push(`      res.end(JSON.stringify({`);\n    lines.push(`        success: true,`);\n    lines.push(`        message: 'Request processed successfully'`);\n    lines.push(`      }));`);\n    lines.push(`    });`);\n    lines.push(``);\n    lines.push(`    // Execute test`);\n    lines.push(`    const res = await supertest(app)`);\n    lines.push(`      .${method.toLowerCase()}(uniqueRoute)`);\n    if (method.toLowerCase() !== 'get') {\n      lines.push(`      .send({ testData: 'valid input' })`);\n    }\n    lines.push(`      .expect(200);`);\n    lines.push(``);\n    lines.push(`    // Verify response`);\n    lines.push(`    expect(res.body.success).toBe(true);`);\n    lines.push(`    expect(res.body.message).toBe('Request processed successfully');`);\n    lines.push(`  });`);\n    lines.push(``);\n    \n    // Failure test case  \n    lines.push(`  it('should handle not found case', async () => {`);\n    lines.push(`    // Don't setup any route handlers to simulate 404`);\n    lines.push(``);\n    lines.push(`    // Execute test`);\n    lines.push(`    const res = await supertest(app)`);\n    lines.push(`      .${method.toLowerCase()}('/nonexistent-route')`);\n    if (method.toLowerCase() !== 'get') {\n      lines.push(`      .send({ testData: 'any data' })`);\n    }\n    lines.push(`      .expect(404);`);\n    lines.push(``);\n    lines.push(`    // Verify error response`);\n    lines.push(`    expect(res.body.error).toBe('Not Found');`);\n    lines.push(`  });`);\n    lines.push(`});`);\n    lines.push('');\n    \n    return lines.join('\\n');\n  }\n\n  /**\n   * Intelligently extract exports from both ES modules and CommonJS\n   */\n  private extractExports(content: string): string[] {\n    const exports = new Set<string>();\n    \n    // Remove comments to avoid false positives\n    const cleanContent = content\n      .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove /* */ comments\n      .replace(/\\/\\/.*$/gm, ''); // Remove // comments\n    \n    // Extract ES module exports (export const/function/class)\n    const esExports = [...cleanContent.matchAll(PATTERNS.exportsES)];\n    esExports.forEach(match => {\n      if (match[1]) exports.add(match[1]);\n    });\n    \n    // Extract ES module named exports: export { name1, name2, name3 }\n    const namedExports = [...cleanContent.matchAll(PATTERNS.exportsNamed)];\n    namedExports.forEach(match => {\n      if (match[1]) {\n        // Parse the named exports list\n        const exportList = match[1].split(',').map(name => name.trim());\n        exportList.forEach(name => {\n          // Handle potential aliases: \"name as alias\" -> use \"name\"\n          const cleanName = name.split(' as ')[0].trim();\n          if (cleanName && /^[a-zA-Z0-9_]+$/.test(cleanName)) {\n            exports.add(cleanName);\n          }\n        });\n      }\n    });\n    \n    // Extract ES module default exports: export default SomeName\n    const defaultExports = [...cleanContent.matchAll(PATTERNS.exportsDefault)];\n    defaultExports.forEach(match => {\n      if (match[1]) exports.add(match[1]);\n    });\n    \n    // Extract CommonJS exports\n    const commonJSExports = [...cleanContent.matchAll(PATTERNS.exportsCommonJS)];\n    commonJSExports.forEach(match => {\n      // match[1] = module.exports.name, match[2] = exports.name, match[3] = single assignment\n      for (let i = 1; i <= 3; i++) {\n        if (match[i]) exports.add(match[i]);\n      }\n    });\n    \n    // Handle module.exports = { name1, name2, ... } pattern\n    const objectExportMatch = cleanContent.match(/module\\.exports\\s*=\\s*\\{([^}]+)\\}/);\n    if (objectExportMatch) {\n      const objectContent = objectExportMatch[1];\n      const propertyMatches = objectContent.matchAll(/\\b(\\w+)(?:\\s*:\\s*\\w+)?\\s*[,}]/g);\n      for (const match of propertyMatches) {\n        if (match[1]) exports.add(match[1]);\n      }\n    }\n    \n    return Array.from(exports).filter(name => name && name.length > 0);\n  }\n\n  /**\n   * Analyze a single file and generate appropriate tests - TypeScript ES module only\n   */\n  async analyze(file: string, dryRun: boolean = false): Promise<void> {\n    const ext = path.extname(file);\n    if (!this.config.VALID_EXTS.includes(ext)) {\n      return;\n    }\n\n    const content = fs.readFileSync(file, 'utf8');\n    const usesQtests = PATTERNS.qtests.test(content);\n    const imports = this.getUsedModules(content);\n    const mockTargets = imports.filter(i => \n      this.config.KNOWN_MOCKS.includes(i) && i !== 'qtests'\n    );\n\n    // Use intelligent export detection for both ES modules and CommonJS\n    let exports = this.extractExports(content);\n    // If AST mode requested, attempt to augment exports via TypeScript parser\n    if (this.config.mode === 'ast') {\n      try {\n        const astInfo = await this.tryTypeScriptAnalysis(file, content);\n        if (astInfo && Array.isArray(astInfo.functions)) {\n          const astExports = astInfo.functions.map(fn => fn.name).filter(Boolean);\n          exports = Array.from(new Set([...(exports || []), ...astExports]));\n        }\n      } catch {\n        // Swallow AST errors and proceed with heuristic\n      }\n    }\n    if (exports.length > 0 && (!this.config.integration)) {\n      const testPath = this.getRelativeTestPath(file, 'unit', content);\n      const created = this.writeIfMissing(\n        testPath, \n        this.createUnitTest(file, exports, usesQtests, mockTargets, content),\n        dryRun\n      );\n      if (created) {\n        this.scanned.push({ \n          type: 'unit', \n          file: path.relative('.', testPath) \n        });\n      }\n    }\n\n    // Generate API tests for detected routes - TypeScript only\n    const apis = [...content.matchAll(PATTERNS.api)];\n    if (apis.length > 0 && (!this.config.unit)) {\n      for (const [, , method, route] of apis) {\n        const testPath = this.getRelativeTestPath(file, 'api', content)\n          .replace(/\\.GenerateTest\\.test\\.(ts|tsx)$/, `.GenerateTest__${method.toLowerCase()}.test.$1`);\n        const created = this.writeIfMissing(\n          testPath, \n          this.createApiTest(method, route),\n          dryRun\n        );\n        // If an API test was created, ensure local httpTest utilities exist (idempotent)\n        if (created && !dryRun) {\n          this.ensureLocalHttpTestUtils();\n        }\n        if (created) {\n          this.scanned.push({ \n            type: 'api', \n            file: path.relative('.', testPath) \n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Detect if project uses React based on dependencies and source files\n   */\n  private detectReactProject(): boolean {\n    try {\n      // Honor forced React mode if provided via CLI\n      if ((this.config as any).react) return true;\n      // Check package.json for React dependencies\n      const packagePath = path.join(process.cwd(), 'package.json');\n      if (fs.existsSync(packagePath)) {\n        const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));\n        const allDeps = {\n          ...packageJson.dependencies,\n          ...packageJson.devDependencies,\n          ...packageJson.peerDependencies\n        };\n        \n        const reactDeps = ['react', '@types/react', 'react-dom', '@types/react-dom', \n                          '@testing-library/react', '@tanstack/react-query'];\n        if (reactDeps.some(dep => allDeps[dep])) {\n          return true;\n        }\n      }\n      \n      // Scan for .tsx files or React imports in source code\n      const allFiles = this.walkProject();\n      return allFiles.some(file => {\n        if (file.endsWith('.tsx') || file.endsWith('.jsx')) return true;\n        \n        try {\n          const content = fs.readFileSync(file, 'utf8');\n          return this.detectReactUsage(file, content);\n        } catch {\n          return false;\n        }\n      });\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Create Jest configuration and setup files - React-aware TypeScript ES Module\n   */\n  scaffoldJestSetup(): void {\n    const isReactProject = this.detectReactProject();\n    // Generate Jest config for TypeScript ES modules with React support\n    const extensionsToTreatAsEsm = isReactProject ? ['.ts', '.tsx'] : ['.ts'];\n    const moduleFileExtensions = isReactProject ? ['ts', 'tsx', 'js', 'jsx', 'json'] : ['ts', 'js', 'json'];\n    const testEnvironment = isReactProject ? 'jsdom' : 'node';\n    const testMatchPatterns = isReactProject \n      ? [\n          '**/*.test.ts',\n          '**/*.test.tsx',\n          '**/*.GenerateTest.test.ts',\n          '**/*.GenerateTest.test.tsx',\n          '**/manual-tests/**/*.test.ts',\n          '**/generated-tests/**/*.test.ts'\n        ]\n      : [\n          '**/*.test.ts',\n          '**/*.GenerateTest.test.ts',\n          '**/manual-tests/**/*.test.ts',\n          '**/generated-tests/**/*.test.ts'\n        ];\n    \n    const transformConfig = isReactProject \n      ? {\n          '^.+\\\\.tsx?$': ['ts-jest', {\n            useESM: true,\n            isolatedModules: true,\n            tsconfig: {\n              jsx: 'react-jsx'\n            }\n          }]\n        }\n      : {\n          '^.+\\\\.tsx?$': ['ts-jest', {\n            useESM: true,\n            isolatedModules: true\n          }]\n        };\n    \n    const config = `\n// jest.config.js - TypeScript ES Module configuration${isReactProject ? ' (React-enabled)' : ''}\nexport default {\n  preset: 'ts-jest/presets/default-esm',\n  extensionsToTreatAsEsm: ${JSON.stringify(extensionsToTreatAsEsm)},\n  testEnvironment: '${testEnvironment}',\n  setupFilesAfterEnv: ['<rootDir>/jest-setup.ts'],\n  moduleFileExtensions: ${JSON.stringify(moduleFileExtensions)},\n  roots: ['<rootDir>'],\n  testMatch: ${JSON.stringify(testMatchPatterns, null, 4).replace(/\\n/g, '\\n  ')},\n  transform: ${JSON.stringify(transformConfig, null, 4).replace(/\\n/g, '\\n  ')},\n  transformIgnorePatterns: [\n    'node_modules/(?!(?:@tanstack|@radix-ui|lucide-react|react-resizable-panels|cmdk|vaul)/)'\n  ],\n  moduleNameMapper: {\n    '^(\\\\.{1,2}/.*)\\\\.js$': '$1',\n    '^qtests/(.*)$': '<rootDir>/node_modules/qtests/$1'\n  }\n};\n`.trim();\n\n    // Generate TypeScript ES module setup with React support\n    const domPolyfills = isReactProject ? `\n\n// DOM polyfills for React Testing Library\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(), // Deprecated\n    removeListener: jest.fn(), // Deprecated\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn(),\n  })),\n});\n\n// ResizeObserver polyfill\nglobal.ResizeObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}));\n\n// IntersectionObserver polyfill\nglobal.IntersectionObserver = jest.fn().mockImplementation(() => ({\n  observe: jest.fn(),\n  unobserve: jest.fn(),\n  disconnect: jest.fn(),\n}));\n\n// Clipboard polyfill\nObject.assign(global.navigator, { clipboard: { writeText: jest.fn().mockResolvedValue(undefined) } });\n\n// URL.createObjectURL polyfill\n// Note: keep deterministic\nglobal.URL.createObjectURL = jest.fn().mockReturnValue('blob:stub');` : '';\n    \n    const setup = `\n// jest-setup.ts - Jest setup for TypeScript ESM${isReactProject ? ' with React support' : ''}\n// Keep qtests setup FIRST to ensure global stubbing is active\nimport 'qtests/setup';\nimport 'jest';${isReactProject ? \"\\nimport '@testing-library/jest-dom';\" : ''}\n\n// Set test environment early\nprocess.env.NODE_ENV = 'test';\n\nbeforeAll(() => {\n  jest.setTimeout(10000);\n});\n\nafterEach(() => {\n  jest.clearAllMocks();\n});${domPolyfills}\n`.trim();\n\n    this.writeIfMissing('jest.config.js', config);\n    this.writeIfMissing('jest-setup.ts', setup);\n  }\n\n  /**\n   * Generate qtests test runner file - TypeScript ES module compatible\n   */\n  generateQtestsRunner(): void {\n    try {\n      // Read the existing qtests-ts-runner.ts as template\n      const templatePath = path.join(getModuleDirnameForTestGenerator(), '..', 'qtests-ts-runner.ts');\n      let template = '';\n      \n      if (fs.existsSync(templatePath)) {\n        template = fs.readFileSync(templatePath, 'utf8');\n      } else {\n        // Fallback template for TypeScript ES modules with correct Jest configuration\n        template = `\n// Generated qtests runner - TypeScript ES module compatible\nimport { spawn } from 'child_process';\nimport path from 'path';\n\n// Run tests with TypeScript support and correct Jest arguments\nconst args = process.argv.slice(2);\nconst testProcess = spawn('jest', args, {\n  stdio: 'inherit',\n  shell: true\n});\n\ntestProcess.on('exit', (code) => {\n  process.exit(code || 0);\n});\n`.trim();\n      }\n\n      // Always overwrite qtests-ts-runner.ts to ensure latest functionality and TypeScript compliance\n      const outputPath = path.join(process.cwd(), 'qtests-ts-runner.ts');\n      fs.writeFileSync(outputPath, template, 'utf8');\n      \n      console.log('✅ Generated qtests-ts-runner.ts for TypeScript ES modules');\n    } catch (error: any) {\n      console.error('Failed to generate qtests-ts-runner.ts:', error.message);\n    }\n  }\n\n  /**\n   * Update package.json test script to use qtests-ts-runner.ts\n   */\n  updatePackageJsonTestScript(): void {\n    try {\n      const packagePath = path.join(process.cwd(), 'package.json');\n      if (!fs.existsSync(packagePath)) {\n        console.log('⚠️  package.json not found, skipping test script update');\n        return;\n      }\n\n      const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));\n      \n      if (!packageJson.scripts) {\n        packageJson.scripts = {};\n      }\n      \n      packageJson.scripts.test = 'npx tsx qtests-ts-runner.ts';\n      \n      fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2), 'utf8');\n      console.log('✅ Updated package.json test script to use qtests-ts-runner.ts');\n    } catch (error: any) {\n      console.log('⚠️  Could not update package.json:', error.message);\n    }\n  }\n\n  /**\n   * Scan for files without tests and generate them - TypeScript ES module only\n   */\n  async generateTestFiles(dryRun: boolean = false): Promise<void> {\n    console.log('🔍 Scanning for files that need TypeScript tests...');\n    \n    const allFiles = this.walkProject();\n    const { sourceFiles } = this.categorizeFiles(allFiles);\n    \n    console.log(`📁 Found ${sourceFiles.length} source files without tests`);\n    \n    // Generate tests for each source file\n    for (const file of sourceFiles) {\n      await this.analyze(file, dryRun);\n    }\n\n    // On non-dry runs, always scaffold Jest and runner even if there were no new files\n    if (!dryRun) {\n      this.scaffoldJestSetup();\n      this.generateQtestsRunner();\n      // Only update package.json if requested via CLI flag\n      if ((this.config as any).updatePackageScript) {\n        this.updatePackageJsonTestScript();\n      }\n    } else {\n      console.log('ℹ️ Dry run: Skipping Jest config and runner generation');\n    }\n    \n    console.log(`📝 Generated ${this.scanned.length} TypeScript test files:`);\n    this.scanned.forEach(test => {\n      console.log(`   ${test.type}: ${test.file}`);\n    });\n  }\n\n  /**\n   * Get scan results\n   */\n  getResults(): ScannedTest[] {\n    return this.scanned;\n  }\n}\n\n// Export the TestGenerator class using ES module syntax\nexport { TestGenerator };\nexport default TestGenerator;\n"],"version":3}