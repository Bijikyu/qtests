{"file":"/home/runner/workspace/utils/httpTest.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/httpTest.ts"],"sourcesContent":["/**\n * HTTP Testing Utilities - TypeScript Implementation\n * \n * Provides tiny HTTP client for integration tests.\n * Rationale: avoids external supertest dependency and works in Node core.\n */\n\n// Import logging control utility for consistent framework behavior\nimport { setLogging } from '../lib/logUtils.js';\nif (process.env.NODE_ENV === 'test') setLogging(false);\n\nimport http from 'http';\nimport type { Server } from 'http';\n\n// Type definitions for HTTP testing\ninterface TestResponse {\n  status: number;\n  statusCode: number; // alias for compatibility\n  headers: http.IncomingHttpHeaders;\n  body: any;\n  text: string; // raw response text\n}\n\ninterface MockApp {\n  (req: http.IncomingMessage, res: http.ServerResponse): void;\n  get: (path: string | RegExp, handler: RouteHandler) => MockApp;\n  post: (path: string | RegExp, handler: RouteHandler) => MockApp;\n  put: (path: string | RegExp, handler: RouteHandler) => MockApp;\n  delete: (path: string | RegExp, handler: RouteHandler) => MockApp;\n  patch: (path: string | RegExp, handler: RouteHandler) => MockApp;\n  all: (path: string | RegExp, handler: RouteHandler) => MockApp;\n}\n\ninterface RouteHandler {\n  (req: http.IncomingMessage, res: http.ServerResponse): void;\n}\n\ninterface Route {\n  method: string;\n  path: string | RegExp;\n  handler: RouteHandler;\n}\n\n/**\n * Creates HTTP test client for integration testing.\n * Returns builder object for chaining request configuration.\n * Rationale: provides supertest-like API without external dependencies.\n */\nfunction supertest(app: Function): Super {\n  console.log(`supertest is running with app`); // log factory creation\n  \n  // Validate app early to provide immediate feedback\n  if (!app || typeof app !== 'function') {\n    const error = new Error('Invalid app provided to supertest');\n    console.log(`supertest error ${error.message}`); // log failure  \n    throw error;\n  }\n  \n  try {\n    const client = new Super(app); // create builder instance\n    console.log(`supertest is returning Super instance`); // log return\n    return client; // return configured builder\n  } catch (error: any) {\n    console.log(`supertest error ${error.message}`); // log failure\n    throw error; // rethrow for caller\n  }\n}\n\nclass Super {\n  private app: Function;\n  \n  constructor(app: Function) {\n    this.app = app; // store app reference for server creation\n  }\n  \n  get(path: string): Test { return new Test(this.app, 'get', path); }\n  post(path: string): Test { return new Test(this.app, 'post', path); }\n  put(path: string): Test { return new Test(this.app, 'put', path); }\n  delete(path: string): Test { return new Test(this.app, 'delete', path); }\n  patch(path: string): Test { return new Test(this.app, 'patch', path); }\n  head(path: string): Test { return new Test(this.app, 'head', path); }\n  options(path: string): Test { return new Test(this.app, 'options', path); }\n  all(path: string): Test { return new Test(this.app, 'all', path); }\n}\n\nclass Test {\n  private app: Function;\n  private method: string;\n  private path: string;\n  private headers: Record<string, string>;\n  private body: any;\n  private expectedStatus: number | null;\n  private server: Server | null;\n  \n  constructor(app: Function, method: string, path: string) {\n    console.log(`Test is running with ${method} ${path}`); // log test creation\n    \n    this.app = app; // application instance\n    this.method = method.toUpperCase(); // normalize method to uppercase\n    this.path = path; // request path\n    this.headers = {}; // request headers storage\n    this.body = undefined; // request body storage\n    this.expectedStatus = null; // expected status for assertions\n    this.server = null; // server instance reference for cleanup\n  }\n  \n  set(name: string, value: string): Test {\n    console.log(`Test.set is running with ${name}: ${value}`); // log header setting\n    \n    try {\n      this.headers[name] = value; // store header\n      console.log(`Test.set is returning this`); // log chaining\n      return this; // enable method chaining\n    } catch (error: any) {\n      console.log(`Test.set error ${error.message}`); // log error\n      throw error; // propagate error\n    }\n  }\n  \n  send(body: any): Test {\n    console.log(`Test.send is running with ${typeof body}`); // log body attachment\n    \n    try {\n      this.body = body; // store request body\n      \n      // Auto-set content-type for JSON bodies\n      if (typeof body === 'object' && body !== null && !this.headers['Content-Type']) {\n        this.headers['Content-Type'] = 'application/json';\n      }\n      \n      console.log(`Test.send is returning this`); // log chaining\n      return this; // enable method chaining\n    } catch (error: any) {\n      console.log(`Test.send error ${error.message}`); // log error\n      throw error; // propagate error\n    }\n  }\n  \n  expect(status: number): Promise<TestResponse> {\n    console.log(`Test.expect is running with ${status}`); // log expectation setting\n    \n    try {\n      this.expectedStatus = status; // store expected status\n      console.log(`Test.expect is executing request immediately`); // log execution\n      return this.end(); // execute request immediately and return promise\n    } catch (error: any) {\n      console.log(`Test.expect error ${error.message}`); // log error\n      throw error; // propagate error\n    }\n  }\n  \n  async end(): Promise<TestResponse> {\n    console.log(`Test.end is running with ${this.method} ${this.path}`); // log request execution\n    \n    try {\n      const server = http.createServer(this.app as any);\n      this.server = server; // store reference for cleanup\n      \n      // Start server on random available port\n      await new Promise<void>(resolve => server.listen(0, resolve));\n      const address = server.address();\n      const port = typeof address === 'object' && address ? address.port : 0;\n      \n      // Configure request options\n      const opts: http.RequestOptions = {\n        method: this.method,\n        hostname: '127.0.0.1',\n        port,\n        path: this.path,\n        headers: this.headers\n      };\n      \n      // Execute HTTP request and collect response\n      const response = await this.makeRequest(opts);\n      \n      // Clean up server\n      await new Promise<void>(resolve => server.close(() => resolve()));\n      this.server = null;\n      \n      // Validate expected status if specified\n      if (this.expectedStatus !== null && response.status !== this.expectedStatus) {\n        throw new Error(`Expected status ${this.expectedStatus}, got ${response.status}`);\n      }\n      \n      console.log(`Test.end is returning response with status ${response.status}`); // log completion\n      return response; // return response object\n      \n    } catch (error: any) {\n      console.log(`Test.end error ${error.message}`); // log error\n      \n      // Ensure server cleanup on error\n      if (this.server) {\n        try {\n          await new Promise<void>(resolve => this.server!.close(() => resolve()));\n        } catch (cleanupError: any) {\n          console.log(`Server cleanup error: ${cleanupError.message}`);\n        }\n        this.server = null;\n      }\n      \n      throw error; // propagate error\n    }\n  }\n  \n  /**\n   * Execute HTTP request and parse response\n   * \n   * This method handles the low-level HTTP request execution and response\n   * parsing. It creates a promise-based wrapper around Node.js http.request\n   * and automatically parses JSON responses.\n   * \n   * @param opts - HTTP request options\n   * @returns Response object with status, headers, and body\n   */\n  private makeRequest(opts: http.RequestOptions): Promise<TestResponse> {\n    return new Promise((resolve, reject) => {\n      console.log(`makeRequest is running with ${opts.method} ${opts.path}`); // log request start\n      \n      const req = http.request(opts, (res) => {\n        let data = '';\n        \n        // Collect response data\n        res.on('data', chunk => {\n          data += chunk;\n        });\n        \n        // Parse and resolve response\n        res.on('end', () => {\n          try {\n            let body: any = data;\n            \n            // Auto-parse JSON responses\n            const contentType = res.headers['content-type'] || '';\n            if (contentType.includes('application/json') && data) {\n              try {\n                body = JSON.parse(data);\n              } catch (parseError: any) {\n                // Keep raw data if JSON parsing fails\n                console.log(`JSON parse error: ${parseError.message}`);\n              }\n            }\n            \n            const response: TestResponse = {\n              status: res.statusCode || 0,\n              statusCode: res.statusCode || 0, // alias for compatibility\n              headers: res.headers,\n              body: body,\n              text: data // raw response text\n            };\n            \n            console.log(`makeRequest is returning response with status ${response.status}`); // log completion\n            resolve(response);\n            \n          } catch (error: any) {\n            console.log(`makeRequest response parsing error ${error.message}`); // log error\n            reject(error);\n          }\n        });\n      });\n      \n      // Handle request errors\n      req.on('error', (error: Error) => {\n        console.log(`makeRequest request error ${error.message}`); // log error\n        reject(error);\n      });\n      \n      // Send request body if present\n      if (this.body !== undefined) {\n        const bodyData = typeof this.body === 'string' \n          ? this.body \n          : JSON.stringify(this.body);\n        req.write(bodyData);\n      }\n      \n      req.end(); // finalize request\n    });\n  }\n}\n\n/**\n * Create Express-style application mock for testing\n * \n * This utility creates a simple Express-compatible application mock that\n * can be used with the supertest client. It provides basic routing and\n * middleware support for testing HTTP endpoints.\n * \n * @returns Express-style application function\n * \n * @example\n * const app = createMockApp();\n * app.get('/test', (req, res) => res.json({ success: true }));\n * const response = await supertest(app).get('/test').end();\n */\nfunction createMockApp(): MockApp {\n  console.log(`createMockApp is running with none`); // log app creation\n  \n  try {\n    const routes: Route[] = []; // store route definitions\n    \n    // Express-style application function\n    function app(req: http.IncomingMessage, res: http.ServerResponse): void {\n      console.log(`mockApp is running with ${req.method} ${req.url}`); // log request\n      \n      try {\n        // Find matching route with parameter support\n        const route = routes.find(r => {\n          const methodMatch = r.method === 'ALL' || r.method === req.method;\n          \n          // Support exact match, regex, and Express-style parameters\n          let pathMatch = false;\n          if (r.path === req.url) {\n            pathMatch = true;\n          } else if (r.path instanceof RegExp && r.path.test(req.url || '')) {\n            pathMatch = true;\n          } else if (typeof r.path === 'string' && r.path.includes(':')) {\n            // Convert Express-style parameters to regex\n            const regexPath = r.path.replace(/:[\\w]+/g, '[^/]+');\n            const regex = new RegExp(`^${regexPath}$`);\n            pathMatch = regex.test(req.url || '');\n          }\n          \n          return methodMatch && pathMatch;\n        });\n        \n        if (route) {\n          // Execute route handler\n          route.handler(req, res);\n        } else {\n          // Return 404 for unmatched routes\n          res.statusCode = 404;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({ error: 'Not Found' }));\n        }\n        \n        console.log(`mockApp handled ${req.method} ${req.url}`); // log completion\n        \n      } catch (error: any) {\n        console.log(`mockApp error ${error.message}`); // log error\n        res.statusCode = 500;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({ error: 'Internal Server Error' }));\n      }\n    }\n    \n    // Create mock app with HTTP method helpers\n    const mockApp = app as MockApp;\n    \n    // Add HTTP method helpers\n    mockApp.get = (path: string | RegExp, handler: RouteHandler): MockApp => {\n      routes.push({ method: 'GET', path, handler });\n      return mockApp;\n    };\n    \n    mockApp.post = (path: string | RegExp, handler: RouteHandler): MockApp => {\n      routes.push({ method: 'POST', path, handler });\n      return mockApp;\n    };\n    \n    mockApp.put = (path: string | RegExp, handler: RouteHandler): MockApp => {\n      routes.push({ method: 'PUT', path, handler });\n      return mockApp;\n    };\n    \n    mockApp.delete = (path: string | RegExp, handler: RouteHandler): MockApp => {\n      routes.push({ method: 'DELETE', path, handler });\n      return mockApp;\n    };\n    \n    mockApp.patch = (path: string | RegExp, handler: RouteHandler): MockApp => {\n      routes.push({ method: 'PATCH', path, handler });\n      return mockApp;\n    };\n    \n    mockApp.all = (path: string | RegExp, handler: RouteHandler): MockApp => {\n      routes.push({ method: 'ALL', path, handler });\n      return mockApp;\n    };\n    \n    console.log(`createMockApp is returning app`); // log return\n    return mockApp; // return configured mock app\n    \n  } catch (error: any) {\n    console.log(`createMockApp error ${error.message}`); // log failure\n    throw error; // rethrow for caller\n  }\n}\n\n// Export HTTP testing utilities using ES module syntax\nexport {\n  supertest, // lightweight supertest alternative\n  createMockApp // Express-style app mock for testing\n};"],"version":3}