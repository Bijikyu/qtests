{"version":3,"names":["setLogging","require","process","env","NODE_ENV","createMockAxios","options","console","log","JSON","stringify","defaultResponse","defaultStatus","simulateErrors","createMockResponse","data","status","statusText","headers","config","request","mockAxios","get","url","Math","random","Error","response","post","put","delete","error","message","createUserMockAxios","responses","Map","set","mock","reject","result","Promise","resolve","axiosWrapper","__set","createSimpleMockAxios","module","exports"],"sources":["mockAxios.js"],"sourcesContent":["/**\n * Mock Axios Factory for Environment-Aware Testing\n * \n * This module provides factory functions for creating mock axios implementations\n * that simulate HTTP responses without making actual network requests. This is\n * essential for testing applications in offline environments or when external\n * APIs are unavailable.\n * \n * Design philosophy:\n * - Factory pattern for creating customizable mock instances\n * - Predictable response simulation for consistent testing\n * - No network I/O to ensure fast, isolated test execution\n * - Extensible interface for adding custom response behaviors\n * \n * Key benefits:\n * 1. Environment Isolation - Tests don't depend on external services\n * 2. Predictable Behavior - Same responses every time for reliable tests\n * 3. Fast Execution - No network delays in test suites\n * 4. Flexible Configuration - Can simulate various response scenarios\n * \n * Use cases:\n * - Testing HTTP-dependent code without external API dependencies\n * - Simulating various response scenarios (success, error, timeout)\n * - Development environments where external APIs are unavailable\n * - Integration testing with controlled response data\n */\n\n// Import logging control utility for consistent framework behavior\nconst { setLogging } = require('../lib/logUtils');\nif (process.env.NODE_ENV !== 'test') setLogging(false);\n\n/**\n * Create a mock axios instance with simulated HTTP methods\n * \n * This factory function creates an axios-compatible object that provides\n * the same interface as real axios but returns simulated responses instead\n * of making actual HTTP requests. The mock instance is designed to be a\n * drop-in replacement for axios in testing environments.\n * \n * Implementation strategy:\n * 1. Provide async methods that match axios API signatures\n * 2. Return promises that resolve immediately with predictable data\n * 3. Support both method-specific functions and generic request function\n * 4. Include response structure that matches axios response format\n * \n * Why factory pattern:\n * - Allows customization of mock behavior per test scenario\n * - Enables future enhancement with configurable response data\n * - Provides clean separation between mock creation and usage\n * - Follows established patterns in testing frameworks\n * \n * @param {Object} options - Configuration options for mock behavior\n * @param {Object} options.defaultResponse - Default response data for all requests\n * @param {number} options.defaultStatus - Default HTTP status code\n * @param {boolean} options.simulateErrors - Whether to simulate network errors\n * @returns {Object} Mock axios instance with HTTP methods\n * \n * @example\n * const mockAxios = createMockAxios();\n * const response = await mockAxios.get('/api/data');\n * // Returns: { data: {}, status: 200, statusText: 'OK' }\n * \n * @example\n * const customMock = createMockAxios({\n *   defaultResponse: { users: [] },\n *   defaultStatus: 200\n * });\n */\nfunction createMockAxios(options = {}) {\n  console.log(`createMockAxios is running with ${JSON.stringify(options)}`);\n\n  try {\n    // Extract configuration options with sensible defaults\n    const {\n      defaultResponse = {},\n      defaultStatus = 200,\n      simulateErrors = false\n    } = options;\n\n    /**\n     * Create a standardized mock response object\n     * \n     * This helper function creates response objects that match the structure\n     * returned by real axios requests. Maintaining this structure ensures\n     * that application code can work with mock responses identically to\n     * real responses.\n     * \n     * @param {any} data - Response data payload\n     * @param {number} status - HTTP status code\n     * @returns {Object} Axios-compatible response object\n     */\n    function createMockResponse(data = defaultResponse, status = defaultStatus) {\n      return {\n        data,\n        status,\n        statusText: status === 200 ? 'OK' : 'Error',\n        headers: {},\n        config: {},\n        request: {}\n      };\n    }\n\n    /**\n     * Mock axios instance with HTTP method implementations\n     * \n     * This object provides the core axios API methods that applications\n     * commonly use. Each method returns a promise that resolves immediately\n     * with a mock response, allowing tests to proceed without network delays.\n     */\n    const mockAxios = {\n      /**\n       * Mock GET request implementation\n       * \n       * Simulates HTTP GET requests by returning immediate promise resolution\n       * with predictable response data. Accepts the same parameters as real\n       * axios.get() for API compatibility.\n       * \n       * @param {string} url - Request URL (logged but not used)\n       * @param {Object} config - Request configuration (logged but not used)\n       * @returns {Promise<Object>} Promise resolving to mock response\n       */\n      async get(url, config = {}) {\n        console.log(`mockAxios.get is running with ${url}`);\n        if (simulateErrors && Math.random() < 0.1) {\n          throw new Error('Simulated network error');\n        }\n        const response = createMockResponse();\n        console.log(`mockAxios.get is returning ${JSON.stringify(response)}`);\n        return response;\n      },\n\n      /**\n       * Mock POST request implementation\n       * \n       * Simulates HTTP POST requests with immediate promise resolution.\n       * Accepts data payload and configuration parameters for API compatibility\n       * with real axios.post() method.\n       * \n       * @param {string} url - Request URL (logged but not used)\n       * @param {any} data - Request payload (logged but not used)\n       * @param {Object} config - Request configuration (logged but not used)\n       * @returns {Promise<Object>} Promise resolving to mock response\n       */\n      async post(url, data = {}, config = {}) {\n        console.log(`mockAxios.post is running with ${url}`);\n        if (simulateErrors && Math.random() < 0.1) {\n          throw new Error('Simulated network error');\n        }\n        const response = createMockResponse();\n        console.log(`mockAxios.post is returning ${JSON.stringify(response)}`);\n        return response;\n      },\n\n      /**\n       * Mock PUT request implementation\n       * \n       * Simulates HTTP PUT requests for update operations.\n       * Maintains API compatibility with axios.put() method signature.\n       * \n       * @param {string} url - Request URL (logged but not used)\n       * @param {any} data - Request payload (logged but not used)\n       * @param {Object} config - Request configuration (logged but not used)\n       * @returns {Promise<Object>} Promise resolving to mock response\n       */\n      async put(url, data = {}, config = {}) {\n        console.log(`mockAxios.put is running with ${url}`);\n        if (simulateErrors && Math.random() < 0.1) {\n          throw new Error('Simulated network error');\n        }\n        const response = createMockResponse();\n        console.log(`mockAxios.put is returning ${JSON.stringify(response)}`);\n        return response;\n      },\n\n      /**\n       * Mock DELETE request implementation\n       * \n       * Simulates HTTP DELETE requests for resource removal operations.\n       * Maintains API compatibility with axios.delete() method signature.\n       * \n       * @param {string} url - Request URL (logged but not used)\n       * @param {Object} config - Request configuration (logged but not used)\n       * @returns {Promise<Object>} Promise resolving to mock response\n       */\n      async delete(url, config = {}) {\n        console.log(`mockAxios.delete is running with ${url}`);\n        if (simulateErrors && Math.random() < 0.1) {\n          throw new Error('Simulated network error');\n        }\n        const response = createMockResponse();\n        console.log(`mockAxios.delete is returning ${JSON.stringify(response)}`);\n        return response;\n      },\n\n      /**\n       * Generic request method for custom HTTP operations\n       * \n       * Provides the axios.request() interface for custom request configurations.\n       * This method covers any HTTP methods not explicitly implemented above\n       * and allows for more complex request configurations.\n       * \n       * @param {Object} config - Complete request configuration object\n       * @returns {Promise<Object>} Promise resolving to mock response\n       */\n      async request(config = {}) {\n        console.log(`mockAxios.request is running with ${JSON.stringify(config)}`);\n        if (simulateErrors && Math.random() < 0.1) {\n          throw new Error('Simulated network error');\n        }\n        const response = createMockResponse();\n        console.log(`mockAxios.request is returning ${JSON.stringify(response)}`);\n        return response;\n      }\n    };\n\n    console.log(`createMockAxios is returning ${mockAxios}`);\n    return mockAxios;\n\n  } catch (error) {\n    console.log(`createMockAxios error: ${error.message}`);\n    throw error;\n  }\n}\n\n/** //(introduces axios mock factory)\n * Generates a mock axios instance returning preset data. //(describe function)\n * It intercepts axios calls to return canned responses, avoiding real HTTP. //(explain mocking)\n * Rationale: enables offline tests and predictable responses. //(why)\n */ //(close introductory comment)\nfunction createUserMockAxios(){ // factory producing configurable axios mock\n    console.log(`createMockAxios is running with none`); // log start of factory\n    try {\n        const responses = new Map(); // map to hold url responses\n        responses.set('http://a', { data: { mock: true }, status: 200, reject: false }); // seed default mock\n        function mockAxios(config){ // simulate axios request/response\n            console.log(`mockAxios is running with ${JSON.stringify(config)}`); // log start\n            try {\n                const mock = responses.get(config.url); // lookup response\n                if(mock){\n                    const result = { status: mock.status, data: mock.data }; // build axios style result\n                    console.log(`mockAxios is returning ${JSON.stringify(result)}`); // log return\n                    if(mock.reject) return Promise.reject({ response: result }); // reject when flagged\n                    return Promise.resolve(result); // resolve mock success\n                }\n                const error = { response: { status: 500, data: 'error' } }; // fallback error\n                console.log(`mockAxios is returning ${JSON.stringify(error)}`); // log error return\n                return Promise.reject(error); // reject unknown url\n            } catch(error){\n                console.log(`mockAxios error ${error.message}`); // log internal error\n                return Promise.reject(error); // propagate\n            }\n        }\n        function axiosWrapper(config){ return mockAxios(config); } // expose axios like function\n        axiosWrapper.__set = (url, data, status = 200, reject = false) => { responses.set(url, { data, status, reject }); }; // helper to program responses\n        console.log(`createMockAxios is returning axiosWrapper`); // log end\n        return axiosWrapper; // return configured mock\n    } catch(error){\n        console.log(`createMockAxios error ${error.message}`); // log failure\n        throw error; // rethrow for caller\n    }\n}\n\n/**\n * Create a simple mock axios instance with default configuration\n * \n * This convenience function creates a basic mock axios instance without\n * requiring configuration options. It's useful for quick test setup where\n * custom response behavior isn't needed.\n * \n * @returns {Object} Basic mock axios instance\n * \n * @example\n * const axios = createSimpleMockAxios();\n * const response = await axios.get('/api/test');\n */\nfunction createSimpleMockAxios() {\n  console.log(`createSimpleMockAxios is running with none`);\n  \n  try {\n    const mockAxios = createMockAxios();\n    console.log(`createSimpleMockAxios is returning ${mockAxios}`);\n    return mockAxios;\n  } catch (error) {\n    console.log(`createSimpleMockAxios error: ${error.message}`);\n    throw error;\n  }\n}\n\n// Export mock axios factory utilities at bottom per requirements\nmodule.exports = {\n  createMockAxios, // configurable mock axios factory\n  createUserMockAxios, // user-provided axios mock factory with exact implementation\n  createSimpleMockAxios // simple mock axios for basic usage\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AACjD,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAEJ,UAAU,CAAC,KAAK,CAAC;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,eAAeA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EACrCC,OAAO,CAACC,GAAG,CAAC,mCAAmCC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC,EAAE,CAAC;EAEzE,IAAI;IACF;IACA,MAAM;MACJK,eAAe,GAAG,CAAC,CAAC;MACpBC,aAAa,GAAG,GAAG;MACnBC,cAAc,GAAG;IACnB,CAAC,GAAGP,OAAO;;IAEX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,SAASQ,kBAAkBA,CAACC,IAAI,GAAGJ,eAAe,EAAEK,MAAM,GAAGJ,aAAa,EAAE;MAC1E,OAAO;QACLG,IAAI;QACJC,MAAM;QACNC,UAAU,EAAED,MAAM,KAAK,GAAG,GAAG,IAAI,GAAG,OAAO;QAC3CE,OAAO,EAAE,CAAC,CAAC;QACXC,MAAM,EAAE,CAAC,CAAC;QACVC,OAAO,EAAE,CAAC;MACZ,CAAC;IACH;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,MAAMC,SAAS,GAAG;MAChB;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,MAAMC,GAAGA,CAACC,GAAG,EAAEJ,MAAM,GAAG,CAAC,CAAC,EAAE;QAC1BZ,OAAO,CAACC,GAAG,CAAC,iCAAiC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","ignoreList":[]}