{"version":3,"names":["fs","require","path","TestGenerator","describe","testProjectDir","originalCwd","beforeEach","process","cwd","join","__dirname","existsSync","rmSync","recursive","force","mkdirSync","chdir","afterEach","packageJson","name","version","main","writeFileSync","JSON","stringify","it","mathUtilsCode","stringUtilsCode","generator","SRC_DIR","expect","isESModule","toBe","results","generate","length","toBeGreaterThan","mathUtilsTestPath","getRelativeTestPath","testContent","readFileSync","toContain","not","file1Code","file2Code","file3Code","forEach","result","type","testPath","file","dataProcessorCode","validatorCode","dataProcessorTestPath","esFile1","esFile2","cjsFile","ambiguousFile","commonJSApiCode","apiTests","filter","r","test","i","dirName","j","fileName","code","startTime","Date","now","endTime","toBeLessThan","syntaxErrorCode","toThrow"],"sources":["moduleSystemIntegration.test.js"],"sourcesContent":["/**\n * Integration tests for qtests module system detection and test generation\n * Tests the complete workflow from project analysis to test file creation\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst { TestGenerator } = require('../lib/testGenerator');\n\ndescribe('qtests Module System Integration Tests', () => {\n  let testProjectDir;\n  let originalCwd;\n\n  beforeEach(() => {\n    // Save original working directory\n    originalCwd = process.cwd();\n    \n    // Create temporary project directory\n    testProjectDir = path.join(__dirname, 'temp_integration_project');\n    if (fs.existsSync(testProjectDir)) {\n      fs.rmSync(testProjectDir, { recursive: true, force: true });\n    }\n    fs.mkdirSync(testProjectDir, { recursive: true });\n    \n    // Change to test project directory\n    process.chdir(testProjectDir);\n  });\n\n  afterEach(() => {\n    // Restore original working directory\n    process.chdir(originalCwd);\n    \n    // Cleanup test project\n    if (fs.existsSync(testProjectDir)) {\n      fs.rmSync(testProjectDir, { recursive: true, force: true });\n    }\n  });\n\n  describe('CommonJS Project Integration', () => {\n    beforeEach(() => {\n      // Create package.json for CommonJS project (no \"type\": \"module\")\n      const packageJson = {\n        name: 'test-commonjs-project',\n        version: '1.0.0',\n        main: 'index.js'\n      };\n      fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));\n    });\n\n    it('should detect CommonJS project and generate appropriate tests', () => {\n      // Create source directory and files\n      fs.mkdirSync('src');\n      \n      const mathUtilsCode = `\nconst fs = require('fs');\n\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction multiply(a, b) {\n  return a * b;\n}\n\nclass Calculator {\n  constructor() {\n    this.result = 0;\n  }\n  \n  calculate(operation, a, b) {\n    switch(operation) {\n      case 'add': return add(a, b);\n      case 'multiply': return multiply(a, b);\n      default: return 0;\n    }\n  }\n}\n\nmodule.exports = {\n  add,\n  multiply,\n  Calculator\n};\n`;\n      fs.writeFileSync('src/mathUtils.js', mathUtilsCode);\n      \n      const stringUtilsCode = `\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction reverse(str) {\n  return str.split('').reverse().join('');\n}\n\nexports.capitalize = capitalize;\nexports.reverse = reverse;\n`;\n      fs.writeFileSync('src/stringUtils.js', stringUtilsCode);\n      \n      // Run qtests generator\n      const generator = new TestGenerator({ SRC_DIR: 'src' });\n      \n      // Verify module system detection\n      expect(generator.isESModule).toBe(false);\n      \n      // Generate tests\n      const results = generator.generate();\n      \n      // Verify tests were generated\n      expect(results.length).toBeGreaterThan(0);\n      \n      // Check that generated tests use CommonJS syntax\n      const mathUtilsTestPath = generator.getRelativeTestPath('src/mathUtils.js', 'unit');\n      if (fs.existsSync(mathUtilsTestPath)) {\n        const testContent = fs.readFileSync(mathUtilsTestPath, 'utf8');\n        expect(testContent).toContain('const mod = require(');\n        expect(testContent).not.toContain('import');\n        expect(testContent).toContain(\"test('add works'\");\n        expect(testContent).toContain(\"test('multiply works'\");\n        expect(testContent).toContain(\"test('Calculator works'\");\n      }\n    });\n\n    it('should handle mixed CommonJS patterns in the same project', () => {\n      fs.mkdirSync('lib');\n      \n      // File with module.exports object\n      const file1Code = `\nfunction helper1() { return 'helper1'; }\nfunction helper2() { return 'helper2'; }\n\nmodule.exports = { helper1, helper2 };\n`;\n      fs.writeFileSync('lib/helpers.js', file1Code);\n      \n      // File with exports.property\n      const file2Code = `\nfunction util1() { return 'util1'; }\nfunction util2() { return 'util2'; }\n\nexports.util1 = util1;\nexports.util2 = util2;\n`;\n      fs.writeFileSync('lib/utils.js', file2Code);\n      \n      // File with single module.exports\n      const file3Code = `\nclass Manager {\n  constructor() {}\n  manage() { return 'managing'; }\n}\n\nmodule.exports = Manager;\n`;\n      fs.writeFileSync('lib/manager.js', file3Code);\n      \n      const generator = new TestGenerator({ SRC_DIR: 'lib' });\n      const results = generator.generate();\n      \n      // Should generate tests for all three files\n      expect(results.length).toBe(3);\n      \n      // Verify each test file contains expected exports\n      results.forEach(result => {\n        expect(result.type).toBe('unit');\n        const testPath = result.file;\n        if (fs.existsSync(testPath)) {\n          const testContent = fs.readFileSync(testPath, 'utf8');\n          expect(testContent).toContain('const mod = require(');\n        }\n      });\n    });\n  });\n\n  describe('ES Module Project Integration', () => {\n    beforeEach(() => {\n      // Create package.json for ES module project\n      const packageJson = {\n        name: 'test-esmodule-project',\n        version: '1.0.0',\n        type: 'module',\n        main: 'index.js'\n      };\n      fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));\n    });\n\n    it('should detect ES module project and generate appropriate tests', () => {\n      fs.mkdirSync('src');\n      \n      const dataProcessorCode = `\nimport fs from 'fs';\n\nexport function processData(data) {\n  return data.filter(item => item.active);\n}\n\nexport function saveData(data, filename) {\n  fs.writeFileSync(filename, JSON.stringify(data));\n}\n\nexport class DataManager {\n  constructor() {\n    this.data = [];\n  }\n  \n  add(item) {\n    this.data.push(item);\n  }\n  \n  process() {\n    return processData(this.data);\n  }\n}\n`;\n      fs.writeFileSync('src/dataProcessor.js', dataProcessorCode);\n      \n      const validatorCode = `\nexport const EMAIL_REGEX = /^[^@]+@[^@]+\\\\.[^@]+$/;\n\nexport function validateEmail(email) {\n  return EMAIL_REGEX.test(email);\n}\n\nexport function validateRequired(value) {\n  return value !== null && value !== undefined && value !== '';\n}\n`;\n      fs.writeFileSync('src/validator.js', validatorCode);\n      \n      // Run qtests generator\n      const generator = new TestGenerator({ SRC_DIR: 'src' });\n      \n      // Verify module system detection\n      expect(generator.isESModule).toBe(true);\n      \n      // Generate tests\n      const results = generator.generate();\n      \n      // Verify tests were generated\n      expect(results.length).toBeGreaterThan(0);\n      \n      // Check that generated tests use ES module syntax\n      const dataProcessorTestPath = generator.getRelativeTestPath('src/dataProcessor.js', 'unit');\n      if (fs.existsSync(dataProcessorTestPath)) {\n        const testContent = fs.readFileSync(dataProcessorTestPath, 'utf8');\n        expect(testContent).toContain('import * as mod from');\n        expect(testContent).not.toContain('require(');\n        expect(testContent).toContain(\"test('processData works'\");\n        expect(testContent).toContain(\"test('saveData works'\");\n        expect(testContent).toContain(\"test('DataManager works'\");\n      }\n    });\n  });\n\n  describe('Mixed Project Detection', () => {\n    it('should handle projects without package.json by analyzing source code', () => {\n      // No package.json file, so detection relies on source code analysis\n      fs.mkdirSync('src');\n      \n      // Create files with mostly ES module patterns\n      const esFile1 = `\nexport function func1() {}\nexport const CONST1 = 'value';\n`;\n      fs.writeFileSync('src/esFile1.js', esFile1);\n      \n      const esFile2 = `\nexport class MyClass {}\nexport function func2() {}\n`;\n      fs.writeFileSync('src/esFile2.js', esFile2);\n      \n      // One CommonJS file\n      const cjsFile = `\nfunction func3() {}\nmodule.exports = func3;\n`;\n      fs.writeFileSync('src/cjsFile.js', cjsFile);\n      \n      const generator = new TestGenerator({ SRC_DIR: 'src' });\n      \n      // Should detect ES modules due to prevalence\n      expect(generator.isESModule).toBe(true);\n      \n      const results = generator.generate();\n      expect(results.length).toBe(3); // All files should have tests generated\n    });\n\n    it('should default to CommonJS when no clear pattern emerges', () => {\n      fs.mkdirSync('src');\n      \n      // Create a package.json to ensure we're in a clean environment\n      fs.writeFileSync('package.json', JSON.stringify({\n        name: 'test-project',\n        version: '1.0.0'\n      }, null, 2));\n      \n      // Files without clear module patterns\n      const ambiguousFile = `\nfunction utilityFunction() {\n  return 'result';\n}\n\n// No clear export pattern\n`;\n      fs.writeFileSync('src/ambiguous.js', ambiguousFile);\n      \n      const generator = new TestGenerator({ SRC_DIR: 'src' });\n      \n      // Should default to CommonJS\n      expect(generator.isESModule).toBe(false);\n    });\n  });\n\n  describe('API Route Detection Integration', () => {\n    it('should generate API tests regardless of module system', () => {\n      fs.mkdirSync('routes');\n      \n      // CommonJS style API routes\n      const commonJSApiCode = `\nconst express = require('express');\nconst router = express.Router();\n\nrouter.get('/api/users', (req, res) => {\n  res.json({ users: [] });\n});\n\nrouter.post('/api/users', (req, res) => {\n  res.json({ success: true });\n});\n\nmodule.exports = router;\n`;\n      fs.writeFileSync('routes/users.js', commonJSApiCode);\n      \n      const generator = new TestGenerator({ SRC_DIR: 'routes' });\n      const results = generator.generate();\n      \n      // Should generate both unit tests and API tests\n      const apiTests = results.filter(r => r.type === 'api');\n      expect(apiTests.length).toBeGreaterThan(0);\n      \n      // Check API test content\n      apiTests.forEach(test => {\n        if (fs.existsSync(test.file)) {\n          const testContent = fs.readFileSync(test.file, 'utf8');\n          expect(testContent).toContain('describe(');\n          expect(testContent).toContain('httpTest');\n        }\n      });\n    });\n  });\n\n  describe('Performance and Edge Cases', () => {\n    it('should handle large projects efficiently', () => {\n      fs.mkdirSync('large-project');\n      \n      // Create multiple directories and files\n      for (let i = 0; i < 10; i++) {\n        const dirName = `module${i}`;\n        fs.mkdirSync(path.join('large-project', dirName));\n        \n        for (let j = 0; j < 5; j++) {\n          const fileName = `file${j}.js`;\n          const code = `\nexport function func${i}_${j}() {\n  return ${i} + ${j};\n}\n\nexport const CONST${i}_${j} = 'value_${i}_${j}';\n`;\n          fs.writeFileSync(path.join('large-project', dirName, fileName), code);\n        }\n      }\n      \n      const startTime = Date.now();\n      const generator = new TestGenerator({ SRC_DIR: 'large-project' });\n      const results = generator.generate();\n      const endTime = Date.now();\n      \n      // Should complete in reasonable time (less than 5 seconds)\n      expect(endTime - startTime).toBeLessThan(5000);\n      \n      // Should generate tests for all files\n      expect(results.length).toBe(50); // 10 dirs * 5 files each\n    });\n\n    it('should gracefully handle files with syntax errors', () => {\n      fs.mkdirSync('problematic');\n      \n      const syntaxErrorCode = `\nfunction valid() {\n  return 'valid';\n}\n\n// Syntax error below\nexport function broken( {\n  return 'broken';\n}\n\nmodule.exports = valid;\n`;\n      fs.writeFileSync('problematic/broken.js', syntaxErrorCode);\n      \n      const generator = new TestGenerator({ SRC_DIR: 'problematic' });\n      \n      // Should not crash\n      expect(() => {\n        const results = generator.generate();\n      }).not.toThrow();\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}