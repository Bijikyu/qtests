{"file":"/home/runner/workspace/utils/helpers/envManager.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/helpers/envManager.ts"],"sourcesContent":["/**\n * Environment Variable Management Utility - TypeScript Implementation\n * \n * This module provides functionality for backing up and restoring environment\n * variables during testing to ensure test isolation and prevent side effects.\n */\n\n// Type definitions\ninterface EnvBackup {\n  [key: string]: string | undefined;\n}\n\n/**\n * Backup current environment variables\n * \n * This function creates a snapshot of the current environment variables\n * that can be restored later to ensure test isolation.\n * \n * @param keys - Optional array of specific keys to backup (defaults to all)\n * @returns Object containing backed up environment variables\n */\nfunction backupEnvVars(keys?: string[]): EnvBackup {\n  console.log(`backupEnvVars is running with ${keys ? keys.join(', ') : 'all keys'}`);\n  \n  try {\n    const backup: EnvBackup = {};\n    \n    if (keys && keys.length > 0) {\n      // Backup only specific keys\n      for (const key of keys) {\n        backup[key] = process.env[key];\n      }\n    } else {\n      // Backup all environment variables\n      Object.assign(backup, process.env);\n    }\n    \n    console.log(`backupEnvVars is returning backup with ${Object.keys(backup).length} keys`);\n    return backup;\n    \n  } catch (err: any) {\n    console.log(`backupEnvVars error ${err.message}`);\n    throw err;\n  }\n}\n\n/**\n * Restore environment variables from backup\n * \n * This function restores environment variables from a previously created backup,\n * ensuring that tests don't interfere with each other's environment state.\n * \n * @param backup - Backup object created by backupEnvVars\n * @param clearOthers - Whether to clear variables not in backup (default: false)\n */\nfunction restoreEnvVars(backup: EnvBackup, clearOthers: boolean = false): void {\n  console.log(`restoreEnvVars is running with backup containing ${Object.keys(backup).length} keys`);\n  \n  try {\n    if (clearOthers) {\n      // Clear all current environment variables first\n      const currentKeys = Object.keys(process.env);\n      for (const key of currentKeys) {\n        if (!(key in backup)) {\n          delete process.env[key];\n        }\n      }\n    }\n    \n    // Restore backed up variables\n    for (const [key, value] of Object.entries(backup)) {\n      if (value === undefined) {\n        delete process.env[key];\n      } else {\n        process.env[key] = value;\n      }\n    }\n    \n    console.log(`restoreEnvVars completed restoration`);\n    \n  } catch (err: any) {\n    console.log(`restoreEnvVars error ${err.message}`);\n    throw err;\n  }\n}\n\n/**\n * Execute function with saved environment state\n * \n * This function provides a convenient wrapper that automatically backs up\n * the current environment, executes a function, and restores the environment\n * afterward, ensuring no side effects leak between tests.\n * \n * @param fn - Function to execute with saved environment\n * @param keys - Optional array of specific keys to backup/restore\n * @returns Result of the function execution\n */\nfunction withSavedEnv<T>(fn: () => T, keys?: string[]): T {\n  console.log(`withSavedEnv is running with function and ${keys ? keys.length : 'all'} keys`);\n  \n  try {\n    // Backup current environment\n    const backup = backupEnvVars(keys);\n    \n    try {\n      // Execute the function\n      const result = fn();\n      \n      // Restore environment\n      restoreEnvVars(backup);\n      \n      console.log(`withSavedEnv is returning function result`);\n      return result;\n      \n    } catch (fnError) {\n      // Ensure environment is restored even if function throws\n      restoreEnvVars(backup);\n      throw fnError;\n    }\n    \n  } catch (err: any) {\n    console.log(`withSavedEnv error ${err.message}`);\n    throw err;\n  }\n}\n\n// Export environment management utilities using ES module syntax\nexport {\n  backupEnvVars,\n  restoreEnvVars,\n  withSavedEnv\n};"],"version":3}