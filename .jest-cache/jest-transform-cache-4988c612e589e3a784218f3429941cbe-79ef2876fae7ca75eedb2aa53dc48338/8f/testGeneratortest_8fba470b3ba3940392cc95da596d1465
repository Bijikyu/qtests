a71f0c3865f05932211761b52ec89d96
// Mock external dependencies for speed
_getJestObj().mock('fs', () => ({
  __esModule: true,
  default: jest.fn(),
  ...jest.requireActual('fs')
}));
_getJestObj().mock('fs', () => ({
  __esModule: true,
  default: jest.fn(),
  ...jest.requireActual('fs')
}));
_getJestObj().mock('fs', () => ({
  __esModule: true,
  default: jest.fn(),
  ...jest.requireActual('fs')
}));
_getJestObj().mock('fs', () => ({
  __esModule: true,
  default: jest.fn(),
  ...jest.requireActual('fs')
}));
_getJestObj().mock('fs', () => ({
  __esModule: true,
  default: jest.fn(),
  ...jest.requireActual('fs')
}));
_getJestObj().mock('fs', () => ({
  __esModule: true,
  default: jest.fn(),
  ...jest.requireActual('fs')
}));
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
// Auto-generated unit test for testGenerator.js - optimized for speed
const {
  test
} = require('qtests');
const mod = require('./testGenerator.js');
describe('testGenerator.js', () => {
  test('TestGenerator works', async () => {
    // Fast assertion - TODO: implement specific test logic
    expect(typeof mod.TestGenerator).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImplc3QiLCJmbiIsInJlcXVpcmVBY3R1YWwiLCJyZXF1aXJlIiwidGVzdCIsIm1vZCIsImRlc2NyaWJlIiwiZXhwZWN0IiwiVGVzdEdlbmVyYXRvciIsInRvQmVEZWZpbmVkIl0sInNvdXJjZXMiOlsidGVzdEdlbmVyYXRvci50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEF1dG8tZ2VuZXJhdGVkIHVuaXQgdGVzdCBmb3IgdGVzdEdlbmVyYXRvci5qcyAtIG9wdGltaXplZCBmb3Igc3BlZWRcbmNvbnN0IHsgdGVzdCB9ID0gcmVxdWlyZSgncXRlc3RzJyk7XG4vLyBNb2NrIGV4dGVybmFsIGRlcGVuZGVuY2llcyBmb3Igc3BlZWRcbmplc3QubW9jaygnZnMnLCAoKSA9PiAoeyBfX2VzTW9kdWxlOiB0cnVlLCBkZWZhdWx0OiBqZXN0LmZuKCksIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnZnMnKSB9KSk7XG5qZXN0Lm1vY2soJ2ZzJywgKCkgPT4gKHsgX19lc01vZHVsZTogdHJ1ZSwgZGVmYXVsdDogamVzdC5mbigpLCAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ2ZzJykgfSkpO1xuamVzdC5tb2NrKCdmcycsICgpID0+ICh7IF9fZXNNb2R1bGU6IHRydWUsIGRlZmF1bHQ6IGplc3QuZm4oKSwgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCdmcycpIH0pKTtcbmplc3QubW9jaygnZnMnLCAoKSA9PiAoeyBfX2VzTW9kdWxlOiB0cnVlLCBkZWZhdWx0OiBqZXN0LmZuKCksIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnZnMnKSB9KSk7XG5qZXN0Lm1vY2soJ2ZzJywgKCkgPT4gKHsgX19lc01vZHVsZTogdHJ1ZSwgZGVmYXVsdDogamVzdC5mbigpLCAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ2ZzJykgfSkpO1xuamVzdC5tb2NrKCdmcycsICgpID0+ICh7IF9fZXNNb2R1bGU6IHRydWUsIGRlZmF1bHQ6IGplc3QuZm4oKSwgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCdmcycpIH0pKTtcbmNvbnN0IG1vZCA9IHJlcXVpcmUoJy4vdGVzdEdlbmVyYXRvci5qcycpO1xuXG5kZXNjcmliZSgndGVzdEdlbmVyYXRvci5qcycsICgpID0+IHtcbiAgdGVzdCgnVGVzdEdlbmVyYXRvciB3b3JrcycsIGFzeW5jICgpID0+IHtcbiAgICAvLyBGYXN0IGFzc2VydGlvbiAtIFRPRE86IGltcGxlbWVudCBzcGVjaWZpYyB0ZXN0IGxvZ2ljXG4gICAgZXhwZWN0KHR5cGVvZiBtb2QuVGVzdEdlbmVyYXRvcikudG9CZURlZmluZWQoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBRUE7QUFDQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU87RUFBRUMsVUFBVSxFQUFFLElBQUk7RUFBRUMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQUUsR0FBR0QsSUFBSSxDQUFDRSxhQUFhLENBQUMsSUFBSTtBQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlGTixXQUFBLEdBQUtDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTztFQUFFQyxVQUFVLEVBQUUsSUFBSTtFQUFFQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFBRSxHQUFHRCxJQUFJLENBQUNFLGFBQWEsQ0FBQyxJQUFJO0FBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUZOLFdBQUEsR0FBS0MsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPO0VBQUVDLFVBQVUsRUFBRSxJQUFJO0VBQUVDLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUFFLEdBQUdELElBQUksQ0FBQ0UsYUFBYSxDQUFDLElBQUk7QUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5Rk4sV0FBQSxHQUFLQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU87RUFBRUMsVUFBVSxFQUFFLElBQUk7RUFBRUMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQUUsR0FBR0QsSUFBSSxDQUFDRSxhQUFhLENBQUMsSUFBSTtBQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlGTixXQUFBLEdBQUtDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTztFQUFFQyxVQUFVLEVBQUUsSUFBSTtFQUFFQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFBRSxHQUFHRCxJQUFJLENBQUNFLGFBQWEsQ0FBQyxJQUFJO0FBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUZOLFdBQUEsR0FBS0MsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPO0VBQUVDLFVBQVUsRUFBRSxJQUFJO0VBQUVDLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUFFLEdBQUdELElBQUksQ0FBQ0UsYUFBYSxDQUFDLElBQUk7QUFBRSxDQUFDLENBQUMsQ0FBQztBQUFDLFNBQUFOLFlBQUE7RUFBQTtJQUFBSTtFQUFBLElBQUFHLE9BQUE7RUFBQVAsV0FBQSxHQUFBQSxDQUFBLEtBQUFJLElBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFSL0Y7QUFDQSxNQUFNO0VBQUVJO0FBQUssQ0FBQyxHQUFHRCxPQUFPLENBQUMsUUFBUSxDQUFDO0FBUWxDLE1BQU1FLEdBQUcsR0FBR0YsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0FBRXpDRyxRQUFRLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtFQUNqQ0YsSUFBSSxDQUFDLHFCQUFxQixFQUFFLFlBQVk7SUFDdEM7SUFDQUcsTUFBTSxDQUFDLE9BQU9GLEdBQUcsQ0FBQ0csYUFBYSxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0VBQ2hELENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==