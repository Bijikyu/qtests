dcda97f1c63afdab280e860b0714f8bf
/**
 * Mock Models (Refactored)
 * 
 * This module has been refactored to follow Single Responsibility Principle.
 * It now coordinates between focused model utilities for better maintainability.
 * 
 * Components:
 * - models/baseMockModel.js - Base mock model functionality
 * - models/apiKeyModel.js - API key model implementation
 * - models/apiLogModel.js - API log model implementation
 * - models/modelFactory.js - Model creation and collection utilities
 */

// Import logging control utility for consistent framework behavior
const {
  setLogging
} = require('../lib/logUtils');
if (process.env.NODE_ENV !== 'test') setLogging(false);

// Import focused model components
const {
  BaseMockModel
} = require('./models/baseMockModel');
const {
  ApiKey,
  mockApiKeys
} = require('./models/apiKeyModel');
const {
  ApiLog,
  mockLogs
} = require('./models/apiLogModel');
const {
  createMockModel,
  resetAllCollections,
  getAllCollections,
  clearCollection
} = require('./models/modelFactory');

// Export all mock model utilities for backward compatibility
module.exports = {
  BaseMockModel,
  // base class for creating custom mock models
  ApiKey,
  // pre-built API key model for common testing scenarios
  ApiLog,
  // pre-built API log model for logging tests
  createMockModel,
  // factory function for creating custom model classes
  resetAllCollections,
  // utility for cleaning up test data
  getAllCollections,
  // utility for debugging collections
  clearCollection,
  // utility for clearing specific collections
  mockApiKeys,
  // direct access to API keys array for legacy compatibility
  mockLogs // direct access to logs array for legacy compatibility
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzZXRMb2dnaW5nIiwicmVxdWlyZSIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIkJhc2VNb2NrTW9kZWwiLCJBcGlLZXkiLCJtb2NrQXBpS2V5cyIsIkFwaUxvZyIsIm1vY2tMb2dzIiwiY3JlYXRlTW9ja01vZGVsIiwicmVzZXRBbGxDb2xsZWN0aW9ucyIsImdldEFsbENvbGxlY3Rpb25zIiwiY2xlYXJDb2xsZWN0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIm1vY2tNb2RlbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNb2NrIE1vZGVscyAoUmVmYWN0b3JlZClcbiAqIFxuICogVGhpcyBtb2R1bGUgaGFzIGJlZW4gcmVmYWN0b3JlZCB0byBmb2xsb3cgU2luZ2xlIFJlc3BvbnNpYmlsaXR5IFByaW5jaXBsZS5cbiAqIEl0IG5vdyBjb29yZGluYXRlcyBiZXR3ZWVuIGZvY3VzZWQgbW9kZWwgdXRpbGl0aWVzIGZvciBiZXR0ZXIgbWFpbnRhaW5hYmlsaXR5LlxuICogXG4gKiBDb21wb25lbnRzOlxuICogLSBtb2RlbHMvYmFzZU1vY2tNb2RlbC5qcyAtIEJhc2UgbW9jayBtb2RlbCBmdW5jdGlvbmFsaXR5XG4gKiAtIG1vZGVscy9hcGlLZXlNb2RlbC5qcyAtIEFQSSBrZXkgbW9kZWwgaW1wbGVtZW50YXRpb25cbiAqIC0gbW9kZWxzL2FwaUxvZ01vZGVsLmpzIC0gQVBJIGxvZyBtb2RlbCBpbXBsZW1lbnRhdGlvblxuICogLSBtb2RlbHMvbW9kZWxGYWN0b3J5LmpzIC0gTW9kZWwgY3JlYXRpb24gYW5kIGNvbGxlY3Rpb24gdXRpbGl0aWVzXG4gKi9cblxuLy8gSW1wb3J0IGxvZ2dpbmcgY29udHJvbCB1dGlsaXR5IGZvciBjb25zaXN0ZW50IGZyYW1ld29yayBiZWhhdmlvclxuY29uc3QgeyBzZXRMb2dnaW5nIH0gPSByZXF1aXJlKCcuLi9saWIvbG9nVXRpbHMnKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnKSBzZXRMb2dnaW5nKGZhbHNlKTtcblxuLy8gSW1wb3J0IGZvY3VzZWQgbW9kZWwgY29tcG9uZW50c1xuY29uc3QgeyBCYXNlTW9ja01vZGVsIH0gPSByZXF1aXJlKCcuL21vZGVscy9iYXNlTW9ja01vZGVsJyk7XG5jb25zdCB7IEFwaUtleSwgbW9ja0FwaUtleXMgfSA9IHJlcXVpcmUoJy4vbW9kZWxzL2FwaUtleU1vZGVsJyk7XG5jb25zdCB7IEFwaUxvZywgbW9ja0xvZ3MgfSA9IHJlcXVpcmUoJy4vbW9kZWxzL2FwaUxvZ01vZGVsJyk7XG5jb25zdCB7IFxuICBjcmVhdGVNb2NrTW9kZWwsIFxuICByZXNldEFsbENvbGxlY3Rpb25zLCBcbiAgZ2V0QWxsQ29sbGVjdGlvbnMsIFxuICBjbGVhckNvbGxlY3Rpb24gXG59ID0gcmVxdWlyZSgnLi9tb2RlbHMvbW9kZWxGYWN0b3J5Jyk7XG5cbi8vIEV4cG9ydCBhbGwgbW9jayBtb2RlbCB1dGlsaXRpZXMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbm1vZHVsZS5leHBvcnRzID0ge1xuICBCYXNlTW9ja01vZGVsLCAvLyBiYXNlIGNsYXNzIGZvciBjcmVhdGluZyBjdXN0b20gbW9jayBtb2RlbHNcbiAgQXBpS2V5LCAvLyBwcmUtYnVpbHQgQVBJIGtleSBtb2RlbCBmb3IgY29tbW9uIHRlc3Rpbmcgc2NlbmFyaW9zXG4gIEFwaUxvZywgLy8gcHJlLWJ1aWx0IEFQSSBsb2cgbW9kZWwgZm9yIGxvZ2dpbmcgdGVzdHNcbiAgY3JlYXRlTW9ja01vZGVsLCAvLyBmYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBjdXN0b20gbW9kZWwgY2xhc3Nlc1xuICByZXNldEFsbENvbGxlY3Rpb25zLCAvLyB1dGlsaXR5IGZvciBjbGVhbmluZyB1cCB0ZXN0IGRhdGFcbiAgZ2V0QWxsQ29sbGVjdGlvbnMsIC8vIHV0aWxpdHkgZm9yIGRlYnVnZ2luZyBjb2xsZWN0aW9uc1xuICBjbGVhckNvbGxlY3Rpb24sIC8vIHV0aWxpdHkgZm9yIGNsZWFyaW5nIHNwZWNpZmljIGNvbGxlY3Rpb25zXG4gIG1vY2tBcGlLZXlzLCAvLyBkaXJlY3QgYWNjZXNzIHRvIEFQSSBrZXlzIGFycmF5IGZvciBsZWdhY3kgY29tcGF0aWJpbGl0eVxuICBtb2NrTG9ncyAvLyBkaXJlY3QgYWNjZXNzIHRvIGxvZ3MgYXJyYXkgZm9yIGxlZ2FjeSBjb21wYXRpYmlsaXR5XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtFQUFFQTtBQUFXLENBQUMsR0FBR0MsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0FBQ2pELElBQUlDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxRQUFRLEtBQUssTUFBTSxFQUFFSixVQUFVLENBQUMsS0FBSyxDQUFDOztBQUV0RDtBQUNBLE1BQU07RUFBRUs7QUFBYyxDQUFDLEdBQUdKLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQztBQUMzRCxNQUFNO0VBQUVLLE1BQU07RUFBRUM7QUFBWSxDQUFDLEdBQUdOLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztBQUMvRCxNQUFNO0VBQUVPLE1BQU07RUFBRUM7QUFBUyxDQUFDLEdBQUdSLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztBQUM1RCxNQUFNO0VBQ0pTLGVBQWU7RUFDZkMsbUJBQW1CO0VBQ25CQyxpQkFBaUI7RUFDakJDO0FBQ0YsQ0FBQyxHQUFHWixPQUFPLENBQUMsdUJBQXVCLENBQUM7O0FBRXBDO0FBQ0FhLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZWLGFBQWE7RUFBRTtFQUNmQyxNQUFNO0VBQUU7RUFDUkUsTUFBTTtFQUFFO0VBQ1JFLGVBQWU7RUFBRTtFQUNqQkMsbUJBQW1CO0VBQUU7RUFDckJDLGlCQUFpQjtFQUFFO0VBQ25CQyxlQUFlO0VBQUU7RUFDakJOLFdBQVc7RUFBRTtFQUNiRSxRQUFRLENBQUM7QUFDWCxDQUFDIiwiaWdub3JlTGlzdCI6W119