{"file":"/home/runner/workspace/utils/helpers/consoleMocker.ts","mappings":";AAAA;;;;;GAKG;;AAkED,0CAAe;AA1DjB;;;;;;;;GAQG;AACH,SAAS,eAAe,CAAI,EAAW;IACrC,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;IAExD,IAAI,CAAC;QACH,iCAAiC;QACjC,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC;QAChC,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC;QACpC,MAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC;QAElC,sBAAsB;QACtB,MAAM,KAAK,GAAY,EAAE,CAAC;QAE1B,kDAAkD;QAClD,OAAO,CAAC,GAAG,GAAG,CAAC,GAAG,IAAW,EAAE,EAAE;YAC/B,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC;QAEF,OAAO,CAAC,KAAK,GAAG,CAAC,GAAG,IAAW,EAAE,EAAE;YACjC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC;QAEF,OAAO,CAAC,IAAI,GAAG,CAAC,GAAG,IAAW,EAAE,EAAE;YAChC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC;QAEF,2CAA2C;QAC3C,MAAM,MAAM,GAAG,EAAE,EAAE,CAAC;QAEpB,6CAA6C;QAC7C,MAAM,KAAK,GAAkB;YAC3B,OAAO,EAAE,GAAG,EAAE;gBACZ,OAAO,CAAC,GAAG,GAAG,WAAW,CAAC;gBAC1B,OAAO,CAAC,KAAK,GAAG,aAAa,CAAC;gBAC9B,OAAO,CAAC,IAAI,GAAG,YAAY,CAAC;YAC9B,CAAC;YACD,KAAK,EAAE,KAAK;SACb,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;QAC7D,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;IAE3B,CAAC;IAAC,OAAO,GAAQ,EAAE,CAAC;QAClB,OAAO,CAAC,GAAG,CAAC,yBAAyB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QACpD,MAAM,GAAG,CAAC;IACZ,CAAC;AACH,CAAC","names":[],"sources":["/home/runner/workspace/utils/helpers/consoleMocker.ts"],"sourcesContent":["/**\n * Console Mocking Utility - TypeScript Implementation\n * \n * This module provides functionality for mocking console methods\n * during testing to capture output or silence console calls.\n */\n\n// Type definitions\ninterface MockedConsole {\n  restore: () => void;\n  calls: any[][];\n}\n\n/**\n * Mock console methods with capture functionality\n * \n * This function temporarily replaces console methods with mock implementations\n * that capture calls for testing verification while optionally silencing output.\n * \n * @param fn - Function to execute with mocked console\n * @returns Result of the function execution along with captured console calls\n */\nfunction withMockConsole<T>(fn: () => T): { result: T; mocks: MockedConsole } {\n  console.log(`withMockConsole is running with function`);\n  \n  try {\n    // Store original console methods\n    const originalLog = console.log;\n    const originalError = console.error;\n    const originalWarn = console.warn;\n    \n    // Create mock storage\n    const calls: any[][] = [];\n    \n    // Replace console methods with capturing versions\n    console.log = (...args: any[]) => {\n      calls.push(['log', ...args]);\n    };\n    \n    console.error = (...args: any[]) => {\n      calls.push(['error', ...args]);\n    };\n    \n    console.warn = (...args: any[]) => {\n      calls.push(['warn', ...args]);\n    };\n    \n    // Execute the function with mocked console\n    const result = fn();\n    \n    // Create restore function and mock interface\n    const mocks: MockedConsole = {\n      restore: () => {\n        console.log = originalLog;\n        console.error = originalError;\n        console.warn = originalWarn;\n      },\n      calls: calls\n    };\n    \n    console.log(`withMockConsole is returning result and mocks`);\n    return { result, mocks };\n    \n  } catch (err: any) {\n    console.log(`withMockConsole error ${err.message}`);\n    throw err;\n  }\n}\n\n// Export console mocking utilities using ES module syntax\nexport {\n  withMockConsole\n};"],"version":3}