{"file":"/home/runner/workspace/lib/timers/fakeTimers.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/lib/timers/fakeTimers.ts"],"sourcesContent":["/**\n * Fake Timers - Time Control for Testing\n * \n * This module provides Jest/Sinon-compatible fake timer functionality\n * allowing tests to control time and timer execution for deterministic testing.\n */\n\n// Timer task types\ninterface TimerTask {\n  id: number;\n  type: 'timeout' | 'interval';\n  callback: (...args: any[]) => void;\n  delay: number;\n  args: any[];\n  scheduledAt: number;\n  executeAt: number;\n  isActive: boolean;\n}\n\n// Timer state management\nclass FakeTimerState {\n  private currentTime = 0;\n  private timerIdCounter = 1;\n  private timers = new Map<number, TimerTask>();\n  private originalTimers: {\n    setTimeout: typeof global.setTimeout;\n    clearTimeout: typeof global.clearTimeout;\n    setInterval: typeof global.setInterval;\n    clearInterval: typeof global.clearInterval;\n    setImmediate: typeof global.setImmediate;\n    clearImmediate: typeof global.clearImmediate;\n    Date: typeof global.Date;\n  } | null = null;\n  \n  /**\n   * Install fake timers, replacing global timer functions\n   */\n  useFakeTimers(): void {\n    if (this.originalTimers) {\n      return; // Already using fake timers\n    }\n    \n    // Store original implementations\n    this.originalTimers = {\n      setTimeout: global.setTimeout,\n      clearTimeout: global.clearTimeout,\n      setInterval: global.setInterval,\n      clearInterval: global.clearInterval,\n      setImmediate: global.setImmediate,\n      clearImmediate: global.clearImmediate,\n      Date: global.Date\n    };\n    \n    // Replace global timer functions\n    global.setTimeout = this.createSetTimeout();\n    global.clearTimeout = this.createClearTimeout();\n    global.setInterval = this.createSetInterval();\n    global.clearInterval = this.createClearInterval();\n    global.setImmediate = this.createSetImmediate();\n    global.clearImmediate = this.createClearImmediate();\n    \n    // Replace Date constructor to use fake time\n    const fakeDate = this.createFakeDate();\n    global.Date = fakeDate as any;\n  }\n  \n  /**\n   * Restore real timers\n   */\n  useRealTimers(): void {\n    if (!this.originalTimers) {\n      return; // Not using fake timers\n    }\n    \n    // Restore original implementations\n    global.setTimeout = this.originalTimers.setTimeout;\n    global.clearTimeout = this.originalTimers.clearTimeout;\n    global.setInterval = this.originalTimers.setInterval;\n    global.clearInterval = this.originalTimers.clearInterval;\n    global.setImmediate = this.originalTimers.setImmediate;\n    global.clearImmediate = this.originalTimers.clearImmediate;\n    global.Date = this.originalTimers.Date;\n    \n    this.originalTimers = null;\n    this.clearAllTimers();\n  }\n  \n  /**\n   * Set the current system time\n   */\n  setSystemTime(time: number | Date): void {\n    this.currentTime = typeof time === 'number' ? time : time.getTime();\n  }\n  \n  /**\n   * Get current fake time\n   */\n  now(): number {\n    return this.currentTime;\n  }\n  \n  /**\n   * Advance timers by specified amount\n   */\n  advanceTimersByTime(msToRun: number): void {\n    const targetTime = this.currentTime + msToRun;\n    \n    while (this.currentTime < targetTime) {\n      const nextTimer = this.getNextTimer();\n      if (!nextTimer || nextTimer.executeAt > targetTime) {\n        // No more timers to execute within the time range\n        this.currentTime = targetTime;\n        break;\n      }\n      \n      // Execute the next timer\n      this.currentTime = nextTimer.executeAt;\n      this.executeTimer(nextTimer);\n    }\n  }\n  \n  /**\n   * Run all pending timers\n   */\n  runAllTimers(): void {\n    while (this.timers.size > 0) {\n      const nextTimer = this.getNextTimer();\n      if (!nextTimer) break;\n      \n      this.currentTime = nextTimer.executeAt;\n      this.executeTimer(nextTimer);\n    }\n  }\n  \n  /**\n   * Run only currently pending timers (not new ones created during execution)\n   */\n  runOnlyPendingTimers(): void {\n    const pendingTimers = Array.from(this.timers.values()).sort(\n      (a, b) => a.executeAt - b.executeAt\n    );\n    \n    for (const timer of pendingTimers) {\n      if (this.timers.has(timer.id)) { // Check if still active\n        this.currentTime = timer.executeAt;\n        this.executeTimer(timer);\n      }\n    }\n  }\n  \n  /**\n   * Get the number of pending timers\n   */\n  getTimerCount(): number {\n    return this.timers.size;\n  }\n  \n  // Private helper methods\n  \n  private createSetTimeout() {\n    return (callback: (...args: any[]) => void, delay: number = 0, ...args: any[]): number => {\n      const id = this.timerIdCounter++;\n      const task: TimerTask = {\n        id,\n        type: 'timeout',\n        callback,\n        delay,\n        args,\n        scheduledAt: this.currentTime,\n        executeAt: this.currentTime + Math.max(0, delay),\n        isActive: true\n      };\n      \n      this.timers.set(id, task);\n      return id;\n    };\n  }\n  \n  private createClearTimeout() {\n    return (id: number): void => {\n      this.timers.delete(id);\n    };\n  }\n  \n  private createSetInterval() {\n    return (callback: (...args: any[]) => void, delay: number = 0, ...args: any[]): number => {\n      const id = this.timerIdCounter++;\n      const task: TimerTask = {\n        id,\n        type: 'interval',\n        callback,\n        delay: Math.max(1, delay), // Intervals must have at least 1ms delay\n        args,\n        scheduledAt: this.currentTime,\n        executeAt: this.currentTime + Math.max(1, delay),\n        isActive: true\n      };\n      \n      this.timers.set(id, task);\n      return id;\n    };\n  }\n  \n  private createClearInterval() {\n    return (id: number): void => {\n      this.timers.delete(id);\n    };\n  }\n  \n  private createSetImmediate() {\n    return (callback: (...args: any[]) => void, ...args: any[]): number => {\n      const id = this.timerIdCounter++;\n      const task: TimerTask = {\n        id,\n        type: 'timeout',\n        callback,\n        delay: 0,\n        args,\n        scheduledAt: this.currentTime,\n        executeAt: this.currentTime, // Immediate execution\n        isActive: true\n      };\n      \n      this.timers.set(id, task);\n      return id;\n    };\n  }\n  \n  private createClearImmediate() {\n    return (id: number): void => {\n      this.timers.delete(id);\n    };\n  }\n  \n  private createFakeDate() {\n    const state = this;\n    \n    function FakeDate(this: any, ...args: any[]) {\n      if (args.length === 0) {\n        return new state.originalTimers!.Date(state.currentTime);\n      } else {\n        return new (state.originalTimers!.Date as any)(...args);\n      }\n    }\n    \n    // Copy static methods from real Date\n    FakeDate.now = () => state.currentTime;\n    FakeDate.parse = state.originalTimers!.Date.parse;\n    FakeDate.UTC = state.originalTimers!.Date.UTC;\n    FakeDate.prototype = state.originalTimers!.Date.prototype;\n    \n    return FakeDate;\n  }\n  \n  private getNextTimer(): TimerTask | null {\n    let nextTimer: TimerTask | null = null;\n    \n    for (const timer of this.timers.values()) {\n      if (timer.isActive && (!nextTimer || timer.executeAt < nextTimer.executeAt)) {\n        nextTimer = timer;\n      }\n    }\n    \n    return nextTimer;\n  }\n  \n  private executeTimer(timer: TimerTask): void {\n    if (!timer.isActive || !this.timers.has(timer.id)) {\n      return;\n    }\n    \n    try {\n      timer.callback(...timer.args);\n    } catch (error) {\n      // Timer errors should not stop fake timer execution\n      console.error('Timer callback error:', error);\n    }\n    \n    if (timer.type === 'timeout') {\n      // Remove one-time timers\n      this.timers.delete(timer.id);\n    } else {\n      // Reschedule intervals\n      timer.executeAt = this.currentTime + timer.delay;\n    }\n  }\n  \n  private clearAllTimers(): void {\n    this.timers.clear();\n    this.currentTime = 0;\n    this.timerIdCounter = 1;\n  }\n}\n\n// Global fake timer instance\nconst globalFakeTimers = new FakeTimerState();\n\n// Public API functions\nexport function useFakeTimers(): void {\n  globalFakeTimers.useFakeTimers();\n}\n\nexport function useRealTimers(): void {\n  globalFakeTimers.useRealTimers();\n}\n\nexport function setSystemTime(time: number | Date): void {\n  globalFakeTimers.setSystemTime(time);\n}\n\nexport function advanceTimersByTime(msToRun: number): void {\n  globalFakeTimers.advanceTimersByTime(msToRun);\n}\n\nexport function runAllTimers(): void {\n  globalFakeTimers.runAllTimers();\n}\n\nexport function runOnlyPendingTimers(): void {\n  globalFakeTimers.runOnlyPendingTimers();\n}\n\nexport function getTimerCount(): number {\n  return globalFakeTimers.getTimerCount();\n}\n\n// Alias for Jest compatibility\nexport const advanceTimersToNextTimer = runOnlyPendingTimers;\nexport const clearAllTimers = useRealTimers;\n\n// Get current fake time\nexport function now(): number {\n  return globalFakeTimers.now();\n}"],"version":3}