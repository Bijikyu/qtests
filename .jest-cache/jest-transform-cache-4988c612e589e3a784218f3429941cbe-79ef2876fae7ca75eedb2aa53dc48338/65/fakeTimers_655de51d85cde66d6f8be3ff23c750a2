58d5e15461b7d629dc92315033624a7e
"use strict";
/**
 * Fake Timers - Time Control for Testing
 *
 * This module provides Jest/Sinon-compatible fake timer functionality
 * allowing tests to control time and timer execution for deterministic testing.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearAllTimers = exports.advanceTimersToNextTimer = void 0;
exports.useFakeTimers = useFakeTimers;
exports.useRealTimers = useRealTimers;
exports.setSystemTime = setSystemTime;
exports.advanceTimersByTime = advanceTimersByTime;
exports.runAllTimers = runAllTimers;
exports.runOnlyPendingTimers = runOnlyPendingTimers;
exports.getTimerCount = getTimerCount;
exports.now = now;
// Timer state management
class FakeTimerState {
    constructor() {
        this.currentTime = 0;
        this.timerIdCounter = 1;
        this.timers = new Map();
        this.originalTimers = null;
    }
    /**
     * Install fake timers, replacing global timer functions
     */
    useFakeTimers() {
        if (this.originalTimers) {
            return; // Already using fake timers
        }
        // Store original implementations
        this.originalTimers = {
            setTimeout: global.setTimeout,
            clearTimeout: global.clearTimeout,
            setInterval: global.setInterval,
            clearInterval: global.clearInterval,
            setImmediate: global.setImmediate,
            clearImmediate: global.clearImmediate,
            Date: global.Date
        };
        // Replace global timer functions
        global.setTimeout = this.createSetTimeout();
        global.clearTimeout = this.createClearTimeout();
        global.setInterval = this.createSetInterval();
        global.clearInterval = this.createClearInterval();
        global.setImmediate = this.createSetImmediate();
        global.clearImmediate = this.createClearImmediate();
        // Replace Date constructor to use fake time
        const fakeDate = this.createFakeDate();
        global.Date = fakeDate;
    }
    /**
     * Restore real timers
     */
    useRealTimers() {
        if (!this.originalTimers) {
            return; // Not using fake timers
        }
        // Restore original implementations
        global.setTimeout = this.originalTimers.setTimeout;
        global.clearTimeout = this.originalTimers.clearTimeout;
        global.setInterval = this.originalTimers.setInterval;
        global.clearInterval = this.originalTimers.clearInterval;
        global.setImmediate = this.originalTimers.setImmediate;
        global.clearImmediate = this.originalTimers.clearImmediate;
        global.Date = this.originalTimers.Date;
        this.originalTimers = null;
        this.clearAllTimers();
    }
    /**
     * Set the current system time
     */
    setSystemTime(time) {
        this.currentTime = typeof time === 'number' ? time : time.getTime();
    }
    /**
     * Get current fake time
     */
    now() {
        return this.currentTime;
    }
    /**
     * Advance timers by specified amount
     */
    advanceTimersByTime(msToRun) {
        const targetTime = this.currentTime + msToRun;
        while (this.currentTime < targetTime) {
            const nextTimer = this.getNextTimer();
            if (!nextTimer || nextTimer.executeAt > targetTime) {
                // No more timers to execute within the time range
                this.currentTime = targetTime;
                break;
            }
            // Execute the next timer
            this.currentTime = nextTimer.executeAt;
            this.executeTimer(nextTimer);
        }
    }
    /**
     * Run all pending timers
     */
    runAllTimers() {
        while (this.timers.size > 0) {
            const nextTimer = this.getNextTimer();
            if (!nextTimer)
                break;
            this.currentTime = nextTimer.executeAt;
            this.executeTimer(nextTimer);
        }
    }
    /**
     * Run only currently pending timers (not new ones created during execution)
     */
    runOnlyPendingTimers() {
        const pendingTimers = Array.from(this.timers.values()).sort((a, b) => a.executeAt - b.executeAt);
        for (const timer of pendingTimers) {
            if (this.timers.has(timer.id)) { // Check if still active
                this.currentTime = timer.executeAt;
                this.executeTimer(timer);
            }
        }
    }
    /**
     * Get the number of pending timers
     */
    getTimerCount() {
        return this.timers.size;
    }
    // Private helper methods
    createSetTimeout() {
        return (callback, delay = 0, ...args) => {
            const id = this.timerIdCounter++;
            const task = {
                id,
                type: 'timeout',
                callback,
                delay,
                args,
                scheduledAt: this.currentTime,
                executeAt: this.currentTime + Math.max(0, delay),
                isActive: true
            };
            this.timers.set(id, task);
            return id;
        };
    }
    createClearTimeout() {
        return (id) => {
            this.timers.delete(id);
        };
    }
    createSetInterval() {
        return (callback, delay = 0, ...args) => {
            const id = this.timerIdCounter++;
            const task = {
                id,
                type: 'interval',
                callback,
                delay: Math.max(1, delay), // Intervals must have at least 1ms delay
                args,
                scheduledAt: this.currentTime,
                executeAt: this.currentTime + Math.max(1, delay),
                isActive: true
            };
            this.timers.set(id, task);
            return id;
        };
    }
    createClearInterval() {
        return (id) => {
            this.timers.delete(id);
        };
    }
    createSetImmediate() {
        return (callback, ...args) => {
            const id = this.timerIdCounter++;
            const task = {
                id,
                type: 'timeout',
                callback,
                delay: 0,
                args,
                scheduledAt: this.currentTime,
                executeAt: this.currentTime, // Immediate execution
                isActive: true
            };
            this.timers.set(id, task);
            return id;
        };
    }
    createClearImmediate() {
        return (id) => {
            this.timers.delete(id);
        };
    }
    createFakeDate() {
        const state = this;
        function FakeDate(...args) {
            if (args.length === 0) {
                return new state.originalTimers.Date(state.currentTime);
            }
            else {
                return new state.originalTimers.Date(...args);
            }
        }
        // Copy static methods from real Date
        FakeDate.now = () => state.currentTime;
        FakeDate.parse = state.originalTimers.Date.parse;
        FakeDate.UTC = state.originalTimers.Date.UTC;
        FakeDate.prototype = state.originalTimers.Date.prototype;
        return FakeDate;
    }
    getNextTimer() {
        let nextTimer = null;
        for (const timer of this.timers.values()) {
            if (timer.isActive && (!nextTimer || timer.executeAt < nextTimer.executeAt)) {
                nextTimer = timer;
            }
        }
        return nextTimer;
    }
    executeTimer(timer) {
        if (!timer.isActive || !this.timers.has(timer.id)) {
            return;
        }
        try {
            timer.callback(...timer.args);
        }
        catch (error) {
            // Timer errors should not stop fake timer execution
            console.error('Timer callback error:', error);
        }
        if (timer.type === 'timeout') {
            // Remove one-time timers
            this.timers.delete(timer.id);
        }
        else {
            // Reschedule intervals
            timer.executeAt = this.currentTime + timer.delay;
        }
    }
    clearAllTimers() {
        this.timers.clear();
        this.currentTime = 0;
        this.timerIdCounter = 1;
    }
}
// Global fake timer instance
const globalFakeTimers = new FakeTimerState();
// Public API functions
function useFakeTimers() {
    globalFakeTimers.useFakeTimers();
}
function useRealTimers() {
    globalFakeTimers.useRealTimers();
}
function setSystemTime(time) {
    globalFakeTimers.setSystemTime(time);
}
function advanceTimersByTime(msToRun) {
    globalFakeTimers.advanceTimersByTime(msToRun);
}
function runAllTimers() {
    globalFakeTimers.runAllTimers();
}
function runOnlyPendingTimers() {
    globalFakeTimers.runOnlyPendingTimers();
}
function getTimerCount() {
    return globalFakeTimers.getTimerCount();
}
// Alias for Jest compatibility
exports.advanceTimersToNextTimer = runOnlyPendingTimers;
exports.clearAllTimers = useRealTimers;
// Get current fake time
function now() {
    return globalFakeTimers.now();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,