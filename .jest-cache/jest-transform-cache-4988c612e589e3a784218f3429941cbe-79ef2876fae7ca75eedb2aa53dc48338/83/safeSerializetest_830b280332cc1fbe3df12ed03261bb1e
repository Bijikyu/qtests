937e3a1a412d7adedfa5c3c7f341dbc2
import { safeSerialize } from '../lib/logUtils.js'; // import serializer under test
import util from 'util'; // node util for expected output
test('serializes primitives and objects', () => {
    expect(safeSerialize(5)).toBe('5'); // number serialization
    expect(safeSerialize('hi')).toBe('"hi"'); // string serialization
    const obj = { a: 1 }; // simple object
    expect(safeSerialize(obj)).toBe(JSON.stringify(obj)); // object serialization output
});
test('handles undefined value', () => {
    expect(safeSerialize(undefined)).toBe('undefined'); // should return string literal
});
test('falls back to util.inspect for circular references', () => {
    const circ = {}; // create base object
    circ.self = circ; // circular reference
    const expected = util.inspect(circ, { depth: null }); // expected inspect
    expect(safeSerialize(circ)).toBe(expected); // uses inspect output
});
test('returns "[unserializable]" on inspect failure', () => {
    const bad = {}; // object that forces errors
    bad.toJSON = () => { throw new Error('json fail'); }; // stringify will throw
    bad[util.inspect.custom] = () => { throw new Error('inspect fail'); }; // inspect will throw
    expect(safeSerialize(bad)).toBe('[unserializable]'); // fallback result string
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9tYW51YWwtdGVzdHMvc2FmZVNlcmlhbGl6ZS50ZXN0LnRzIiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQyxDQUFDLCtCQUErQjtBQUNuRixPQUFPLElBQUksTUFBTSxNQUFNLENBQUMsQ0FBQyxnQ0FBZ0M7QUFFekQsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtJQUM3QyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsdUJBQXVCO0lBQzNELE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyx1QkFBdUI7SUFDakUsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxnQkFBZ0I7SUFDdEMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyw4QkFBOEI7QUFDdEYsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO0lBQ25DLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQywrQkFBK0I7QUFDckYsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsb0RBQW9ELEVBQUUsR0FBRyxFQUFFO0lBQzlELE1BQU0sSUFBSSxHQUFRLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQjtJQUMzQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLHFCQUFxQjtJQUN2QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsbUJBQW1CO0lBQ3pFLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxzQkFBc0I7QUFDcEUsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsK0NBQStDLEVBQUUsR0FBRyxFQUFFO0lBQ3pELE1BQU0sR0FBRyxHQUFRLEVBQUUsQ0FBQyxDQUFDLDRCQUE0QjtJQUNqRCxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxHQUFHLE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyx1QkFBdUI7SUFDN0UsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUcsTUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQjtJQUM1RixNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyx5QkFBeUI7QUFDaEYsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9tYW51YWwtdGVzdHMvc2FmZVNlcmlhbGl6ZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNhZmVTZXJpYWxpemUgfSBmcm9tICcuLi9saWIvbG9nVXRpbHMuanMnOyAvLyBpbXBvcnQgc2VyaWFsaXplciB1bmRlciB0ZXN0XG5pbXBvcnQgdXRpbCBmcm9tICd1dGlsJzsgLy8gbm9kZSB1dGlsIGZvciBleHBlY3RlZCBvdXRwdXRcblxudGVzdCgnc2VyaWFsaXplcyBwcmltaXRpdmVzIGFuZCBvYmplY3RzJywgKCkgPT4geyAvLyB2ZXJpZnkgSlNPTiBwYXRoXG4gIGV4cGVjdChzYWZlU2VyaWFsaXplKDUpKS50b0JlKCc1Jyk7IC8vIG51bWJlciBzZXJpYWxpemF0aW9uXG4gIGV4cGVjdChzYWZlU2VyaWFsaXplKCdoaScpKS50b0JlKCdcImhpXCInKTsgLy8gc3RyaW5nIHNlcmlhbGl6YXRpb25cbiAgY29uc3Qgb2JqID0geyBhOiAxIH07IC8vIHNpbXBsZSBvYmplY3RcbiAgZXhwZWN0KHNhZmVTZXJpYWxpemUob2JqKSkudG9CZShKU09OLnN0cmluZ2lmeShvYmopKTsgLy8gb2JqZWN0IHNlcmlhbGl6YXRpb24gb3V0cHV0XG59KTtcblxudGVzdCgnaGFuZGxlcyB1bmRlZmluZWQgdmFsdWUnLCAoKSA9PiB7IC8vIG5ldyB0ZXN0IGZvciBleHBsaWNpdCB1bmRlZmluZWQgaGFuZGxpbmdcbiAgZXhwZWN0KHNhZmVTZXJpYWxpemUodW5kZWZpbmVkKSkudG9CZSgndW5kZWZpbmVkJyk7IC8vIHNob3VsZCByZXR1cm4gc3RyaW5nIGxpdGVyYWxcbn0pO1xuXG50ZXN0KCdmYWxscyBiYWNrIHRvIHV0aWwuaW5zcGVjdCBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcycsICgpID0+IHsgLy8gdmVyaWZ5IGZhbGxiYWNrXG4gIGNvbnN0IGNpcmM6IGFueSA9IHt9OyAvLyBjcmVhdGUgYmFzZSBvYmplY3RcbiAgY2lyYy5zZWxmID0gY2lyYzsgLy8gY2lyY3VsYXIgcmVmZXJlbmNlXG4gIGNvbnN0IGV4cGVjdGVkID0gdXRpbC5pbnNwZWN0KGNpcmMsIHsgZGVwdGg6IG51bGwgfSk7IC8vIGV4cGVjdGVkIGluc3BlY3RcbiAgZXhwZWN0KHNhZmVTZXJpYWxpemUoY2lyYykpLnRvQmUoZXhwZWN0ZWQpOyAvLyB1c2VzIGluc3BlY3Qgb3V0cHV0XG59KTtcblxudGVzdCgncmV0dXJucyBcIlt1bnNlcmlhbGl6YWJsZV1cIiBvbiBpbnNwZWN0IGZhaWx1cmUnLCAoKSA9PiB7IC8vIHZlcmlmeSBmaW5hbCBmYWxsYmFja1xuICBjb25zdCBiYWQ6IGFueSA9IHt9OyAvLyBvYmplY3QgdGhhdCBmb3JjZXMgZXJyb3JzXG4gIGJhZC50b0pTT04gPSAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignanNvbiBmYWlsJyk7IH07IC8vIHN0cmluZ2lmeSB3aWxsIHRocm93XG4gIGJhZFt1dGlsLmluc3BlY3QuY3VzdG9tXSA9ICgpID0+IHsgdGhyb3cgbmV3IEVycm9yKCdpbnNwZWN0IGZhaWwnKTsgfTsgLy8gaW5zcGVjdCB3aWxsIHRocm93XG4gIGV4cGVjdChzYWZlU2VyaWFsaXplKGJhZCkpLnRvQmUoJ1t1bnNlcmlhbGl6YWJsZV0nKTsgLy8gZmFsbGJhY2sgcmVzdWx0IHN0cmluZ1xufSk7Il0sInZlcnNpb24iOjN9