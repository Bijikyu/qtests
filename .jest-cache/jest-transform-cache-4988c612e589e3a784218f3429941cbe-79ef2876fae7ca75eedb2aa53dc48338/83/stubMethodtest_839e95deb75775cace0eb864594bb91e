778434fdae5b6f7ef868962701be8b89
// qtests dogfooding - using qtests to test itself instead of Jest
const stubMethod = require('../utils/stubMethod');
describe('stubMethod', () => {
  it('should replace and restore methods', () => {
    const obj = {
      greet: name => `Hello, ${name}`
    };
    const restore = stubMethod(obj, 'greet', () => 'Hi');
    const result = obj.greet('Bob');
    restore();
    expect(result).toBe('Hi');
    expect(obj.greet('Bob')).toBe('Hello, Bob');
  });
  it('should throw for non-object target', () => {
    expect(() => stubMethod(null, 'greet', () => {})).toThrow();
  });
  it('should throw when method missing', () => {
    expect(() => stubMethod({}, 'missing', () => {})).toThrow();
  });
  it('should throw for non-function stub', () => {
    const obj = {
      greet: () => 'hi'
    };
    expect(() => stubMethod(obj, 'greet', 'notFn')).toThrow();
  });
  it('should handle inherited methods', () => {
    const proto = {
      greet: () => 'proto'
    };
    const obj = Object.create(proto);
    const restore = stubMethod(obj, 'greet', () => 'stub');
    expect(obj.greet()).toBe('stub');
    restore();
    expect(Object.prototype.hasOwnProperty.call(obj, 'greet')).toBe(false);
    expect(obj.greet()).toBe('proto');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdHViTWV0aG9kIiwicmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJvYmoiLCJncmVldCIsIm5hbWUiLCJyZXN0b3JlIiwicmVzdWx0IiwiZXhwZWN0IiwidG9CZSIsInRvVGhyb3ciLCJwcm90byIsIk9iamVjdCIsImNyZWF0ZSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCJdLCJzb3VyY2VzIjpbInN0dWJNZXRob2QudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBxdGVzdHMgZG9nZm9vZGluZyAtIHVzaW5nIHF0ZXN0cyB0byB0ZXN0IGl0c2VsZiBpbnN0ZWFkIG9mIEplc3RcbmNvbnN0IHN0dWJNZXRob2QgPSByZXF1aXJlKCcuLi91dGlscy9zdHViTWV0aG9kJyk7XG5cbmRlc2NyaWJlKCdzdHViTWV0aG9kJywgKCkgPT4ge1xuXG4gIGl0KCdzaG91bGQgcmVwbGFjZSBhbmQgcmVzdG9yZSBtZXRob2RzJywgKCkgPT4ge1xuICAgIGNvbnN0IG9iaiA9IHsgZ3JlZXQ6IG5hbWUgPT4gYEhlbGxvLCAke25hbWV9YCB9O1xuICAgIGNvbnN0IHJlc3RvcmUgPSBzdHViTWV0aG9kKG9iaiwgJ2dyZWV0JywgKCkgPT4gJ0hpJyk7XG4gICAgY29uc3QgcmVzdWx0ID0gb2JqLmdyZWV0KCdCb2InKTtcbiAgICByZXN0b3JlKCk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZSgnSGknKTtcbiAgICBleHBlY3Qob2JqLmdyZWV0KCdCb2InKSkudG9CZSgnSGVsbG8sIEJvYicpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHRocm93IGZvciBub24tb2JqZWN0IHRhcmdldCcsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4gc3R1Yk1ldGhvZChudWxsLCAnZ3JlZXQnLCAoKSA9PiB7fSkpLnRvVGhyb3coKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB0aHJvdyB3aGVuIG1ldGhvZCBtaXNzaW5nJywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiBzdHViTWV0aG9kKHt9LCAnbWlzc2luZycsICgpID0+IHt9KSkudG9UaHJvdygpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHRocm93IGZvciBub24tZnVuY3Rpb24gc3R1YicsICgpID0+IHtcbiAgICBjb25zdCBvYmogPSB7IGdyZWV0OiAoKSA9PiAnaGknIH07XG4gICAgZXhwZWN0KCgpID0+IHN0dWJNZXRob2Qob2JqLCAnZ3JlZXQnLCAnbm90Rm4nKSkudG9UaHJvdygpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBpbmhlcml0ZWQgbWV0aG9kcycsICgpID0+IHtcbiAgICBjb25zdCBwcm90byA9IHsgZ3JlZXQ6ICgpID0+ICdwcm90bycgfTtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKHByb3RvKTtcbiAgICBjb25zdCByZXN0b3JlID0gc3R1Yk1ldGhvZChvYmosICdncmVldCcsICgpID0+ICdzdHViJyk7XG4gICAgZXhwZWN0KG9iai5ncmVldCgpKS50b0JlKCdzdHViJyk7XG4gICAgcmVzdG9yZSgpO1xuICAgIGV4cGVjdChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCAnZ3JlZXQnKSkudG9CZShmYWxzZSk7XG4gICAgZXhwZWN0KG9iai5ncmVldCgpKS50b0JlKCdwcm90bycpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0FBRWpEQyxRQUFRLENBQUMsWUFBWSxFQUFFLE1BQU07RUFFM0JDLEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRSxNQUFNO0lBQzdDLE1BQU1DLEdBQUcsR0FBRztNQUFFQyxLQUFLLEVBQUVDLElBQUksSUFBSSxVQUFVQSxJQUFJO0lBQUcsQ0FBQztJQUMvQyxNQUFNQyxPQUFPLEdBQUdQLFVBQVUsQ0FBQ0ksR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztJQUNwRCxNQUFNSSxNQUFNLEdBQUdKLEdBQUcsQ0FBQ0MsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUMvQkUsT0FBTyxDQUFDLENBQUM7SUFDVEUsTUFBTSxDQUFDRCxNQUFNLENBQUMsQ0FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQztJQUN6QkQsTUFBTSxDQUFDTCxHQUFHLENBQUNDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDSyxJQUFJLENBQUMsWUFBWSxDQUFDO0VBQzdDLENBQUMsQ0FBQztFQUVGUCxFQUFFLENBQUMsb0NBQW9DLEVBQUUsTUFBTTtJQUM3Q00sTUFBTSxDQUFDLE1BQU1ULFVBQVUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDVyxPQUFPLENBQUMsQ0FBQztFQUM3RCxDQUFDLENBQUM7RUFFRlIsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLE1BQU07SUFDM0NNLE1BQU0sQ0FBQyxNQUFNVCxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDVyxPQUFPLENBQUMsQ0FBQztFQUM3RCxDQUFDLENBQUM7RUFFRlIsRUFBRSxDQUFDLG9DQUFvQyxFQUFFLE1BQU07SUFDN0MsTUFBTUMsR0FBRyxHQUFHO01BQUVDLEtBQUssRUFBRUEsQ0FBQSxLQUFNO0lBQUssQ0FBQztJQUNqQ0ksTUFBTSxDQUFDLE1BQU1ULFVBQVUsQ0FBQ0ksR0FBRyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDTyxPQUFPLENBQUMsQ0FBQztFQUMzRCxDQUFDLENBQUM7RUFFRlIsRUFBRSxDQUFDLGlDQUFpQyxFQUFFLE1BQU07SUFDMUMsTUFBTVMsS0FBSyxHQUFHO01BQUVQLEtBQUssRUFBRUEsQ0FBQSxLQUFNO0lBQVEsQ0FBQztJQUN0QyxNQUFNRCxHQUFHLEdBQUdTLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDRixLQUFLLENBQUM7SUFDaEMsTUFBTUwsT0FBTyxHQUFHUCxVQUFVLENBQUNJLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7SUFDdERLLE1BQU0sQ0FBQ0wsR0FBRyxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUNLLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDaENILE9BQU8sQ0FBQyxDQUFDO0lBQ1RFLE1BQU0sQ0FBQ0ksTUFBTSxDQUFDRSxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDYixHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQ00sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0RUQsTUFBTSxDQUFDTCxHQUFHLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ0ssSUFBSSxDQUFDLE9BQU8sQ0FBQztFQUNuQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=