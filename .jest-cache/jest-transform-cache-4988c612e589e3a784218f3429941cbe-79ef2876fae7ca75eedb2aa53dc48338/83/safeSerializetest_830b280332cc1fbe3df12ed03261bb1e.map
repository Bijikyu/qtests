{"file":"/home/runner/workspace/manual-tests/safeSerialize.test.ts","mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC,CAAC,+BAA+B;AACnF,OAAO,IAAI,MAAM,MAAM,CAAC,CAAC,gCAAgC;AAEzD,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;IAC7C,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,uBAAuB;IAC3D,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,uBAAuB;IACjE,MAAM,GAAG,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,gBAAgB;IACtC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,8BAA8B;AACtF,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACnC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,+BAA+B;AACrF,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,oDAAoD,EAAE,GAAG,EAAE;IAC9D,MAAM,IAAI,GAAQ,EAAE,CAAC,CAAC,qBAAqB;IAC3C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,qBAAqB;IACvC,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,mBAAmB;IACzE,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,sBAAsB;AACpE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,+CAA+C,EAAE,GAAG,EAAE;IACzD,MAAM,GAAG,GAAQ,EAAE,CAAC,CAAC,4BAA4B;IACjD,GAAG,CAAC,MAAM,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,uBAAuB;IAC7E,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,qBAAqB;IAC5F,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,yBAAyB;AAChF,CAAC,CAAC,CAAC","names":[],"sources":["/home/runner/workspace/manual-tests/safeSerialize.test.ts"],"sourcesContent":["import { safeSerialize } from '../lib/logUtils.js'; // import serializer under test\nimport util from 'util'; // node util for expected output\n\ntest('serializes primitives and objects', () => { // verify JSON path\n  expect(safeSerialize(5)).toBe('5'); // number serialization\n  expect(safeSerialize('hi')).toBe('\"hi\"'); // string serialization\n  const obj = { a: 1 }; // simple object\n  expect(safeSerialize(obj)).toBe(JSON.stringify(obj)); // object serialization output\n});\n\ntest('handles undefined value', () => { // new test for explicit undefined handling\n  expect(safeSerialize(undefined)).toBe('undefined'); // should return string literal\n});\n\ntest('falls back to util.inspect for circular references', () => { // verify fallback\n  const circ: any = {}; // create base object\n  circ.self = circ; // circular reference\n  const expected = util.inspect(circ, { depth: null }); // expected inspect\n  expect(safeSerialize(circ)).toBe(expected); // uses inspect output\n});\n\ntest('returns \"[unserializable]\" on inspect failure', () => { // verify final fallback\n  const bad: any = {}; // object that forces errors\n  bad.toJSON = () => { throw new Error('json fail'); }; // stringify will throw\n  bad[util.inspect.custom] = () => { throw new Error('inspect fail'); }; // inspect will throw\n  expect(safeSerialize(bad)).toBe('[unserializable]'); // fallback result string\n});"],"version":3}