{"file":"/home/runner/workspace/utils/testing/mockManager.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/testing/mockManager.ts"],"sourcesContent":["/**\n * Mock Management System for Consistent API and Service Mocking - TypeScript Implementation\n * \n * This class focuses solely on mock management and lifecycle concerns.\n * It provides centralized mock management that eliminates duplicate patterns.\n */\n\nimport { logStart, logReturn } from '../../lib/logUtils.js';\n\n// Type definitions\ninterface MockResponse {\n  status: number;\n  data: any;\n}\n\ninterface MockApiClient {\n  get: () => Promise<MockResponse>;\n  post: () => Promise<MockResponse>;\n  put: () => Promise<MockResponse>;\n  delete: () => Promise<MockResponse>;\n  request: () => Promise<MockResponse>;\n}\n\ninterface ConsoleMocks {\n  log: any;\n  error: any;\n  warn: any;\n  restore: () => void;\n}\n\n/**\n * Mock Management System for Consistent API and Service Mocking\n * \n * This class provides centralized mock management that eliminates duplicate\n * mock patterns across test files. It uses qtests utilities for consistent\n * mocking while providing advanced mock configuration capabilities.\n */\nclass MockManager {\n  private mocks: Map<string, any>;\n  private restorations: Map<string, () => void>;\n\n  constructor() {\n    this.mocks = new Map();\n    this.restorations = new Map();\n  }\n\n  /**\n   * Sets up API client mocks using qtests stubMethod utility\n   */\n  setupApiClientMocks(customResponses: Record<string, MockResponse> = {}): void {\n    logStart('MockManager.setupApiClientMocks', customResponses);\n    \n    try {\n      // Default API responses\n      const defaultResponses: Record<string, MockResponse> = {\n        get: { status: 200, data: {} },\n        post: { status: 201, data: { id: 1 } },\n        put: { status: 200, data: { updated: true } },\n        delete: { status: 204, data: null }\n      };\n      \n      const responses = { ...defaultResponses, ...customResponses };\n      \n      // Create mock API client object\n      const mockApiClient: MockApiClient = {\n        get: () => Promise.resolve(responses.get),\n        post: () => Promise.resolve(responses.post),\n        put: () => Promise.resolve(responses.put),\n        delete: () => Promise.resolve(responses.delete),\n        request: () => Promise.resolve(responses.get)\n      };\n      \n      this.mocks.set('apiClient', mockApiClient);\n      \n      // If we have a global HTTP client to stub, stub it\n      if (typeof (globalThis as any).fetch === 'function') {\n        const originalFetch = (globalThis as any).fetch;\n        (globalThis as any).fetch = (url: string, options: any = {}) => {\n          const method = (options.method || 'GET').toLowerCase();\n          const response = responses[method] || responses.get;\n          \n          return Promise.resolve({\n            ok: response.status < 400,\n            status: response.status,\n            json: () => Promise.resolve(response.data),\n            text: () => Promise.resolve(JSON.stringify(response.data))\n          });\n        };\n        \n        this.restorations.set('fetch', () => {\n          (globalThis as any).fetch = originalFetch;\n        });\n      }\n      \n      logReturn('MockManager.setupApiClientMocks', 'completed');\n    } catch (error: any) {\n      logReturn('MockManager.setupApiClientMocks', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Sets up console and notification mocks using qtests utilities\n   */\n  setupConsoleMocks(): ConsoleMocks {\n    logStart('MockManager.setupConsoleMocks');\n    \n    try {\n      // Dynamic import for mockConsole\n      const mockConsole = async () => {\n        const module = await import('../mockConsole.js');\n        return module.mockConsole;\n      };\n      \n      // Create console mocks - placeholder for now\n      const consoleMocks: ConsoleMocks = {\n        log: () => {},\n        error: () => {},\n        warn: () => {},\n        restore: () => {}\n      };\n      \n      this.mocks.set('console', consoleMocks);\n      this.restorations.set('console', consoleMocks.restore);\n      \n      logReturn('MockManager.setupConsoleMocks', consoleMocks);\n      return consoleMocks;\n    } catch (error: any) {\n      logReturn('MockManager.setupConsoleMocks', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Gets a specific mock by name\n   */\n  getMock(mockName: string): any | null {\n    logStart('MockManager.getMock', mockName);\n    \n    const mock = this.mocks.get(mockName);\n    if (mock) {\n      logReturn('MockManager.getMock', 'found');\n      return mock;\n    } else {\n      logReturn('MockManager.getMock', 'not found');\n      return null;\n    }\n  }\n\n  /**\n   * Clears all mocks and restores original functions\n   */\n  clearAll(): void {\n    logStart('MockManager.clearAll');\n    \n    try {\n      // Restore all mocked functions\n      this.restorations.forEach((restore, mockName) => {\n        try {\n          restore();\n        } catch (error) {\n          // Ignore restoration errors - function may already be restored\n        }\n      });\n      \n      // Clear all stored mocks and restorations\n      this.mocks.clear();\n      this.restorations.clear();\n      \n      logReturn('MockManager.clearAll', 'completed');\n    } catch (error: any) {\n      logReturn('MockManager.clearAll', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Sets up environment variable mocks\n   */\n  setupEnvironmentMocks(envVars: Record<string, string> = {}): () => void {\n    logStart('MockManager.setupEnvironmentMocks', envVars);\n    \n    try {\n      const originalEnv: Record<string, string | undefined> = {};\n      \n      // Backup and set environment variables\n      Object.entries(envVars).forEach(([key, value]) => {\n        originalEnv[key] = process.env[key];\n        process.env[key] = value;\n      });\n      \n      // Create restoration function\n      const restore = () => {\n        Object.entries(originalEnv).forEach(([key, value]) => {\n          if (value === undefined) {\n            delete process.env[key];\n          } else {\n            process.env[key] = value;\n          }\n        });\n      };\n      \n      this.mocks.set('environment', envVars);\n      this.restorations.set('environment', restore);\n      \n      logReturn('MockManager.setupEnvironmentMocks', restore);\n      return restore;\n    } catch (error: any) {\n      logReturn('MockManager.setupEnvironmentMocks', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Sets up HTTP response mocks\n   */\n  setupHttpMocks(responses: any[] = []): void {\n    logStart('MockManager.setupHttpMocks', responses);\n    \n    try {\n      // Simple HTTP mock setup\n      const httpMocks = {\n        responses: responses,\n        getResponse: (index: number) => responses[index] || { status: 404, data: null }\n      };\n      \n      this.mocks.set('http', httpMocks);\n      logReturn('MockManager.setupHttpMocks', 'completed');\n    } catch (error: any) {\n      logReturn('MockManager.setupHttpMocks', `error: ${error.message}`);\n      throw error;\n    }\n  }\n}\n\n// Export MockManager using ES module syntax\nexport { MockManager };"],"version":3}