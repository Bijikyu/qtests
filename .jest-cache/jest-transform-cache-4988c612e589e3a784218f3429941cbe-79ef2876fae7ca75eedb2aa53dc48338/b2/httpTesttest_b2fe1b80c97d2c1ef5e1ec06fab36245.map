{"version":3,"names":["supertest","createMockApp","require","describe","test","mockApp","client","expect","get","toBe","post","put","delete","patch","head","options","all","app","beforeEach","method","path","set","send","end","headers","testData","name","value","body","toEqual","data","expectedStatus","req","res","statusCode","setHeader","JSON","stringify","success","message","response","status","receivedBody","on","chunk","parse","id","receivedAuth","authorization","updated","error","parsed","text","fail","toContain","invalidApp","toBeDefined","Error","auth","username","password","token","authResponse","dataResponse"],"sources":["httpTest.test.js"],"sourcesContent":["/**\n * HTTP Test Client Tests\n * \n * This test suite verifies the lightweight HTTP testing client that provides\n * supertest-like functionality without external dependencies. Tests cover\n * request building, response handling, and integration with mock applications.\n * \n * Test coverage includes:\n * - HTTP method support (GET, POST, PUT, DELETE, etc.)\n * - Request configuration (headers, body, expectations)\n * - Response parsing and validation\n * - Mock application integration\n * - Error handling and edge cases\n */\n\nconst { supertest, createMockApp } = require('../utils/httpTest');\n\ndescribe('HTTP Test Client', () => {\n  \n  describe('supertest function', () => {\n    \n    test('creates Super instance with application', () => {\n      const mockApp = () => {};\n      const client = supertest(mockApp);\n      \n      // Verify client has HTTP method functions\n      expect(typeof client.get).toBe('function');\n      expect(typeof client.post).toBe('function');\n      expect(typeof client.put).toBe('function');\n      expect(typeof client.delete).toBe('function');\n      expect(typeof client.patch).toBe('function');\n      expect(typeof client.head).toBe('function');\n      expect(typeof client.options).toBe('function');\n      expect(typeof client.all).toBe('function');\n    });\n  });\n  \n  describe('HTTP method builders', () => {\n    \n    let app;\n    let client;\n    \n    beforeEach(() => {\n      app = createMockApp();\n      client = supertest(app);\n    });\n    \n    test('creates GET request builder', () => {\n      const test = client.get('/test');\n      \n      expect(test.method).toBe('GET');\n      expect(test.path).toBe('/test');\n      expect(typeof test.set).toBe('function');\n      expect(typeof test.send).toBe('function');\n      expect(typeof test.expect).toBe('function');\n      expect(typeof test.end).toBe('function');\n    });\n    \n    test('creates POST request builder', () => {\n      const test = client.post('/api/data');\n      \n      expect(test.method).toBe('POST');\n      expect(test.path).toBe('/api/data');\n    });\n    \n    test('creates PUT request builder', () => {\n      const test = client.put('/api/users/1');\n      \n      expect(test.method).toBe('PUT');\n      expect(test.path).toBe('/api/users/1');\n    });\n    \n    test('creates DELETE request builder', () => {\n      const test = client.delete('/api/users/1');\n      \n      expect(test.method).toBe('DELETE');\n      expect(test.path).toBe('/api/users/1');\n    });\n    \n    test('supports all HTTP methods', () => {\n      expect(client.patch('/test').method).toBe('PATCH');\n      expect(client.head('/test').method).toBe('HEAD');\n      expect(client.options('/test').method).toBe('OPTIONS');\n      expect(client.all('/test').method).toBe('ALL');\n    });\n  });\n  \n  describe('Request configuration', () => {\n    \n    let app;\n    let client;\n    \n    beforeEach(() => {\n      app = createMockApp();\n      client = supertest(app);\n    });\n    \n    test('sets request headers with chaining', () => {\n      const test = client.get('/test')\n        .set('Authorization', 'Bearer token')\n        .set('Content-Type', 'application/json');\n      \n      expect(test.headers['Authorization']).toBe('Bearer token');\n      expect(test.headers['Content-Type']).toBe('application/json');\n    });\n    \n    test('sets request body with chaining', () => {\n      const testData = { name: 'test', value: 123 };\n      const test = client.post('/test').send(testData);\n      \n      expect(test.body).toEqual(testData);\n    });\n    \n    test('auto-sets JSON content-type for object bodies', () => {\n      const test = client.post('/test').send({ data: 'test' });\n      \n      expect(test.headers['Content-Type']).toBe('application/json');\n    });\n    \n    test('does not override existing content-type', () => {\n      const test = client.post('/test')\n        .set('Content-Type', 'text/plain')\n        .send({ data: 'test' });\n      \n      expect(test.headers['Content-Type']).toBe('text/plain');\n    });\n    \n    test('sets expected status code', () => {\n      const test = client.get('/test').expect(200);\n      \n      expect(test.expectedStatus).toBe(200);\n    });\n    \n    test('supports method chaining', () => {\n      const test = client.post('/api/test')\n        .set('Authorization', 'Bearer token')\n        .send({ data: 'test' })\n        .expect(201);\n      \n      expect(test.headers['Authorization']).toBe('Bearer token');\n      expect(test.body).toEqual({ data: 'test' });\n      expect(test.expectedStatus).toBe(201);\n    });\n  });\n  \n  describe('Mock application integration', () => {\n    \n    test('createMockApp creates Express-style application', () => {\n      const app = createMockApp();\n      \n      expect(typeof app).toBe('function');\n      expect(typeof app.get).toBe('function');\n      expect(typeof app.post).toBe('function');\n      expect(typeof app.put).toBe('function');\n      expect(typeof app.delete).toBe('function');\n      expect(typeof app.patch).toBe('function');\n      expect(typeof app.all).toBe('function');\n    });\n    \n    test('mock app supports route registration', () => {\n      const app = createMockApp();\n      \n      // Should not throw when registering routes\n      app.get('/test', (req, res) => {\n        res.statusCode = 200;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({ success: true }));\n      });\n      \n      app.post('/api/data', (req, res) => {\n        res.statusCode = 201;\n        res.end();\n      });\n      \n      expect(true).toBe(true); // Routes registered without errors\n    });\n  });\n  \n  describe('HTTP request execution', () => {\n    \n    let app;\n    \n    beforeEach(() => {\n      app = createMockApp();\n    });\n    \n    test('executes GET request and returns response', async () => {\n      app.get('/test', (req, res) => {\n        res.statusCode = 200;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({ message: 'success' }));\n      });\n      \n      const response = await supertest(app).get('/test').end();\n      \n      expect(response.status).toBe(200);\n      expect(response.statusCode).toBe(200); // alias\n      expect(response.body).toEqual({ message: 'success' });\n      expect(response.headers['content-type']).toBe('application/json');\n    });\n    \n    test('executes POST request with JSON body', async () => {\n      let receivedBody = null;\n      \n      app.post('/api/data', (req, res) => {\n        let body = '';\n        req.on('data', chunk => { body += chunk; });\n        req.on('end', () => {\n          receivedBody = JSON.parse(body);\n          res.statusCode = 201;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({ id: 1, ...receivedBody }));\n        });\n      });\n      \n      const testData = { name: 'test', value: 123 };\n      const response = await supertest(app)\n        .post('/api/data')\n        .send(testData)\n        .end();\n      \n      expect(response.status).toBe(201);\n      expect(response.body).toEqual({ id: 1, name: 'test', value: 123 });\n      expect(receivedBody).toEqual(testData);\n    });\n    \n    test('executes PUT request with headers', async () => {\n      let receivedAuth = null;\n      \n      app.put('/api/users/1', (req, res) => {\n        receivedAuth = req.headers.authorization;\n        res.statusCode = 200;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({ updated: true }));\n      });\n      \n      const response = await supertest(app)\n        .put('/api/users/1')\n        .set('Authorization', 'Bearer test-token')\n        .end();\n      \n      expect(response.status).toBe(200);\n      expect(response.body).toEqual({ updated: true });\n      expect(receivedAuth).toBe('Bearer test-token');\n    });\n    \n    test('executes DELETE request', async () => {\n      app.delete('/api/users/1', (req, res) => {\n        res.statusCode = 204;\n        res.end();\n      });\n      \n      const response = await supertest(app).delete('/api/users/1').end();\n      \n      expect(response.status).toBe(204);\n    });\n    \n    test('handles 404 for unregistered routes', async () => {\n      const response = await supertest(app).get('/nonexistent').end();\n      \n      expect(response.status).toBe(404);\n      expect(response.body).toEqual({ error: 'Not Found' });\n    });\n  });\n  \n  describe('Response parsing', () => {\n    \n    let app;\n    \n    beforeEach(() => {\n      app = createMockApp();\n    });\n    \n    test('auto-parses JSON responses', async () => {\n      app.get('/json', (req, res) => {\n        res.statusCode = 200;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({ parsed: true, data: [1, 2, 3] }));\n      });\n      \n      const response = await supertest(app).get('/json').end();\n      \n      expect(response.body).toEqual({ parsed: true, data: [1, 2, 3] });\n      expect(typeof response.body).toBe('object');\n    });\n    \n    test('preserves raw text for non-JSON responses', async () => {\n      app.get('/text', (req, res) => {\n        res.statusCode = 200;\n        res.setHeader('Content-Type', 'text/plain');\n        res.end('Plain text response');\n      });\n      \n      const response = await supertest(app).get('/text').end();\n      \n      expect(response.body).toBe('Plain text response');\n      expect(response.text).toBe('Plain text response');\n    });\n    \n    test('handles malformed JSON gracefully', async () => {\n      app.get('/bad-json', (req, res) => {\n        res.statusCode = 200;\n        res.setHeader('Content-Type', 'application/json');\n        res.end('{ invalid json }');\n      });\n      \n      const response = await supertest(app).get('/bad-json').end();\n      \n      // Should fall back to raw text when JSON parsing fails\n      expect(response.body).toBe('{ invalid json }');\n      expect(response.text).toBe('{ invalid json }');\n    });\n  });\n  \n  describe('Status expectations', () => {\n    \n    let app;\n    \n    beforeEach(() => {\n      app = createMockApp();\n    });\n    \n    test('validates expected status codes', async () => {\n      app.get('/success', (req, res) => {\n        res.statusCode = 200;\n        res.end();\n      });\n      \n      // Should not throw for matching status\n      const response = await supertest(app).get('/success').expect(200).end();\n      expect(response.status).toBe(200);\n    });\n    \n    test('throws error for mismatched status codes', async () => {\n      app.get('/created', (req, res) => {\n        res.statusCode = 201;\n        res.end();\n      });\n      \n      try {\n        await supertest(app).get('/created').expect(200).end();\n        fail('Expected error for status mismatch');\n      } catch (error) {\n        expect(error.message).toContain('Expected status 200, got 201');\n      }\n    });\n  });\n  \n  describe('Error handling', () => {\n    \n    test('handles server creation errors gracefully', async () => {\n      const invalidApp = null;\n      \n      try {\n        await supertest(invalidApp).get('/test').end();\n        fail('Expected error for invalid app');\n      } catch (error) {\n        expect(error).toBeDefined();\n      }\n    }, 10000); // (increase timeout for error handling test)\n    \n    test('cleans up server on request failure', async () => {\n      const app = createMockApp();\n      \n      app.get('/error', (req, res) => {\n        // Simulate server error\n        throw new Error('Server error');\n      });\n      \n      try {\n        await supertest(app).get('/error').end();\n      } catch (error) {\n        // Error should be caught and server cleaned up\n        expect(error).toBeDefined();\n      }\n    });\n  });\n  \n  describe('Integration patterns', () => {\n    \n    test('supports complex request/response cycles', async () => {\n      const app = createMockApp();\n      \n      app.post('/auth', (req, res) => {\n        let body = '';\n        req.on('data', chunk => { body += chunk; });\n        req.on('end', () => {\n          const auth = JSON.parse(body);\n          if (auth.username === 'admin' && auth.password === 'secret') {\n            res.statusCode = 200;\n            res.setHeader('Content-Type', 'application/json');\n            res.end(JSON.stringify({ token: 'jwt-token' }));\n          } else {\n            res.statusCode = 401;\n            res.setHeader('Content-Type', 'application/json');\n            res.end(JSON.stringify({ error: 'Unauthorized' }));\n          }\n        });\n      });\n      \n      app.get('/protected', (req, res) => {\n        const auth = req.headers.authorization;\n        if (auth === 'Bearer jwt-token') {\n          res.statusCode = 200;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({ data: 'secret data' }));\n        } else {\n          res.statusCode = 403;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({ error: 'Forbidden' }));\n        }\n      });\n      \n      // Test authentication flow\n      const authResponse = await supertest(app)\n        .post('/auth')\n        .send({ username: 'admin', password: 'secret' })\n        .expect(200)\n        .end();\n      \n      expect(authResponse.body.token).toBe('jwt-token');\n      \n      // Test protected endpoint\n      const dataResponse = await supertest(app)\n        .get('/protected')\n        .set('Authorization', 'Bearer jwt-token')\n        .expect(200)\n        .end();\n      \n      expect(dataResponse.body.data).toBe('secret data');\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}