2cf0a9352e323c54e2a3df10238a7215
"use strict";
/**
 * Environment Management Utilities - TypeScript ES Module Implementation
 *
 * This module provides utilities specifically for managing test environments,
 * including environment variable manipulation and test isolation. These utilities
 * help create isolated, predictable test environments without side effects.
 *
 * Design philosophy:
 * - Environment isolation to prevent test interference
 * - Predictable test conditions with known values
 * - Easy setup and teardown of test environments
 * - Simple, focused functionality for environment management
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.testHelpers = exports.offlineMode = exports.testEnv = void 0;
// Import environment management utilities using ES module syntax
const testEnv_js_1 = require("../utils/testEnv.js");
const offlineMode_js_1 = require("../utils/offlineMode.js");
const testHelpers_js_1 = require("../utils/testHelpers.js");
Object.defineProperty(exports, "testHelpers", { enumerable: true, get: function () { return testHelpers_js_1.testHelpers; } });
// Create testEnv object from individual functions
const testEnv = {
    defaultEnv: testEnv_js_1.defaultEnv,
    setTestEnv: testEnv_js_1.setTestEnv,
    saveEnv: testEnv_js_1.saveEnv,
    restoreEnv: testEnv_js_1.restoreEnv,
    attachMockSpies: testEnv_js_1.attachMockSpies,
    makeLoggedMock: testEnv_js_1.makeLoggedMock,
    createScheduleMock: testEnv_js_1.createScheduleMock,
    createQerrorsMock: testEnv_js_1.createQerrorsMock,
    createAxiosMock: testEnv_js_1.createAxiosMock,
    resetMocks: testEnv_js_1.resetMocks,
    initSearchTest: testEnv_js_1.initSearchTest
};
exports.testEnv = testEnv;
// Create offlineMode object from individual functions
const offlineMode = {
    setOfflineMode: offlineMode_js_1.setOfflineMode,
    isOfflineMode: offlineMode_js_1.isOfflineMode,
    getAxios: offlineMode_js_1.getAxios,
    getQerrors: offlineMode_js_1.getQerrors,
    getEnvironmentState: offlineMode_js_1.getEnvironmentState,
    createEnvironmentAdapters: offlineMode_js_1.createEnvironmentAdapters,
    clearOfflineCache: offlineMode_js_1.clearOfflineCache
};
exports.offlineMode = offlineMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvZW52VXRpbHMudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7R0FZRzs7O0FBRUgsaUVBQWlFO0FBQ2pFLG9EQVk2QjtBQUM3Qiw0REFRaUM7QUFDakMsNERBQXNEO0FBZ0NwRCw0RkFoQ08sNEJBQVcsT0FnQ1A7QUE5QmIsa0RBQWtEO0FBQ2xELE1BQU0sT0FBTyxHQUFHO0lBQ2QsVUFBVSxFQUFWLHVCQUFVO0lBQ1YsVUFBVSxFQUFWLHVCQUFVO0lBQ1YsT0FBTyxFQUFQLG9CQUFPO0lBQ1AsVUFBVSxFQUFWLHVCQUFVO0lBQ1YsZUFBZSxFQUFmLDRCQUFlO0lBQ2YsY0FBYyxFQUFkLDJCQUFjO0lBQ2Qsa0JBQWtCLEVBQWxCLCtCQUFrQjtJQUNsQixpQkFBaUIsRUFBakIsOEJBQWlCO0lBQ2pCLGVBQWUsRUFBZiw0QkFBZTtJQUNmLFVBQVUsRUFBVix1QkFBVTtJQUNWLGNBQWMsRUFBZCwyQkFBYztDQUNmLENBQUM7QUFlQSwwQkFBTztBQWJULHNEQUFzRDtBQUN0RCxNQUFNLFdBQVcsR0FBRztJQUNsQixjQUFjLEVBQWQsK0JBQWM7SUFDZCxhQUFhLEVBQWIsOEJBQWE7SUFDYixRQUFRLEVBQVIseUJBQVE7SUFDUixVQUFVLEVBQVYsMkJBQVU7SUFDVixtQkFBbUIsRUFBbkIsb0NBQW1CO0lBQ25CLHlCQUF5QixFQUF6QiwwQ0FBeUI7SUFDekIsaUJBQWlCLEVBQWpCLGtDQUFpQjtDQUNsQixDQUFDO0FBS0Esa0NBQVciLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvZW52VXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFbnZpcm9ubWVudCBNYW5hZ2VtZW50IFV0aWxpdGllcyAtIFR5cGVTY3JpcHQgRVMgTW9kdWxlIEltcGxlbWVudGF0aW9uXG4gKiBcbiAqIFRoaXMgbW9kdWxlIHByb3ZpZGVzIHV0aWxpdGllcyBzcGVjaWZpY2FsbHkgZm9yIG1hbmFnaW5nIHRlc3QgZW52aXJvbm1lbnRzLFxuICogaW5jbHVkaW5nIGVudmlyb25tZW50IHZhcmlhYmxlIG1hbmlwdWxhdGlvbiBhbmQgdGVzdCBpc29sYXRpb24uIFRoZXNlIHV0aWxpdGllc1xuICogaGVscCBjcmVhdGUgaXNvbGF0ZWQsIHByZWRpY3RhYmxlIHRlc3QgZW52aXJvbm1lbnRzIHdpdGhvdXQgc2lkZSBlZmZlY3RzLlxuICogXG4gKiBEZXNpZ24gcGhpbG9zb3BoeTpcbiAqIC0gRW52aXJvbm1lbnQgaXNvbGF0aW9uIHRvIHByZXZlbnQgdGVzdCBpbnRlcmZlcmVuY2VcbiAqIC0gUHJlZGljdGFibGUgdGVzdCBjb25kaXRpb25zIHdpdGgga25vd24gdmFsdWVzXG4gKiAtIEVhc3kgc2V0dXAgYW5kIHRlYXJkb3duIG9mIHRlc3QgZW52aXJvbm1lbnRzXG4gKiAtIFNpbXBsZSwgZm9jdXNlZCBmdW5jdGlvbmFsaXR5IGZvciBlbnZpcm9ubWVudCBtYW5hZ2VtZW50XG4gKi9cblxuLy8gSW1wb3J0IGVudmlyb25tZW50IG1hbmFnZW1lbnQgdXRpbGl0aWVzIHVzaW5nIEVTIG1vZHVsZSBzeW50YXhcbmltcG9ydCB7XG4gIGRlZmF1bHRFbnYsXG4gIHNldFRlc3RFbnYsXG4gIHNhdmVFbnYsXG4gIHJlc3RvcmVFbnYsXG4gIGF0dGFjaE1vY2tTcGllcyxcbiAgbWFrZUxvZ2dlZE1vY2ssXG4gIGNyZWF0ZVNjaGVkdWxlTW9jayxcbiAgY3JlYXRlUWVycm9yc01vY2ssXG4gIGNyZWF0ZUF4aW9zTW9jayxcbiAgcmVzZXRNb2NrcyxcbiAgaW5pdFNlYXJjaFRlc3Rcbn0gZnJvbSAnLi4vdXRpbHMvdGVzdEVudi5qcyc7XG5pbXBvcnQgeyBcbiAgc2V0T2ZmbGluZU1vZGUsXG4gIGlzT2ZmbGluZU1vZGUsXG4gIGdldEF4aW9zLFxuICBnZXRRZXJyb3JzLFxuICBnZXRFbnZpcm9ubWVudFN0YXRlLFxuICBjcmVhdGVFbnZpcm9ubWVudEFkYXB0ZXJzLFxuICBjbGVhck9mZmxpbmVDYWNoZVxufSBmcm9tICcuLi91dGlscy9vZmZsaW5lTW9kZS5qcyc7XG5pbXBvcnQgeyB0ZXN0SGVscGVycyB9IGZyb20gJy4uL3V0aWxzL3Rlc3RIZWxwZXJzLmpzJztcblxuLy8gQ3JlYXRlIHRlc3RFbnYgb2JqZWN0IGZyb20gaW5kaXZpZHVhbCBmdW5jdGlvbnNcbmNvbnN0IHRlc3RFbnYgPSB7XG4gIGRlZmF1bHRFbnYsXG4gIHNldFRlc3RFbnYsXG4gIHNhdmVFbnYsXG4gIHJlc3RvcmVFbnYsXG4gIGF0dGFjaE1vY2tTcGllcyxcbiAgbWFrZUxvZ2dlZE1vY2ssXG4gIGNyZWF0ZVNjaGVkdWxlTW9jayxcbiAgY3JlYXRlUWVycm9yc01vY2ssXG4gIGNyZWF0ZUF4aW9zTW9jayxcbiAgcmVzZXRNb2NrcyxcbiAgaW5pdFNlYXJjaFRlc3Rcbn07XG5cbi8vIENyZWF0ZSBvZmZsaW5lTW9kZSBvYmplY3QgZnJvbSBpbmRpdmlkdWFsIGZ1bmN0aW9uc1xuY29uc3Qgb2ZmbGluZU1vZGUgPSB7XG4gIHNldE9mZmxpbmVNb2RlLFxuICBpc09mZmxpbmVNb2RlLFxuICBnZXRBeGlvcyxcbiAgZ2V0UWVycm9ycyxcbiAgZ2V0RW52aXJvbm1lbnRTdGF0ZSxcbiAgY3JlYXRlRW52aXJvbm1lbnRBZGFwdGVycyxcbiAgY2xlYXJPZmZsaW5lQ2FjaGVcbn07XG5cbi8vIEV4cG9ydCB0aGUgY29yZSB1dGlsaXRpZXMgdGhhdCBvdXIgVHlwZVNjcmlwdCBpbmRleCBuZWVkc1xuZXhwb3J0IHtcbiAgdGVzdEVudiwgICAgIC8vIGVudmlyb25tZW50IHZhcmlhYmxlIG1hbmFnZW1lbnQgYW5kIHRlc3QgaXNvbGF0aW9uXG4gIG9mZmxpbmVNb2RlLCAvLyBvZmZsaW5lL29ubGluZSBtb2RlIHV0aWxpdHkgd2l0aCBhdXRvbWF0aWMgc3dpdGNoaW5nXG4gIHRlc3RIZWxwZXJzICAvLyBhZHZhbmNlZCB0ZXN0aW5nIHV0aWxpdGllcyBmb3IgbW9kdWxlIHJlbG9hZGluZyBhbmQgbW9ja2luZ1xufTsiXSwidmVyc2lvbiI6M30=