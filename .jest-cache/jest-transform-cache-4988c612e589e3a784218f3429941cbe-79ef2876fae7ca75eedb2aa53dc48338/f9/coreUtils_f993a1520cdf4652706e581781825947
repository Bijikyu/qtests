cc6b91981c18f0023dc0b3ed3851663a
/**
 * Core Testing Utilities
 * 
 * This module provides the fundamental testing utilities that form the backbone
 * of the qtests framework. These utilities are used across different testing
 * scenarios and provide basic functionality for method stubbing and console mocking.
 * 
 * Design philosophy:
 * - Simple, focused utilities that do one thing well
 * - Minimal dependencies to avoid circular imports
 * - Framework-agnostic implementations
 * - Consistent API patterns across utilities
 * 
 * Architecture rationale:
 * This module serves as the foundation layer because:
 * 1. These utilities have no dependencies on other qtests modules
 * 2. They provide primitive operations that other modules build upon
 * 3. Keeping them separate prevents circular dependency issues
 * 4. They can be used independently without importing the full qtests suite
 */

// Import the core stubMethod utility from utils directory
// Placed in utils/ rather than lib/ because it's a pure utility function
// with zero dependencies on qtests-specific architecture or other modules
// This separation enables independent use and prevents circular dependencies
const stubMethod = require('../utils/stubMethod');

// Import mockConsole from its dedicated utility module using destructuring
// Destructuring extracts only mockConsole from module exports for clean imports
// This pattern allows the mockConsole module to export additional utilities in future
// while maintaining backward compatibility and explicit import declarations
const {
  mockConsole
} = require('../utils/mockConsole');

/**
 * Export core testing utilities
 * 
 * These are the most commonly used utilities in the qtests framework.
 * They are exported at the top level because:
 * 1. stubMethod and mockConsole are used in 80% of testing scenarios
 * 2. They have simple, predictable APIs that don't require namespacing
 * 3. They form the foundation that other utilities build upon
 * 4. Frequent usage justifies top-level access for developer convenience
 * 
 * Export strategy:
 * - Direct object export rather than individual exports for consistency
 * - Descriptive property names that clearly indicate purpose
 * - Comments explain the primary use case for each utility
 */
// Export core testing utilities using object shorthand syntax
// Object export pattern chosen over individual exports for several reasons:
// 1. Provides clear namespace organization for related utilities
// 2. Enables easier destructuring imports in consuming code
// 3. Maintains consistent export pattern across all qtests modules
// 4. Allows for future expansion without breaking existing imports
module.exports = {
  stubMethod,
  // Method replacement utility for isolating dependencies during testing
  mockConsole // Console output capture utility for testing logging behavior without pollution
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdHViTWV0aG9kIiwicmVxdWlyZSIsIm1vY2tDb25zb2xlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImNvcmVVdGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQ29yZSBUZXN0aW5nIFV0aWxpdGllc1xuICogXG4gKiBUaGlzIG1vZHVsZSBwcm92aWRlcyB0aGUgZnVuZGFtZW50YWwgdGVzdGluZyB1dGlsaXRpZXMgdGhhdCBmb3JtIHRoZSBiYWNrYm9uZVxuICogb2YgdGhlIHF0ZXN0cyBmcmFtZXdvcmsuIFRoZXNlIHV0aWxpdGllcyBhcmUgdXNlZCBhY3Jvc3MgZGlmZmVyZW50IHRlc3RpbmdcbiAqIHNjZW5hcmlvcyBhbmQgcHJvdmlkZSBiYXNpYyBmdW5jdGlvbmFsaXR5IGZvciBtZXRob2Qgc3R1YmJpbmcgYW5kIGNvbnNvbGUgbW9ja2luZy5cbiAqIFxuICogRGVzaWduIHBoaWxvc29waHk6XG4gKiAtIFNpbXBsZSwgZm9jdXNlZCB1dGlsaXRpZXMgdGhhdCBkbyBvbmUgdGhpbmcgd2VsbFxuICogLSBNaW5pbWFsIGRlcGVuZGVuY2llcyB0byBhdm9pZCBjaXJjdWxhciBpbXBvcnRzXG4gKiAtIEZyYW1ld29yay1hZ25vc3RpYyBpbXBsZW1lbnRhdGlvbnNcbiAqIC0gQ29uc2lzdGVudCBBUEkgcGF0dGVybnMgYWNyb3NzIHV0aWxpdGllc1xuICogXG4gKiBBcmNoaXRlY3R1cmUgcmF0aW9uYWxlOlxuICogVGhpcyBtb2R1bGUgc2VydmVzIGFzIHRoZSBmb3VuZGF0aW9uIGxheWVyIGJlY2F1c2U6XG4gKiAxLiBUaGVzZSB1dGlsaXRpZXMgaGF2ZSBubyBkZXBlbmRlbmNpZXMgb24gb3RoZXIgcXRlc3RzIG1vZHVsZXNcbiAqIDIuIFRoZXkgcHJvdmlkZSBwcmltaXRpdmUgb3BlcmF0aW9ucyB0aGF0IG90aGVyIG1vZHVsZXMgYnVpbGQgdXBvblxuICogMy4gS2VlcGluZyB0aGVtIHNlcGFyYXRlIHByZXZlbnRzIGNpcmN1bGFyIGRlcGVuZGVuY3kgaXNzdWVzXG4gKiA0LiBUaGV5IGNhbiBiZSB1c2VkIGluZGVwZW5kZW50bHkgd2l0aG91dCBpbXBvcnRpbmcgdGhlIGZ1bGwgcXRlc3RzIHN1aXRlXG4gKi9cblxuLy8gSW1wb3J0IHRoZSBjb3JlIHN0dWJNZXRob2QgdXRpbGl0eSBmcm9tIHV0aWxzIGRpcmVjdG9yeVxuLy8gUGxhY2VkIGluIHV0aWxzLyByYXRoZXIgdGhhbiBsaWIvIGJlY2F1c2UgaXQncyBhIHB1cmUgdXRpbGl0eSBmdW5jdGlvblxuLy8gd2l0aCB6ZXJvIGRlcGVuZGVuY2llcyBvbiBxdGVzdHMtc3BlY2lmaWMgYXJjaGl0ZWN0dXJlIG9yIG90aGVyIG1vZHVsZXNcbi8vIFRoaXMgc2VwYXJhdGlvbiBlbmFibGVzIGluZGVwZW5kZW50IHVzZSBhbmQgcHJldmVudHMgY2lyY3VsYXIgZGVwZW5kZW5jaWVzXG5jb25zdCBzdHViTWV0aG9kID0gcmVxdWlyZSgnLi4vdXRpbHMvc3R1Yk1ldGhvZCcpO1xuXG4vLyBJbXBvcnQgbW9ja0NvbnNvbGUgZnJvbSBpdHMgZGVkaWNhdGVkIHV0aWxpdHkgbW9kdWxlIHVzaW5nIGRlc3RydWN0dXJpbmdcbi8vIERlc3RydWN0dXJpbmcgZXh0cmFjdHMgb25seSBtb2NrQ29uc29sZSBmcm9tIG1vZHVsZSBleHBvcnRzIGZvciBjbGVhbiBpbXBvcnRzXG4vLyBUaGlzIHBhdHRlcm4gYWxsb3dzIHRoZSBtb2NrQ29uc29sZSBtb2R1bGUgdG8gZXhwb3J0IGFkZGl0aW9uYWwgdXRpbGl0aWVzIGluIGZ1dHVyZVxuLy8gd2hpbGUgbWFpbnRhaW5pbmcgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhbmQgZXhwbGljaXQgaW1wb3J0IGRlY2xhcmF0aW9uc1xuY29uc3QgeyBtb2NrQ29uc29sZSB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvbW9ja0NvbnNvbGUnKTtcblxuLyoqXG4gKiBFeHBvcnQgY29yZSB0ZXN0aW5nIHV0aWxpdGllc1xuICogXG4gKiBUaGVzZSBhcmUgdGhlIG1vc3QgY29tbW9ubHkgdXNlZCB1dGlsaXRpZXMgaW4gdGhlIHF0ZXN0cyBmcmFtZXdvcmsuXG4gKiBUaGV5IGFyZSBleHBvcnRlZCBhdCB0aGUgdG9wIGxldmVsIGJlY2F1c2U6XG4gKiAxLiBzdHViTWV0aG9kIGFuZCBtb2NrQ29uc29sZSBhcmUgdXNlZCBpbiA4MCUgb2YgdGVzdGluZyBzY2VuYXJpb3NcbiAqIDIuIFRoZXkgaGF2ZSBzaW1wbGUsIHByZWRpY3RhYmxlIEFQSXMgdGhhdCBkb24ndCByZXF1aXJlIG5hbWVzcGFjaW5nXG4gKiAzLiBUaGV5IGZvcm0gdGhlIGZvdW5kYXRpb24gdGhhdCBvdGhlciB1dGlsaXRpZXMgYnVpbGQgdXBvblxuICogNC4gRnJlcXVlbnQgdXNhZ2UganVzdGlmaWVzIHRvcC1sZXZlbCBhY2Nlc3MgZm9yIGRldmVsb3BlciBjb252ZW5pZW5jZVxuICogXG4gKiBFeHBvcnQgc3RyYXRlZ3k6XG4gKiAtIERpcmVjdCBvYmplY3QgZXhwb3J0IHJhdGhlciB0aGFuIGluZGl2aWR1YWwgZXhwb3J0cyBmb3IgY29uc2lzdGVuY3lcbiAqIC0gRGVzY3JpcHRpdmUgcHJvcGVydHkgbmFtZXMgdGhhdCBjbGVhcmx5IGluZGljYXRlIHB1cnBvc2VcbiAqIC0gQ29tbWVudHMgZXhwbGFpbiB0aGUgcHJpbWFyeSB1c2UgY2FzZSBmb3IgZWFjaCB1dGlsaXR5XG4gKi9cbi8vIEV4cG9ydCBjb3JlIHRlc3RpbmcgdXRpbGl0aWVzIHVzaW5nIG9iamVjdCBzaG9ydGhhbmQgc3ludGF4XG4vLyBPYmplY3QgZXhwb3J0IHBhdHRlcm4gY2hvc2VuIG92ZXIgaW5kaXZpZHVhbCBleHBvcnRzIGZvciBzZXZlcmFsIHJlYXNvbnM6XG4vLyAxLiBQcm92aWRlcyBjbGVhciBuYW1lc3BhY2Ugb3JnYW5pemF0aW9uIGZvciByZWxhdGVkIHV0aWxpdGllc1xuLy8gMi4gRW5hYmxlcyBlYXNpZXIgZGVzdHJ1Y3R1cmluZyBpbXBvcnRzIGluIGNvbnN1bWluZyBjb2RlXG4vLyAzLiBNYWludGFpbnMgY29uc2lzdGVudCBleHBvcnQgcGF0dGVybiBhY3Jvc3MgYWxsIHF0ZXN0cyBtb2R1bGVzXG4vLyA0LiBBbGxvd3MgZm9yIGZ1dHVyZSBleHBhbnNpb24gd2l0aG91dCBicmVha2luZyBleGlzdGluZyBpbXBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3R1Yk1ldGhvZCwgICAvLyBNZXRob2QgcmVwbGFjZW1lbnQgdXRpbGl0eSBmb3IgaXNvbGF0aW5nIGRlcGVuZGVuY2llcyBkdXJpbmcgdGVzdGluZ1xuICBtb2NrQ29uc29sZSAgIC8vIENvbnNvbGUgb3V0cHV0IGNhcHR1cmUgdXRpbGl0eSBmb3IgdGVzdGluZyBsb2dnaW5nIGJlaGF2aW9yIHdpdGhvdXQgcG9sbHV0aW9uXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsVUFBVSxHQUFHQyxPQUFPLENBQUMscUJBQXFCLENBQUM7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtFQUFFQztBQUFZLENBQUMsR0FBR0QsT0FBTyxDQUFDLHNCQUFzQixDQUFDOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUUsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkosVUFBVTtFQUFJO0VBQ2RFLFdBQVcsQ0FBRztBQUNoQixDQUFDIiwiaWdub3JlTGlzdCI6W119