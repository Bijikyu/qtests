{"version":3,"names":["runTestSuite","suiteName","testFunctions","console","log","repeat","passed","failed","failures","testName","testFn","error","message","push","test","length","forEach","runTestSuites","suites","totalPassed","totalFailed","allFailures","suite","results","name","tests","success","createAssertions","equal","actual","expected","Error","notEqual","truthy","value","falsy","throws","fn","doesNotThrow","contains","array","Array","isArray","includes","join","hasProperty","obj","property","Object","keys","module","exports"],"sources":["runTestSuite.js"],"sourcesContent":["/**\n * Simple Test Suite Runner\n * \n * Lightweight test runner for simple testing scenarios where Jest or other\n * full-featured test frameworks might be overkill. Provides basic test\n * execution with pass/fail tracking and formatted console output.\n * \n * Features:\n * - Simple test function execution with error handling\n * - Formatted console output with visual indicators\n * - Pass/fail statistics tracking\n * - Detailed failure reporting\n * - Zero dependencies beyond Node.js built-ins\n */\n\n/**\n * Run a test suite with multiple test functions\n * \n * Executes an array of test functions, tracking passes and failures.\n * Each test function should throw an error if the test fails, or\n * complete successfully if the test passes.\n * \n * @param {string} suiteName - Name of the test suite for display\n * @param {Array<[string, Function]>} testFunctions - Array of [testName, testFunction] tuples\n * @returns {Object} Test results with passed, failed counts and failure details\n * \n * @example\n * const results = runTestSuite('Math Tests', [\n *   ['addition works', () => {\n *     if (2 + 2 !== 4) throw new Error('Math is broken');\n *   }],\n *   ['subtraction works', () => {\n *     if (5 - 3 !== 2) throw new Error('Subtraction failed');\n *   }]\n * ]);\n * console.log(`${results.passed} passed, ${results.failed} failed`);\n */\nfunction runTestSuite(suiteName, testFunctions) {\n  console.log(`\\nüîß Running: ${suiteName}`);\n  console.log('-'.repeat(40));\n  \n  let passed = 0;\n  let failed = 0;\n  const failures = [];\n  \n  for (const [testName, testFn] of testFunctions) {\n    try {\n      console.log(`  ‚ñ∂ ${testName}`);\n      testFn();\n      console.log(`    ‚úÖ PASS`);\n      passed++;\n    } catch (error) {\n      console.log(`    ‚ùå FAIL: ${error.message}`);\n      failed++;\n      failures.push({ test: testName, error: error.message });\n    }\n  }\n  \n  // Print summary\n  console.log('-'.repeat(40));\n  console.log(`Summary: ${passed} passed, ${failed} failed`);\n  \n  if (failures.length > 0) {\n    console.log('\\nFailures:');\n    failures.forEach(({ test, error }) => {\n      console.log(`  ‚ùå ${test}: ${error}`);\n    });\n  }\n  \n  return { passed, failed, failures };\n}\n\n/**\n * Run multiple test suites sequentially\n * \n * Executes multiple test suites and provides an overall summary.\n * Useful for organizing tests into logical groups.\n * \n * @param {Array<Object>} suites - Array of suite objects with name and tests\n * @returns {Object} Overall test results\n * \n * @example\n * const results = runTestSuites([\n *   {\n *     name: 'Math Tests',\n *     tests: [\n *       ['addition', () => { if (2+2 !== 4) throw new Error('fail'); }]\n *     ]\n *   },\n *   {\n *     name: 'String Tests', \n *     tests: [\n *       ['concat', () => { if ('a'+'b' !== 'ab') throw new Error('fail'); }]\n *     ]\n *   }\n * ]);\n */\nfunction runTestSuites(suites) {\n  let totalPassed = 0;\n  let totalFailed = 0;\n  const allFailures = [];\n  \n  console.log('\\nüß™ Running Test Suites');\n  console.log('='.repeat(50));\n  \n  for (const suite of suites) {\n    const results = runTestSuite(suite.name, suite.tests);\n    totalPassed += results.passed;\n    totalFailed += results.failed;\n    allFailures.push(...results.failures);\n  }\n  \n  console.log('\\n' + '='.repeat(50));\n  console.log(`üèÅ Overall Results: ${totalPassed} passed, ${totalFailed} failed`);\n  \n  if (allFailures.length > 0) {\n    console.log(`\\nüìã All Failures (${allFailures.length}):`);\n    allFailures.forEach(({ test, error }) => {\n      console.log(`  ‚ùå ${test}: ${error}`);\n    });\n  } else {\n    console.log('\\nüéâ All tests passed!');\n  }\n  \n  return {\n    passed: totalPassed,\n    failed: totalFailed,\n    failures: allFailures,\n    success: totalFailed === 0\n  };\n}\n\n/**\n * Create a simple assertion helper for tests\n * \n * Provides basic assertion functions that throw descriptive errors\n * when conditions aren't met. Useful for writing clear test functions.\n * \n * @returns {Object} Assertion helper functions\n * \n * @example\n * const assert = createAssertions();\n * \n * runTestSuite('Example Tests', [\n *   ['equality test', () => {\n *     assert.equal(2 + 2, 4, 'Addition should work');\n *     assert.notEqual(2 + 2, 5, 'Addition should not equal 5');\n *   }]\n * ]);\n */\nfunction createAssertions() {\n  return {\n    /**\n     * Assert that two values are equal\n     */\n    equal(actual, expected, message = 'Values should be equal') {\n      if (actual !== expected) {\n        throw new Error(`${message}. Expected: ${expected}, Actual: ${actual}`);\n      }\n    },\n    \n    /**\n     * Assert that two values are not equal\n     */\n    notEqual(actual, expected, message = 'Values should not be equal') {\n      if (actual === expected) {\n        throw new Error(`${message}. Both values are: ${actual}`);\n      }\n    },\n    \n    /**\n     * Assert that a value is truthy\n     */\n    truthy(value, message = 'Value should be truthy') {\n      if (!value) {\n        throw new Error(`${message}. Got: ${value}`);\n      }\n    },\n    \n    /**\n     * Assert that a value is falsy\n     */\n    falsy(value, message = 'Value should be falsy') {\n      if (value) {\n        throw new Error(`${message}. Got: ${value}`);\n      }\n    },\n    \n    /**\n     * Assert that a function throws an error\n     */\n    throws(fn, message = 'Function should throw an error') {\n      try {\n        fn();\n        throw new Error(`${message}. No error was thrown.`);\n      } catch (error) {\n        // Expected behavior - function threw an error\n        if (error.message === `${message}. No error was thrown.`) {\n          throw error; // Re-throw our assertion error\n        }\n        // Otherwise, the function threw as expected\n      }\n    },\n    \n    /**\n     * Assert that a function does not throw an error\n     */\n    doesNotThrow(fn, message = 'Function should not throw an error') {\n      try {\n        fn();\n      } catch (error) {\n        throw new Error(`${message}. Error thrown: ${error.message}`);\n      }\n    },\n    \n    /**\n     * Assert that an array contains a specific value\n     */\n    contains(array, value, message = 'Array should contain value') {\n      if (!Array.isArray(array)) {\n        throw new Error(`${message}. Expected array, got: ${typeof array}`);\n      }\n      if (!array.includes(value)) {\n        throw new Error(`${message}. Array: [${array.join(', ')}], Value: ${value}`);\n      }\n    },\n    \n    /**\n     * Assert that an object has a specific property\n     */\n    hasProperty(obj, property, message = 'Object should have property') {\n      if (typeof obj !== 'object' || obj === null) {\n        throw new Error(`${message}. Expected object, got: ${typeof obj}`);\n      }\n      if (!(property in obj)) {\n        throw new Error(`${message}. Object keys: [${Object.keys(obj).join(', ')}], Property: ${property}`);\n      }\n    }\n  };\n}\n\nmodule.exports = {\n  runTestSuite,\n  runTestSuites,\n  createAssertions\n};"],"mappings":"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","ignoreList":[]}