{"file":"/home/runner/workspace/utils/helpers/keyGenerator.ts","mappings":"AAAA;;;;;GAKG;AAEH;;;;;;;;;;GAUG;AACH,SAAS,WAAW,CAAC,SAAiB,EAAE,EAAE,MAAe;IACvD,OAAO,CAAC,GAAG,CAAC,sCAAsC,MAAM,eAAe,MAAM,IAAI,MAAM,EAAE,CAAC,CAAC;IAE3F,IAAI,CAAC;QACH,2CAA2C;QAC3C,MAAM,KAAK,GAAG,gEAAgE,CAAC;QAC/E,IAAI,MAAM,GAAG,EAAE,CAAC;QAEhB,6BAA6B;QAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;QACnE,CAAC;QAED,yBAAyB;QACzB,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;QAEzD,OAAO,CAAC,GAAG,CAAC,4CAA4C,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QAC3E,OAAO,QAAQ,CAAC;IAElB,CAAC;IAAC,OAAO,GAAQ,EAAE,CAAC;QAClB,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QAChD,MAAM,GAAG,CAAC;IACZ,CAAC;AACH,CAAC;AAED,yDAAyD;AACzD,OAAO,EACL,WAAW,EACZ,CAAC","names":[],"sources":["/home/runner/workspace/utils/helpers/keyGenerator.ts"],"sourcesContent":["/**\n * Key Generation Utility - TypeScript Implementation\n * \n * This module provides functionality for generating random keys and identifiers\n * for testing scenarios where unique values are needed.\n */\n\n/**\n * Generate a random key for testing purposes\n * \n * This function creates a random string that can be used as API keys,\n * session tokens, or other identifiers in testing scenarios where\n * unique values are required.\n * \n * @param length - Length of the generated key (default: 32)\n * @param prefix - Optional prefix to add to the generated key\n * @returns Random key string suitable for testing\n */\nfunction generateKey(length: number = 32, prefix?: string): string {\n  console.log(`generateKey is running with length ${length} and prefix ${prefix || 'none'}`);\n  \n  try {\n    // Character set for generating random keys\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    \n    // Generate random characters\n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    \n    // Add prefix if provided\n    const finalKey = prefix ? `${prefix}_${result}` : result;\n    \n    console.log(`generateKey is returning key with length ${finalKey.length}`);\n    return finalKey;\n    \n  } catch (err: any) {\n    console.log(`generateKey error ${err.message}`);\n    throw err;\n  }\n}\n\n// Export key generation utilities using ES module syntax\nexport {\n  generateKey\n};"],"version":3}