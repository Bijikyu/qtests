03f8a0a672b94041dbef00b1fb99cd23
"use strict";
/**
 * Environment Management Utilities - TypeScript ES Module Implementation
 *
 * This module provides utilities specifically for managing test environments,
 * including environment variable manipulation and test isolation. These utilities
 * help create isolated, predictable test environments without side effects.
 *
 * Design philosophy:
 * - Environment isolation to prevent test interference
 * - Predictable test conditions with known values
 * - Easy setup and teardown of test environments
 * - Simple, focused functionality for environment management
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.testHelpers = exports.offlineMode = exports.testEnv = void 0;
// Import environment management utilities using ES module syntax
const testEnv_js_1 = require("../utils/testEnv.js");
const offlineMode_js_1 = require("../utils/offlineMode.js");
const testHelpers_js_1 = require("../utils/testHelpers.js");
// Create testEnv object from individual functions
const testEnv = {
    defaultEnv: testEnv_js_1.defaultEnv,
    setTestEnv: testEnv_js_1.setTestEnv,
    saveEnv: testEnv_js_1.saveEnv,
    restoreEnv: testEnv_js_1.restoreEnv,
    attachMockSpies: testEnv_js_1.attachMockSpies,
    makeLoggedMock: testEnv_js_1.makeLoggedMock,
    createScheduleMock: testEnv_js_1.createScheduleMock,
    createQerrorsMock: testEnv_js_1.createQerrorsMock,
    createAxiosMock: testEnv_js_1.createAxiosMock,
    resetMocks: testEnv_js_1.resetMocks,
    initSearchTest: testEnv_js_1.initSearchTest
};
exports.testEnv = testEnv;
// Create offlineMode object from individual functions
const offlineMode = {
    setOfflineMode: offlineMode_js_1.setOfflineMode,
    isOfflineMode: offlineMode_js_1.isOfflineMode,
    getAxios: offlineMode_js_1.getAxios,
    getQerrors: offlineMode_js_1.getQerrors,
    getEnvironmentState: offlineMode_js_1.getEnvironmentState,
    createEnvironmentAdapters: offlineMode_js_1.createEnvironmentAdapters,
    clearOfflineCache: offlineMode_js_1.clearOfflineCache
};
exports.offlineMode = offlineMode;
// Create testHelpers object from individual functions
const testHelpers = {
    reload: testHelpers_js_1.reload,
    moduleReloadLock: testHelpers_js_1.moduleReloadLock,
    stubQerrors: testHelpers_js_1.stubQerrors,
    withMockConsole: testHelpers_js_1.withMockConsole,
    createJsonRes: testHelpers_js_1.createJsonRes,
    createRes: testHelpers_js_1.createRes,
    backupEnvVars: testHelpers_js_1.backupEnvVars,
    restoreEnvVars: testHelpers_js_1.restoreEnvVars,
    withSavedEnv: testHelpers_js_1.withSavedEnv,
    generateKey: testHelpers_js_1.generateKey
};
exports.testHelpers = testHelpers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvZW52VXRpbHMudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7R0FZRzs7O0FBRUgsaUVBQWlFO0FBQ2pFLG9EQVk2QjtBQUM3Qiw0REFRaUM7QUFDakMsNERBV2lDO0FBRWpDLGtEQUFrRDtBQUNsRCxNQUFNLE9BQU8sR0FBRztJQUNkLFVBQVUsRUFBVix1QkFBVTtJQUNWLFVBQVUsRUFBVix1QkFBVTtJQUNWLE9BQU8sRUFBUCxvQkFBTztJQUNQLFVBQVUsRUFBVix1QkFBVTtJQUNWLGVBQWUsRUFBZiw0QkFBZTtJQUNmLGNBQWMsRUFBZCwyQkFBYztJQUNkLGtCQUFrQixFQUFsQiwrQkFBa0I7SUFDbEIsaUJBQWlCLEVBQWpCLDhCQUFpQjtJQUNqQixlQUFlLEVBQWYsNEJBQWU7SUFDZixVQUFVLEVBQVYsdUJBQVU7SUFDVixjQUFjLEVBQWQsMkJBQWM7Q0FDZixDQUFDO0FBNkJBLDBCQUFPO0FBM0JULHNEQUFzRDtBQUN0RCxNQUFNLFdBQVcsR0FBRztJQUNsQixjQUFjLEVBQWQsK0JBQWM7SUFDZCxhQUFhLEVBQWIsOEJBQWE7SUFDYixRQUFRLEVBQVIseUJBQVE7SUFDUixVQUFVLEVBQVYsMkJBQVU7SUFDVixtQkFBbUIsRUFBbkIsb0NBQW1CO0lBQ25CLHlCQUF5QixFQUF6QiwwQ0FBeUI7SUFDekIsaUJBQWlCLEVBQWpCLGtDQUFpQjtDQUNsQixDQUFDO0FBbUJBLGtDQUFXO0FBakJiLHNEQUFzRDtBQUN0RCxNQUFNLFdBQVcsR0FBRztJQUNsQixNQUFNLEVBQU4sdUJBQU07SUFDTixnQkFBZ0IsRUFBaEIsaUNBQWdCO0lBQ2hCLFdBQVcsRUFBWCw0QkFBVztJQUNYLGVBQWUsRUFBZixnQ0FBZTtJQUNmLGFBQWEsRUFBYiw4QkFBYTtJQUNiLFNBQVMsRUFBVCwwQkFBUztJQUNULGFBQWEsRUFBYiw4QkFBYTtJQUNiLGNBQWMsRUFBZCwrQkFBYztJQUNkLFlBQVksRUFBWiw2QkFBWTtJQUNaLFdBQVcsRUFBWCw0QkFBVztDQUNaLENBQUM7QUFNQSxrQ0FBVyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL2xpYi9lbnZVdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVudmlyb25tZW50IE1hbmFnZW1lbnQgVXRpbGl0aWVzIC0gVHlwZVNjcmlwdCBFUyBNb2R1bGUgSW1wbGVtZW50YXRpb25cbiAqIFxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgdXRpbGl0aWVzIHNwZWNpZmljYWxseSBmb3IgbWFuYWdpbmcgdGVzdCBlbnZpcm9ubWVudHMsXG4gKiBpbmNsdWRpbmcgZW52aXJvbm1lbnQgdmFyaWFibGUgbWFuaXB1bGF0aW9uIGFuZCB0ZXN0IGlzb2xhdGlvbi4gVGhlc2UgdXRpbGl0aWVzXG4gKiBoZWxwIGNyZWF0ZSBpc29sYXRlZCwgcHJlZGljdGFibGUgdGVzdCBlbnZpcm9ubWVudHMgd2l0aG91dCBzaWRlIGVmZmVjdHMuXG4gKiBcbiAqIERlc2lnbiBwaGlsb3NvcGh5OlxuICogLSBFbnZpcm9ubWVudCBpc29sYXRpb24gdG8gcHJldmVudCB0ZXN0IGludGVyZmVyZW5jZVxuICogLSBQcmVkaWN0YWJsZSB0ZXN0IGNvbmRpdGlvbnMgd2l0aCBrbm93biB2YWx1ZXNcbiAqIC0gRWFzeSBzZXR1cCBhbmQgdGVhcmRvd24gb2YgdGVzdCBlbnZpcm9ubWVudHNcbiAqIC0gU2ltcGxlLCBmb2N1c2VkIGZ1bmN0aW9uYWxpdHkgZm9yIGVudmlyb25tZW50IG1hbmFnZW1lbnRcbiAqL1xuXG4vLyBJbXBvcnQgZW52aXJvbm1lbnQgbWFuYWdlbWVudCB1dGlsaXRpZXMgdXNpbmcgRVMgbW9kdWxlIHN5bnRheFxuaW1wb3J0IHtcbiAgZGVmYXVsdEVudixcbiAgc2V0VGVzdEVudixcbiAgc2F2ZUVudixcbiAgcmVzdG9yZUVudixcbiAgYXR0YWNoTW9ja1NwaWVzLFxuICBtYWtlTG9nZ2VkTW9jayxcbiAgY3JlYXRlU2NoZWR1bGVNb2NrLFxuICBjcmVhdGVRZXJyb3JzTW9jayxcbiAgY3JlYXRlQXhpb3NNb2NrLFxuICByZXNldE1vY2tzLFxuICBpbml0U2VhcmNoVGVzdFxufSBmcm9tICcuLi91dGlscy90ZXN0RW52LmpzJztcbmltcG9ydCB7IFxuICBzZXRPZmZsaW5lTW9kZSxcbiAgaXNPZmZsaW5lTW9kZSxcbiAgZ2V0QXhpb3MsXG4gIGdldFFlcnJvcnMsXG4gIGdldEVudmlyb25tZW50U3RhdGUsXG4gIGNyZWF0ZUVudmlyb25tZW50QWRhcHRlcnMsXG4gIGNsZWFyT2ZmbGluZUNhY2hlXG59IGZyb20gJy4uL3V0aWxzL29mZmxpbmVNb2RlLmpzJztcbmltcG9ydCB7XG4gIHJlbG9hZCxcbiAgbW9kdWxlUmVsb2FkTG9jayxcbiAgc3R1YlFlcnJvcnMsXG4gIHdpdGhNb2NrQ29uc29sZSxcbiAgY3JlYXRlSnNvblJlcyxcbiAgY3JlYXRlUmVzLFxuICBiYWNrdXBFbnZWYXJzLFxuICByZXN0b3JlRW52VmFycyxcbiAgd2l0aFNhdmVkRW52LFxuICBnZW5lcmF0ZUtleVxufSBmcm9tICcuLi91dGlscy90ZXN0SGVscGVycy5qcyc7XG5cbi8vIENyZWF0ZSB0ZXN0RW52IG9iamVjdCBmcm9tIGluZGl2aWR1YWwgZnVuY3Rpb25zXG5jb25zdCB0ZXN0RW52ID0ge1xuICBkZWZhdWx0RW52LFxuICBzZXRUZXN0RW52LFxuICBzYXZlRW52LFxuICByZXN0b3JlRW52LFxuICBhdHRhY2hNb2NrU3BpZXMsXG4gIG1ha2VMb2dnZWRNb2NrLFxuICBjcmVhdGVTY2hlZHVsZU1vY2ssXG4gIGNyZWF0ZVFlcnJvcnNNb2NrLFxuICBjcmVhdGVBeGlvc01vY2ssXG4gIHJlc2V0TW9ja3MsXG4gIGluaXRTZWFyY2hUZXN0XG59O1xuXG4vLyBDcmVhdGUgb2ZmbGluZU1vZGUgb2JqZWN0IGZyb20gaW5kaXZpZHVhbCBmdW5jdGlvbnNcbmNvbnN0IG9mZmxpbmVNb2RlID0ge1xuICBzZXRPZmZsaW5lTW9kZSxcbiAgaXNPZmZsaW5lTW9kZSxcbiAgZ2V0QXhpb3MsXG4gIGdldFFlcnJvcnMsXG4gIGdldEVudmlyb25tZW50U3RhdGUsXG4gIGNyZWF0ZUVudmlyb25tZW50QWRhcHRlcnMsXG4gIGNsZWFyT2ZmbGluZUNhY2hlXG59O1xuXG4vLyBDcmVhdGUgdGVzdEhlbHBlcnMgb2JqZWN0IGZyb20gaW5kaXZpZHVhbCBmdW5jdGlvbnNcbmNvbnN0IHRlc3RIZWxwZXJzID0ge1xuICByZWxvYWQsXG4gIG1vZHVsZVJlbG9hZExvY2ssXG4gIHN0dWJRZXJyb3JzLFxuICB3aXRoTW9ja0NvbnNvbGUsXG4gIGNyZWF0ZUpzb25SZXMsXG4gIGNyZWF0ZVJlcyxcbiAgYmFja3VwRW52VmFycyxcbiAgcmVzdG9yZUVudlZhcnMsXG4gIHdpdGhTYXZlZEVudixcbiAgZ2VuZXJhdGVLZXlcbn07XG5cbi8vIEV4cG9ydCB0aGUgY29yZSB1dGlsaXRpZXMgdGhhdCBvdXIgVHlwZVNjcmlwdCBpbmRleCBuZWVkc1xuZXhwb3J0IHtcbiAgdGVzdEVudiwgICAgIC8vIGVudmlyb25tZW50IHZhcmlhYmxlIG1hbmFnZW1lbnQgYW5kIHRlc3QgaXNvbGF0aW9uXG4gIG9mZmxpbmVNb2RlLCAvLyBvZmZsaW5lL29ubGluZSBtb2RlIHV0aWxpdHkgd2l0aCBhdXRvbWF0aWMgc3dpdGNoaW5nXG4gIHRlc3RIZWxwZXJzICAvLyBhZHZhbmNlZCB0ZXN0aW5nIHV0aWxpdGllcyBmb3IgbW9kdWxlIHJlbG9hZGluZyBhbmQgbW9ja2luZ1xufTsiXSwidmVyc2lvbiI6M30=