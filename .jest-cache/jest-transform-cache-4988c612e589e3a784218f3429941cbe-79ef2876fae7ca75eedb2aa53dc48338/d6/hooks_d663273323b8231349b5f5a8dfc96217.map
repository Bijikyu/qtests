{"file":"/home/runner/workspace/lib/runner/hooks.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/lib/runner/hooks.ts"],"sourcesContent":["/**\n * Test Lifecycle Hooks Management\n * \n * This module manages the execution of lifecycle hooks (beforeAll, afterAll, \n * beforeEach, afterEach) in the correct order and with proper error handling.\n * Hooks are essential for test setup and teardown operations.\n */\n\nimport type { Suite } from './context.js';\n\n/**\n * Register a hook function with the current suite\n * Pushes the hook function onto the appropriate hook array\n */\nexport function pushHook(\n  target: Suite, \n  type: keyof Suite['hooks'], \n  hook: () => any | Promise<any>\n): void {\n  target.hooks[type].push(hook);\n}\n\n/**\n * Execute all hooks in an array sequentially\n * If any hook fails, subsequent hooks are still executed to ensure cleanup\n */\nexport async function runHooks(\n  hooks: Array<() => any | Promise<any>>,\n  hookType: string = 'hook'\n): Promise<void> {\n  const errors: Error[] = [];\n  \n  for (let i = 0; i < hooks.length; i++) {\n    try {\n      const result = hooks[i]();\n      // Handle both sync and async hooks consistently\n      if (result && typeof result.then === 'function') {\n        await result;\n      }\n    } catch (error: any) {\n      // Collect errors but continue executing remaining hooks\n      // This ensures cleanup hooks still run even if setup hooks fail\n      const hookError = new Error(\n        `${hookType} ${i + 1} failed: ${error.message}`\n      );\n      hookError.stack = error.stack;\n      errors.push(hookError);\n    }\n  }\n  \n  // If any hooks failed, throw a combined error with all failure details\n  if (errors.length > 0) {\n    const combinedError = new Error(\n      `${errors.length} ${hookType}(s) failed:\\n` +\n      errors.map((e, i) => `  ${i + 1}. ${e.message}`).join('\\n')\n    );\n    // Preserve the first error's stack trace as it's usually most relevant\n    combinedError.stack = errors[0].stack;\n    throw combinedError;\n  }\n}\n\n/**\n * Execute hooks for a specific suite and its parent suites\n * Used for beforeAll/afterAll that need to run for the entire suite hierarchy\n */\nexport async function runSuiteHooks(\n  suite: Suite,\n  hookType: 'beforeAll' | 'afterAll',\n  parentSuites: Suite[] = []\n): Promise<void> {\n  // For beforeAll: run parent hooks first, then current suite\n  // For afterAll: run current suite first, then parent hooks (reverse order)\n  \n  const allSuites = hookType === 'beforeAll' \n    ? [...parentSuites, suite]\n    : [suite, ...parentSuites.reverse()];\n  \n  for (const currentSuite of allSuites) {\n    if (currentSuite.hooks[hookType].length > 0) {\n      await runHooks(\n        currentSuite.hooks[hookType], \n        `${currentSuite.name} ${hookType}`\n      );\n    }\n  }\n}\n\n/**\n * Execute beforeEach hooks from all parent suites down to current suite\n * This ensures proper setup order: parent setup first, then child setup\n */\nexport async function runBeforeEachHooks(\n  suite: Suite,\n  parentSuites: Suite[] = []\n): Promise<void> {\n  // Run beforeEach hooks in hierarchical order: parents first\n  const allSuites = [...parentSuites, suite];\n  \n  for (const currentSuite of allSuites) {\n    if (currentSuite.hooks.beforeEach.length > 0) {\n      await runHooks(\n        currentSuite.hooks.beforeEach,\n        `${currentSuite.name} beforeEach`\n      );\n    }\n  }\n}\n\n/**\n * Execute afterEach hooks from current suite up to all parent suites\n * This ensures proper cleanup order: child cleanup first, then parent cleanup\n */\nexport async function runAfterEachHooks(\n  suite: Suite,\n  parentSuites: Suite[] = []\n): Promise<void> {\n  // Run afterEach hooks in reverse hierarchical order: children first\n  const allSuites = [suite, ...parentSuites.reverse()];\n  \n  for (const currentSuite of allSuites) {\n    if (currentSuite.hooks.afterEach.length > 0) {\n      await runHooks(\n        currentSuite.hooks.afterEach,\n        `${currentSuite.name} afterEach`\n      );\n    }\n  }\n}"],"version":3}