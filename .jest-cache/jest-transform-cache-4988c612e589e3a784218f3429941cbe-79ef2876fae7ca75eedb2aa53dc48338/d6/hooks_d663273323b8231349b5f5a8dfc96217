9ece1fca80bbd3b272678707dc909c4c
"use strict";
/**
 * Test Lifecycle Hooks Management
 *
 * This module manages the execution of lifecycle hooks (beforeAll, afterAll,
 * beforeEach, afterEach) in the correct order and with proper error handling.
 * Hooks are essential for test setup and teardown operations.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.pushHook = pushHook;
exports.runHooks = runHooks;
exports.runSuiteHooks = runSuiteHooks;
exports.runBeforeEachHooks = runBeforeEachHooks;
exports.runAfterEachHooks = runAfterEachHooks;
/**
 * Register a hook function with the current suite
 * Pushes the hook function onto the appropriate hook array
 */
function pushHook(target, type, hook) {
    target.hooks[type].push(hook);
}
/**
 * Execute all hooks in an array sequentially
 * If any hook fails, subsequent hooks are still executed to ensure cleanup
 */
async function runHooks(hooks, hookType = 'hook') {
    const errors = [];
    for (let i = 0; i < hooks.length; i++) {
        try {
            const result = hooks[i]();
            // Handle both sync and async hooks consistently
            if (result && typeof result.then === 'function') {
                await result;
            }
        }
        catch (error) {
            // Collect errors but continue executing remaining hooks
            // This ensures cleanup hooks still run even if setup hooks fail
            const hookError = new Error(`${hookType} ${i + 1} failed: ${error.message}`);
            hookError.stack = error.stack;
            errors.push(hookError);
        }
    }
    // If any hooks failed, throw a combined error with all failure details
    if (errors.length > 0) {
        const combinedError = new Error(`${errors.length} ${hookType}(s) failed:\n` +
            errors.map((e, i) => `  ${i + 1}. ${e.message}`).join('\n'));
        // Preserve the first error's stack trace as it's usually most relevant
        combinedError.stack = errors[0].stack;
        throw combinedError;
    }
}
/**
 * Execute hooks for a specific suite and its parent suites
 * Used for beforeAll/afterAll that need to run for the entire suite hierarchy
 */
async function runSuiteHooks(suite, hookType, parentSuites = []) {
    // For beforeAll: run parent hooks first, then current suite
    // For afterAll: run current suite first, then parent hooks (reverse order)
    const allSuites = hookType === 'beforeAll'
        ? [...parentSuites, suite]
        : [suite, ...parentSuites.reverse()];
    for (const currentSuite of allSuites) {
        if (currentSuite.hooks[hookType].length > 0) {
            await runHooks(currentSuite.hooks[hookType], `${currentSuite.name} ${hookType}`);
        }
    }
}
/**
 * Execute beforeEach hooks from all parent suites down to current suite
 * This ensures proper setup order: parent setup first, then child setup
 */
async function runBeforeEachHooks(suite, parentSuites = []) {
    // Run beforeEach hooks in hierarchical order: parents first
    const allSuites = [...parentSuites, suite];
    for (const currentSuite of allSuites) {
        if (currentSuite.hooks.beforeEach.length > 0) {
            await runHooks(currentSuite.hooks.beforeEach, `${currentSuite.name} beforeEach`);
        }
    }
}
/**
 * Execute afterEach hooks from current suite up to all parent suites
 * This ensures proper cleanup order: child cleanup first, then parent cleanup
 */
async function runAfterEachHooks(suite, parentSuites = []) {
    // Run afterEach hooks in reverse hierarchical order: children first
    const allSuites = [suite, ...parentSuites.reverse()];
    for (const currentSuite of allSuites) {
        if (currentSuite.hooks.afterEach.length > 0) {
            await runHooks(currentSuite.hooks.afterEach, `${currentSuite.name} afterEach`);
        }
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,