4301fcd6bab19f1697a6dd8c9b282592
/**
 * API Key Model
 * 
 * This class focuses solely on API key model functionality and behavior.
 * It extends BaseMockModel with API key-specific methods and properties.
 */

const {
  BaseMockModel
} = require('./baseMockModel');

// Legacy array for backwards compatibility
const mockApiKeys = [];

/**
 * API Key Model Class
 * 
 * Provides Mongoose-compatible API key model for testing scenarios.
 * Includes API key-specific validation and methods.
 */
class ApiKey extends BaseMockModel {
  constructor(data) {
    super(data);
    // Set default values specific to ApiKey
    if (!this.createdAt) this.createdAt = new Date();
    if (!this.isActive) this.isActive = true;
  }

  // Override getCollection to use legacy array for backwards compatibility
  static getCollection() {
    return mockApiKeys;
  }

  // Legacy methods for backward compatibility with existing code
  static findOne(query) {
    console.log(`ApiKey.findOne is running with ${JSON.stringify(query)}`);
    const result = mockApiKeys.find(k => k.key === query.key) || null;
    console.log(`ApiKey.findOne is returning ${result ? 'key' : 'null'}`);
    return Promise.resolve(result);
  }
  static findOneAndDelete(query) {
    console.log(`ApiKey.findOneAndDelete is running with ${JSON.stringify(query)}`);
    const idx = mockApiKeys.findIndex(k => k.key === query.key);
    if (idx === -1) {
      console.log(`ApiKey.findOneAndDelete is returning null`);
      return Promise.resolve(null);
    }
    const deleted = mockApiKeys.splice(idx, 1)[0];
    console.log(`ApiKey.findOneAndDelete is returning deleted key`);
    return Promise.resolve(deleted);
  }
  static findOneAndUpdate(query, update) {
    console.log(`ApiKey.findOneAndUpdate is running with query and update`);
    const key = mockApiKeys.find(k => k.key === query.key);
    if (!key) {
      console.log(`ApiKey.findOneAndUpdate is returning null`);
      return Promise.resolve(null);
    }
    Object.assign(key, update);
    console.log(`ApiKey.findOneAndUpdate is returning updated key`);
    return Promise.resolve(key);
  }
  static find() {
    console.log(`ApiKey.find is running with none`);
    const chain = {
      data: mockApiKeys
    };
    chain.sort = () => chain;
    chain.lean = () => {
      console.log(`ApiKey.find.lean is returning ${chain.data.length} keys`);
      return Promise.resolve(chain.data);
    };
    chain.exec = () => {
      console.log(`ApiKey.find.exec is returning ${chain.data.length} keys`);
      return Promise.resolve(chain.data);
    };
    return chain;
  }
}
module.exports = {
  ApiKey,
  mockApiKeys
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCYXNlTW9ja01vZGVsIiwicmVxdWlyZSIsIm1vY2tBcGlLZXlzIiwiQXBpS2V5IiwiY29uc3RydWN0b3IiLCJkYXRhIiwiY3JlYXRlZEF0IiwiRGF0ZSIsImlzQWN0aXZlIiwiZ2V0Q29sbGVjdGlvbiIsImZpbmRPbmUiLCJxdWVyeSIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwicmVzdWx0IiwiZmluZCIsImsiLCJrZXkiLCJQcm9taXNlIiwicmVzb2x2ZSIsImZpbmRPbmVBbmREZWxldGUiLCJpZHgiLCJmaW5kSW5kZXgiLCJkZWxldGVkIiwic3BsaWNlIiwiZmluZE9uZUFuZFVwZGF0ZSIsInVwZGF0ZSIsIk9iamVjdCIsImFzc2lnbiIsImNoYWluIiwic29ydCIsImxlYW4iLCJsZW5ndGgiLCJleGVjIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImFwaUtleU1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQVBJIEtleSBNb2RlbFxuICogXG4gKiBUaGlzIGNsYXNzIGZvY3VzZXMgc29sZWx5IG9uIEFQSSBrZXkgbW9kZWwgZnVuY3Rpb25hbGl0eSBhbmQgYmVoYXZpb3IuXG4gKiBJdCBleHRlbmRzIEJhc2VNb2NrTW9kZWwgd2l0aCBBUEkga2V5LXNwZWNpZmljIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMuXG4gKi9cblxuY29uc3QgeyBCYXNlTW9ja01vZGVsIH0gPSByZXF1aXJlKCcuL2Jhc2VNb2NrTW9kZWwnKTtcblxuLy8gTGVnYWN5IGFycmF5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuY29uc3QgbW9ja0FwaUtleXMgPSBbXTtcblxuLyoqXG4gKiBBUEkgS2V5IE1vZGVsIENsYXNzXG4gKiBcbiAqIFByb3ZpZGVzIE1vbmdvb3NlLWNvbXBhdGlibGUgQVBJIGtleSBtb2RlbCBmb3IgdGVzdGluZyBzY2VuYXJpb3MuXG4gKiBJbmNsdWRlcyBBUEkga2V5LXNwZWNpZmljIHZhbGlkYXRpb24gYW5kIG1ldGhvZHMuXG4gKi9cbmNsYXNzIEFwaUtleSBleHRlbmRzIEJhc2VNb2NrTW9kZWwge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgc3VwZXIoZGF0YSk7XG4gICAgLy8gU2V0IGRlZmF1bHQgdmFsdWVzIHNwZWNpZmljIHRvIEFwaUtleVxuICAgIGlmICghdGhpcy5jcmVhdGVkQXQpIHRoaXMuY3JlYXRlZEF0ID0gbmV3IERhdGUoKTtcbiAgICBpZiAoIXRoaXMuaXNBY3RpdmUpIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xuICB9XG4gIFxuICAvLyBPdmVycmlkZSBnZXRDb2xsZWN0aW9uIHRvIHVzZSBsZWdhY3kgYXJyYXkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gIHN0YXRpYyBnZXRDb2xsZWN0aW9uKCkge1xuICAgIHJldHVybiBtb2NrQXBpS2V5cztcbiAgfVxuICBcbiAgLy8gTGVnYWN5IG1ldGhvZHMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBleGlzdGluZyBjb2RlXG4gIHN0YXRpYyBmaW5kT25lKHF1ZXJ5KSB7XG4gICAgY29uc29sZS5sb2coYEFwaUtleS5maW5kT25lIGlzIHJ1bm5pbmcgd2l0aCAke0pTT04uc3RyaW5naWZ5KHF1ZXJ5KX1gKTtcbiAgICBjb25zdCByZXN1bHQgPSBtb2NrQXBpS2V5cy5maW5kKGsgPT4gay5rZXkgPT09IHF1ZXJ5LmtleSkgfHwgbnVsbDtcbiAgICBjb25zb2xlLmxvZyhgQXBpS2V5LmZpbmRPbmUgaXMgcmV0dXJuaW5nICR7cmVzdWx0ID8gJ2tleScgOiAnbnVsbCd9YCk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICB9XG4gIFxuICBzdGF0aWMgZmluZE9uZUFuZERlbGV0ZShxdWVyeSkge1xuICAgIGNvbnNvbGUubG9nKGBBcGlLZXkuZmluZE9uZUFuZERlbGV0ZSBpcyBydW5uaW5nIHdpdGggJHtKU09OLnN0cmluZ2lmeShxdWVyeSl9YCk7XG4gICAgY29uc3QgaWR4ID0gbW9ja0FwaUtleXMuZmluZEluZGV4KGsgPT4gay5rZXkgPT09IHF1ZXJ5LmtleSk7XG4gICAgaWYgKGlkeCA9PT0gLTEpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBBcGlLZXkuZmluZE9uZUFuZERlbGV0ZSBpcyByZXR1cm5pbmcgbnVsbGApO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9XG4gICAgY29uc3QgZGVsZXRlZCA9IG1vY2tBcGlLZXlzLnNwbGljZShpZHgsIDEpWzBdO1xuICAgIGNvbnNvbGUubG9nKGBBcGlLZXkuZmluZE9uZUFuZERlbGV0ZSBpcyByZXR1cm5pbmcgZGVsZXRlZCBrZXlgKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRlbGV0ZWQpO1xuICB9XG4gIFxuICBzdGF0aWMgZmluZE9uZUFuZFVwZGF0ZShxdWVyeSwgdXBkYXRlKSB7XG4gICAgY29uc29sZS5sb2coYEFwaUtleS5maW5kT25lQW5kVXBkYXRlIGlzIHJ1bm5pbmcgd2l0aCBxdWVyeSBhbmQgdXBkYXRlYCk7XG4gICAgY29uc3Qga2V5ID0gbW9ja0FwaUtleXMuZmluZChrID0+IGsua2V5ID09PSBxdWVyeS5rZXkpO1xuICAgIGlmICgha2V5KSB7XG4gICAgICBjb25zb2xlLmxvZyhgQXBpS2V5LmZpbmRPbmVBbmRVcGRhdGUgaXMgcmV0dXJuaW5nIG51bGxgKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24oa2V5LCB1cGRhdGUpO1xuICAgIGNvbnNvbGUubG9nKGBBcGlLZXkuZmluZE9uZUFuZFVwZGF0ZSBpcyByZXR1cm5pbmcgdXBkYXRlZCBrZXlgKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGtleSk7XG4gIH1cbiAgXG4gIHN0YXRpYyBmaW5kKCkge1xuICAgIGNvbnNvbGUubG9nKGBBcGlLZXkuZmluZCBpcyBydW5uaW5nIHdpdGggbm9uZWApO1xuICAgIGNvbnN0IGNoYWluID0geyBkYXRhOiBtb2NrQXBpS2V5cyB9O1xuICAgIGNoYWluLnNvcnQgPSAoKSA9PiBjaGFpbjtcbiAgICBjaGFpbi5sZWFuID0gKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coYEFwaUtleS5maW5kLmxlYW4gaXMgcmV0dXJuaW5nICR7Y2hhaW4uZGF0YS5sZW5ndGh9IGtleXNgKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2hhaW4uZGF0YSk7XG4gICAgfTtcbiAgICBjaGFpbi5leGVjID0gKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coYEFwaUtleS5maW5kLmV4ZWMgaXMgcmV0dXJuaW5nICR7Y2hhaW4uZGF0YS5sZW5ndGh9IGtleXNgKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2hhaW4uZGF0YSk7XG4gICAgfTtcbiAgICByZXR1cm4gY2hhaW47XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFwaUtleSxcbiAgbW9ja0FwaUtleXNcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTTtFQUFFQTtBQUFjLENBQUMsR0FBR0MsT0FBTyxDQUFDLGlCQUFpQixDQUFDOztBQUVwRDtBQUNBLE1BQU1DLFdBQVcsR0FBRyxFQUFFOztBQUV0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxNQUFNLFNBQVNILGFBQWEsQ0FBQztFQUNqQ0ksV0FBV0EsQ0FBQ0MsSUFBSSxFQUFFO0lBQ2hCLEtBQUssQ0FBQ0EsSUFBSSxDQUFDO0lBQ1g7SUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDQyxTQUFTLEVBQUUsSUFBSSxDQUFDQSxTQUFTLEdBQUcsSUFBSUMsSUFBSSxDQUFDLENBQUM7SUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQ0MsUUFBUSxFQUFFLElBQUksQ0FBQ0EsUUFBUSxHQUFHLElBQUk7RUFDMUM7O0VBRUE7RUFDQSxPQUFPQyxhQUFhQSxDQUFBLEVBQUc7SUFDckIsT0FBT1AsV0FBVztFQUNw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