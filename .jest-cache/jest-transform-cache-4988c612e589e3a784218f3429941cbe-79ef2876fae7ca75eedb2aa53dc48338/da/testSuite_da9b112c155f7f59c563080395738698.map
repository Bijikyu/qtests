{"version":3,"names":["logStart","logReturn","require","DatabaseTestHelper","constructor","models","isSetup","setup","mockModels","clearAllModels","mockApiKeys","length","mockLogs","error","message","teardown","createSuite","helper","beforeEach","afterEach","isValidTestContext","describe","it","console","log","getModels","Error","MockManager","mocks","Map","restorations","setupApiClientMocks","customResponses","stubMethod","defaultResponses","get","status","data","post","id","put","updated","delete","responses","mockApiClient","Promise","resolve","request","set","global","fetch","originalFetch","url","options","method","toLowerCase","response","ok","json","text","JSON","stringify","setupConsoleMocks","mockConsole","mockLog","mockError","mockWarn","restore","mockRestore","consoleMocks","warn","setupEnvironmentMocks","envVars","saveEnv","restoreEnv","savedEnv","Object","assign","process","env","restoreFunction","setupEmailMocks","sendEmail","clearEmailHistory","emailMocks","sendEmailBatch","getHistory","getEmailHistory","clearHistory","setupHttpMocks","httpTest","mockApp","createMockApp","forEach","path","req","res","httpMocks","app","supertest","clearAll","name","clear","getMock","mock","AssertionHelper","assertDatabaseEntity","entity","expectedProperties","_id","undefined","createdAt","Date","entries","key","value","assertApiResponse","expectedStatus","hasData","body","errorData","assertEmailSent","expectedEmail","emailHistory","count","index","email","success","emailValue","emailData","assertMockCalled","mockFn","times","calledWith","lastCalledWith","calls","some","call","every","arg","lastCall","callCount","TestDataFactory","counter","nextId","createUser","overrides","user","username","password","firstName","lastName","isActive","updatedAt","createApiKey","apiKey","Math","random","toString","substr","userId","permissions","expiresAt","now","createLogEntry","logEntry","level","timestamp","source","metadata","testId","environment","createConfig","config","settings","apiUrl","timeout","retries","debug","features","authentication","logging","monitoring","createMultiple","factory","baseOverrides","entities","Array","from","_","createRelatedEntities","userCount","apiKeysPerUser","logsPerUser","configCount","users","apiKeys","logs","userApiKeys","push","userLogs","configs","result","reset","PerformanceTestHelper","measureTime","operation","start","hrtime","bigint","end","durationNs","Number","durationMs","measurement","duration","toFixed","assertTimingConstraint","maxDuration","testConcurrency","operations","promises","map","opStart","opEnd","results","all","totalDuration","successful","filter","r","failed","analysis","averageDuration","reduce","sum","max","minDuration","min","measureMemory","gc","beforeMemory","memoryUsage","afterMemory","memoryDelta","rss","heapTotal","heapUsed","external","TestSuiteBuilder","dbHelper","mockManager","includePerformance","autoCleanup","withDatabase","withApiMocks","apiResponses","withConsoleMocks","withEnvironmentMocks","withEmailMocks","withHttpMocks","withPerformance","withoutAutoCleanup","build","suite","assert","db","performance","module","exports"],"sources":["testSuite.js"],"sourcesContent":["/**\n * Comprehensive Testing Suite Utilities for qtests Framework\n * \n * This module provides centralized testing utilities that eliminate duplicate patterns\n * across test suites. It offers standardized setup/teardown, mocking, assertion,\n * and data creation patterns for consistent testing across different scenarios.\n * \n * Design philosophy:\n * - Zero external dependencies beyond qtests framework utilities\n * - CommonJS compatibility for seamless integration with existing codebase\n * - Framework-agnostic patterns that work with Jest, vanilla Node.js, and other test runners\n * - Centralized patterns to reduce code duplication across test files\n * - Comprehensive error handling and logging following qtests patterns\n * \n * Architecture approach:\n * - Class-based utilities for stateful management (database connections, mock state)\n * - Static utility classes for stateless operations (assertions, data factories)\n * - Builder pattern for flexible test suite configuration\n * - Automatic cleanup and state management for test isolation\n * \n * Integration with qtests:\n * - Uses existing qtests utilities (stubMethod, mockConsole, testEnv, etc.)\n * - Follows qtests logging patterns with logStart/logReturn\n * - Maintains qtests zero-dependency philosophy\n * - Compatible with qtests module stubbing system\n */\n\nconst { logStart, logReturn } = require('../lib/logUtils');\n\n/**\n * Database Testing Helper for In-Memory Database Management\n * \n * This class provides centralized database testing utilities using qtests mockModels\n * instead of external database dependencies. It eliminates duplicate beforeEach/afterEach\n * patterns across storage tests while maintaining qtests zero-dependency approach.\n * \n * Implementation rationale:\n * - Uses qtests mockModels for in-memory database simulation\n * - Provides consistent setup/teardown patterns across test files\n * - Manages model state isolation between tests\n * - Supports both automatic and manual setup modes\n * \n * Usage patterns:\n * - Automatic: DatabaseTestHelper.createSuite() in test file\n * - Manual: Call setup() and teardown() in beforeEach/afterEach hooks\n * - Direct: Access models property for direct model manipulation\n */\nclass DatabaseTestHelper {\n  constructor() {\n    this.models = null;\n    this.isSetup = false;\n  }\n\n  /**\n   * Sets up in-memory database models and clears existing data\n   * \n   * This method initializes the qtests mockModels system and ensures\n   * a clean state for each test. It provides access to ApiKey, ApiLog,\n   * and custom model creation capabilities.\n   * \n   * @returns {Promise<void>} Resolves when setup is complete\n   */\n  async setup() {\n    logStart('DatabaseTestHelper.setup');\n    \n    try {\n      // Import qtests mockModels for in-memory database simulation\n      const { mockModels } = require('../lib/envUtils');\n      this.models = mockModels;\n      \n      // Clear existing model data for clean test state\n      if (this.models.clearAllModels) {\n        this.models.clearAllModels();\n      } else {\n        // Manual clearing if clearAllModels not available\n        if (this.models.mockApiKeys) this.models.mockApiKeys.length = 0;\n        if (this.models.mockLogs) this.models.mockLogs.length = 0;\n      }\n      \n      this.isSetup = true;\n      logReturn('DatabaseTestHelper.setup', 'completed');\n    } catch (error) {\n      logReturn('DatabaseTestHelper.setup', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Tears down database connections and clears model state\n   * \n   * This method provides cleanup functionality to ensure test isolation.\n   * It clears all model data and resets the helper state.\n   * \n   * @returns {Promise<void>} Resolves when teardown is complete\n   */\n  async teardown() {\n    logStart('DatabaseTestHelper.teardown');\n    \n    try {\n      if (this.models) {\n        // Clear all model data\n        if (this.models.clearAllModels) {\n          this.models.clearAllModels();\n        } else {\n          // Manual clearing if clearAllModels not available\n          if (this.models.mockApiKeys) this.models.mockApiKeys.length = 0;\n          if (this.models.mockLogs) this.models.mockLogs.length = 0;\n        }\n      }\n      \n      this.models = null;\n      this.isSetup = false;\n      logReturn('DatabaseTestHelper.teardown', 'completed');\n    } catch (error) {\n      logReturn('DatabaseTestHelper.teardown', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Creates a complete test suite setup with automatic cleanup\n   * \n   * This static method provides the most convenient way to set up database\n   * testing with automatic beforeEach/afterEach hook management. It reduces\n   * boilerplate in test files by handling setup/teardown automatically.\n   * \n   * Note: This should only be called at the top level of test files,\n   * not inside individual test cases, due to Jest hook restrictions.\n   * \n   * @returns {DatabaseTestHelper} Configured helper instance\n   */\n  static createSuite() {\n    logStart('DatabaseTestHelper.createSuite');\n    \n    const helper = new DatabaseTestHelper();\n    \n    // Only set up hooks if they're available and we're at the right scope\n    try {\n      if (typeof beforeEach === 'function' && typeof afterEach === 'function') {\n        // Check if we're in a test context by attempting to define hooks\n        const isValidTestContext = typeof describe === 'function' && typeof it === 'function';\n        \n        if (isValidTestContext) {\n          beforeEach(async () => {\n            await helper.setup();\n          });\n\n          afterEach(async () => {\n            await helper.teardown();\n          });\n        } else {\n          console.log('[DatabaseTestHelper] Hooks available but not in valid test context - use manual setup/teardown');\n        }\n      } else {\n        console.log('[DatabaseTestHelper] No test hooks detected - use manual setup/teardown');\n      }\n    } catch (error) {\n      console.log('[DatabaseTestHelper] Could not set up automatic hooks - use manual setup/teardown');\n    }\n    \n    logReturn('DatabaseTestHelper.createSuite', helper);\n    return helper;\n  }\n\n  /**\n   * Get direct access to models for advanced testing scenarios\n   * \n   * @returns {Object} Mock models object with ApiKey, ApiLog, etc.\n   */\n  getModels() {\n    if (!this.isSetup) {\n      throw new Error('DatabaseTestHelper must be set up before accessing models');\n    }\n    return this.models;\n  }\n}\n\n/**\n * Mock Management System for Consistent API and Service Mocking\n * \n * This class provides centralized mock management that eliminates duplicate\n * mock patterns across test files. It uses qtests utilities for consistent\n * mocking while providing advanced mock configuration capabilities.\n * \n * Design approach:\n * - Builds on qtests stubMethod and mockConsole utilities\n * - Provides standardized mock responses for common scenarios\n * - Manages mock lifecycle and cleanup automatically\n * - Supports both simple and advanced mock configurations\n */\nclass MockManager {\n  constructor() {\n    this.mocks = new Map();\n    this.restorations = new Map();\n  }\n\n  /**\n   * Sets up API client mocks using qtests stubMethod utility\n   * \n   * This method provides consistent mock patterns for HTTP client testing\n   * using qtests' existing stubbing capabilities rather than external mocking libraries.\n   * \n   * @param {Object} customResponses - Custom response configurations\n   */\n  setupApiClientMocks(customResponses = {}) {\n    logStart('MockManager.setupApiClientMocks', customResponses);\n    \n    try {\n      const { stubMethod } = require('../lib/envUtils');\n      \n      // Default API responses\n      const defaultResponses = {\n        get: { status: 200, data: {} },\n        post: { status: 201, data: { id: 1 } },\n        put: { status: 200, data: { updated: true } },\n        delete: { status: 204, data: null }\n      };\n      \n      const responses = { ...defaultResponses, ...customResponses };\n      \n      // Create mock API client object\n      const mockApiClient = {\n        get: () => Promise.resolve(responses.get),\n        post: () => Promise.resolve(responses.post),\n        put: () => Promise.resolve(responses.put),\n        delete: () => Promise.resolve(responses.delete),\n        request: () => Promise.resolve(responses.get) // generic request method\n      };\n      \n      this.mocks.set('apiClient', mockApiClient);\n      \n      // If we have a global HTTP client to stub, stub it\n      if (typeof global.fetch === 'function') {\n        const originalFetch = global.fetch;\n        global.fetch = (url, options = {}) => {\n          const method = (options.method || 'GET').toLowerCase();\n          const response = responses[method] || responses.get;\n          \n          return Promise.resolve({\n            ok: response.status < 400,\n            status: response.status,\n            json: () => Promise.resolve(response.data),\n            text: () => Promise.resolve(JSON.stringify(response.data))\n          });\n        };\n        \n        this.restorations.set('fetch', () => {\n          global.fetch = originalFetch;\n        });\n      }\n      \n      logReturn('MockManager.setupApiClientMocks', 'completed');\n    } catch (error) {\n      logReturn('MockManager.setupApiClientMocks', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Sets up console and notification mocks using qtests utilities\n   * \n   * This method uses qtests mockConsole utility to provide consistent\n   * console mocking for testing notification and logging behavior.\n   * \n   * @returns {Object} Mock console functions\n   */\n  setupConsoleMocks() {\n    logStart('MockManager.setupConsoleMocks');\n    \n    try {\n      const { mockConsole } = require('../utils/mockConsole');\n      \n      // Use qtests mockConsole utility - mock each console method individually\n      const mockLog = mockConsole('log');\n      const mockError = mockConsole('error');\n      const mockWarn = mockConsole('warn');\n      \n      // Create restore function that restores all console methods\n      const restore = () => {\n        if (mockLog && mockLog.mockRestore) mockLog.mockRestore();\n        if (mockError && mockError.mockRestore) mockError.mockRestore();\n        if (mockWarn && mockWarn.mockRestore) mockWarn.mockRestore();\n      };\n      \n      const consoleMocks = {\n        log: mockLog,\n        error: mockError,\n        warn: mockWarn,\n        restore\n      };\n      \n      this.mocks.set('console', consoleMocks);\n      this.restorations.set('console', restore);\n      \n      logReturn('MockManager.setupConsoleMocks', consoleMocks);\n      return consoleMocks;\n    } catch (error) {\n      logReturn('MockManager.setupConsoleMocks', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Sets up environment variable mocks using qtests testEnv utility\n   * \n   * This method provides consistent environment variable mocking\n   * for testing configuration-dependent code paths.\n   * \n   * @param {Object} envVars - Environment variables to set\n   * @returns {Function} Restoration function\n   */\n  setupEnvironmentMocks(envVars = {}) {\n    logStart('MockManager.setupEnvironmentMocks', envVars);\n    \n    try {\n      const { saveEnv, restoreEnv } = require('../utils/testEnv');\n      \n      // Save current environment and set test values\n      const savedEnv = saveEnv();\n      Object.assign(process.env, envVars);\n      \n      this.mocks.set('environment', envVars);\n      const restoreFunction = () => restoreEnv(savedEnv);\n      this.restorations.set('environment', restoreFunction);\n      \n      logReturn('MockManager.setupEnvironmentMocks', 'completed');\n      return restoreFunction;\n    } catch (error) {\n      logReturn('MockManager.setupEnvironmentMocks', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Sets up email mocking using qtests sendEmail utility\n   * \n   * This method provides consistent email mocking for testing\n   * notification workflows without external email services.\n   * \n   * @returns {Object} Email mock utilities\n   */\n  setupEmailMocks() {\n    logStart('MockManager.setupEmailMocks');\n    \n    try {\n      const { sendEmail } = require('../lib/envUtils');\n      \n      // Clear previous email history\n      sendEmail.clearEmailHistory();\n      \n      const emailMocks = {\n        sendEmail: sendEmail.sendEmail,\n        sendEmailBatch: sendEmail.sendEmailBatch,\n        getHistory: sendEmail.getEmailHistory,\n        clearHistory: sendEmail.clearEmailHistory\n      };\n      \n      this.mocks.set('email', emailMocks);\n      \n      logReturn('MockManager.setupEmailMocks', emailMocks);\n      return emailMocks;\n    } catch (error) {\n      logReturn('MockManager.setupEmailMocks', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Sets up HTTP integration test mocks using qtests httpTest utility\n   * \n   * This method provides consistent HTTP endpoint mocking for\n   * integration testing without external dependencies.\n   * \n   * @param {Array} responses - Array of response configurations\n   * @returns {Object} HTTP test utilities\n   */\n  setupHttpMocks(responses = []) {\n    logStart('MockManager.setupHttpMocks', responses);\n    \n    try {\n      const { httpTest } = require('../lib/envUtils');\n      \n      // Create mock application with configured responses\n      const mockApp = httpTest.createMockApp();\n      \n      // Configure routes with provided responses\n      responses.forEach(({ method = 'GET', path = '/', status = 200, data = {} }) => {\n        mockApp[method.toLowerCase()](path, (req, res) => {\n          res.status(status).json(data);\n        });\n      });\n      \n      const httpMocks = {\n        app: mockApp,\n        supertest: httpTest.supertest,\n        request: (app) => httpTest.supertest(app || mockApp)\n      };\n      \n      this.mocks.set('http', httpMocks);\n      \n      logReturn('MockManager.setupHttpMocks', httpMocks);\n      return httpMocks;\n    } catch (error) {\n      logReturn('MockManager.setupHttpMocks', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Clears all mocks and restores original functionality\n   * \n   * This method provides comprehensive cleanup to ensure test isolation.\n   * It should be called in beforeEach hooks for clean test state.\n   */\n  clearAll() {\n    logStart('MockManager.clearAll');\n    \n    try {\n      // Restore all stubbed functions\n      this.restorations.forEach((restore, name) => {\n        try {\n          restore();\n        } catch (error) {\n          console.log(`Failed to restore ${name}: ${error.message}`);\n        }\n      });\n      \n      // Clear mock storage\n      this.mocks.clear();\n      this.restorations.clear();\n      \n      logReturn('MockManager.clearAll', 'completed');\n    } catch (error) {\n      logReturn('MockManager.clearAll', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Gets a specific mock by name for custom assertions\n   * \n   * @param {string} name - Name of the mock to retrieve\n   * @returns {any} Mock object or undefined if not found\n   */\n  getMock(name) {\n    logStart('MockManager.getMock', name);\n    const mock = this.mocks.get(name);\n    logReturn('MockManager.getMock', mock ? 'found' : 'not found');\n    return mock;\n  }\n}\n\n/**\n * Assertion Helper Utilities for Common Testing Patterns\n * \n * This class centralizes repetitive assertion logic with descriptive helpers\n * that reduce code duplication across test files while providing clear,\n * readable test assertions.\n * \n * Design philosophy:\n * - Static methods for stateless assertion operations\n * - Framework-agnostic assertions that work with any test runner\n * - Descriptive method names that make test intent clear\n * - Comprehensive error messages for failed assertions\n */\nclass AssertionHelper {\n  /**\n   * Asserts that an object has standard database entity properties\n   * \n   * This method eliminates repetitive property checks across entity tests\n   * by providing a standardized way to verify database entity structure.\n   * \n   * @param {Object} entity - Entity object to validate\n   * @param {Object} expectedProperties - Expected property values\n   */\n  static assertDatabaseEntity(entity, expectedProperties = {}) {\n    logStart('AssertionHelper.assertDatabaseEntity', entity, expectedProperties);\n    \n    try {\n      if (!entity) {\n        throw new Error('Entity cannot be null or undefined');\n      }\n      \n      // Check for database-specific properties\n      if (entity._id !== undefined) {\n        if (!entity._id) {\n          throw new Error('Entity _id must be defined and truthy');\n        }\n      }\n      \n      if (entity.id !== undefined) {\n        if (!entity.id) {\n          throw new Error('Entity id must be defined and truthy');\n        }\n      }\n      \n      if (entity.createdAt !== undefined) {\n        if (!(entity.createdAt instanceof Date)) {\n          throw new Error('Entity createdAt must be a Date instance');\n        }\n      }\n      \n      // Check expected properties\n      Object.entries(expectedProperties).forEach(([key, value]) => {\n        if (entity[key] !== value) {\n          throw new Error(`Expected entity.${key} to be ${value}, but got ${entity[key]}`);\n        }\n      });\n      \n      logReturn('AssertionHelper.assertDatabaseEntity', 'passed');\n    } catch (error) {\n      logReturn('AssertionHelper.assertDatabaseEntity', `failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Asserts API response structure and status\n   * \n   * This method standardizes API response validation across endpoint tests\n   * by providing consistent checks for status codes and response structure.\n   * \n   * @param {Object} response - API response object\n   * @param {number} expectedStatus - Expected HTTP status code\n   * @param {boolean} hasData - Whether response should have data\n   */\n  static assertApiResponse(response, expectedStatus, hasData = true) {\n    logStart('AssertionHelper.assertApiResponse', response, expectedStatus, hasData);\n    \n    try {\n      if (!response) {\n        throw new Error('Response cannot be null or undefined');\n      }\n      \n      if (response.status !== expectedStatus) {\n        throw new Error(`Expected status ${expectedStatus}, but got ${response.status}`);\n      }\n      \n      if (hasData) {\n        if (!response.body && !response.data) {\n          throw new Error('Response should have body or data property');\n        }\n      }\n      \n      if (expectedStatus >= 400) {\n        const errorData = response.body || response.data || {};\n        if (!errorData.error && !errorData.message) {\n          throw new Error('Error responses should have error or message property');\n        }\n      }\n      \n      logReturn('AssertionHelper.assertApiResponse', 'passed');\n    } catch (error) {\n      logReturn('AssertionHelper.assertApiResponse', `failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Asserts email sending behavior using qtests sendEmail utility\n   * \n   * This method provides standardized email assertion patterns for\n   * testing notification workflows and email-dependent functionality.\n   * \n   * @param {Object} expectedEmail - Expected email properties\n   * @param {Object} options - Assertion options\n   */\n  static assertEmailSent(expectedEmail = {}, options = {}) {\n    logStart('AssertionHelper.assertEmailSent', expectedEmail, options);\n    \n    try {\n      const { sendEmail } = require('../lib/envUtils');\n      const emailHistory = sendEmail.getEmailHistory();\n      \n      const { count = 1, index = emailHistory.length - 1 } = options;\n      \n      if (emailHistory.length < count) {\n        throw new Error(`Expected at least ${count} emails, but found ${emailHistory.length}`);\n      }\n      \n      if (index >= emailHistory.length || index < 0) {\n        throw new Error(`Email index ${index} out of range (0-${emailHistory.length - 1})`);\n      }\n      \n      const email = emailHistory[index];\n      \n      if (!email.success) {\n        throw new Error(`Email at index ${index} failed: ${email.message}`);\n      }\n      \n      // Check expected email properties\n      Object.entries(expectedEmail).forEach(([key, value]) => {\n        const emailValue = email.emailData?.[key] || email[key];\n        if (emailValue !== value) {\n          throw new Error(`Expected email.${key} to be ${value}, but got ${emailValue}`);\n        }\n      });\n      \n      logReturn('AssertionHelper.assertEmailSent', 'passed');\n    } catch (error) {\n      logReturn('AssertionHelper.assertEmailSent', `failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Asserts mock function call behavior\n   * \n   * This method provides standardized mock assertion patterns for\n   * verifying function calls and their arguments.\n   * \n   * @param {Function} mockFn - Mock function to check\n   * @param {Object} options - Call assertion options\n   */\n  static assertMockCalled(mockFn, options = {}) {\n    logStart('AssertionHelper.assertMockCalled', mockFn, options);\n    \n    try {\n      if (typeof mockFn !== 'function') {\n        throw new Error('mockFn must be a function');\n      }\n      \n      const { times, calledWith, lastCalledWith } = options;\n      \n      // Check if function has call tracking (Jest-style)\n      if (mockFn.mock) {\n        if (times !== undefined && mockFn.mock.calls.length !== times) {\n          throw new Error(`Expected ${times} calls, but got ${mockFn.mock.calls.length}`);\n        }\n        \n        if (calledWith && !mockFn.mock.calls.some(call => \n          call.every((arg, index) => arg === calledWith[index])\n        )) {\n          throw new Error(`Mock was not called with expected arguments: ${JSON.stringify(calledWith)}`);\n        }\n        \n        if (lastCalledWith && mockFn.mock.calls.length > 0) {\n          const lastCall = mockFn.mock.calls[mockFn.mock.calls.length - 1];\n          if (!lastCall.every((arg, index) => arg === lastCalledWith[index])) {\n            throw new Error(`Mock was not last called with: ${JSON.stringify(lastCalledWith)}`);\n          }\n        }\n      }\n      // Simple call tracking for non-Jest environments\n      else if (mockFn.callCount !== undefined) {\n        if (times !== undefined && mockFn.callCount !== times) {\n          throw new Error(`Expected ${times} calls, but got ${mockFn.callCount}`);\n        }\n      }\n      else {\n        console.log('Warning: Mock function does not support call tracking');\n      }\n      \n      logReturn('AssertionHelper.assertMockCalled', 'passed');\n    } catch (error) {\n      logReturn('AssertionHelper.assertMockCalled', `failed: ${error.message}`);\n      throw error;\n    }\n  }\n}\n\n/**\n * Test Data Factory for Creating Realistic Test Entities\n * \n * This class eliminates duplicate test data creation across test files\n * by providing standardized factory methods for common test entities.\n * All data is realistic and follows common application patterns.\n * \n * Design approach:\n * - Static factory methods for consistency\n * - Realistic default values with override capabilities\n * - Incremental data generation for unique test scenarios\n * - Support for creating multiple related entities\n */\nclass TestDataFactory {\n  static counter = 0;\n\n  /**\n   * Gets next unique counter value for test data\n   * \n   * @returns {number} Incremented counter value\n   */\n  static nextId() {\n    return ++this.counter;\n  }\n\n  /**\n   * Creates a test user with realistic properties\n   * \n   * @param {Object} overrides - Properties to override defaults\n   * @returns {Object} Test user object\n   */\n  static createUser(overrides = {}) {\n    logStart('TestDataFactory.createUser', overrides);\n    \n    const id = this.nextId();\n    const user = {\n      id: `user-${id}`,\n      username: `testuser${id}`,\n      email: `test${id}@example.com`,\n      password: `hashedpassword${id}`,\n      firstName: 'Test',\n      lastName: `User${id}`,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createUser', user);\n    return user;\n  }\n\n  /**\n   * Creates a test API key with realistic properties\n   * \n   * @param {Object} overrides - Properties to override defaults\n   * @returns {Object} Test API key object\n   */\n  static createApiKey(overrides = {}) {\n    logStart('TestDataFactory.createApiKey', overrides);\n    \n    const id = this.nextId();\n    const apiKey = {\n      id: `key-${id}`,\n      key: `test-api-key-${id}-${Math.random().toString(36).substr(2, 9)}`,\n      name: `Test API Key ${id}`,\n      userId: `user-${id}`,\n      isActive: true,\n      permissions: ['read', 'write'],\n      createdAt: new Date(),\n      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createApiKey', apiKey);\n    return apiKey;\n  }\n\n  /**\n   * Creates a test log entry with realistic properties\n   * \n   * @param {Object} overrides - Properties to override defaults\n   * @returns {Object} Test log entry object\n   */\n  static createLogEntry(overrides = {}) {\n    logStart('TestDataFactory.createLogEntry', overrides);\n    \n    const id = this.nextId();\n    const logEntry = {\n      id: `log-${id}`,\n      message: `Test log message ${id}`,\n      level: 'info',\n      timestamp: new Date(),\n      userId: `user-${id}`,\n      source: 'test-application',\n      metadata: {\n        testId: id,\n        environment: 'test'\n      },\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createLogEntry', logEntry);\n    return logEntry;\n  }\n\n  /**\n   * Creates a test configuration object with realistic properties\n   * \n   * @param {Object} overrides - Properties to override defaults\n   * @returns {Object} Test configuration object\n   */\n  static createConfig(overrides = {}) {\n    logStart('TestDataFactory.createConfig', overrides);\n    \n    const id = this.nextId();\n    const config = {\n      id: `config-${id}`,\n      name: `Test Configuration ${id}`,\n      environment: 'test',\n      settings: {\n        apiUrl: `https://api-test-${id}.example.com`,\n        timeout: 5000,\n        retries: 3,\n        debug: true\n      },\n      features: {\n        authentication: true,\n        logging: true,\n        monitoring: false\n      },\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createConfig', config);\n    return config;\n  }\n\n  /**\n   * Creates multiple test entities of the same type\n   * \n   * @param {Function} factory - Factory function to use\n   * @param {number} count - Number of entities to create\n   * @param {Object} baseOverrides - Base overrides for all entities\n   * @returns {Array} Array of created entities\n   */\n  static createMultiple(factory, count, baseOverrides = {}) {\n    logStart('TestDataFactory.createMultiple', factory.name, count, baseOverrides);\n    \n    const entities = Array.from({ length: count }, (_, index) => {\n      return factory.call(this, { ...baseOverrides, index });\n    });\n    \n    logReturn('TestDataFactory.createMultiple', `${count} entities created`);\n    return entities;\n  }\n\n  /**\n   * Creates related test entities (user with API keys, etc.)\n   * \n   * @param {Object} options - Configuration for related entities\n   * @returns {Object} Object containing all related entities\n   */\n  static createRelatedEntities(options = {}) {\n    logStart('TestDataFactory.createRelatedEntities', options);\n    \n    const {\n      userCount = 1,\n      apiKeysPerUser = 2,\n      logsPerUser = 3,\n      configCount = 1\n    } = options;\n    \n    const users = this.createMultiple(this.createUser, userCount);\n    const apiKeys = [];\n    const logs = [];\n    \n    users.forEach(user => {\n      // Create API keys for each user\n      const userApiKeys = this.createMultiple(\n        this.createApiKey,\n        apiKeysPerUser,\n        { userId: user.id }\n      );\n      apiKeys.push(...userApiKeys);\n      \n      // Create logs for each user\n      const userLogs = this.createMultiple(\n        this.createLogEntry,\n        logsPerUser,\n        { userId: user.id }\n      );\n      logs.push(...userLogs);\n    });\n    \n    const configs = this.createMultiple(this.createConfig, configCount);\n    \n    const result = {\n      users,\n      apiKeys,\n      logs,\n      configs\n    };\n    \n    logReturn('TestDataFactory.createRelatedEntities', result);\n    return result;\n  }\n\n  /**\n   * Resets the counter for consistent test data generation\n   */\n  static reset() {\n    this.counter = 0;\n  }\n}\n\n/**\n * Performance Testing Helper for Load and Timing Tests\n * \n * This class provides standardized performance measurement across test suites\n * with timing assertions and concurrency testing capabilities.\n * \n * Design approach:\n * - High-resolution timing using process.hrtime.bigint()\n * - Concurrent operation testing for race condition detection\n * - Memory usage tracking for resource-intensive operations\n * - Statistical analysis of performance metrics\n */\nclass PerformanceTestHelper {\n  /**\n   * Measures execution time of async operations with high precision\n   * \n   * @param {Function} operation - Async operation to measure\n   * @returns {Promise<Object>} Result object with operation result and timing\n   */\n  static async measureTime(operation) {\n    logStart('PerformanceTestHelper.measureTime', operation.name || 'anonymous');\n    \n    try {\n      const start = process.hrtime.bigint();\n      const result = await operation();\n      const end = process.hrtime.bigint();\n      \n      const durationNs = Number(end - start);\n      const durationMs = durationNs / 1000000; // Convert nanoseconds to milliseconds\n      \n      const measurement = {\n        result,\n        duration: durationMs,\n        durationNs,\n        timestamp: new Date()\n      };\n      \n      logReturn('PerformanceTestHelper.measureTime', `${durationMs.toFixed(2)}ms`);\n      return measurement;\n    } catch (error) {\n      logReturn('PerformanceTestHelper.measureTime', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Asserts operation completes within time limit\n   * \n   * @param {Function} operation - Operation to test\n   * @param {number} maxDuration - Maximum allowed duration in milliseconds\n   * @returns {Promise<any>} Operation result if within time limit\n   */\n  static async assertTimingConstraint(operation, maxDuration) {\n    logStart('PerformanceTestHelper.assertTimingConstraint', operation.name, maxDuration);\n    \n    try {\n      const { result, duration } = await this.measureTime(operation);\n      \n      if (duration > maxDuration) {\n        throw new Error(\n          `Operation took ${duration.toFixed(2)}ms, exceeding limit of ${maxDuration}ms`\n        );\n      }\n      \n      logReturn('PerformanceTestHelper.assertTimingConstraint', `passed in ${duration.toFixed(2)}ms`);\n      return result;\n    } catch (error) {\n      logReturn('PerformanceTestHelper.assertTimingConstraint', `failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Tests concurrent operations for race conditions and performance\n   * \n   * @param {Array<Function>} operations - Array of async operations to run concurrently\n   * @returns {Promise<Object>} Results with timing and concurrency analysis\n   */\n  static async testConcurrency(operations) {\n    logStart('PerformanceTestHelper.testConcurrency', `${operations.length} operations`);\n    \n    try {\n      const start = process.hrtime.bigint();\n      \n      // Run all operations concurrently\n      const promises = operations.map(async (operation, index) => {\n        try {\n          const opStart = process.hrtime.bigint();\n          const result = await operation();\n          const opEnd = process.hrtime.bigint();\n          \n          return {\n            index,\n            result,\n            duration: Number(opEnd - opStart) / 1000000,\n            success: true\n          };\n        } catch (error) {\n          return {\n            index,\n            error: error.message,\n            duration: 0,\n            success: false\n          };\n        }\n      });\n      \n      const results = await Promise.all(promises);\n      const end = process.hrtime.bigint();\n      \n      const totalDuration = Number(end - start) / 1000000;\n      const successful = results.filter(r => r.success);\n      const failed = results.filter(r => !r.success);\n      \n      const analysis = {\n        results,\n        totalDuration,\n        successful: successful.length,\n        failed: failed.length,\n        averageDuration: successful.length > 0 \n          ? successful.reduce((sum, r) => sum + r.duration, 0) / successful.length \n          : 0,\n        maxDuration: successful.length > 0 \n          ? Math.max(...successful.map(r => r.duration)) \n          : 0,\n        minDuration: successful.length > 0 \n          ? Math.min(...successful.map(r => r.duration)) \n          : 0\n      };\n      \n      logReturn('PerformanceTestHelper.testConcurrency', \n        `${successful.length}/${operations.length} successful in ${totalDuration.toFixed(2)}ms`);\n      return analysis;\n    } catch (error) {\n      logReturn('PerformanceTestHelper.testConcurrency', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Measures memory usage of operations\n   * \n   * @param {Function} operation - Operation to measure\n   * @returns {Promise<Object>} Result with memory usage statistics\n   */\n  static async measureMemory(operation) {\n    logStart('PerformanceTestHelper.measureMemory', operation.name || 'anonymous');\n    \n    try {\n      // Force garbage collection if available\n      if (global.gc) {\n        global.gc();\n      }\n      \n      const beforeMemory = process.memoryUsage();\n      const result = await operation();\n      const afterMemory = process.memoryUsage();\n      \n      const memoryDelta = {\n        rss: afterMemory.rss - beforeMemory.rss,\n        heapTotal: afterMemory.heapTotal - beforeMemory.heapTotal,\n        heapUsed: afterMemory.heapUsed - beforeMemory.heapUsed,\n        external: afterMemory.external - beforeMemory.external\n      };\n      \n      const measurement = {\n        result,\n        beforeMemory,\n        afterMemory,\n        memoryDelta,\n        timestamp: new Date()\n      };\n      \n      logReturn('PerformanceTestHelper.measureMemory', \n        `heap used: ${(memoryDelta.heapUsed / 1024 / 1024).toFixed(2)}MB`);\n      return measurement;\n    } catch (error) {\n      logReturn('PerformanceTestHelper.measureMemory', `error: ${error.message}`);\n      throw error;\n    }\n  }\n}\n\n/**\n * Unified Test Suite Builder for Comprehensive Test Setup\n * \n * This class provides a fluent interface for configuring comprehensive test\n * environments with all necessary utilities. It combines all helper utilities\n * into a single, easy-to-use API that eliminates setup boilerplate.\n * \n * Usage pattern:\n * ```javascript\n * const suite = new TestSuiteBuilder()\n *   .withDatabase()\n *   .withMocks()\n *   .withPerformance()\n *   .build();\n * ```\n */\nclass TestSuiteBuilder {\n  constructor() {\n    this.dbHelper = null;\n    this.mockManager = new MockManager();\n    this.includePerformance = false;\n    this.autoCleanup = true;\n  }\n\n  /**\n   * Enables database testing with automatic setup/teardown\n   * \n   * @returns {TestSuiteBuilder} This instance for chaining\n   */\n  withDatabase() {\n    logStart('TestSuiteBuilder.withDatabase');\n    this.dbHelper = new DatabaseTestHelper(); // Use direct instantiation to avoid hook issues\n    logReturn('TestSuiteBuilder.withDatabase', 'enabled');\n    return this;\n  }\n\n  /**\n   * Enables API mocking with standard patterns\n   * \n   * @param {Object} options - Mock configuration options\n   * @returns {TestSuiteBuilder} This instance for chaining\n   */\n  withApiMocks(options = {}) {\n    logStart('TestSuiteBuilder.withApiMocks', options);\n    this.mockManager.setupApiClientMocks(options.apiResponses);\n    logReturn('TestSuiteBuilder.withApiMocks', 'enabled');\n    return this;\n  }\n\n  /**\n   * Enables console mocking for output testing\n   * \n   * @returns {TestSuiteBuilder} This instance for chaining\n   */\n  withConsoleMocks() {\n    logStart('TestSuiteBuilder.withConsoleMocks');\n    this.mockManager.setupConsoleMocks();\n    logReturn('TestSuiteBuilder.withConsoleMocks', 'enabled');\n    return this;\n  }\n\n  /**\n   * Enables environment variable mocking\n   * \n   * @param {Object} envVars - Environment variables to set\n   * @returns {TestSuiteBuilder} This instance for chaining\n   */\n  withEnvironmentMocks(envVars = {}) {\n    logStart('TestSuiteBuilder.withEnvironmentMocks', envVars);\n    this.mockManager.setupEnvironmentMocks(envVars);\n    logReturn('TestSuiteBuilder.withEnvironmentMocks', 'enabled');\n    return this;\n  }\n\n  /**\n   * Enables email mocking for notification testing\n   * \n   * @returns {TestSuiteBuilder} This instance for chaining\n   */\n  withEmailMocks() {\n    logStart('TestSuiteBuilder.withEmailMocks');\n    this.mockManager.setupEmailMocks();\n    logReturn('TestSuiteBuilder.withEmailMocks', 'enabled');\n    return this;\n  }\n\n  /**\n   * Enables HTTP integration testing\n   * \n   * @param {Array} responses - HTTP response configurations\n   * @returns {TestSuiteBuilder} This instance for chaining\n   */\n  withHttpMocks(responses = []) {\n    logStart('TestSuiteBuilder.withHttpMocks', responses);\n    this.mockManager.setupHttpMocks(responses);\n    logReturn('TestSuiteBuilder.withHttpMocks', 'enabled');\n    return this;\n  }\n\n  /**\n   * Enables performance testing utilities\n   * \n   * @returns {TestSuiteBuilder} This instance for chaining\n   */\n  withPerformance() {\n    logStart('TestSuiteBuilder.withPerformance');\n    this.includePerformance = true;\n    logReturn('TestSuiteBuilder.withPerformance', 'enabled');\n    return this;\n  }\n\n  /**\n   * Disables automatic cleanup (use for manual cleanup control)\n   * \n   * @returns {TestSuiteBuilder} This instance for chaining\n   */\n  withoutAutoCleanup() {\n    logStart('TestSuiteBuilder.withoutAutoCleanup');\n    this.autoCleanup = false;\n    logReturn('TestSuiteBuilder.withoutAutoCleanup', 'disabled auto cleanup');\n    return this;\n  }\n\n  /**\n   * Builds and returns the configured test suite utilities\n   * \n   * @returns {Object} Object containing all configured test utilities\n   */\n  build() {\n    logStart('TestSuiteBuilder.build');\n    \n    // Note: Automatic cleanup disabled in builder to avoid hook definition issues\n    // Users should call suite.mocks.clearAll() and suite.data.reset() manually in their beforeEach hooks\n\n    const suite = {\n      mocks: this.mockManager,\n      assert: AssertionHelper,\n      data: TestDataFactory,\n      ...(this.dbHelper && { db: this.dbHelper }),\n      ...(this.includePerformance && { performance: PerformanceTestHelper })\n    };\n\n    logReturn('TestSuiteBuilder.build', 'test suite built');\n    return suite;\n  }\n}\n\n// Export all utilities for flexible usage\nmodule.exports = {\n  DatabaseTestHelper,\n  MockManager,\n  AssertionHelper,\n  TestDataFactory,\n  PerformanceTestHelper,\n  TestSuiteBuilder\n};"],"mappings":"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","ignoreList":[]}