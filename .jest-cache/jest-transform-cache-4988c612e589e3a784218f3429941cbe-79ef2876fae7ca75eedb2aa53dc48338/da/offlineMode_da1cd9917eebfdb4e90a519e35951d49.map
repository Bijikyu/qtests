{"version":3,"names":["setLogging","require","process","env","NODE_ENV","createMockAxios","codexFlag","String","CODEX","toLowerCase","offlineFlagExplicit","OFFLINE_MODE","testEnvironment","isOffline","axiosCache","qerrorsCache","setOfflineMode","offline","console","log","stateChanged","clearOfflineCache","error","message","isOfflineMode","getAxios","axiosImplementation","fallbackAxios","getQerrors","qerrorsImplementation","qerrors","fallbackQerrors","getEnvironmentState","state","environmentDetected","JSON","stringify","createEnvironmentAdapters","adapters","axios","undefined","module","exports"],"sources":["offlineMode.js"],"sourcesContent":["/**\n * Offline Mode Testing Utilities\n * \n * This module provides functionality to simulate offline conditions during testing\n * by automatically switching between real and stub implementations of network-dependent\n * modules. This enables testing of application behavior under network failure conditions\n * without requiring actual network connectivity manipulation.\n * \n * Core concept:\n * Many applications need to handle offline scenarios gracefully. This utility\n * allows tests to simulate offline conditions by replacing network-dependent\n * modules (like axios for HTTP requests) and error reporting modules (like qerrors)\n * with stub implementations that behave predictably without network access.\n * \n * Design philosophy:\n * - Automatic switching based on offline mode flag\n * - Transparent replacement of network-dependent modules\n * - Graceful handling of missing optional dependencies\n * - Clean separation between online and offline behavior testing\n * \n * Use cases:\n * - Testing application behavior when network requests fail\n * - Verifying offline-first application logic\n * - Testing error handling in network-dependent code\n * - Simulating poor connectivity scenarios\n */\n\n// Import logging control utility for optional log muting\nconst { setLogging } = require('../lib/logUtils'); // use only setLogging here\nif (process.env.NODE_ENV !== 'test') setLogging(false); //(mute logs outside tests)\n\n// Import mock axios factory for creating configurable mock instances\nconst { createMockAxios } = require('./mockAxios');\n\n// Environment variable detection for automatic offline mode\n// Supports multiple environment variables for different use cases:\n// - CODEX: Used by development/testing environments\n// - OFFLINE_MODE: Explicit offline mode flag\n// - NODE_ENV=test: Automatic offline mode in test environments\nconst codexFlag = String(process.env.CODEX).toLowerCase() === 'true';\nconst offlineFlagExplicit = String(process.env.OFFLINE_MODE).toLowerCase() === 'true';\nconst testEnvironment = process.env.NODE_ENV === 'test';\n\n// Initialize offline mode state with environment variable detection\n// Precedence order: explicit OFFLINE_MODE > CODEX flag > manual setting\n// This allows environment-based automatic configuration while preserving programmatic control\nlet isOffline = offlineFlagExplicit || codexFlag || false; // (tracks offline mode state with env detection)\n\n// Cache variables for required modules //(store loaded modules)\nlet axiosCache; // (cache for axios module)\nlet qerrorsCache; // (cache for qerrors module)\n\n/**\n * Toggle offline mode on or off\n * \n * This function switches the application between online and offline modes\n * for testing purposes. When offline mode is enabled, network-dependent\n * modules are replaced with stub implementations that don't require\n * actual network connectivity.\n * \n * Implementation strategy:\n * 1. Update the global offline state flag\n * 2. Log the state change for debugging\n * 3. Return the new state for confirmation\n * \n * Why a simple boolean flag:\n * - Clear, unambiguous state representation\n * - Easy to reason about in test code\n * - Minimal complexity for maximum reliability\n * - Follows principle of least surprise\n * \n * @param {boolean} offline - Whether to enable offline mode\n * @returns {boolean} The new offline mode state\n * \n * @example\n * setOfflineMode(true);  // Switch to offline mode\n * // Tests here will use stub implementations\n * setOfflineMode(false); // Switch back to online mode\n */\nfunction setOfflineMode(offline) {\n  console.log(`setOfflineMode is running with ${offline}`); // logging function start per requirements\n\n  try {\n    const stateChanged = isOffline !== offline; // check if state differs to know when to clear cache\n    isOffline = offline; // update global offline state flag\n    if (stateChanged) clearOfflineCache(); // wipe caches when toggling state for consistent modules\n    console.log(`setOfflineMode is returning ${isOffline}`); // logging return value per requirements\n    return isOffline;\n  } catch (error) {\n    console.log(`setOfflineMode error: ${error.message}`); // error logging per requirements\n    throw error;\n  }\n}\n\n/**\n * Get current offline mode state\n * \n * This function returns the current offline mode state without changing it.\n * Useful for conditional logic in tests and for debugging test setup.\n * \n * @returns {boolean} Current offline mode state\n * \n * @example\n * if (isOfflineMode()) {\n *   // Handle offline-specific test logic\n * }\n */\nfunction isOfflineMode() {\n  return isOffline;\n}\n\n/**\n * Get appropriate axios implementation based on offline mode\n * \n * This function returns either the real axios module (when online) or\n * the qtests axios stub (when offline). This automatic switching allows\n * tests to seamlessly transition between network-dependent and network-free\n * execution without changing application code.\n * \n * Implementation approach:\n * 1. Check current offline mode state\n * 2. Return appropriate implementation based on state\n * 3. Handle require errors gracefully for missing dependencies\n * 4. Log the decision for debugging purposes\n * \n * Why automatic switching:\n * - Tests can toggle network behavior without code changes\n * - Application code remains unchanged between online/offline testing\n * - Clear separation of concerns between test setup and application logic\n * - Enables comprehensive testing of both network scenarios\n * \n * @returns {Object} Either real axios or qtests axios stub\n * \n * @example\n * const axios = getAxios();\n * // Returns real axios when online, stub when offline\n * const response = await axios.get('/api/data');\n */\nfunction getAxios() {\n  console.log(`getAxios is running with offline: ${isOffline}`); // logging function start per requirements\n  \n  try {\n    // Check cache first to avoid repeated module loading and maintain consistency\n    // Caching prevents different axios implementations during single test run\n    // Essential for predictable behavior when offline mode doesn't change mid-test\n    // Cache also improves performance by avoiding repeated require() calls\n    if (axiosCache) {\n      console.log(`getAxios is returning ${axiosCache}`); // logging return value per requirements\n      return axiosCache;\n    }\n\n    // Declare variable to hold appropriate axios implementation\n    // Declared outside if/else to maintain consistent scope and enable caching\n    let axiosImplementation;\n\n    if (isOffline) {\n      // For compatibility with integration tests that compare instances directly,\n      // return the original stub module. The cache behavior is handled by axiosCache.\n      axiosImplementation = require(`../stubs/axios`);\n    } else {\n      // Load real axios module for online mode when network calls are intended\n      // Standard require path allows npm to resolve axios from node_modules\n      // Used when tests need to verify actual HTTP behavior or integration testing\n      axiosImplementation = require(`axios`);\n    }\n\n    // Cache the loaded implementation for consistent behavior and performance\n    // Prevents mode switching from loading different implementations mid-test\n    // Ensures same axios instance used throughout test execution for predictability\n    axiosCache = axiosImplementation;\n    console.log(`getAxios is returning ${axiosCache}`); // logging return value per requirements\n    return axiosCache;\n\n  } catch (error) {\n    // Handle module loading failures by falling back to stub implementation\n    // Real axios might fail to load due to missing dependency or installation issues\n    // Stub fallback ensures tests can continue running even with axios installation problems\n    // This graceful degradation prevents test suite failures due to dependency issues\n    console.log(`getAxios error: ${error.message}`);\n    const fallbackAxios = require(`../stubs/axios`);\n    axiosCache = fallbackAxios; // cache fallback to maintain consistency\n    console.log(`getAxios is returning ${axiosCache}`); // logging return value per requirements\n    return axiosCache;\n  }\n}\n\n/**\n * Get appropriate qerrors implementation based on offline mode\n * \n * Similar to getAxios, this function returns either the real qerrors module\n * or a stub implementation based on the current offline mode state.\n * qerrors is commonly used for error reporting, which often involves\n * network requests to logging services.\n * \n * Offline mode considerations for error reporting:\n * - Error reporting services are often network-dependent\n * - Offline applications need to handle error reporting gracefully\n * - Tests shouldn't fail due to error reporting service unavailability\n * - Stub implementation allows testing error handling logic separately\n * \n * @returns {Object} Either real qerrors or stub implementation\n * \n * @example\n * const qerrors = getQerrors();\n * // Returns real qerrors when online, stub when offline\n * qerrors.report(new Error('Test error'));\n */\nfunction getQerrors() {\n  console.log(`getQerrors is running with offline: ${isOffline}`); // logging function start per requirements\n  \n  try {\n    if (qerrorsCache) { // return cached module if available\n      console.log(`getQerrors is returning ${qerrorsCache}`); // logging return value per requirements\n      return qerrorsCache;\n    }\n\n    let qerrorsImplementation; // module holder variable\n\n    if (isOffline) {\n      // Enhanced no-op qerrors implementation for offline environments\n      // Provides same interface as real qerrors but only logs locally\n      // Includes debugging output to help track error reporting behavior\n      qerrorsImplementation = {\n        qerrors: () => {\n          console.log(`noopQerrors is running with none`); // Log function entry for debugging\n          try {\n            console.log(`noopQerrors has run`); // Log successful execution\n          } catch(error) {\n            console.log(`noopQerrors error ${error.message}`); // Log any unexpected errors\n          }\n        }\n      };\n    } else {\n      // Conditionally load qerrors only in online environments to prevent module not found errors\n      // Dynamic import prevents errors in offline mode when qerrors module is unavailable\n      qerrorsImplementation = require(`qerrors`); // load real qerrors for online mode with backticks\n    }\n\n    qerrorsCache = qerrorsImplementation; // store in cache for future use\n    console.log(`getQerrors is returning ${qerrorsCache}`); // logging return value per requirements\n    return qerrorsCache;\n\n  } catch (error) {\n    console.log(`getQerrors error: ${error.message}`); // error logging per requirements\n    const fallbackQerrors = { qerrors: () => {} }; // create fallback stub\n    qerrorsCache = fallbackQerrors; // store fallback in cache\n    console.log(`getQerrors is returning ${qerrorsCache}`); // logging return value per requirements\n    return qerrorsCache;\n  }\n}\n\n/**\n * Get environment detection state for debugging and configuration\n * \n * This function returns the current state of environment variable detection\n * to help with debugging and understanding how offline mode was configured.\n * Useful for troubleshooting environment-specific behavior.\n * \n * @returns {Object} Environment detection state information\n * \n * @example\n * const envState = getEnvironmentState();\n * console.log(`CODEX flag: ${envState.codexFlag}`);\n * console.log(`Offline mode: ${envState.isOffline}`);\n */\nfunction getEnvironmentState() {\n  console.log(`getEnvironmentState is running with none`);\n  \n  try {\n    const state = {\n      codexFlag,\n      offlineFlagExplicit,\n      testEnvironment,\n      isOffline,\n      environmentDetected: codexFlag || offlineFlagExplicit\n    };\n    console.log(`getEnvironmentState is returning ${JSON.stringify(state)}`);\n    return state;\n  } catch (error) {\n    console.log(`getEnvironmentState error: ${error.message}`);\n    throw error;\n  }\n}\n\n/**\n * Create environment-aware adapters based on current offline state\n * \n * This function provides a convenient way to get both axios and qerrors\n * implementations in a single call, configured appropriately for the\n * current environment. This matches the pattern from your provided\n * environment adapter functionality.\n * \n * @returns {Object} Object containing axios and qerrors implementations\n * \n * @example\n * const { axios, qerrors } = createEnvironmentAdapters();\n * const response = await axios.get('/api/data');\n * qerrors.report(new Error('Test error'));\n */\nfunction createEnvironmentAdapters() {\n  console.log(`createEnvironmentAdapters is running with offline: ${isOffline}`);\n  \n  try {\n    const adapters = {\n      isOffline,\n      axios: getAxios(),\n      qerrors: getQerrors()\n    };\n    console.log(`createEnvironmentAdapters is returning adapters`);\n    return adapters;\n  } catch (error) {\n    console.log(`createEnvironmentAdapters error: ${error.message}`);\n    throw error;\n  }\n}\n\nfunction clearOfflineCache() { // reset caches for testing purposes\n  console.log(`clearOfflineCache is running with none`); // logging function start per requirements\n  \n  try {\n    axiosCache = undefined; // clear axios cache\n    qerrorsCache = undefined; // clear qerrors cache\n    console.log(`clearOfflineCache is returning undefined`); // logging return value per requirements\n  } catch (error) {\n    console.log(`clearOfflineCache error: ${error.message}`); // error logging per requirements\n    throw error;\n  }\n}\n\n// export offline mode utilities at bottom per requirements\nmodule.exports = {\n  setOfflineMode, // control offline mode state\n  isOfflineMode, // get current offline state\n  getAxios, // get appropriate axios implementation\n  getQerrors, // get appropriate qerrors implementation\n  getEnvironmentState, // get environment detection information\n  createEnvironmentAdapters, // create complete environment-aware adapter set\n  clearOfflineCache // reset module caches\n};"],"mappings":"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","ignoreList":[]}