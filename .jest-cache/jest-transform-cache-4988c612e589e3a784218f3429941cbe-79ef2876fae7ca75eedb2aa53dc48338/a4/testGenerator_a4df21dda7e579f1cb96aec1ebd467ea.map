{"version":3,"names":["fs","require","path","DEFAULT_CONFIG","SRC_DIR","TEST_DIR","KNOWN_MOCKS","VALID_EXTS","PATTERNS","qtests","api","exportsES","exportsCommonJS","functionDeclarations","classDeclarations","imports","TestGenerator","constructor","options","config","scanned","isESModule","detectESModule","packagePath","resolve","process","cwd","existsSync","packageJson","JSON","parse","readFileSync","type","name","version","sourceFiles","walkProject","filter","file","ext","extname","isValidExt","includes","isTestFile","basename","isNodeModules","slice","esModuleCount","commonJSCount","content","error","shouldSkipDirectory","dirName","skipPatterns","startsWith","currentDir","walkRecursive","dir","readdirSync","withFileTypes","flatMap","entry","full","isDirectory","walk","categorizeFiles","files","existingTests","forEach","push","hasTest","hasCorrespondingTest","filename","testPatterns","some","pattern","test","sourceFile","allFiles","dirname","sameDirectoryTests","map","join","testDirectories","testDirectoryTests","testDir","testPath","allTestPaths","getRelativeTestPath","rel","relative","testExt","replace","createDir","p","mkdirSync","recursive","writeIfMissing","writeFileSync","getUsedModules","matchAll","m","x","createUnitTest","exports","usesQtests","mocks","isTypeScript","useESModules","lines","length","lib","fn","createApiTest","method","route","toUpperCase","toLowerCase","extractExports","Set","cleanContent","esExports","match","add","commonJSExports","i","objectExportMatch","objectContent","propertyMatches","functionDecls","classDecls","Array","from","analyze","mockTargets","created","apis","scaffoldJestSetup","trim","setup","generateTestRunner","isESModuleProject","templatePath","__dirname","runnerContent","convertToESModule","generateESModuleTemplate","generateCommonJSTemplate","outputPath","updatePackageJsonTestScript","console","message","commonJSCode","log","scripts","stringify","generate","projectFiles","label","getResults","module"],"sources":["testGenerator.js"],"sourcesContent":["/**\n * Test Generator for qtests Framework\n * \n * Automatically generates unit tests and API tests by scanning source code.\n * Analyzes JavaScript/TypeScript files to detect exports, imports, and API routes,\n * then creates appropriate test files with proper structure and mocking.\n * \n * Features:\n * - Unit test generation for exported functions/classes\n * - API test generation for Express routes\n * - Automatic mock setup for known libraries\n * - Jest configuration scaffolding\n * - Support for qtests framework integration\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\n// Configuration constants\nconst DEFAULT_CONFIG = {\n  SRC_DIR: 'src',\n  TEST_DIR: 'tests/integration',\n  KNOWN_MOCKS: ['axios', 'node-fetch', 'pg', 'mongoose', 'fs', 'redis'],\n  VALID_EXTS: ['.ts', '.js', '.tsx', '.jsx']\n};\n\n// Regex patterns for code analysis - Enhanced for both ES modules and CommonJS\nconst PATTERNS = {\n  qtests: /from ['\"]qtests['\"]|require\\(['\"]qtests['\"]\\)/,\n  api: /\\b(app|router)\\.(get|post|put|delete|patch)\\s*\\(\\s*['\"`]([^'\"`]+)['\"`]/gi,\n  // ES module exports: export const, export function, export class\n  exportsES: /^\\s*export\\s+(?:const|function|class)\\s+([a-zA-Z0-9_]+)/gm,\n  // CommonJS exports: module.exports = {}, module.exports.name =, exports.name =\n  exportsCommonJS: /(?:module\\.exports\\.([a-zA-Z0-9_]+)\\s*=|exports\\.([a-zA-Z0-9_]+)\\s*=|module\\.exports\\s*=\\s*([a-zA-Z0-9_]+))/gm,\n  // Function declarations that might be exported\n  functionDeclarations: /^\\s*(?:async\\s+)?function\\s+([a-zA-Z0-9_]+)\\s*\\(/gm,\n  // Class declarations that might be exported\n  classDeclarations: /^\\s*class\\s+([a-zA-Z0-9_]+)/gm,\n  imports: /from ['\"]([^'\"]+)['\"]|require\\(['\"]([^'\"]+)['\"]\\)/g\n};\n\nclass TestGenerator {\n  constructor(options = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...options };\n    this.scanned = [];\n    this.isESModule = this.detectESModule(); // Detect module type once during initialization\n  }\n\n  /**\n   * Detect if the current project uses ES modules or CommonJS\n   * Checks package.json for \"type\": \"module\" and source file patterns\n   * DEFAULTS TO COMMONJS when ambiguous for maximum compatibility\n   */\n  detectESModule() {\n    try {\n      // Check package.json for explicit \"type\": \"module\"\n      const packagePath = path.resolve(process.cwd(), 'package.json');\n      if (fs.existsSync(packagePath)) {\n        const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));\n        if (packageJson.type === 'module') {\n          return true;\n        }\n        // If package.json exists without \"type\": \"module\", default to CommonJS for compatibility\n        if (packageJson.name || packageJson.version) {\n          return false;\n        }\n      }\n      \n      // Check for ES module patterns in source files (excluding test files and node_modules)\n      const sourceFiles = this.walkProject()\n        .filter(file => {\n          const ext = path.extname(file);\n          const isValidExt = this.config.VALID_EXTS.includes(ext);\n          const isTestFile = this.isTestFile(path.basename(file));\n          const isNodeModules = file.includes('node_modules');\n          return isValidExt && !isTestFile && !isNodeModules;\n        })\n        .slice(0, 10); // Sample first 10 files for performance\n      \n      let esModuleCount = 0;\n      let commonJSCount = 0;\n      \n      for (const file of sourceFiles) {\n        try {\n          const content = fs.readFileSync(file, 'utf8');\n          // Look for ES module patterns (import OR export statements)\n          if (content.includes('import ') || content.includes('export ')) {\n            esModuleCount++;\n          }\n          // Look for CommonJS patterns\n          if (content.includes('require(') || content.includes('module.exports')) {\n            commonJSCount++;\n          }\n        } catch (error) {\n          // Skip files we can't read\n          continue;\n        }\n      }\n      \n      // Return true if ES modules are more prevalent, but require some confidence\n      // Default to CommonJS when ambiguous for maximum Jest compatibility  \n      if (esModuleCount === 0 && commonJSCount === 0) {\n        return false; // No clear patterns found, default to CommonJS\n      }\n      if (esModuleCount === 0) {\n        return false; // No ES module patterns found, default to CommonJS\n      }\n      return esModuleCount > commonJSCount;\n    } catch (error) {\n      // Always default to CommonJS if detection fails\n      return false;\n    }\n  }\n\n  /**\n   * Check if directory should be skipped during discovery\n   */\n  shouldSkipDirectory(dirName) {\n    const skipPatterns = [\n      'node_modules', '.git', '.next', 'dist', 'build', 'coverage',\n      '.vscode', '.idea', 'docs', 'documentation', 'assets', 'public', 'static',\n      '.replit_cache', '.config', '.npm', 'logs'\n    ];\n    return skipPatterns.includes(dirName) || dirName.startsWith('.');\n  }\n\n  /**\n   * Walk entire project directory structure, respecting skip patterns\n   */\n  walkProject() {\n    const currentDir = process.cwd();\n    return this.walkRecursive(currentDir);\n  }\n\n  /**\n   * Recursively walk directory and return all file paths, skipping irrelevant directories\n   */\n  walkRecursive(dir) {\n    if (!fs.existsSync(dir)) {\n      return [];\n    }\n    \n    return fs.readdirSync(dir, { withFileTypes: true }).flatMap(entry => {\n      const full = path.resolve(dir, entry.name);\n      \n      if (entry.isDirectory()) {\n        // Skip directories that shouldn't contain tests or source files\n        if (this.shouldSkipDirectory(entry.name)) {\n          return [];\n        }\n        return this.walkRecursive(full);\n      } else {\n        return [full];\n      }\n    });\n  }\n\n  /**\n   * Legacy walk method for backwards compatibility (walks single directory)\n   */\n  walk(dir) {\n    if (!fs.existsSync(dir)) {\n      return [];\n    }\n    \n    return fs.readdirSync(dir, { withFileTypes: true }).flatMap(entry => {\n      const full = path.resolve(dir, entry.name);\n      return entry.isDirectory() ? this.walk(full) : full;\n    });\n  }\n\n  /**\n   * Categorize discovered files into source files and existing tests\n   */\n  categorizeFiles(files) {\n    const sourceFiles = [];\n    const existingTests = [];\n    \n    files.forEach(file => {\n      const ext = path.extname(file);\n      const basename = path.basename(file);\n      \n      // Skip files with invalid extensions\n      if (!this.config.VALID_EXTS.includes(ext)) {\n        return;\n      }\n      \n      // Check if this is a test file\n      if (this.isTestFile(basename)) {\n        existingTests.push(file);\n      } else {\n        // Check if this source file already has a corresponding test\n        const hasTest = this.hasCorrespondingTest(file, files);\n        if (!hasTest) {\n          sourceFiles.push(file);\n        }\n      }\n    });\n    \n    return { sourceFiles, existingTests };\n  }\n\n  /**\n   * Check if filename indicates it's a test file\n   */\n  isTestFile(filename) {\n    const testPatterns = [\n      /\\.test\\./,\n      /\\.spec\\./,\n      /_test\\./,\n      /_spec\\./,\n      /\\.e2e\\./,\n      /\\.integration\\./\n    ];\n    \n    return testPatterns.some(pattern => pattern.test(filename));\n  }\n\n  /**\n   * Check if a source file has a corresponding test file\n   */\n  hasCorrespondingTest(sourceFile, allFiles) {\n    const dir = path.dirname(sourceFile);\n    const basename = path.basename(sourceFile, path.extname(sourceFile));\n    const ext = path.extname(sourceFile);\n    \n    // Common test file patterns to look for\n    const testPatterns = [\n      `${basename}.test${ext}`,\n      `${basename}.spec${ext}`,\n      `${basename}_test${ext}`,\n      `${basename}_spec${ext}`,\n      `${basename}.test.js`,\n      `${basename}.spec.js`,\n      `${basename}.test.ts`,\n      `${basename}.spec.ts`\n    ];\n    \n    // Look for test files in the same directory\n    const sameDirectoryTests = testPatterns.map(pattern => \n      path.join(dir, pattern)\n    );\n    \n    // Look for test files in common test directories\n    const testDirectories = ['tests', 'test', '__tests__', 'spec'];\n    const testDirectoryTests = testDirectories.flatMap(testDir => {\n      const testPath = path.join(dir, testDir);\n      return testPatterns.map(pattern => path.join(testPath, pattern));\n    });\n    \n    // Check if any of these test files exist\n    const allTestPaths = [...sameDirectoryTests, ...testDirectoryTests];\n    return allTestPaths.some(testPath => \n      allFiles.some(file => path.resolve(file) === path.resolve(testPath))\n    );\n  }\n\n  /**\n   * Generate test file path based on source file and test type\n   * Supports both feature-first (tests alongside files) and traditional (separate test directory) structures\n   */\n  getRelativeTestPath(file, type = 'unit') {\n    const dir = path.dirname(file);\n    const basename = path.basename(file, path.extname(file));\n    const ext = path.extname(file);\n    \n    if (type === 'unit') {\n      // For unit tests, place them alongside the source file with matching extension\n      return path.join(dir, `${basename}.test${ext}`);\n    } else {\n      // For API/integration tests, use the configured test directory\n      // Preserve TypeScript for .ts/.tsx files, use JavaScript for others\n      const rel = path.relative(process.cwd(), file);\n      const testExt = ['.ts', '.tsx'].includes(ext) ? '.ts' : '.js';\n      return path.join(this.config.TEST_DIR, rel.replace(/\\.[tj]sx?$/, `.test${testExt}`).replace(/[\\\\/]/g, '__'));\n    }\n  }\n\n  /**\n   * Create directory if it doesn't exist\n   */\n  createDir(p) {\n    const dir = path.dirname(p);\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n  }\n\n  /**\n   * Write file only if it doesn't already exist\n   */\n  writeIfMissing(p, content) {\n    if (!fs.existsSync(p)) {\n      this.createDir(p);\n      fs.writeFileSync(p, content, 'utf8');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Extract imported modules from file content - Enhanced for both ES modules and CommonJS\n   */\n  getUsedModules(content) {\n    return [...content.matchAll(PATTERNS.imports)]\n      .map(m => m[1] || m[2]) // m[1] for ES modules, m[2] for CommonJS\n      .filter(x => x && !x.startsWith('.') && !x.startsWith('/'));\n  }\n\n  /**\n   * Generate unit test content for a file - parallel-safe design\n   */\n  createUnitTest(file, exports, usesQtests, mocks) {\n    const ext = path.extname(file);\n    const isTypeScript = ['.ts', '.tsx'].includes(ext);\n    const useESModules = this.isESModule;\n    \n    const lines = [\n      `// Auto-generated unit test for ${path.basename(file)}`,\n      `// PARALLEL-SAFE DESIGN: This test avoids race conditions by:`,\n      `// - Using unique test identifiers (hrtime + random)`,\n      `// - Isolated mock state per test`,\n      `// - No shared global variables`,\n      `// - Test-scoped data generation`,\n      ``\n    ];\n    \n    // Generate unique test session ID for parallel safety\n    lines.push(`// Unique test session ID for parallel execution safety`);\n    lines.push(`const testSessionId = \\`\\${process.hrtime.bigint()}-\\${Math.random().toString(36).substr(2, 9)}\\`;`);\n    lines.push(``);\n    \n    // Fast test setup with parallel-safe imports\n    if (usesQtests) {\n      if (useESModules) {\n        lines.push(`import { test } from 'qtests';`);\n      } else {\n        lines.push(`const { test } = require('qtests');`);\n      }\n    }\n    \n    // Parallel-safe mock setup - isolated per test\n    if (mocks.length > 0) {\n      lines.push(`// Parallel-safe mock setup - isolated per test execution`);\n      mocks.forEach(lib => {\n        if (useESModules) {\n          lines.push(`jest.mock('${lib}', () => ({`);\n          lines.push(`  __esModule: true,`);\n          lines.push(`  default: jest.fn(),`);\n          lines.push(`  // Each test gets fresh mock instances`);\n          lines.push(`  ...jest.requireActual('${lib}')`);\n          lines.push(`}));`);\n        } else {\n          lines.push(`jest.mock('${lib}', () => ({`);\n          lines.push(`  __esModule: true,`);\n          lines.push(`  default: jest.fn(),`);\n          lines.push(`  // Each test gets fresh mock instances`);\n          lines.push(`  ...jest.requireActual('${lib}')`);\n          lines.push(`}));`);\n        }\n      });\n      lines.push(``);\n    }\n    \n    // Import the module under test\n    const basename = path.basename(file, path.extname(file));\n    if (useESModules) {\n      lines.push(`import * as moduleUnderTest from './${basename}${ext}';`, '');\n    } else {\n      lines.push(`const moduleUnderTest = require('./${basename}${ext}');`, '');\n    }\n    \n    // Parallel-safe test suite\n    lines.push(`describe(\\`${path.basename(file)} [\\${testSessionId}]\\`, () => {`);\n    lines.push(`  // Isolated test data for each test function`);\n    lines.push(`  const createUniqueTestData = (prefix = 'test') => ({`);\n    lines.push(`    id: \\`\\${prefix}-\\${testSessionId}-\\${Date.now()}-\\${Math.random().toString(36).substr(2, 6)}\\`,`);\n    lines.push(`    timestamp: new Date(),`);\n    lines.push(`    sessionId: testSessionId`);\n    lines.push(`  });`);\n    lines.push(``);\n    \n    for (const fn of exports) {\n      lines.push(`  test('${fn} works', async () => {`);\n      lines.push(`    // Unique test data for this specific test execution`);\n      lines.push(`    const testData = createUniqueTestData('${fn}');`);\n      lines.push(`    `);\n      lines.push(`    // Verify function exists and is callable`);\n      lines.push(`    expect(typeof moduleUnderTest.${fn}).toBeDefined();`);\n      lines.push(`    expect(typeof moduleUnderTest.${fn}).not.toBe('undefined');`);\n      lines.push(`    `);\n      lines.push(`    // TODO: Add specific test logic using testData for uniqueness`);\n      lines.push(`    // Example: const result = await moduleUnderTest.${fn}(testData);`);\n      lines.push(`    // expect(result).toBeDefined();`);\n      lines.push('  });');\n      lines.push(``);\n    }\n    \n    lines.push('});\\n');\n    return lines.join('\\n');\n  }\n\n  /**\n   * Generate API test content for an endpoint - parallel-safe design\n   */\n  createApiTest(method, route, isTypeScript = false) {\n    const useESModules = this.isESModule;\n    const lines = [\n      `// Auto-generated API test for ${method.toUpperCase()} ${route}`,\n      `// PARALLEL-SAFE DESIGN: This test avoids race conditions by:`,\n      `// - Using unique endpoint paths per test execution`,\n      `// - Isolated app instances with unique ports`,\n      `// - Test-specific request data to avoid conflicts`,\n      `// - No shared server state between parallel tests`,\n      ``\n    ];\n    \n    // Generate unique test session for API isolation\n    lines.push(`// Unique API test session for parallel execution safety`);\n    lines.push(`const apiTestSession = \\`\\${process.hrtime.bigint()}-\\${Math.random().toString(36).substr(2, 9)}\\`;`);\n    lines.push(`const uniqueRoute = '${route}' + (${route}.includes('?') ? '&' : '?') + 'testSession=' + apiTestSession;`);\n    lines.push(``);\n    \n    // Import httpTest with appropriate module syntax\n    if (useESModules) {\n      lines.push(`import { httpTest } from 'qtests/lib/envUtils';`, '');\n    } else {\n      lines.push(`const { httpTest } = require('qtests/lib/envUtils');`, '');\n    }\n    \n    // Parallel-safe test suite with unique naming\n    lines.push(`describe(\\`${method.toUpperCase()} ${route} [API-\\${apiTestSession}]\\`, () => {`);\n    lines.push(`  // Test data factory for unique request/response data`);\n    lines.push(`  const createUniqueTestData = () => ({`);\n    lines.push(`    sessionId: apiTestSession,`);\n    lines.push(`    requestId: \\`req-\\${Date.now()}-\\${Math.random().toString(36).substr(2, 6)}\\`,`);\n    lines.push(`    timestamp: new Date().toISOString(),`);\n    lines.push(`    // Add more test-specific data as needed`);\n    lines.push(`  });`);\n    lines.push(``);\n    \n    lines.push(`  test('should succeed with unique test data', async () => {`);\n    lines.push(`    const testData = createUniqueTestData();`);\n    lines.push(`    const app = httpTest.createMockApp();`);\n    lines.push(`    `);\n    lines.push(`    app.${method.toLowerCase()}(uniqueRoute, (req, res) => {`);\n    lines.push(`      res.statusCode = 200;`);\n    lines.push(`      res.setHeader('content-type', 'application/json');`);\n    lines.push(`      res.end(JSON.stringify({ `);\n    lines.push(`        success: true, `);\n    lines.push(`        testSession: apiTestSession,`);\n    lines.push(`        requestId: testData.requestId`);\n    lines.push(`      }));`);\n    lines.push(`    });`);\n    lines.push(`    `);\n    lines.push(`    const res = await httpTest.supertest(app)`);\n    lines.push(`      .${method.toLowerCase()}(uniqueRoute)`);\n    lines.push(`      .send(testData) // Send unique test data`);\n    lines.push(`      .expect(200);`);\n    lines.push(`    `);\n    lines.push(`    expect(res.body.success).toBe(true);`);\n    lines.push(`    expect(res.body.testSession).toBe(apiTestSession);`);\n    lines.push('  });', '');\n    \n    lines.push('  test(\\'should handle error responses with unique context\\', async () => {');\n    lines.push(`    const testData = createUniqueTestData();`);\n    lines.push(`    const app = httpTest.createMockApp();`);\n    lines.push(`    `);\n    lines.push(`    app.${method.toLowerCase()}(uniqueRoute, (req, res) => {`);\n    lines.push(`      res.statusCode = 400;`);\n    lines.push(`      res.setHeader('content-type', 'application/json');`);\n    lines.push(`      res.end(JSON.stringify({ `);\n    lines.push(`        error: 'Bad request', `);\n    lines.push(`        testSession: apiTestSession,`);\n    lines.push(`        requestId: testData.requestId`);\n    lines.push(`      }));`);\n    lines.push(`    });`);\n    lines.push(`    `);\n    lines.push(`    const res = await httpTest.supertest(app)`);\n    lines.push(`      .${method.toLowerCase()}(uniqueRoute)`);\n    lines.push(`      .send(testData) // Send unique test data`);\n    lines.push(`      .expect(400);`);\n    lines.push(`    `);\n    lines.push(`    expect(res.body.error).toBe('Bad request');`);\n    lines.push(`    expect(res.body.testSession).toBe(apiTestSession);`);\n    lines.push('  });');\n    lines.push('});\\n');\n    return lines.join('\\n');\n  }\n\n  /**\n   * Intelligently extract exports from both ES modules and CommonJS\n   */\n  extractExports(content) {\n    const exports = new Set();\n    \n    // Remove comments to avoid false positives\n    const cleanContent = content\n      .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove /* */ comments\n      .replace(/\\/\\/.*$/gm, ''); // Remove // comments\n    \n    // Extract ES module exports (export const/function/class)\n    const esExports = [...cleanContent.matchAll(PATTERNS.exportsES)];\n    esExports.forEach(match => {\n      if (match[1]) exports.add(match[1]);\n    });\n    \n    // Extract CommonJS exports\n    const commonJSExports = [...cleanContent.matchAll(PATTERNS.exportsCommonJS)];\n    commonJSExports.forEach(match => {\n      // match[1] = module.exports.name, match[2] = exports.name, match[3] = single assignment\n      for (let i = 1; i <= 3; i++) {\n        if (match[i]) exports.add(match[i]);\n      }\n    });\n    \n    // Handle module.exports = { name1, name2, ... } pattern\n    const objectExportMatch = cleanContent.match(/module\\.exports\\s*=\\s*\\{([^}]+)\\}/);\n    if (objectExportMatch) {\n      const objectContent = objectExportMatch[1];\n      // Extract property names from object (handles both shorthand and key: value)\n      const propertyMatches = objectContent.matchAll(/\\b(\\w+)(?:\\s*:\\s*\\w+)?\\s*[,}]/g);\n      for (const match of propertyMatches) {\n        if (match[1]) exports.add(match[1]);\n      }\n    }\n    \n    // Look for function declarations that might be exported\n    const functionDecls = [...cleanContent.matchAll(PATTERNS.functionDeclarations)];\n    const classDecls = [...cleanContent.matchAll(PATTERNS.classDeclarations)];\n    \n    // Check if functions/classes are mentioned in exports\n    functionDecls.forEach(match => {\n      if (match[1] && (cleanContent.includes(`exports.${match[1]}`) || cleanContent.includes(`module.exports.${match[1]}`) || cleanContent.includes(`module.exports = ${match[1]}`) || cleanContent.includes(`${match[1]},`) || cleanContent.includes(`${match[1]}`))) {\n        // Additional check to ensure it's actually in an export context\n        if (cleanContent.includes(`module.exports`) && cleanContent.includes(match[1])) {\n          exports.add(match[1]);\n        }\n      }\n    });\n    \n    classDecls.forEach(match => {\n      if (match[1] && (cleanContent.includes(`exports.${match[1]}`) || cleanContent.includes(`module.exports.${match[1]}`) || cleanContent.includes(`module.exports = ${match[1]}`) || cleanContent.includes(`${match[1]},`) || cleanContent.includes(`${match[1]}`))) {\n        // Additional check to ensure it's actually in an export context\n        if (cleanContent.includes(`module.exports`) && cleanContent.includes(match[1])) {\n          exports.add(match[1]);\n        }\n      }\n    });\n    \n    return Array.from(exports).filter(name => name && name.length > 0);\n  }\n\n  /**\n   * Analyze a single file and generate appropriate tests - Enhanced for both module systems\n   */\n  analyze(file) {\n    const ext = path.extname(file);\n    if (!this.config.VALID_EXTS.includes(ext)) {\n      return;\n    }\n\n    const content = fs.readFileSync(file, 'utf8');\n    const usesQtests = PATTERNS.qtests.test(content);\n    const imports = this.getUsedModules(content);\n    const mockTargets = imports.filter(i => \n      this.config.KNOWN_MOCKS.includes(i) && i !== 'qtests'\n    );\n\n    // Use intelligent export detection for both ES modules and CommonJS\n    const exports = this.extractExports(content);\n    if (exports.length > 0) {\n      const testPath = this.getRelativeTestPath(file, 'unit');\n      const created = this.writeIfMissing(\n        testPath, \n        this.createUnitTest(file, exports, usesQtests, mockTargets)\n      );\n      if (created) {\n        this.scanned.push({ \n          type: 'unit', \n          file: path.relative('.', testPath) \n        });\n      }\n    }\n\n    // Generate API tests for detected routes\n    const apis = [...content.matchAll(PATTERNS.api)];\n    for (const [, , method, route] of apis) {\n      const isTypeScript = ['.ts', '.tsx'].includes(ext);\n      const testPath = this.getRelativeTestPath(file, 'api')\n        .replace(/\\.test\\.[jt]s$/, `__${method.toLowerCase()}.test${isTypeScript ? '.ts' : '.js'}`);\n      const created = this.writeIfMissing(\n        testPath, \n        this.createApiTest(method, route, isTypeScript)\n      );\n      if (created) {\n        this.scanned.push({ \n          type: 'api', \n          file: path.relative('.', testPath) \n        });\n      }\n    }\n  }\n\n  /**\n   * Create Jest configuration and setup files - ES Module aware\n   */\n  scaffoldJestSetup() {\n    const useESModules = this.isESModule;\n    \n    // Generate Jest config based on module type\n    const config = useESModules ? `\n// jest.config.js - ES Module configuration\nexport default {\n  preset: 'ts-jest/presets/default-esm',\n  extensionsToTreatAsEsm: ['.ts'],\n  testEnvironment: 'node',\n  setupFilesAfterEnv: ['./tests/setup.ts'],\n  moduleFileExtensions: ['ts', 'js', 'json'],\n  roots: ['<rootDir>/src', '<rootDir>/tests'],\n  globals: {\n    'ts-jest': {\n      useESM: true\n    }\n  },\n  moduleNameMapping: {\n    '^(\\\\.{1,2}/.*)\\\\.js$': '$1'\n  }\n};\n`.trim() : `\n// jest.config.js - CommonJS configuration\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  setupFilesAfterEnv: ['./tests/setup.ts'],\n  moduleFileExtensions: ['ts', 'js', 'json'],\n  roots: ['<rootDir>/src', '<rootDir>/tests'],\n};\n`.trim();\n\n    // Generate setup file based on module type\n    const setup = useESModules ? `\n// tests/setup.ts - ES Module setup\nlet server;\n\nbeforeAll(async () => {\n  const { default: app } = await import('../src/app.js');\n  server = app.listen(4000, () => console.log('Test server started'));\n});\n\nafterAll(async () => {\n  if (server) server.close();\n});\n`.trim() : `\n// tests/setup.ts - CommonJS setup\nlet server;\n\nbeforeAll(async () => {\n  const app = require('../src/app').default || require('../src/app');\n  server = app.listen(4000, () => console.log('Test server started'));\n});\n\nafterAll(async () => {\n  if (server) server.close();\n});\n`.trim();\n\n    this.writeIfMissing('jest.config.js', config);\n    this.writeIfMissing('tests/setup.ts', setup);\n  }\n\n  /**\n   * Generate qtests test runner file and update package.json\n   * Creates qtests-runner.js and updates the test script in package.json\n   * Automatically handles ES module compatibility\n   */\n  generateTestRunner() {\n    const fs = require('fs');\n    const path = require('path');\n    \n    // Check if project uses ES modules\n    const isESModuleProject = this.isESModuleProject();\n    \n    // Read the existing qtests-runner.js as template\n    const templatePath = path.join(__dirname, '..', 'qtests-runner.js');\n    let runnerContent;\n    \n    if (fs.existsSync(templatePath)) {\n      runnerContent = fs.readFileSync(templatePath, 'utf8');\n      \n      // Convert CommonJS to ES modules if needed\n      if (isESModuleProject) {\n        runnerContent = this.convertToESModule(runnerContent);\n      }\n    } else {\n      // Generate appropriate template based on module type\n      if (isESModuleProject) {\n        runnerContent = this.generateESModuleTemplate();\n      } else {\n        runnerContent = this.generateCommonJSTemplate();\n      }\n    }\n    \n    // Always overwrite qtests-runner.js to ensure latest functionality\n    const outputPath = path.join(process.cwd(), 'qtests-runner.js');\n    \n    try {\n      fs.writeFileSync(outputPath, runnerContent, 'utf8');\n      this.updatePackageJsonTestScript();\n      return true;\n    } catch (error) {\n      console.error('Failed to generate qtests-runner.js:', error.message);\n      return false;\n    }\n  }\n\n  /**\n   * Check if the current project uses ES modules\n   */\n  isESModuleProject() {\n    const fs = require('fs');\n    const path = require('path');\n    \n    try {\n      const packagePath = path.join(process.cwd(), 'package.json');\n      if (!fs.existsSync(packagePath)) return false;\n      \n      const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));\n      return packageJson.type === 'module';\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Convert CommonJS code to ES module syntax\n   */\n  convertToESModule(commonJSCode) {\n    return commonJSCode\n      .replace(/const fs = require\\('fs'\\);/, \"import fs from 'fs';\")\n      .replace(/const path = require\\('path'\\);/, \"import path from 'path';\")\n      .replace(/const { spawn } = require\\('child_process'\\);/, \"import { spawn } from 'child_process';\")\n      .replace(/const os = require\\('os'\\);/, \"import os from 'os';\")\n      .replace(/require\\.main === module/, \"import.meta.url === `file://${process.argv[1]}`\")\n      .replace(/module\\.exports = TestRunner;/, \"export default TestRunner;\")\n      .replace(/\\/\\/ Generated as: qtests-runner\\.js/, \"// Generated as: qtests-runner.js (ES Module Compatible)\")\n      .replace(/--testPathPattern/g, \"--testPathPattern\"); // Ensure correct Jest CLI parameter in ES modules\n  }\n\n  /**\n   * Generate ES module template\n   */\n  generateESModuleTemplate() {\n    return `// qtests Test Runner - Auto-generated by qtests (ES Module)\n// This file discovers and runs all tests in your project\n\nimport fs from 'fs';\nimport path from 'path';\nimport { spawn } from 'child_process';\nimport os from 'os';\n\n// Basic ES module test runner implementation\nconsole.log('🧪 Basic qtests Test Runner (ES Module)');\nconsole.log('Run tests with: npm test');\n`;\n  }\n\n  /**\n   * Generate CommonJS template  \n   */\n  generateCommonJSTemplate() {\n    return `// qtests Test Runner - Auto-generated by qtests\n// This file discovers and runs all tests in your project\n\nconst fs = require('fs');\nconst path = require('path');\nconst { spawn } = require('child_process');\nconst os = require('os');\n\n// Basic CommonJS test runner implementation\nconsole.log('🧪 Basic qtests Test Runner');\nconsole.log('Run tests with: npm test');\n`;\n  }\n\n  /**\n   * Update package.json test script to use qtests-runner.cjs (ES module compatible)\n   */\n  updatePackageJsonTestScript() {\n    try {\n      const packagePath = path.join(process.cwd(), 'package.json');\n      if (!fs.existsSync(packagePath)) {\n        console.log('⚠️  package.json not found, skipping test script update');\n        return false;\n      }\n\n      const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));\n      \n      // Update test script - use .cjs extension for ES module compatibility\n      if (!packageJson.scripts) {\n        packageJson.scripts = {};\n      }\n      packageJson.scripts.test = 'node qtests-runner.js';\n      \n      fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2), 'utf8');\n      console.log('✅ Updated package.json test script to use qtests-runner.js');\n      return true;\n    } catch (error) {\n      console.log('⚠️  Could not update package.json:', error.message);\n      return false;\n    }\n  }\n\n  /**\n   * Main generator function - comprehensively scans project for test generation\n   */\n  generate() {\n    console.log(`Scanning project for test generation...`);\n    \n    // Walk entire project to discover all source files and existing tests\n    const projectFiles = this.walkProject();\n    const { sourceFiles, existingTests } = this.categorizeFiles(projectFiles);\n    \n    console.log(`Found ${sourceFiles.length} source files and ${existingTests.length} existing tests`);\n    \n    // Analyze each source file for test generation\n    sourceFiles.forEach(file => this.analyze(file));\n    \n    this.scaffoldJestSetup();\n\n    if (this.scanned.length === 0) {\n      console.log('✅ All tests already exist. Nothing to generate.');\n    } else {\n      console.log(`✅ Generated ${this.scanned.length} new test files:`);\n      this.scanned.forEach(({ type, file }) => {\n        const label = type === 'unit' ? '📦 Unit' : '🌐 API';\n        console.log(`  ${label} → ${file}`);\n      });\n    }\n\n    return this.scanned;\n  }\n\n  /**\n   * Get generation results\n   */\n  getResults() {\n    return this.scanned;\n  }\n}\n\nmodule.exports = { TestGenerator, DEFAULT_CONFIG, PATTERNS };"],"mappings":"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","ignoreList":[]}