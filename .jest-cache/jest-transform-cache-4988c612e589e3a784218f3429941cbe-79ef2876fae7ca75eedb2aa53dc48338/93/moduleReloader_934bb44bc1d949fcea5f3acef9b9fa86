570fc2552406e2fa14b3ceca723e0f6a
/**
 * Module Reloading Utility
 * 
 * This module provides functionality for reloading modules from Node.js cache
 * for isolated testing scenarios. It focuses solely on module cache management.
 */

const path = require('path');

// Thread-safe module reloading lock to prevent race conditions
const moduleReloadLock = new Set();

/**
 * Reload a module from cache for isolated testing
 * 
 * This function clears a module from Node.js require cache and reloads it,
 * enabling tests to verify module loading behavior and ensure fresh module
 * state between tests.
 * 
 * @param {string} relPath - Relative path to module that should be reloaded
 * @returns {Object} The freshly loaded module object
 * @throws {Error} If module cannot be found or loaded
 */
function reload(relPath) {
  console.log(`reload is running with ${relPath}`);
  const fullPath = path.resolve(__dirname, relPath);
  if (moduleReloadLock.has(fullPath)) {
    console.log(`reload has run resulting in skip`);
    return require(fullPath);
  }
  try {
    moduleReloadLock.add(fullPath);
    delete require.cache[require.resolve(fullPath)];
    const mod = require(fullPath);
    moduleReloadLock.delete(fullPath);
    console.log(`reload is returning module`);
    return mod;
  } catch (err) {
    moduleReloadLock.delete(fullPath);
    console.log(`reload error ${err.message}`);
    throw err;
  }
}
module.exports = {
  reload,
  moduleReloadLock
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIm1vZHVsZVJlbG9hZExvY2siLCJTZXQiLCJyZWxvYWQiLCJyZWxQYXRoIiwiY29uc29sZSIsImxvZyIsImZ1bGxQYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsImhhcyIsImFkZCIsImNhY2hlIiwibW9kIiwiZGVsZXRlIiwiZXJyIiwibWVzc2FnZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJtb2R1bGVSZWxvYWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1vZHVsZSBSZWxvYWRpbmcgVXRpbGl0eVxuICogXG4gKiBUaGlzIG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbmFsaXR5IGZvciByZWxvYWRpbmcgbW9kdWxlcyBmcm9tIE5vZGUuanMgY2FjaGVcbiAqIGZvciBpc29sYXRlZCB0ZXN0aW5nIHNjZW5hcmlvcy4gSXQgZm9jdXNlcyBzb2xlbHkgb24gbW9kdWxlIGNhY2hlIG1hbmFnZW1lbnQuXG4gKi9cblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuLy8gVGhyZWFkLXNhZmUgbW9kdWxlIHJlbG9hZGluZyBsb2NrIHRvIHByZXZlbnQgcmFjZSBjb25kaXRpb25zXG5jb25zdCBtb2R1bGVSZWxvYWRMb2NrID0gbmV3IFNldCgpO1xuXG4vKipcbiAqIFJlbG9hZCBhIG1vZHVsZSBmcm9tIGNhY2hlIGZvciBpc29sYXRlZCB0ZXN0aW5nXG4gKiBcbiAqIFRoaXMgZnVuY3Rpb24gY2xlYXJzIGEgbW9kdWxlIGZyb20gTm9kZS5qcyByZXF1aXJlIGNhY2hlIGFuZCByZWxvYWRzIGl0LFxuICogZW5hYmxpbmcgdGVzdHMgdG8gdmVyaWZ5IG1vZHVsZSBsb2FkaW5nIGJlaGF2aW9yIGFuZCBlbnN1cmUgZnJlc2ggbW9kdWxlXG4gKiBzdGF0ZSBiZXR3ZWVuIHRlc3RzLlxuICogXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsUGF0aCAtIFJlbGF0aXZlIHBhdGggdG8gbW9kdWxlIHRoYXQgc2hvdWxkIGJlIHJlbG9hZGVkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZnJlc2hseSBsb2FkZWQgbW9kdWxlIG9iamVjdFxuICogQHRocm93cyB7RXJyb3J9IElmIG1vZHVsZSBjYW5ub3QgYmUgZm91bmQgb3IgbG9hZGVkXG4gKi9cbmZ1bmN0aW9uIHJlbG9hZChyZWxQYXRoKSB7XG4gIGNvbnNvbGUubG9nKGByZWxvYWQgaXMgcnVubmluZyB3aXRoICR7cmVsUGF0aH1gKTtcblxuICBjb25zdCBmdWxsUGF0aCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIHJlbFBhdGgpO1xuXG4gIGlmIChtb2R1bGVSZWxvYWRMb2NrLmhhcyhmdWxsUGF0aCkpIHtcbiAgICBjb25zb2xlLmxvZyhgcmVsb2FkIGhhcyBydW4gcmVzdWx0aW5nIGluIHNraXBgKTtcbiAgICByZXR1cm4gcmVxdWlyZShmdWxsUGF0aCk7XG4gIH1cblxuICB0cnkge1xuICAgIG1vZHVsZVJlbG9hZExvY2suYWRkKGZ1bGxQYXRoKTtcbiAgICBkZWxldGUgcmVxdWlyZS5jYWNoZVtyZXF1aXJlLnJlc29sdmUoZnVsbFBhdGgpXTtcbiAgICBjb25zdCBtb2QgPSByZXF1aXJlKGZ1bGxQYXRoKTtcbiAgICBtb2R1bGVSZWxvYWRMb2NrLmRlbGV0ZShmdWxsUGF0aCk7XG4gICAgY29uc29sZS5sb2coYHJlbG9hZCBpcyByZXR1cm5pbmcgbW9kdWxlYCk7XG4gICAgcmV0dXJuIG1vZDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbW9kdWxlUmVsb2FkTG9jay5kZWxldGUoZnVsbFBhdGgpO1xuICAgIGNvbnNvbGUubG9nKGByZWxvYWQgZXJyb3IgJHtlcnIubWVzc2FnZX1gKTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlbG9hZCxcbiAgbW9kdWxlUmVsb2FkTG9ja1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFNLENBQUM7O0FBRTVCO0FBQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUM7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxNQUFNQSxDQUFDQyxPQUFPLEVBQUU7RUFDdkJDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDBCQUEwQkYsT0FBTyxFQUFFLENBQUM7RUFFaEQsTUFBTUcsUUFBUSxHQUFHUixJQUFJLENBQUNTLE9BQU8sQ0FBQ0MsU0FBUyxFQUFFTCxPQUFPLENBQUM7RUFFakQsSUFBSUgsZ0JBQWdCLENBQUNTLEdBQUcsQ0FBQ0gsUUFBUSxDQUFDLEVBQUU7SUFDbENGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGtDQUFrQyxDQUFDO0lBQy9DLE9BQU9OLE9BQU8sQ0FBQ08sUUFBUSxDQUFDO0VBQzFCO0VBRUEsSUFBSTtJQUNGTixnQkFBZ0IsQ0FBQ1UsR0FBRyxDQUFDSixRQUFRLENBQUM7SUFDOUIsT0FBT1AsT0FBTyxDQUFDWSxLQUFLLENBQUNaLE9BQU8sQ0FBQ1EsT0FBTyxDQUFDRCxRQUFRLENBQUMsQ0FBQztJQUMvQyxNQUFNTSxHQUFHLEdBQUdiLE9BQU8sQ0FBQ08sUUFBUSxDQUFDO0lBQzdCTixnQkFBZ0IsQ0FBQ2EsTUFBTSxDQUFDUCxRQUFRLENBQUM7SUFDakNGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDRCQUE0QixDQUFDO0lBQ3pDLE9BQU9PLEdBQUc7RUFDWixDQUFDLENBQUMsT0FBT0UsR0FBRyxFQUFFO0lBQ1pkLGdCQUFnQixDQUFDYSxNQUFNLENBQUNQLFFBQVEsQ0FBQztJQUNqQ0YsT0FBTyxDQUFDQyxHQUFHLENBQUMsZ0JBQWdCUyxHQUFHLENBQUNDLE9BQU8sRUFBRSxDQUFDO0lBQzFDLE1BQU1ELEdBQUc7RUFDWDtBQUNGO0FBRUFFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZmLE1BQU07RUFDTkY7QUFDRixDQUFDIiwiaWdub3JlTGlzdCI6W119