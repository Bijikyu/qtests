{"file":"/home/runner/workspace/utils/email/emailSender.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/email/emailSender.ts"],"sourcesContent":["/**\n * Email Sender Core Utility - TypeScript Implementation\n * \n * This module provides the core email sending functionality and batch operations.\n * It coordinates with other email utilities for validation, formatting, and history.\n */\n\nimport { logStart, logReturn } from '../../lib/logUtils.js';\nimport { validateEmail } from './emailValidator.js';\nimport { formatEmailContent } from './emailFormatter.js';\nimport { addToHistory } from './emailHistory.js';\n\n// Type definitions\ninterface EmailOptions {\n  verbose?: boolean;\n  [key: string]: any;\n}\n\ninterface EmailResponse {\n  success: boolean;\n  emailData?: any;\n  message: string;\n  timestamp: Date;\n  id?: string;\n  error?: string;\n}\n\ninterface EmailBatchItem {\n  to?: string;\n  recipient?: string;\n  subject: string;\n  body: string;\n  options?: EmailOptions;\n}\n\ninterface BatchResult {\n  success: boolean;\n  message?: string;\n  results: EmailResponse[];\n  summary: {\n    total: number;\n    successful: number;\n    failed: number;\n  };\n}\n\n/**\n * Core sendEmail Mock Function\n *\n * Purpose: Prepares email data for external delivery without coupling to a mailing service.\n * This lightweight approach avoids additional dependencies while enabling tests that expect\n * email payloads and comprehensive verification of email workflows.\n */\nfunction sendEmail(recipient: string, subject: string, body: string, options: EmailOptions = {}): EmailResponse {\n  logStart('sendEmail', recipient, subject, body, options);\n  \n  // Validate input parameters\n  if (!validateEmail(recipient)) {\n    const error: EmailResponse = {\n      success: false,\n      emailData: null,\n      message: `Invalid email address: ${recipient}`,\n      timestamp: new Date(),\n      error: 'INVALID_RECIPIENT'\n    };\n    \n    // Store failed attempt in history for testing\n    addToHistory(error);\n    \n    console.log(`[MOCK EMAIL ERROR] Invalid recipient: ${recipient}`);\n    logReturn('sendEmail', error);\n    return error;\n  }\n  \n  // Format email content\n  const formatted = formatEmailContent(subject, body);\n  \n  // Create email data structure\n  const emailData = {\n    to: recipient,\n    subject: formatted.subject,\n    body: formatted.body,\n    ...options\n  };\n  \n  // Create response object\n  const response: EmailResponse = {\n    success: true,\n    emailData,\n    message: \"Client should send this email using preferred mail service\",\n    timestamp: new Date(),\n    id: `mock-email-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  };\n  \n  // Store in history for test verification\n  addToHistory(response);\n  \n  // Log email details for development and debugging\n  console.log(`[MOCK EMAIL] To: ${recipient}, Subject: ${formatted.subject}`);\n  if (options.verbose) {\n    console.log(`[MOCK EMAIL] Body: ${formatted.body.substring(0, 100)}${formatted.body.length > 100 ? '...' : ''}`);\n  }\n  \n  logReturn('sendEmail', response);\n  return response;\n}\n\n/**\n * Send multiple emails in batch\n * \n * This function provides efficient batch email processing for applications\n * that need to send multiple emails. It processes all emails and returns\n * a summary with individual results.\n */\nfunction sendEmailBatch(emails: EmailBatchItem[], options: EmailOptions = {}): BatchResult {\n  logStart('sendEmailBatch', emails, options);\n  \n  if (!Array.isArray(emails)) {\n    const error: BatchResult = {\n      success: false,\n      message: 'sendEmailBatch requires an array of email objects',\n      results: [],\n      summary: { total: 0, successful: 0, failed: 1 }\n    };\n    logReturn('sendEmailBatch', error);\n    return error;\n  }\n  \n  const results: EmailResponse[] = [];\n  let successful = 0;\n  let failed = 0;\n  \n  // Process each email individually\n  for (const email of emails) {\n    try {\n      const result = sendEmail(\n        email.to || email.recipient || '',\n        email.subject,\n        email.body,\n        { ...options, ...email.options }\n      );\n      \n      results.push(result);\n      if (result.success) {\n        successful++;\n      } else {\n        failed++;\n      }\n    } catch (error: any) {\n      const errorResult: EmailResponse = {\n        success: false,\n        emailData: null,\n        message: `Failed to process email: ${error.message}`,\n        timestamp: new Date(),\n        error: 'PROCESSING_ERROR'\n      };\n      \n      results.push(errorResult);\n      failed++;\n    }\n  }\n  \n  const batchResult: BatchResult = {\n    success: failed === 0,\n    results,\n    summary: {\n      total: emails.length,\n      successful,\n      failed\n    }\n  };\n  \n  if (failed > 0) {\n    batchResult.message = `Batch completed with ${failed} failures out of ${emails.length} emails`;\n  } else {\n    batchResult.message = `Batch completed successfully - ${successful} emails processed`;\n  }\n  \n  logReturn('sendEmailBatch', batchResult);\n  return batchResult;\n}\n\n// Export using ES module syntax\nexport { sendEmail, sendEmailBatch };"],"version":3}