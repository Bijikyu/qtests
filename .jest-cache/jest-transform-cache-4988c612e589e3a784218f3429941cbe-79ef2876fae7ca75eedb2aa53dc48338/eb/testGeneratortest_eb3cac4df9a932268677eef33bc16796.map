{"version":3,"names":["runTestSuite","createAssertions","require","TestGenerator","DEFAULT_CONFIG","PATTERNS","fs","path","execSync","assert","configTests","defaultGen","equal","config","SRC_DIR","TEST_DIR","truthy","KNOWN_MOCKS","includes","VALID_EXTS","customGen","fileSystemTests","tempDir","join","__dirname","Date","now","mkdirSync","recursive","srcDir","writeFileSync","originalCwd","process","cwd","chdir","generator","files","walk","length","some","f","endsWith","rmSync","force","cliTests","cliPath","existsSync","stats","statSync","mode","result","encoding","stdio","generationTests","exports","usesQtests","mocks","testContent","createUnitTest","method","route","createApiTest","runAllTests","console","log","main","module","catch","error"],"sources":["testGenerator.test.js"],"sourcesContent":["/**\n * Test Suite for Test Generator\n * \n * Comprehensive testing of the TestGenerator class and CLI functionality.\n * Tests file scanning, code analysis, test generation, and CLI interface.\n */\n\nconst { runTestSuite, createAssertions } = require('../utils/runTestSuite');\nconst { TestGenerator, DEFAULT_CONFIG, PATTERNS } = require('../lib/testGenerator');\nconst fs = require('fs');\nconst path = require('path');\nconst { execSync } = require('child_process');\n\nconst assert = createAssertions();\n\n// Test Generator Configuration Tests\nconst configTests = [\n  ['uses default configuration', () => {\n    const defaultGen = new TestGenerator();\n    assert.equal(defaultGen.config.SRC_DIR, 'src', 'Should use default src directory');\n    assert.equal(defaultGen.config.TEST_DIR, 'tests/integration', 'Should use default test directory');\n    assert.truthy(defaultGen.config.KNOWN_MOCKS.includes('axios'), 'Should include axios in known mocks');\n    assert.truthy(defaultGen.config.VALID_EXTS.includes('.js'), 'Should include .js extension');\n  }],\n\n  ['accepts custom configuration', () => {\n    const customGen = new TestGenerator({\n      SRC_DIR: 'lib',\n      TEST_DIR: 'spec',\n      KNOWN_MOCKS: ['custom-lib']\n    });\n    \n    assert.equal(customGen.config.SRC_DIR, 'lib', 'Should use custom src directory');\n    assert.equal(customGen.config.TEST_DIR, 'spec', 'Should use custom test directory');\n    assert.truthy(customGen.config.KNOWN_MOCKS.includes('custom-lib'), 'Should include custom mock');\n  }]\n];\n\n// File System Operations Tests\nconst fileSystemTests = [\n  ['walks directory structure', () => {\n    const tempDir = path.join(__dirname, 'temp-test-' + Date.now());\n    fs.mkdirSync(tempDir, { recursive: true });\n    \n    try {\n      // Create test files\n      const srcDir = path.join(tempDir, 'src');\n      fs.mkdirSync(srcDir, { recursive: true });\n      fs.writeFileSync(path.join(srcDir, 'utils.js'), 'export const helper = () => {};');\n      fs.mkdirSync(path.join(srcDir, 'components'), { recursive: true });\n      fs.writeFileSync(path.join(srcDir, 'components', 'Button.tsx'), 'export const Button = () => {};');\n      \n      const originalCwd = process.cwd();\n      process.chdir(tempDir);\n      \n      try {\n        const generator = new TestGenerator({ SRC_DIR: 'src', TEST_DIR: 'tests' });\n        const files = generator.walk('src');\n        \n        assert.truthy(files.length >= 2, 'Should find multiple files');\n        assert.truthy(files.some(f => f.endsWith('utils.js')), 'Should find utils.js');\n        assert.truthy(files.some(f => f.endsWith('Button.tsx')), 'Should find Button.tsx');\n      } finally {\n        process.chdir(originalCwd);\n      }\n    } finally {\n      // Cleanup\n      fs.rmSync(tempDir, { recursive: true, force: true });\n    }\n  }]\n];\n\n// CLI Tests\nconst cliTests = [\n  ['CLI script exists and is executable', () => {\n    const cliPath = path.join(__dirname, '..', 'bin', 'qtests-generate');\n    assert.truthy(fs.existsSync(cliPath), 'CLI script should exist');\n    \n    const stats = fs.statSync(cliPath);\n    assert.truthy(stats.mode & 0o111, 'CLI script should be executable'); // Check executable bit\n  }],\n\n  ['CLI shows help when requested', () => {\n    const result = execSync('node bin/qtests-generate --help', { \n      cwd: path.join(__dirname, '..'),\n      encoding: 'utf8',\n      stdio: 'pipe'\n    });\n    \n    assert.truthy(result.includes('USAGE'), 'Help should include usage information');\n    assert.truthy(result.includes('OPTIONS'), 'Help should include options');\n    assert.truthy(result.includes('qtests-generate'), 'Help should include command name');\n  }],\n\n  ['CLI shows version when requested', () => {\n    const result = execSync('node bin/qtests-generate --version', { \n      cwd: path.join(__dirname, '..'),\n      encoding: 'utf8',\n      stdio: 'pipe'\n    });\n    \n    assert.truthy(result.includes('qtests v'), 'Version should include qtests version');\n  }]\n];\n\n// Test Generation Tests  \nconst generationTests = [\n  ['generates unit test content', () => {\n    const generator = new TestGenerator();\n    const exports = ['calculate', 'Calculator'];\n    const usesQtests = false;\n    const mocks = ['axios'];\n    \n    const testContent = generator.createUnitTest('calculator.js', exports, usesQtests, mocks);\n    \n    assert.truthy(testContent.includes('calculate'), 'Should include function name');\n    assert.truthy(testContent.includes('Calculator'), 'Should include class name');\n    assert.truthy(testContent.includes('describe'), 'Should include describe statements');\n  }],\n\n  ['generates API test content', () => {\n    const generator = new TestGenerator();\n    const method = 'get';\n    const route = '/api/users';\n    \n    const testContent = generator.createApiTest(method, route);\n    \n    assert.truthy(testContent.includes('/api/users'), 'Should include route path');\n    assert.truthy(testContent.includes('GET'), 'Should include GET method');\n    assert.truthy(testContent.includes('request'), 'Should include request statements');\n  }]\n];\n\n// Run all test suites\nasync function runAllTests() {\n  console.log('ðŸ§ª Running Test Generator Tests...\\n');\n  \n  await runTestSuite('Configuration Tests', configTests);\n  await runTestSuite('File System Tests', fileSystemTests);\n  await runTestSuite('CLI Tests', cliTests);\n  await runTestSuite('Generation Tests', generationTests);\n  \n  console.log('\\nâœ… All Test Generator tests completed!');\n}\n\n// Run tests if this is the main module\nif (require.main === module) {\n  runAllTests().catch(console.error);\n}\n\nmodule.exports = { runAllTests };"],"mappings":"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","ignoreList":[]}