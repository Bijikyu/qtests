7ea365c37f761648816d9715698b4436
/**
 * Environment Management Utilities
 * 
 * This module provides utilities specifically for managing test environments,
 * including environment variable manipulation and test isolation. These utilities
 * help create isolated, predictable test environments without side effects.
 * 
 * Design philosophy:
 * - Environment isolation to prevent test interference
 * - Predictable test conditions with known values
 * - Easy setup and teardown of test environments
 * - Simple, focused functionality for environment management
 * 
 * Why environment management is critical:
 * 1. Tests must be deterministic - same input should always produce same output
 * 2. Tests should not depend on the host system's environment variables
 * 3. Tests should not affect each other through shared global state
 * 4. Environment setup should be simple and consistent across test suites
 * 
 * Module organization rationale:
 * This module focuses solely on environment variable management and test
 * isolation, providing a clean separation of concerns from other testing
 * utilities like HTTP mocking, database simulation, and advanced test helpers.
 */

// Import testEnv utility for comprehensive environment variable management
// testEnv provides save/restore functionality for environment variables
// and mock management for environment-dependent testing scenarios
const testEnv = require('../utils/testEnv');

// Import specialized utility modules for organized access
const coreUtils = require('./coreUtils');
const httpUtils = require('./httpUtils');
const dataUtils = require('./dataUtils');
const testUtils = require('./testUtils');

/**
 * Export environment management utilities and provide access to other utility categories
 * 
 * This module serves as the main entry point for qtests utilities while maintaining
 * proper organization by category. Environment-specific utilities are exported directly,
 * while other utility categories are accessible through their respective modules.
 * 
 * Organization strategy:
 * - Direct exports for environment-specific utilities (testEnv)
 * - Category-based access for other utilities (http, data, test)
 * - Maintains backward compatibility with existing code
 * - Clear separation of concerns while providing unified access
 * 
 * Usage patterns:
 * const { testEnv } = require('qtests/lib/envUtils');
 * const { httpTest, mockAxios } = require('qtests/lib/envUtils').http;
 * const { mockModels, sendEmail } = require('qtests/lib/envUtils').data;
 * const { testSuite, testHelpers } = require('qtests/lib/envUtils').test;
 * 
 * Backward compatibility:
 * For existing code, all utilities remain accessible through direct imports:
 * const { testSuite, mockModels, httpTest } = require('qtests/lib/envUtils');
 */
module.exports = {
  // Environment variable management and test isolation (primary focus)
  testEnv,
  // Core testing utilities (stubMethod, mockConsole)
  ...coreUtils,
  // HTTP testing utilities (mockAxios, httpTest, offlineMode)
  ...httpUtils,
  // Data and database utilities (mockModels, sendEmail)
  ...dataUtils,
  // Advanced testing utilities (testHelpers, testSuite)
  ...testUtils,
  // Category-based access for organized imports
  core: coreUtils,
  http: httpUtils,
  data: dataUtils,
  test: testUtils
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0ZXN0RW52IiwicmVxdWlyZSIsImNvcmVVdGlscyIsImh0dHBVdGlscyIsImRhdGFVdGlscyIsInRlc3RVdGlscyIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb3JlIiwiaHR0cCIsImRhdGEiLCJ0ZXN0Il0sInNvdXJjZXMiOlsiZW52VXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEVudmlyb25tZW50IE1hbmFnZW1lbnQgVXRpbGl0aWVzXG4gKiBcbiAqIFRoaXMgbW9kdWxlIHByb3ZpZGVzIHV0aWxpdGllcyBzcGVjaWZpY2FsbHkgZm9yIG1hbmFnaW5nIHRlc3QgZW52aXJvbm1lbnRzLFxuICogaW5jbHVkaW5nIGVudmlyb25tZW50IHZhcmlhYmxlIG1hbmlwdWxhdGlvbiBhbmQgdGVzdCBpc29sYXRpb24uIFRoZXNlIHV0aWxpdGllc1xuICogaGVscCBjcmVhdGUgaXNvbGF0ZWQsIHByZWRpY3RhYmxlIHRlc3QgZW52aXJvbm1lbnRzIHdpdGhvdXQgc2lkZSBlZmZlY3RzLlxuICogXG4gKiBEZXNpZ24gcGhpbG9zb3BoeTpcbiAqIC0gRW52aXJvbm1lbnQgaXNvbGF0aW9uIHRvIHByZXZlbnQgdGVzdCBpbnRlcmZlcmVuY2VcbiAqIC0gUHJlZGljdGFibGUgdGVzdCBjb25kaXRpb25zIHdpdGgga25vd24gdmFsdWVzXG4gKiAtIEVhc3kgc2V0dXAgYW5kIHRlYXJkb3duIG9mIHRlc3QgZW52aXJvbm1lbnRzXG4gKiAtIFNpbXBsZSwgZm9jdXNlZCBmdW5jdGlvbmFsaXR5IGZvciBlbnZpcm9ubWVudCBtYW5hZ2VtZW50XG4gKiBcbiAqIFdoeSBlbnZpcm9ubWVudCBtYW5hZ2VtZW50IGlzIGNyaXRpY2FsOlxuICogMS4gVGVzdHMgbXVzdCBiZSBkZXRlcm1pbmlzdGljIC0gc2FtZSBpbnB1dCBzaG91bGQgYWx3YXlzIHByb2R1Y2Ugc2FtZSBvdXRwdXRcbiAqIDIuIFRlc3RzIHNob3VsZCBub3QgZGVwZW5kIG9uIHRoZSBob3N0IHN5c3RlbSdzIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICogMy4gVGVzdHMgc2hvdWxkIG5vdCBhZmZlY3QgZWFjaCBvdGhlciB0aHJvdWdoIHNoYXJlZCBnbG9iYWwgc3RhdGVcbiAqIDQuIEVudmlyb25tZW50IHNldHVwIHNob3VsZCBiZSBzaW1wbGUgYW5kIGNvbnNpc3RlbnQgYWNyb3NzIHRlc3Qgc3VpdGVzXG4gKiBcbiAqIE1vZHVsZSBvcmdhbml6YXRpb24gcmF0aW9uYWxlOlxuICogVGhpcyBtb2R1bGUgZm9jdXNlcyBzb2xlbHkgb24gZW52aXJvbm1lbnQgdmFyaWFibGUgbWFuYWdlbWVudCBhbmQgdGVzdFxuICogaXNvbGF0aW9uLCBwcm92aWRpbmcgYSBjbGVhbiBzZXBhcmF0aW9uIG9mIGNvbmNlcm5zIGZyb20gb3RoZXIgdGVzdGluZ1xuICogdXRpbGl0aWVzIGxpa2UgSFRUUCBtb2NraW5nLCBkYXRhYmFzZSBzaW11bGF0aW9uLCBhbmQgYWR2YW5jZWQgdGVzdCBoZWxwZXJzLlxuICovXG5cbi8vIEltcG9ydCB0ZXN0RW52IHV0aWxpdHkgZm9yIGNvbXByZWhlbnNpdmUgZW52aXJvbm1lbnQgdmFyaWFibGUgbWFuYWdlbWVudFxuLy8gdGVzdEVudiBwcm92aWRlcyBzYXZlL3Jlc3RvcmUgZnVuY3Rpb25hbGl0eSBmb3IgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4vLyBhbmQgbW9jayBtYW5hZ2VtZW50IGZvciBlbnZpcm9ubWVudC1kZXBlbmRlbnQgdGVzdGluZyBzY2VuYXJpb3NcbmNvbnN0IHRlc3RFbnYgPSByZXF1aXJlKCcuLi91dGlscy90ZXN0RW52Jyk7XG5cbi8vIEltcG9ydCBzcGVjaWFsaXplZCB1dGlsaXR5IG1vZHVsZXMgZm9yIG9yZ2FuaXplZCBhY2Nlc3NcbmNvbnN0IGNvcmVVdGlscyA9IHJlcXVpcmUoJy4vY29yZVV0aWxzJyk7XG5jb25zdCBodHRwVXRpbHMgPSByZXF1aXJlKCcuL2h0dHBVdGlscycpO1xuY29uc3QgZGF0YVV0aWxzID0gcmVxdWlyZSgnLi9kYXRhVXRpbHMnKTtcbmNvbnN0IHRlc3RVdGlscyA9IHJlcXVpcmUoJy4vdGVzdFV0aWxzJyk7XG5cbi8qKlxuICogRXhwb3J0IGVudmlyb25tZW50IG1hbmFnZW1lbnQgdXRpbGl0aWVzIGFuZCBwcm92aWRlIGFjY2VzcyB0byBvdGhlciB1dGlsaXR5IGNhdGVnb3JpZXNcbiAqIFxuICogVGhpcyBtb2R1bGUgc2VydmVzIGFzIHRoZSBtYWluIGVudHJ5IHBvaW50IGZvciBxdGVzdHMgdXRpbGl0aWVzIHdoaWxlIG1haW50YWluaW5nXG4gKiBwcm9wZXIgb3JnYW5pemF0aW9uIGJ5IGNhdGVnb3J5LiBFbnZpcm9ubWVudC1zcGVjaWZpYyB1dGlsaXRpZXMgYXJlIGV4cG9ydGVkIGRpcmVjdGx5LFxuICogd2hpbGUgb3RoZXIgdXRpbGl0eSBjYXRlZ29yaWVzIGFyZSBhY2Nlc3NpYmxlIHRocm91Z2ggdGhlaXIgcmVzcGVjdGl2ZSBtb2R1bGVzLlxuICogXG4gKiBPcmdhbml6YXRpb24gc3RyYXRlZ3k6XG4gKiAtIERpcmVjdCBleHBvcnRzIGZvciBlbnZpcm9ubWVudC1zcGVjaWZpYyB1dGlsaXRpZXMgKHRlc3RFbnYpXG4gKiAtIENhdGVnb3J5LWJhc2VkIGFjY2VzcyBmb3Igb3RoZXIgdXRpbGl0aWVzIChodHRwLCBkYXRhLCB0ZXN0KVxuICogLSBNYWludGFpbnMgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIGV4aXN0aW5nIGNvZGVcbiAqIC0gQ2xlYXIgc2VwYXJhdGlvbiBvZiBjb25jZXJucyB3aGlsZSBwcm92aWRpbmcgdW5pZmllZCBhY2Nlc3NcbiAqIFxuICogVXNhZ2UgcGF0dGVybnM6XG4gKiBjb25zdCB7IHRlc3RFbnYgfSA9IHJlcXVpcmUoJ3F0ZXN0cy9saWIvZW52VXRpbHMnKTtcbiAqIGNvbnN0IHsgaHR0cFRlc3QsIG1vY2tBeGlvcyB9ID0gcmVxdWlyZSgncXRlc3RzL2xpYi9lbnZVdGlscycpLmh0dHA7XG4gKiBjb25zdCB7IG1vY2tNb2RlbHMsIHNlbmRFbWFpbCB9ID0gcmVxdWlyZSgncXRlc3RzL2xpYi9lbnZVdGlscycpLmRhdGE7XG4gKiBjb25zdCB7IHRlc3RTdWl0ZSwgdGVzdEhlbHBlcnMgfSA9IHJlcXVpcmUoJ3F0ZXN0cy9saWIvZW52VXRpbHMnKS50ZXN0O1xuICogXG4gKiBCYWNrd2FyZCBjb21wYXRpYmlsaXR5OlxuICogRm9yIGV4aXN0aW5nIGNvZGUsIGFsbCB1dGlsaXRpZXMgcmVtYWluIGFjY2Vzc2libGUgdGhyb3VnaCBkaXJlY3QgaW1wb3J0czpcbiAqIGNvbnN0IHsgdGVzdFN1aXRlLCBtb2NrTW9kZWxzLCBodHRwVGVzdCB9ID0gcmVxdWlyZSgncXRlc3RzL2xpYi9lbnZVdGlscycpO1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gRW52aXJvbm1lbnQgdmFyaWFibGUgbWFuYWdlbWVudCBhbmQgdGVzdCBpc29sYXRpb24gKHByaW1hcnkgZm9jdXMpXG4gIHRlc3RFbnYsXG4gIFxuICAvLyBDb3JlIHRlc3RpbmcgdXRpbGl0aWVzIChzdHViTWV0aG9kLCBtb2NrQ29uc29sZSlcbiAgLi4uY29yZVV0aWxzLFxuICBcbiAgLy8gSFRUUCB0ZXN0aW5nIHV0aWxpdGllcyAobW9ja0F4aW9zLCBodHRwVGVzdCwgb2ZmbGluZU1vZGUpXG4gIC4uLmh0dHBVdGlscyxcbiAgXG4gIC8vIERhdGEgYW5kIGRhdGFiYXNlIHV0aWxpdGllcyAobW9ja01vZGVscywgc2VuZEVtYWlsKVxuICAuLi5kYXRhVXRpbHMsXG4gIFxuICAvLyBBZHZhbmNlZCB0ZXN0aW5nIHV0aWxpdGllcyAodGVzdEhlbHBlcnMsIHRlc3RTdWl0ZSlcbiAgLi4udGVzdFV0aWxzLFxuICBcbiAgLy8gQ2F0ZWdvcnktYmFzZWQgYWNjZXNzIGZvciBvcmdhbml6ZWQgaW1wb3J0c1xuICBjb3JlOiBjb3JlVXRpbHMsXG4gIGh0dHA6IGh0dHBVdGlscyxcbiAgZGF0YTogZGF0YVV0aWxzLFxuICB0ZXN0OiB0ZXN0VXRpbHNcbn07XG4iXSwibWFwcGluZ3MiOiJBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQzs7QUFFM0M7QUFDQSxNQUFNQyxTQUFTLEdBQUdELE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDeEMsTUFBTUUsU0FBUyxHQUFHRixPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ3hDLE1BQU1HLFNBQVMsR0FBR0gsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUN4QyxNQUFNSSxTQUFTLEdBQUdKLE9BQU8sQ0FBQyxhQUFhLENBQUM7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUssTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZjtFQUNBUCxPQUFPO0VBRVA7RUFDQSxHQUFHRSxTQUFTO0VBRVo7RUFDQSxHQUFHQyxTQUFTO0VBRVo7RUFDQSxHQUFHQyxTQUFTO0VBRVo7RUFDQSxHQUFHQyxTQUFTO0VBRVo7RUFDQUcsSUFBSSxFQUFFTixTQUFTO0VBQ2ZPLElBQUksRUFBRU4sU0FBUztFQUNmTyxJQUFJLEVBQUVOLFNBQVM7RUFDZk8sSUFBSSxFQUFFTjtBQUNSLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=