c01f4ecb0c4ee4e4f23a87a5619792e2
const {
  execFileSync
} = require('child_process'); //(utility to run child scripts)
const path = require('path'); //(resolve helper script path)
const {
  executeWithLogs
} = require('../lib/logUtils'); //(import executeWithLogs)

function runChild(includeSetup) {
  //(execute child script with or without setup)
  return executeWithLogs('runChild', () => {
    //(delegate to executeWithLogs)
    const script = path.join(__dirname, 'withoutSetup.js'); //(child script path)
    const args = includeSetup ? ['-r', path.join(__dirname, '../setup'), script] : [script]; //(create arg list)
    const out = execFileSync(process.execPath, args, {
      env: {
        NODE_PATH: ''
      }
    }).toString(); //(spawn child)
    const res = JSON.parse(out); //(parse child output)
    return res; //(forward result)
  }, includeSetup);
} //(end runChild)

function runWithoutSetup() {
  //(spawn child process without setup)
  return runChild(false); //(directly return child result without extra logs)
} //(end runWithoutSetup)

function runWithSetup() {
  //(spawn child process with setup)
  return runChild(true); //(directly return child result without extra logs)
} //(end runWithSetup)

test('child process uses stubs when setup is required', () => {
  //(jest test case)
  console.log(`setupResolutionTest is running with none`); //(start log)
  const withSetup = runWithSetup(); //(result when setup loaded)
  const withoutSetup = runWithoutSetup(); //(result when setup absent)
  expect(withSetup.axiosStub).toBe(true); //(axios should be stubbed)
  expect(withSetup.winstonStub).toBe(true); //(winston should be stubbed)
  expect(withoutSetup.axiosStub).toBe(false); //(axios should be real)
  expect(withoutSetup.winstonStub).toBe(false); //(winston should be real)
  console.log(`setupResolutionTest has run resulting in pass`); //(end log)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleGVjRmlsZVN5bmMiLCJyZXF1aXJlIiwicGF0aCIsImV4ZWN1dGVXaXRoTG9ncyIsInJ1bkNoaWxkIiwiaW5jbHVkZVNldHVwIiwic2NyaXB0Iiwiam9pbiIsIl9fZGlybmFtZSIsImFyZ3MiLCJvdXQiLCJwcm9jZXNzIiwiZXhlY1BhdGgiLCJlbnYiLCJOT0RFX1BBVEgiLCJ0b1N0cmluZyIsInJlcyIsIkpTT04iLCJwYXJzZSIsInJ1bldpdGhvdXRTZXR1cCIsInJ1bldpdGhTZXR1cCIsInRlc3QiLCJjb25zb2xlIiwibG9nIiwid2l0aFNldHVwIiwid2l0aG91dFNldHVwIiwiZXhwZWN0IiwiYXhpb3NTdHViIiwidG9CZSIsIndpbnN0b25TdHViIl0sInNvdXJjZXMiOlsic2V0dXBSZXNvbHV0aW9uLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCB7IGV4ZWNGaWxlU3luYyB9ID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpOyAvLyh1dGlsaXR5IHRvIHJ1biBjaGlsZCBzY3JpcHRzKVxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTsgLy8ocmVzb2x2ZSBoZWxwZXIgc2NyaXB0IHBhdGgpXG5jb25zdCB7IGV4ZWN1dGVXaXRoTG9ncyB9ID0gcmVxdWlyZSgnLi4vbGliL2xvZ1V0aWxzJyk7IC8vKGltcG9ydCBleGVjdXRlV2l0aExvZ3MpXG5cbmZ1bmN0aW9uIHJ1bkNoaWxkKGluY2x1ZGVTZXR1cCl7IC8vKGV4ZWN1dGUgY2hpbGQgc2NyaXB0IHdpdGggb3Igd2l0aG91dCBzZXR1cClcbiByZXR1cm4gZXhlY3V0ZVdpdGhMb2dzKCdydW5DaGlsZCcsICgpID0+IHsgLy8oZGVsZWdhdGUgdG8gZXhlY3V0ZVdpdGhMb2dzKVxuICBjb25zdCBzY3JpcHQgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnd2l0aG91dFNldHVwLmpzJyk7IC8vKGNoaWxkIHNjcmlwdCBwYXRoKVxuICBjb25zdCBhcmdzID0gaW5jbHVkZVNldHVwID8gWyctcicsIHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9zZXR1cCcpLCBzY3JpcHRdIDogW3NjcmlwdF07IC8vKGNyZWF0ZSBhcmcgbGlzdClcbiAgY29uc3Qgb3V0ID0gZXhlY0ZpbGVTeW5jKHByb2Nlc3MuZXhlY1BhdGgsIGFyZ3MsIHsgZW52OiB7IE5PREVfUEFUSDogJycgfSB9KS50b1N0cmluZygpOyAvLyhzcGF3biBjaGlsZClcbiAgY29uc3QgcmVzID0gSlNPTi5wYXJzZShvdXQpOyAvLyhwYXJzZSBjaGlsZCBvdXRwdXQpXG4gIHJldHVybiByZXM7IC8vKGZvcndhcmQgcmVzdWx0KVxuIH0sIGluY2x1ZGVTZXR1cCk7XG59IC8vKGVuZCBydW5DaGlsZClcblxuZnVuY3Rpb24gcnVuV2l0aG91dFNldHVwKCl7IC8vKHNwYXduIGNoaWxkIHByb2Nlc3Mgd2l0aG91dCBzZXR1cClcbiByZXR1cm4gcnVuQ2hpbGQoZmFsc2UpOyAvLyhkaXJlY3RseSByZXR1cm4gY2hpbGQgcmVzdWx0IHdpdGhvdXQgZXh0cmEgbG9ncylcbn0gLy8oZW5kIHJ1bldpdGhvdXRTZXR1cClcblxuZnVuY3Rpb24gcnVuV2l0aFNldHVwKCl7IC8vKHNwYXduIGNoaWxkIHByb2Nlc3Mgd2l0aCBzZXR1cClcbiByZXR1cm4gcnVuQ2hpbGQodHJ1ZSk7IC8vKGRpcmVjdGx5IHJldHVybiBjaGlsZCByZXN1bHQgd2l0aG91dCBleHRyYSBsb2dzKVxufSAvLyhlbmQgcnVuV2l0aFNldHVwKVxuXG50ZXN0KCdjaGlsZCBwcm9jZXNzIHVzZXMgc3R1YnMgd2hlbiBzZXR1cCBpcyByZXF1aXJlZCcsICgpID0+IHsgLy8oamVzdCB0ZXN0IGNhc2UpXG4gY29uc29sZS5sb2coYHNldHVwUmVzb2x1dGlvblRlc3QgaXMgcnVubmluZyB3aXRoIG5vbmVgKTsgLy8oc3RhcnQgbG9nKVxuIGNvbnN0IHdpdGhTZXR1cCA9IHJ1bldpdGhTZXR1cCgpOyAvLyhyZXN1bHQgd2hlbiBzZXR1cCBsb2FkZWQpXG4gY29uc3Qgd2l0aG91dFNldHVwID0gcnVuV2l0aG91dFNldHVwKCk7IC8vKHJlc3VsdCB3aGVuIHNldHVwIGFic2VudClcbiBleHBlY3Qod2l0aFNldHVwLmF4aW9zU3R1YikudG9CZSh0cnVlKTsgLy8oYXhpb3Mgc2hvdWxkIGJlIHN0dWJiZWQpXG4gZXhwZWN0KHdpdGhTZXR1cC53aW5zdG9uU3R1YikudG9CZSh0cnVlKTsgLy8od2luc3RvbiBzaG91bGQgYmUgc3R1YmJlZClcbiBleHBlY3Qod2l0aG91dFNldHVwLmF4aW9zU3R1YikudG9CZShmYWxzZSk7IC8vKGF4aW9zIHNob3VsZCBiZSByZWFsKVxuIGV4cGVjdCh3aXRob3V0U2V0dXAud2luc3RvblN0dWIpLnRvQmUoZmFsc2UpOyAvLyh3aW5zdG9uIHNob3VsZCBiZSByZWFsKVxuIGNvbnNvbGUubG9nKGBzZXR1cFJlc29sdXRpb25UZXN0IGhhcyBydW4gcmVzdWx0aW5nIGluIHBhc3NgKTsgLy8oZW5kIGxvZylcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNO0VBQUVBO0FBQWEsQ0FBQyxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztBQUNuRCxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQzlCLE1BQU07RUFBRUU7QUFBZ0IsQ0FBQyxHQUFHRixPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDOztBQUV4RCxTQUFTRyxRQUFRQSxDQUFDQyxZQUFZLEVBQUM7RUFBRTtFQUNoQyxPQUFPRixlQUFlLENBQUMsVUFBVSxFQUFFLE1BQU07SUFBRTtJQUMxQyxNQUFNRyxNQUFNLEdBQUdKLElBQUksQ0FBQ0ssSUFBSSxDQUFDQyxTQUFTLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO0lBQ3hELE1BQU1DLElBQUksR0FBR0osWUFBWSxHQUFHLENBQUMsSUFBSSxFQUFFSCxJQUFJLENBQUNLLElBQUksQ0FBQ0MsU0FBUyxFQUFFLFVBQVUsQ0FBQyxFQUFFRixNQUFNLENBQUMsR0FBRyxDQUFDQSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3pGLE1BQU1JLEdBQUcsR0FBR1YsWUFBWSxDQUFDVyxPQUFPLENBQUNDLFFBQVEsRUFBRUgsSUFBSSxFQUFFO01BQUVJLEdBQUcsRUFBRTtRQUFFQyxTQUFTLEVBQUU7TUFBRztJQUFFLENBQUMsQ0FBQyxDQUFDQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekYsTUFBTUMsR0FBRyxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBQ1IsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM3QixPQUFPTSxHQUFHLENBQUMsQ0FBQztFQUNiLENBQUMsRUFBRVgsWUFBWSxDQUFDO0FBQ2pCLENBQUMsQ0FBQzs7QUFFRixTQUFTYyxlQUFlQSxDQUFBLEVBQUU7RUFBRTtFQUMzQixPQUFPZixRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN6QixDQUFDLENBQUM7O0FBRUYsU0FBU2dCLFlBQVlBLENBQUEsRUFBRTtFQUFFO0VBQ3hCLE9BQU9oQixRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN4QixDQUFDLENBQUM7O0FBRUZpQixJQUFJLENBQUMsaURBQWlELEVBQUUsTUFBTTtFQUFFO0VBQy9EQyxPQUFPLENBQUNDLEdBQUcsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDLENBQUM7RUFDekQsTUFBTUMsU0FBUyxHQUFHSixZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDbEMsTUFBTUssWUFBWSxHQUFHTixlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDeENPLE1BQU0sQ0FBQ0YsU0FBUyxDQUFDRyxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDeENGLE1BQU0sQ0FBQ0YsU0FBUyxDQUFDSyxXQUFXLENBQUMsQ0FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDMUNGLE1BQU0sQ0FBQ0QsWUFBWSxDQUFDRSxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDNUNGLE1BQU0sQ0FBQ0QsWUFBWSxDQUFDSSxXQUFXLENBQUMsQ0FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDOUNOLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLCtDQUErQyxDQUFDLENBQUMsQ0FBQztBQUMvRCxDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=