{"file":"/home/runner/workspace/utils/testing/expect/matchers.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/testing/expect/matchers.ts"],"sourcesContent":["/**\n * Core Matchers - Standard Assertion Implementations\n * \n * This module provides the standard set of matchers that developers expect\n * from modern test frameworks. Each matcher handles both positive and negative\n * assertions with helpful error messages.\n */\n\nimport { extendMatchers } from './index.js';\nimport { deepEqual, formatValue, generateDiff } from './diff.js';\nimport { matchSnapshot } from '../../../lib/snapshots/snapshotManager.js';\n\n// Register all core matchers when this module is imported\nextendMatchers({\n  /**\n   * toBe - Strict equality using Object.is()\n   * Use for primitive values and reference equality\n   */\n  toBe(received: any, expected: any) {\n    const pass = Object.is(received, expected);\n    const message = () => {\n      if (this.isNot) {\n        return `Expected value not to be:\\n  ${formatValue(expected)}\\nReceived:\\n  ${formatValue(received)}`;\n      } else {\n        return `Expected value to be:\\n  ${formatValue(expected)}\\nReceived:\\n  ${formatValue(received)}`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toEqual - Deep equality comparison\n   * Use for objects, arrays, and complex data structures\n   */\n  toEqual(received: any, expected: any) {\n    const pass = deepEqual(received, expected);\n    const message = () => {\n      if (this.isNot) {\n        return `Expected values not to be deeply equal:\\n${formatValue(expected)}`;\n      } else {\n        return `Expected values to be deeply equal:\\n${generateDiff(expected, received)}`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toBeTruthy - Checks if value is truthy\n   */\n  toBeTruthy(received: any) {\n    const pass = Boolean(received);\n    const message = () => {\n      if (this.isNot) {\n        return `Expected value not to be truthy, received: ${formatValue(received)}`;\n      } else {\n        return `Expected value to be truthy, received: ${formatValue(received)}`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toBeFalsy - Checks if value is falsy\n   */\n  toBeFalsy(received: any) {\n    const pass = !Boolean(received);\n    const message = () => {\n      if (this.isNot) {\n        return `Expected value not to be falsy, received: ${formatValue(received)}`;\n      } else {\n        return `Expected value to be falsy, received: ${formatValue(received)}`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toBeNull - Checks if value is null\n   */\n  toBeNull(received: any) {\n    const pass = received === null;\n    const message = () => {\n      if (this.isNot) {\n        return `Expected value not to be null, received: ${formatValue(received)}`;\n      } else {\n        return `Expected value to be null, received: ${formatValue(received)}`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toBeUndefined - Checks if value is undefined\n   */\n  toBeUndefined(received: any) {\n    const pass = received === undefined;\n    const message = () => {\n      if (this.isNot) {\n        return `Expected value not to be undefined, received: ${formatValue(received)}`;\n      } else {\n        return `Expected value to be undefined, received: ${formatValue(received)}`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toBeDefined - Checks if value is not undefined\n   */\n  toBeDefined(received: any) {\n    const pass = received !== undefined;\n    const message = () => {\n      if (this.isNot) {\n        return `Expected value to be undefined, received: ${formatValue(received)}`;\n      } else {\n        return `Expected value to be defined, received: ${formatValue(received)}`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toBeGreaterThan - Numeric comparison >\n   */\n  toBeGreaterThan(received: any, expected: number) {\n    const pass = received > expected;\n    const message = () => {\n      if (this.isNot) {\n        return `Expected ${formatValue(received)} not to be greater than ${formatValue(expected)}`;\n      } else {\n        return `Expected ${formatValue(received)} to be greater than ${formatValue(expected)}`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toBeGreaterThanOrEqual - Numeric comparison >=\n   */\n  toBeGreaterThanOrEqual(received: any, expected: number) {\n    const pass = received >= expected;\n    const message = () => {\n      if (this.isNot) {\n        return `Expected ${formatValue(received)} not to be greater than or equal to ${formatValue(expected)}`;\n      } else {\n        return `Expected ${formatValue(received)} to be greater than or equal to ${formatValue(expected)}`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toBeLessThan - Numeric comparison <\n   */\n  toBeLessThan(received: any, expected: number) {\n    const pass = received < expected;\n    const message = () => {\n      if (this.isNot) {\n        return `Expected ${formatValue(received)} not to be less than ${formatValue(expected)}`;\n      } else {\n        return `Expected ${formatValue(received)} to be less than ${formatValue(expected)}`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toBeLessThanOrEqual - Numeric comparison <=\n   */\n  toBeLessThanOrEqual(received: any, expected: number) {\n    const pass = received <= expected;\n    const message = () => {\n      if (this.isNot) {\n        return `Expected ${formatValue(received)} not to be less than or equal to ${formatValue(expected)}`;\n      } else {\n        return `Expected ${formatValue(received)} to be less than or equal to ${formatValue(expected)}`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toBeCloseTo - Numeric comparison with precision tolerance\n   */\n  toBeCloseTo(received: any, expected: number, precision: number = 2) {\n    const pow = Math.pow(10, -precision);\n    const delta = Math.abs(expected - received);\n    const pass = delta < pow;\n    \n    const message = () => {\n      if (this.isNot) {\n        return `Expected ${formatValue(received)} not to be close to ${formatValue(expected)} (precision: ${precision})`;\n      } else {\n        return `Expected ${formatValue(received)} to be close to ${formatValue(expected)} (precision: ${precision}), difference: ${delta}`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toMatch - String/RegExp pattern matching\n   */\n  toMatch(received: any, expected: string | RegExp) {\n    const receivedString = String(received);\n    const regex = expected instanceof RegExp ? expected : new RegExp(expected);\n    const pass = regex.test(receivedString);\n    \n    const message = () => {\n      if (this.isNot) {\n        return `Expected string not to match pattern:\\n  Pattern: ${formatValue(expected)}\\n  Received: ${formatValue(receivedString)}`;\n      } else {\n        return `Expected string to match pattern:\\n  Pattern: ${formatValue(expected)}\\n  Received: ${formatValue(receivedString)}`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toContain - Array/String containment check\n   */\n  toContain(received: any, expected: any) {\n    let pass = false;\n    \n    if (typeof received === 'string') {\n      pass = received.includes(String(expected));\n    } else if (Array.isArray(received)) {\n      pass = received.includes(expected);\n    } else if (received && typeof received[Symbol.iterator] === 'function') {\n      // Handle other iterables\n      pass = Array.from(received).includes(expected);\n    }\n    \n    const message = () => {\n      if (this.isNot) {\n        return `Expected ${formatValue(received)} not to contain ${formatValue(expected)}`;\n      } else {\n        return `Expected ${formatValue(received)} to contain ${formatValue(expected)}`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toHaveLength - Length property check\n   */\n  toHaveLength(received: any, expected: number) {\n    const hasLength = received && typeof received.length === 'number';\n    const pass = hasLength && received.length === expected;\n    \n    const message = () => {\n      if (!hasLength) {\n        return `Expected value to have a length property, received: ${formatValue(received)}`;\n      }\n      if (this.isNot) {\n        return `Expected length not to be ${expected}, received: ${received.length}`;\n      } else {\n        return `Expected length to be ${expected}, received: ${received.length}`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toHaveProperty - Object property existence and optionally value check\n   */\n  toHaveProperty(received: any, keyPath: string, expectedValue?: any) {\n    const hasProperty = received && typeof received === 'object' && keyPath in received;\n    let pass = hasProperty;\n    \n    if (pass && arguments.length === 3) {\n      pass = deepEqual(received[keyPath], expectedValue);\n    }\n    \n    const message = () => {\n      if (!hasProperty) {\n        if (this.isNot) {\n          return `Expected object not to have property \"${keyPath}\"`;\n        } else {\n          return `Expected object to have property \"${keyPath}\"\\nReceived: ${formatValue(received)}`;\n        }\n      } else if (arguments.length === 3) {\n        if (this.isNot) {\n          return `Expected property \"${keyPath}\" not to have value:\\n  ${formatValue(expectedValue)}\\nReceived:\\n  ${formatValue(received[keyPath])}`;\n        } else {\n          return `Expected property \"${keyPath}\" to have value:\\n  ${formatValue(expectedValue)}\\nReceived:\\n  ${formatValue(received[keyPath])}`;\n        }\n      } else {\n        return `Expected object not to have property \"${keyPath}\"`;\n      }\n    };\n    return { pass, message };\n  },\n\n  /**\n   * toMatchSnapshot - Snapshot testing\n   */\n  toMatchSnapshot(received: any, snapshotName?: string) {\n    // Note: This is async but the current matcher API is sync\n    // We'll need to handle this at the test runner level\n    const testName = this.currentTestName || 'Unknown Test';\n    \n    // Store snapshot data for async processing\n    (this as any).__snapshotData = {\n      testName,\n      value: received,\n      snapshotName\n    };\n    \n    // Return a placeholder - actual matching happens in test runner\n    return {\n      pass: true,\n      message: () => 'Snapshot matching deferred to test runner'\n    };\n  },\n\n  /**\n   * toThrow - Function execution error check\n   */\n  toThrow(received: any, expectedError?: string | RegExp | Error | Function) {\n    if (typeof received !== 'function') {\n      throw new Error('toThrow matcher must be called on a function');\n    }\n    \n    let thrownError: any;\n    let didThrow = false;\n    \n    try {\n      received();\n    } catch (error) {\n      didThrow = true;\n      thrownError = error;\n    }\n    \n    let pass = didThrow;\n    \n    // If specific error expectation is provided, check it\n    if (pass && expectedError !== undefined) {\n      if (typeof expectedError === 'string') {\n        pass = thrownError && thrownError.message.includes(expectedError);\n      } else if (expectedError instanceof RegExp) {\n        pass = thrownError && expectedError.test(thrownError.message);\n      } else if (typeof expectedError === 'function') {\n        pass = thrownError instanceof expectedError;\n      } else if (expectedError instanceof Error) {\n        pass = thrownError && thrownError.message === expectedError.message;\n      }\n    }\n    \n    const message = () => {\n      if (this.isNot) {\n        if (expectedError) {\n          return `Expected function not to throw ${formatValue(expectedError)}, but it threw: ${thrownError?.message || thrownError}`;\n        } else {\n          return `Expected function not to throw, but it threw: ${thrownError?.message || thrownError}`;\n        }\n      } else {\n        if (!didThrow) {\n          return `Expected function to throw${expectedError ? ` ${formatValue(expectedError)}` : ''}, but it didn't throw`;\n        } else if (expectedError) {\n          return `Expected function to throw ${formatValue(expectedError)}, but it threw: ${thrownError?.message || thrownError}`;\n        } else {\n          return 'Expected function to throw, but it didn\\'t throw';\n        }\n      }\n    };\n    \n    return { pass, message };\n  }\n});\n\n// Export for potential direct usage\nexport {};  // This makes it a module"],"version":3}