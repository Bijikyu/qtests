3919e23b64c3a4ef7e7db3e870425f82
"use strict";
/**
 * Test Runner Context - Core Types and State Management
 *
 * This module defines the fundamental data structures and state management
 * for the qtests runner system. It provides the foundation for organizing
 * and executing tests in a hierarchical structure with proper lifecycle hooks.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.rootSuite = void 0;
exports.resetRootSuite = resetRootSuite;
exports.getCurrentSuite = getCurrentSuite;
exports.pushSuite = pushSuite;
exports.popSuite = popSuite;
// Global root suite that collects all tests - this is the entry point for test registration
exports.rootSuite = {
    name: 'root',
    tests: [],
    suites: [],
    hooks: {
        beforeAll: [],
        afterAll: [],
        beforeEach: [],
        afterEach: []
    }
};
/**
 * Reset the root suite to clean state
 * Essential for preventing test pollution between runs in watch mode
 */
function resetRootSuite() {
    exports.rootSuite.tests.length = 0;
    exports.rootSuite.suites.length = 0;
    exports.rootSuite.hooks.beforeAll.length = 0;
    exports.rootSuite.hooks.afterAll.length = 0;
    exports.rootSuite.hooks.beforeEach.length = 0;
    exports.rootSuite.hooks.afterEach.length = 0;
}
// Current execution context for proper nesting of describes and hooks
let currentSuite = exports.rootSuite;
const suiteStack = [];
/**
 * Get the current suite context for test/hook registration
 */
function getCurrentSuite() {
    return currentSuite;
}
/**
 * Push a new suite onto the context stack
 * Used internally by describe() to manage nested contexts
 */
function pushSuite(suite) {
    suiteStack.push(currentSuite);
    currentSuite = suite;
}
/**
 * Pop the current suite from the context stack
 * Used internally by describe() when exiting a suite block
 */
function popSuite() {
    const popped = suiteStack.pop();
    if (popped) {
        currentSuite = popped;
    }
    return popped;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvcnVubmVyL2NvbnRleHQudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7O0FBZ0ZILHdDQU9DO0FBU0QsMENBRUM7QUFNRCw4QkFHQztBQU1ELDRCQU1DO0FBeERELDRGQUE0RjtBQUMvRSxRQUFBLFNBQVMsR0FBVTtJQUM5QixJQUFJLEVBQUUsTUFBTTtJQUNaLEtBQUssRUFBRSxFQUFFO0lBQ1QsTUFBTSxFQUFFLEVBQUU7SUFDVixLQUFLLEVBQUU7UUFDTCxTQUFTLEVBQUUsRUFBRTtRQUNiLFFBQVEsRUFBRSxFQUFFO1FBQ1osVUFBVSxFQUFFLEVBQUU7UUFDZCxTQUFTLEVBQUUsRUFBRTtLQUNkO0NBQ0YsQ0FBQztBQUVGOzs7R0FHRztBQUNILFNBQWdCLGNBQWM7SUFDNUIsaUJBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUMzQixpQkFBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLGlCQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3JDLGlCQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLGlCQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3RDLGlCQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZDLENBQUM7QUFFRCxzRUFBc0U7QUFDdEUsSUFBSSxZQUFZLEdBQVUsaUJBQVMsQ0FBQztBQUNwQyxNQUFNLFVBQVUsR0FBWSxFQUFFLENBQUM7QUFFL0I7O0dBRUc7QUFDSCxTQUFnQixlQUFlO0lBQzdCLE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxTQUFnQixTQUFTLENBQUMsS0FBWTtJQUNwQyxVQUFVLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzlCLFlBQVksR0FBRyxLQUFLLENBQUM7QUFDdkIsQ0FBQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLFFBQVE7SUFDdEIsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2hDLElBQUksTUFBTSxFQUFFLENBQUM7UUFDWCxZQUFZLEdBQUcsTUFBTSxDQUFDO0lBQ3hCLENBQUM7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvbGliL3J1bm5lci9jb250ZXh0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGVzdCBSdW5uZXIgQ29udGV4dCAtIENvcmUgVHlwZXMgYW5kIFN0YXRlIE1hbmFnZW1lbnRcbiAqIFxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyB0aGUgZnVuZGFtZW50YWwgZGF0YSBzdHJ1Y3R1cmVzIGFuZCBzdGF0ZSBtYW5hZ2VtZW50XG4gKiBmb3IgdGhlIHF0ZXN0cyBydW5uZXIgc3lzdGVtLiBJdCBwcm92aWRlcyB0aGUgZm91bmRhdGlvbiBmb3Igb3JnYW5pemluZ1xuICogYW5kIGV4ZWN1dGluZyB0ZXN0cyBpbiBhIGhpZXJhcmNoaWNhbCBzdHJ1Y3R1cmUgd2l0aCBwcm9wZXIgbGlmZWN5Y2xlIGhvb2tzLlxuICovXG5cbi8vIENvcmUgdGVzdCBjYXNlIHN0cnVjdHVyZSB3aXRoIHN1cHBvcnQgZm9yIGFzeW5jIGV4ZWN1dGlvbiBhbmQgdGltZW91dHNcbmV4cG9ydCBpbnRlcmZhY2UgVGVzdENhc2Uge1xuICBuYW1lOiBzdHJpbmc7XG4gIGZuOiAoZG9uZT86IChlcnI/OiBhbnkpID0+IHZvaWQpID0+IGFueSB8IFByb21pc2U8YW55PjtcbiAgdGltZW91dE1zPzogbnVtYmVyO1xuICBtb2RlPzogJ25vcm1hbCcgfCAnb25seScgfCAnc2tpcCcgfCAndG9kbyc7XG59XG5cbi8vIExpZmVjeWNsZSBob29rcyBmb3Igc2V0dXAgYW5kIHRlYXJkb3duIGF0IHN1aXRlIGFuZCB0ZXN0IGxldmVsc1xuZXhwb3J0IGludGVyZmFjZSBIb29rcyB7XG4gIGJlZm9yZUFsbDogQXJyYXk8KCkgPT4gYW55IHwgUHJvbWlzZTxhbnk+PjtcbiAgYWZ0ZXJBbGw6IEFycmF5PCgpID0+IGFueSB8IFByb21pc2U8YW55Pj47XG4gIGJlZm9yZUVhY2g6IEFycmF5PCgpID0+IGFueSB8IFByb21pc2U8YW55Pj47XG4gIGFmdGVyRWFjaDogQXJyYXk8KCkgPT4gYW55IHwgUHJvbWlzZTxhbnk+Pjtcbn1cblxuLy8gSGllcmFyY2hpY2FsIHRlc3Qgc3VpdGUgc3RydWN0dXJlIHN1cHBvcnRpbmcgbmVzdGVkIGRlc2NyaWJlc1xuZXhwb3J0IGludGVyZmFjZSBTdWl0ZSB7XG4gIG5hbWU6IHN0cmluZztcbiAgdGVzdHM6IFRlc3RDYXNlW107XG4gIHN1aXRlczogU3VpdGVbXTtcbiAgaG9va3M6IEhvb2tzO1xufVxuXG4vLyBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRlc3QgZXhlY3V0aW9uXG5leHBvcnQgaW50ZXJmYWNlIFJ1bk9wdGlvbnMge1xuICB0aW1lb3V0TXM/OiBudW1iZXI7IC8vIGRlZmF1bHQgdGltZW91dCBmb3IgYWxsIHRlc3RzXG4gIGZpbHRlck5hbWU/OiBSZWdFeHA7IC8vIGZpbHRlciB0ZXN0cyBieSBuYW1lIHBhdHRlcm5cbiAgZmlsdGVyUGF0aD86IFJlZ0V4cDsgLy8gZmlsdGVyIHRlc3QgZmlsZXMgYnkgcGF0aCBwYXR0ZXJuXG4gIGJhaWw/OiBib29sZWFuOyAvLyBzdG9wIG9uIGZpcnN0IGZhaWx1cmVcbiAgcmV0cmllcz86IG51bWJlcjsgLy8gbnVtYmVyIG9mIHJldHJpZXMgZm9yIGZhaWxpbmcgdGVzdHNcbn1cblxuLy8gSW5kaXZpZHVhbCB0ZXN0IGV4ZWN1dGlvbiByZXN1bHRcbmV4cG9ydCBpbnRlcmZhY2UgVGVzdFJlc3VsdCB7XG4gIG5hbWU6IHN0cmluZztcbiAgc3RhdHVzOiAncGFzc2VkJyB8ICdmYWlsZWQnIHwgJ3NraXBwZWQnIHwgJ3RvZG8nO1xuICBlcnJvcj86IEVycm9yO1xuICBkdXJhdGlvbk1zPzogbnVtYmVyO1xuICByZXRyaWVzPzogbnVtYmVyOyAvLyBudW1iZXIgb2YgcmV0cmllcyBhdHRlbXB0ZWRcbn1cblxuLy8gU3VpdGUgZXhlY3V0aW9uIHJlc3VsdCB3aXRoIG5lc3RlZCBzdHJ1Y3R1cmVcbmV4cG9ydCBpbnRlcmZhY2UgU3VpdGVSZXN1bHQge1xuICBuYW1lOiBzdHJpbmc7XG4gIHJlc3VsdHM6IFRlc3RSZXN1bHRbXTtcbiAgc3VpdGVzOiBTdWl0ZVJlc3VsdFtdO1xuICBkdXJhdGlvbk1zPzogbnVtYmVyO1xufVxuXG4vLyBPdmVyYWxsIHRlc3QgcnVuIHJlc3VsdCB3aXRoIHN1bW1hcnkgc3RhdGlzdGljc1xuZXhwb3J0IGludGVyZmFjZSBSdW5SZXN1bHQge1xuICByb290OiBTdWl0ZVJlc3VsdDtcbiAgcGFzc2VkOiBudW1iZXI7XG4gIGZhaWxlZDogbnVtYmVyO1xuICBza2lwcGVkOiBudW1iZXI7XG4gIHRvZG86IG51bWJlcjtcbiAgZHVyYXRpb25NczogbnVtYmVyO1xuICBiYWlsZWRFYXJseT86IGJvb2xlYW47XG59XG5cbi8vIEdsb2JhbCByb290IHN1aXRlIHRoYXQgY29sbGVjdHMgYWxsIHRlc3RzIC0gdGhpcyBpcyB0aGUgZW50cnkgcG9pbnQgZm9yIHRlc3QgcmVnaXN0cmF0aW9uXG5leHBvcnQgY29uc3Qgcm9vdFN1aXRlOiBTdWl0ZSA9IHtcbiAgbmFtZTogJ3Jvb3QnLFxuICB0ZXN0czogW10sXG4gIHN1aXRlczogW10sXG4gIGhvb2tzOiB7IFxuICAgIGJlZm9yZUFsbDogW10sIFxuICAgIGFmdGVyQWxsOiBbXSwgXG4gICAgYmVmb3JlRWFjaDogW10sIFxuICAgIGFmdGVyRWFjaDogW10gXG4gIH1cbn07XG5cbi8qKlxuICogUmVzZXQgdGhlIHJvb3Qgc3VpdGUgdG8gY2xlYW4gc3RhdGVcbiAqIEVzc2VudGlhbCBmb3IgcHJldmVudGluZyB0ZXN0IHBvbGx1dGlvbiBiZXR3ZWVuIHJ1bnMgaW4gd2F0Y2ggbW9kZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRSb290U3VpdGUoKTogdm9pZCB7XG4gIHJvb3RTdWl0ZS50ZXN0cy5sZW5ndGggPSAwO1xuICByb290U3VpdGUuc3VpdGVzLmxlbmd0aCA9IDA7XG4gIHJvb3RTdWl0ZS5ob29rcy5iZWZvcmVBbGwubGVuZ3RoID0gMDtcbiAgcm9vdFN1aXRlLmhvb2tzLmFmdGVyQWxsLmxlbmd0aCA9IDA7XG4gIHJvb3RTdWl0ZS5ob29rcy5iZWZvcmVFYWNoLmxlbmd0aCA9IDA7XG4gIHJvb3RTdWl0ZS5ob29rcy5hZnRlckVhY2gubGVuZ3RoID0gMDtcbn1cblxuLy8gQ3VycmVudCBleGVjdXRpb24gY29udGV4dCBmb3IgcHJvcGVyIG5lc3Rpbmcgb2YgZGVzY3JpYmVzIGFuZCBob29rc1xubGV0IGN1cnJlbnRTdWl0ZTogU3VpdGUgPSByb290U3VpdGU7XG5jb25zdCBzdWl0ZVN0YWNrOiBTdWl0ZVtdID0gW107XG5cbi8qKlxuICogR2V0IHRoZSBjdXJyZW50IHN1aXRlIGNvbnRleHQgZm9yIHRlc3QvaG9vayByZWdpc3RyYXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRTdWl0ZSgpOiBTdWl0ZSB7XG4gIHJldHVybiBjdXJyZW50U3VpdGU7XG59XG5cbi8qKlxuICogUHVzaCBhIG5ldyBzdWl0ZSBvbnRvIHRoZSBjb250ZXh0IHN0YWNrXG4gKiBVc2VkIGludGVybmFsbHkgYnkgZGVzY3JpYmUoKSB0byBtYW5hZ2UgbmVzdGVkIGNvbnRleHRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwdXNoU3VpdGUoc3VpdGU6IFN1aXRlKTogdm9pZCB7XG4gIHN1aXRlU3RhY2sucHVzaChjdXJyZW50U3VpdGUpO1xuICBjdXJyZW50U3VpdGUgPSBzdWl0ZTtcbn1cblxuLyoqXG4gKiBQb3AgdGhlIGN1cnJlbnQgc3VpdGUgZnJvbSB0aGUgY29udGV4dCBzdGFja1xuICogVXNlZCBpbnRlcm5hbGx5IGJ5IGRlc2NyaWJlKCkgd2hlbiBleGl0aW5nIGEgc3VpdGUgYmxvY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvcFN1aXRlKCk6IFN1aXRlIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgcG9wcGVkID0gc3VpdGVTdGFjay5wb3AoKTtcbiAgaWYgKHBvcHBlZCkge1xuICAgIGN1cnJlbnRTdWl0ZSA9IHBvcHBlZDtcbiAgfVxuICByZXR1cm4gcG9wcGVkO1xufSJdLCJ2ZXJzaW9uIjozfQ==