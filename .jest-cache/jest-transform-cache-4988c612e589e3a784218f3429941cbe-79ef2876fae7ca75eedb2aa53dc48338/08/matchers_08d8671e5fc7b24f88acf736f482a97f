5c44797d022b775ba809d052605f16cc
"use strict";
/**
 * Core Matchers - Standard Assertion Implementations
 *
 * This module provides the standard set of matchers that developers expect
 * from modern test frameworks. Each matcher handles both positive and negative
 * assertions with helpful error messages.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const index_js_1 = require("./index.js");
const diff_js_1 = require("./diff.js");
// Register all core matchers when this module is imported
(0, index_js_1.extendMatchers)({
    /**
     * toBe - Strict equality using Object.is()
     * Use for primitive values and reference equality
     */
    toBe(received, expected) {
        const pass = Object.is(received, expected);
        const message = () => {
            if (this.isNot) {
                return `Expected value not to be:\n  ${(0, diff_js_1.formatValue)(expected)}\nReceived:\n  ${(0, diff_js_1.formatValue)(received)}`;
            }
            else {
                return `Expected value to be:\n  ${(0, diff_js_1.formatValue)(expected)}\nReceived:\n  ${(0, diff_js_1.formatValue)(received)}`;
            }
        };
        return { pass, message };
    },
    /**
     * toEqual - Deep equality comparison
     * Use for objects, arrays, and complex data structures
     */
    toEqual(received, expected) {
        const pass = (0, diff_js_1.deepEqual)(received, expected);
        const message = () => {
            if (this.isNot) {
                return `Expected values not to be deeply equal:\n${(0, diff_js_1.formatValue)(expected)}`;
            }
            else {
                return `Expected values to be deeply equal:\n${(0, diff_js_1.generateDiff)(expected, received)}`;
            }
        };
        return { pass, message };
    },
    /**
     * toBeTruthy - Checks if value is truthy
     */
    toBeTruthy(received) {
        const pass = Boolean(received);
        const message = () => {
            if (this.isNot) {
                return `Expected value not to be truthy, received: ${(0, diff_js_1.formatValue)(received)}`;
            }
            else {
                return `Expected value to be truthy, received: ${(0, diff_js_1.formatValue)(received)}`;
            }
        };
        return { pass, message };
    },
    /**
     * toBeFalsy - Checks if value is falsy
     */
    toBeFalsy(received) {
        const pass = !Boolean(received);
        const message = () => {
            if (this.isNot) {
                return `Expected value not to be falsy, received: ${(0, diff_js_1.formatValue)(received)}`;
            }
            else {
                return `Expected value to be falsy, received: ${(0, diff_js_1.formatValue)(received)}`;
            }
        };
        return { pass, message };
    },
    /**
     * toBeNull - Checks if value is null
     */
    toBeNull(received) {
        const pass = received === null;
        const message = () => {
            if (this.isNot) {
                return `Expected value not to be null, received: ${(0, diff_js_1.formatValue)(received)}`;
            }
            else {
                return `Expected value to be null, received: ${(0, diff_js_1.formatValue)(received)}`;
            }
        };
        return { pass, message };
    },
    /**
     * toBeUndefined - Checks if value is undefined
     */
    toBeUndefined(received) {
        const pass = received === undefined;
        const message = () => {
            if (this.isNot) {
                return `Expected value not to be undefined, received: ${(0, diff_js_1.formatValue)(received)}`;
            }
            else {
                return `Expected value to be undefined, received: ${(0, diff_js_1.formatValue)(received)}`;
            }
        };
        return { pass, message };
    },
    /**
     * toBeDefined - Checks if value is not undefined
     */
    toBeDefined(received) {
        const pass = received !== undefined;
        const message = () => {
            if (this.isNot) {
                return `Expected value to be undefined, received: ${(0, diff_js_1.formatValue)(received)}`;
            }
            else {
                return `Expected value to be defined, received: ${(0, diff_js_1.formatValue)(received)}`;
            }
        };
        return { pass, message };
    },
    /**
     * toBeGreaterThan - Numeric comparison >
     */
    toBeGreaterThan(received, expected) {
        const pass = received > expected;
        const message = () => {
            if (this.isNot) {
                return `Expected ${(0, diff_js_1.formatValue)(received)} not to be greater than ${(0, diff_js_1.formatValue)(expected)}`;
            }
            else {
                return `Expected ${(0, diff_js_1.formatValue)(received)} to be greater than ${(0, diff_js_1.formatValue)(expected)}`;
            }
        };
        return { pass, message };
    },
    /**
     * toBeGreaterThanOrEqual - Numeric comparison >=
     */
    toBeGreaterThanOrEqual(received, expected) {
        const pass = received >= expected;
        const message = () => {
            if (this.isNot) {
                return `Expected ${(0, diff_js_1.formatValue)(received)} not to be greater than or equal to ${(0, diff_js_1.formatValue)(expected)}`;
            }
            else {
                return `Expected ${(0, diff_js_1.formatValue)(received)} to be greater than or equal to ${(0, diff_js_1.formatValue)(expected)}`;
            }
        };
        return { pass, message };
    },
    /**
     * toBeLessThan - Numeric comparison <
     */
    toBeLessThan(received, expected) {
        const pass = received < expected;
        const message = () => {
            if (this.isNot) {
                return `Expected ${(0, diff_js_1.formatValue)(received)} not to be less than ${(0, diff_js_1.formatValue)(expected)}`;
            }
            else {
                return `Expected ${(0, diff_js_1.formatValue)(received)} to be less than ${(0, diff_js_1.formatValue)(expected)}`;
            }
        };
        return { pass, message };
    },
    /**
     * toBeLessThanOrEqual - Numeric comparison <=
     */
    toBeLessThanOrEqual(received, expected) {
        const pass = received <= expected;
        const message = () => {
            if (this.isNot) {
                return `Expected ${(0, diff_js_1.formatValue)(received)} not to be less than or equal to ${(0, diff_js_1.formatValue)(expected)}`;
            }
            else {
                return `Expected ${(0, diff_js_1.formatValue)(received)} to be less than or equal to ${(0, diff_js_1.formatValue)(expected)}`;
            }
        };
        return { pass, message };
    },
    /**
     * toBeCloseTo - Numeric comparison with precision tolerance
     */
    toBeCloseTo(received, expected, precision = 2) {
        const pow = Math.pow(10, -precision);
        const delta = Math.abs(expected - received);
        const pass = delta < pow;
        const message = () => {
            if (this.isNot) {
                return `Expected ${(0, diff_js_1.formatValue)(received)} not to be close to ${(0, diff_js_1.formatValue)(expected)} (precision: ${precision})`;
            }
            else {
                return `Expected ${(0, diff_js_1.formatValue)(received)} to be close to ${(0, diff_js_1.formatValue)(expected)} (precision: ${precision}), difference: ${delta}`;
            }
        };
        return { pass, message };
    },
    /**
     * toMatch - String/RegExp pattern matching
     */
    toMatch(received, expected) {
        const receivedString = String(received);
        const regex = expected instanceof RegExp ? expected : new RegExp(expected);
        const pass = regex.test(receivedString);
        const message = () => {
            if (this.isNot) {
                return `Expected string not to match pattern:\n  Pattern: ${(0, diff_js_1.formatValue)(expected)}\n  Received: ${(0, diff_js_1.formatValue)(receivedString)}`;
            }
            else {
                return `Expected string to match pattern:\n  Pattern: ${(0, diff_js_1.formatValue)(expected)}\n  Received: ${(0, diff_js_1.formatValue)(receivedString)}`;
            }
        };
        return { pass, message };
    },
    /**
     * toContain - Array/String containment check
     */
    toContain(received, expected) {
        let pass = false;
        if (typeof received === 'string') {
            pass = received.includes(String(expected));
        }
        else if (Array.isArray(received)) {
            pass = received.includes(expected);
        }
        else if (received && typeof received[Symbol.iterator] === 'function') {
            // Handle other iterables
            pass = Array.from(received).includes(expected);
        }
        const message = () => {
            if (this.isNot) {
                return `Expected ${(0, diff_js_1.formatValue)(received)} not to contain ${(0, diff_js_1.formatValue)(expected)}`;
            }
            else {
                return `Expected ${(0, diff_js_1.formatValue)(received)} to contain ${(0, diff_js_1.formatValue)(expected)}`;
            }
        };
        return { pass, message };
    },
    /**
     * toHaveLength - Length property check
     */
    toHaveLength(received, expected) {
        const hasLength = received && typeof received.length === 'number';
        const pass = hasLength && received.length === expected;
        const message = () => {
            if (!hasLength) {
                return `Expected value to have a length property, received: ${(0, diff_js_1.formatValue)(received)}`;
            }
            if (this.isNot) {
                return `Expected length not to be ${expected}, received: ${received.length}`;
            }
            else {
                return `Expected length to be ${expected}, received: ${received.length}`;
            }
        };
        return { pass, message };
    },
    /**
     * toHaveProperty - Object property existence and optionally value check
     */
    toHaveProperty(received, keyPath, expectedValue) {
        const hasProperty = received && typeof received === 'object' && keyPath in received;
        let pass = hasProperty;
        if (pass && arguments.length === 3) {
            pass = (0, diff_js_1.deepEqual)(received[keyPath], expectedValue);
        }
        const message = () => {
            if (!hasProperty) {
                if (this.isNot) {
                    return `Expected object not to have property "${keyPath}"`;
                }
                else {
                    return `Expected object to have property "${keyPath}"\nReceived: ${(0, diff_js_1.formatValue)(received)}`;
                }
            }
            else if (arguments.length === 3) {
                if (this.isNot) {
                    return `Expected property "${keyPath}" not to have value:\n  ${(0, diff_js_1.formatValue)(expectedValue)}\nReceived:\n  ${(0, diff_js_1.formatValue)(received[keyPath])}`;
                }
                else {
                    return `Expected property "${keyPath}" to have value:\n  ${(0, diff_js_1.formatValue)(expectedValue)}\nReceived:\n  ${(0, diff_js_1.formatValue)(received[keyPath])}`;
                }
            }
            else {
                return `Expected object not to have property "${keyPath}"`;
            }
        };
        return { pass, message };
    },
    /**
     * toMatchSnapshot - Snapshot testing
     */
    toMatchSnapshot(received, snapshotName) {
        // Note: This is async but the current matcher API is sync
        // We'll need to handle this at the test runner level
        const testName = this.currentTestName || 'Unknown Test';
        // Store snapshot data for async processing
        this.__snapshotData = {
            testName,
            value: received,
            snapshotName
        };
        // Return a placeholder - actual matching happens in test runner
        return {
            pass: true,
            message: () => 'Snapshot matching deferred to test runner'
        };
    },
    /**
     * toThrow - Function execution error check
     */
    toThrow(received, expectedError) {
        if (typeof received !== 'function') {
            throw new Error('toThrow matcher must be called on a function');
        }
        let thrownError;
        let didThrow = false;
        try {
            received();
        }
        catch (error) {
            didThrow = true;
            thrownError = error;
        }
        let pass = didThrow;
        // If specific error expectation is provided, check it
        if (pass && expectedError !== undefined) {
            if (typeof expectedError === 'string') {
                pass = thrownError && thrownError.message.includes(expectedError);
            }
            else if (expectedError instanceof RegExp) {
                pass = thrownError && expectedError.test(thrownError.message);
            }
            else if (typeof expectedError === 'function') {
                pass = thrownError instanceof expectedError;
            }
            else if (expectedError instanceof Error) {
                pass = thrownError && thrownError.message === expectedError.message;
            }
        }
        const message = () => {
            if (this.isNot) {
                if (expectedError) {
                    return `Expected function not to throw ${(0, diff_js_1.formatValue)(expectedError)}, but it threw: ${thrownError?.message || thrownError}`;
                }
                else {
                    return `Expected function not to throw, but it threw: ${thrownError?.message || thrownError}`;
                }
            }
            else {
                if (!didThrow) {
                    return `Expected function to throw${expectedError ? ` ${(0, diff_js_1.formatValue)(expectedError)}` : ''}, but it didn't throw`;
                }
                else if (expectedError) {
                    return `Expected function to throw ${(0, diff_js_1.formatValue)(expectedError)}, but it threw: ${thrownError?.message || thrownError}`;
                }
                else {
                    return 'Expected function to throw, but it didn\'t throw';
                }
            }
        };
        return { pass, message };
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,