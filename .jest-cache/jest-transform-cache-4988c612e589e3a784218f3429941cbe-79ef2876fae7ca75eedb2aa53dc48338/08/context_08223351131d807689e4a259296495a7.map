{"file":"/home/runner/workspace/lib/runner/context.ts","mappings":";AAAA;;;;;;GAMG;;;AAgFH,wCAOC;AASD,0CAEC;AAMD,8BAGC;AAMD,4BAMC;AAxDD,4FAA4F;AAC/E,QAAA,SAAS,GAAU;IAC9B,IAAI,EAAE,MAAM;IACZ,KAAK,EAAE,EAAE;IACT,MAAM,EAAE,EAAE;IACV,KAAK,EAAE;QACL,SAAS,EAAE,EAAE;QACb,QAAQ,EAAE,EAAE;QACZ,UAAU,EAAE,EAAE;QACd,SAAS,EAAE,EAAE;KACd;CACF,CAAC;AAEF;;;GAGG;AACH,SAAgB,cAAc;IAC5B,iBAAS,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC3B,iBAAS,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5B,iBAAS,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IACrC,iBAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;IACpC,iBAAS,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;IACtC,iBAAS,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;AACvC,CAAC;AAED,sEAAsE;AACtE,IAAI,YAAY,GAAU,iBAAS,CAAC;AACpC,MAAM,UAAU,GAAY,EAAE,CAAC;AAE/B;;GAEG;AACH,SAAgB,eAAe;IAC7B,OAAO,YAAY,CAAC;AACtB,CAAC;AAED;;;GAGG;AACH,SAAgB,SAAS,CAAC,KAAY;IACpC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9B,YAAY,GAAG,KAAK,CAAC;AACvB,CAAC;AAED;;;GAGG;AACH,SAAgB,QAAQ;IACtB,MAAM,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC;IAChC,IAAI,MAAM,EAAE,CAAC;QACX,YAAY,GAAG,MAAM,CAAC;IACxB,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC","names":[],"sources":["/home/runner/workspace/lib/runner/context.ts"],"sourcesContent":["/**\n * Test Runner Context - Core Types and State Management\n * \n * This module defines the fundamental data structures and state management\n * for the qtests runner system. It provides the foundation for organizing\n * and executing tests in a hierarchical structure with proper lifecycle hooks.\n */\n\n// Core test case structure with support for async execution and timeouts\nexport interface TestCase {\n  name: string;\n  fn: (done?: (err?: any) => void) => any | Promise<any>;\n  timeoutMs?: number;\n  mode?: 'normal' | 'only' | 'skip' | 'todo';\n}\n\n// Lifecycle hooks for setup and teardown at suite and test levels\nexport interface Hooks {\n  beforeAll: Array<() => any | Promise<any>>;\n  afterAll: Array<() => any | Promise<any>>;\n  beforeEach: Array<() => any | Promise<any>>;\n  afterEach: Array<() => any | Promise<any>>;\n}\n\n// Hierarchical test suite structure supporting nested describes\nexport interface Suite {\n  name: string;\n  tests: TestCase[];\n  suites: Suite[];\n  hooks: Hooks;\n}\n\n// Configuration options for test execution\nexport interface RunOptions {\n  timeoutMs?: number; // default timeout for all tests\n  filterName?: RegExp; // filter tests by name pattern\n  filterPath?: RegExp; // filter test files by path pattern\n  bail?: boolean; // stop on first failure\n  retries?: number; // number of retries for failing tests\n}\n\n// Individual test execution result\nexport interface TestResult {\n  name: string;\n  status: 'passed' | 'failed' | 'skipped' | 'todo';\n  error?: Error;\n  durationMs?: number;\n  retries?: number; // number of retries attempted\n}\n\n// Suite execution result with nested structure\nexport interface SuiteResult {\n  name: string;\n  results: TestResult[];\n  suites: SuiteResult[];\n  durationMs?: number;\n}\n\n// Overall test run result with summary statistics\nexport interface RunResult {\n  root: SuiteResult;\n  passed: number;\n  failed: number;\n  skipped: number;\n  todo: number;\n  durationMs: number;\n  bailedEarly?: boolean;\n}\n\n// Global root suite that collects all tests - this is the entry point for test registration\nexport const rootSuite: Suite = {\n  name: 'root',\n  tests: [],\n  suites: [],\n  hooks: { \n    beforeAll: [], \n    afterAll: [], \n    beforeEach: [], \n    afterEach: [] \n  }\n};\n\n/**\n * Reset the root suite to clean state\n * Essential for preventing test pollution between runs in watch mode\n */\nexport function resetRootSuite(): void {\n  rootSuite.tests.length = 0;\n  rootSuite.suites.length = 0;\n  rootSuite.hooks.beforeAll.length = 0;\n  rootSuite.hooks.afterAll.length = 0;\n  rootSuite.hooks.beforeEach.length = 0;\n  rootSuite.hooks.afterEach.length = 0;\n}\n\n// Current execution context for proper nesting of describes and hooks\nlet currentSuite: Suite = rootSuite;\nconst suiteStack: Suite[] = [];\n\n/**\n * Get the current suite context for test/hook registration\n */\nexport function getCurrentSuite(): Suite {\n  return currentSuite;\n}\n\n/**\n * Push a new suite onto the context stack\n * Used internally by describe() to manage nested contexts\n */\nexport function pushSuite(suite: Suite): void {\n  suiteStack.push(currentSuite);\n  currentSuite = suite;\n}\n\n/**\n * Pop the current suite from the context stack\n * Used internally by describe() when exiting a suite block\n */\nexport function popSuite(): Suite | undefined {\n  const popped = suiteStack.pop();\n  if (popped) {\n    currentSuite = popped;\n  }\n  return popped;\n}"],"version":3}