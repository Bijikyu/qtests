b10c0958f23360b1db52fd6467bc741d
/**
 * Winston Logging Library Stub for Testing - TypeScript Implementation
 *
 * This module provides a complete no-op replacement for the winston logging
 * library. When tests require('winston') after qtests/setup, they get this
 * stub instead of real winston, preventing log output during test execution.
 */
const noop = () => { }; // shared no-op function for all stub methods
const winstonStub = {
    /**
     * Creates a no-op logger instance
     */
    createLogger: () => ({
        error: noop, // Silent - no error output during tests
        warn: noop, // Silent - no warning output during tests
        info: noop, // Silent - no info output during tests
        debug: noop, // Silent - no debug output during tests
        verbose: noop, // Silent - no verbose output during tests
        silly: noop // Silent - no silly output during tests
    }),
    /**
     * Winston format utilities stub
     */
    format: {
        colorize: () => ({}),
        combine: () => ({}),
        label: () => ({}),
        timestamp: () => ({}),
        printf: () => ({}),
        json: () => ({}),
        simple: () => ({})
    },
    /**
     * Winston transport stubs
     */
    transports: {
        Console: class ConsoleTransportStub {
            constructor() {
                // No-op constructor
            }
        },
        File: class FileTransportStub {
            constructor() {
                // No-op constructor
            }
        }
    },
    /**
     * Color configuration stub
     */
    addColors: noop,
    /**
     * Logger container stub
     */
    loggers: {
        add: noop,
        get: () => ({
            error: noop,
            warn: noop,
            info: noop,
            debug: noop,
            verbose: noop,
            silly: noop
        })
    }
};
// Export winston stub using ES module syntax
export default winstonStub;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zdHVicy93aW5zdG9uLnRzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQWtDSCxNQUFNLElBQUksR0FBRyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUMsQ0FBQyw2Q0FBNkM7QUFFcEUsTUFBTSxXQUFXLEdBQWdCO0lBQy9COztPQUVHO0lBQ0gsWUFBWSxFQUFFLEdBQWUsRUFBRSxDQUFDLENBQUM7UUFDL0IsS0FBSyxFQUFFLElBQUksRUFBSSx3Q0FBd0M7UUFDdkQsSUFBSSxFQUFFLElBQUksRUFBSywwQ0FBMEM7UUFDekQsSUFBSSxFQUFFLElBQUksRUFBSyx1Q0FBdUM7UUFDdEQsS0FBSyxFQUFFLElBQUksRUFBSSx3Q0FBd0M7UUFDdkQsT0FBTyxFQUFFLElBQUksRUFBRSwwQ0FBMEM7UUFDekQsS0FBSyxFQUFFLElBQUksQ0FBSSx3Q0FBd0M7S0FDeEQsQ0FBQztJQUVGOztPQUVHO0lBQ0gsTUFBTSxFQUFFO1FBQ04sUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3BCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNuQixLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDakIsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3JCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNsQixJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDaEIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO0tBQ25CO0lBRUQ7O09BRUc7SUFDSCxVQUFVLEVBQUU7UUFDVixPQUFPLEVBQUUsTUFBTSxvQkFBb0I7WUFDakM7Z0JBQ0Usb0JBQW9CO1lBQ3RCLENBQUM7U0FDRjtRQUNELElBQUksRUFBRSxNQUFNLGlCQUFpQjtZQUMzQjtnQkFDRSxvQkFBb0I7WUFDdEIsQ0FBQztTQUNGO0tBQ0Y7SUFFRDs7T0FFRztJQUNILFNBQVMsRUFBRSxJQUFJO0lBRWY7O09BRUc7SUFDSCxPQUFPLEVBQUU7UUFDUCxHQUFHLEVBQUUsSUFBSTtRQUNULEdBQUcsRUFBRSxHQUFlLEVBQUUsQ0FBQyxDQUFDO1lBQ3RCLEtBQUssRUFBRSxJQUFJO1lBQ1gsSUFBSSxFQUFFLElBQUk7WUFDVixJQUFJLEVBQUUsSUFBSTtZQUNWLEtBQUssRUFBRSxJQUFJO1lBQ1gsT0FBTyxFQUFFLElBQUk7WUFDYixLQUFLLEVBQUUsSUFBSTtTQUNaLENBQUM7S0FDSDtDQUNGLENBQUM7QUFFRiw2Q0FBNkM7QUFDN0MsZUFBZSxXQUFXLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zdHVicy93aW5zdG9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogV2luc3RvbiBMb2dnaW5nIExpYnJhcnkgU3R1YiBmb3IgVGVzdGluZyAtIFR5cGVTY3JpcHQgSW1wbGVtZW50YXRpb25cbiAqIFxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgYSBjb21wbGV0ZSBuby1vcCByZXBsYWNlbWVudCBmb3IgdGhlIHdpbnN0b24gbG9nZ2luZ1xuICogbGlicmFyeS4gV2hlbiB0ZXN0cyByZXF1aXJlKCd3aW5zdG9uJykgYWZ0ZXIgcXRlc3RzL3NldHVwLCB0aGV5IGdldCB0aGlzXG4gKiBzdHViIGluc3RlYWQgb2YgcmVhbCB3aW5zdG9uLCBwcmV2ZW50aW5nIGxvZyBvdXRwdXQgZHVyaW5nIHRlc3QgZXhlY3V0aW9uLlxuICovXG5cbi8vIFR5cGUgZGVmaW5pdGlvbnMgZm9yIHdpbnN0b24gc3R1YlxuaW50ZXJmYWNlIExvZ2dlclN0dWIge1xuICBlcnJvcjogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xuICB3YXJuOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG4gIGluZm86ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcbiAgZGVidWc6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcbiAgdmVyYm9zZTogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xuICBzaWxseTogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgV2luc3RvblN0dWIge1xuICBjcmVhdGVMb2dnZXI6IChvcHRpb25zPzogYW55KSA9PiBMb2dnZXJTdHViO1xuICBmb3JtYXQ6IHtcbiAgICBjb2xvcml6ZTogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG4gICAgY29tYmluZTogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG4gICAgbGFiZWw6ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xuICAgIHRpbWVzdGFtcDogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG4gICAgcHJpbnRmOiAoLi4uYXJnczogYW55W10pID0+IGFueTtcbiAgICBqc29uOiAoLi4uYXJnczogYW55W10pID0+IGFueTtcbiAgICBzaW1wbGU6ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xuICB9O1xuICB0cmFuc3BvcnRzOiB7XG4gICAgQ29uc29sZTogbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xuICAgIEZpbGU6IG5ldyAoLi4uYXJnczogYW55W10pID0+IGFueTtcbiAgfTtcbiAgYWRkQ29sb3JzOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQ7XG4gIGxvZ2dlcnM6IHtcbiAgICBhZGQ6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcbiAgICBnZXQ6ICguLi5hcmdzOiBhbnlbXSkgPT4gTG9nZ2VyU3R1YjtcbiAgfTtcbn1cblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9OyAvLyBzaGFyZWQgbm8tb3AgZnVuY3Rpb24gZm9yIGFsbCBzdHViIG1ldGhvZHNcblxuY29uc3Qgd2luc3RvblN0dWI6IFdpbnN0b25TdHViID0ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5vLW9wIGxvZ2dlciBpbnN0YW5jZVxuICAgKi9cbiAgY3JlYXRlTG9nZ2VyOiAoKTogTG9nZ2VyU3R1YiA9PiAoe1xuICAgIGVycm9yOiBub29wLCAgIC8vIFNpbGVudCAtIG5vIGVycm9yIG91dHB1dCBkdXJpbmcgdGVzdHNcbiAgICB3YXJuOiBub29wLCAgICAvLyBTaWxlbnQgLSBubyB3YXJuaW5nIG91dHB1dCBkdXJpbmcgdGVzdHNcbiAgICBpbmZvOiBub29wLCAgICAvLyBTaWxlbnQgLSBubyBpbmZvIG91dHB1dCBkdXJpbmcgdGVzdHNcbiAgICBkZWJ1Zzogbm9vcCwgICAvLyBTaWxlbnQgLSBubyBkZWJ1ZyBvdXRwdXQgZHVyaW5nIHRlc3RzXG4gICAgdmVyYm9zZTogbm9vcCwgLy8gU2lsZW50IC0gbm8gdmVyYm9zZSBvdXRwdXQgZHVyaW5nIHRlc3RzXG4gICAgc2lsbHk6IG5vb3AgICAgLy8gU2lsZW50IC0gbm8gc2lsbHkgb3V0cHV0IGR1cmluZyB0ZXN0c1xuICB9KSxcblxuICAvKipcbiAgICogV2luc3RvbiBmb3JtYXQgdXRpbGl0aWVzIHN0dWJcbiAgICovXG4gIGZvcm1hdDoge1xuICAgIGNvbG9yaXplOiAoKSA9PiAoe30pLFxuICAgIGNvbWJpbmU6ICgpID0+ICh7fSksXG4gICAgbGFiZWw6ICgpID0+ICh7fSksXG4gICAgdGltZXN0YW1wOiAoKSA9PiAoe30pLFxuICAgIHByaW50ZjogKCkgPT4gKHt9KSxcbiAgICBqc29uOiAoKSA9PiAoe30pLFxuICAgIHNpbXBsZTogKCkgPT4gKHt9KVxuICB9LFxuXG4gIC8qKlxuICAgKiBXaW5zdG9uIHRyYW5zcG9ydCBzdHVic1xuICAgKi9cbiAgdHJhbnNwb3J0czoge1xuICAgIENvbnNvbGU6IGNsYXNzIENvbnNvbGVUcmFuc3BvcnRTdHViIHtcbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBOby1vcCBjb25zdHJ1Y3RvclxuICAgICAgfVxuICAgIH0sXG4gICAgRmlsZTogY2xhc3MgRmlsZVRyYW5zcG9ydFN0dWIge1xuICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIE5vLW9wIGNvbnN0cnVjdG9yXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBDb2xvciBjb25maWd1cmF0aW9uIHN0dWJcbiAgICovXG4gIGFkZENvbG9yczogbm9vcCxcblxuICAvKipcbiAgICogTG9nZ2VyIGNvbnRhaW5lciBzdHViXG4gICAqL1xuICBsb2dnZXJzOiB7XG4gICAgYWRkOiBub29wLFxuICAgIGdldDogKCk6IExvZ2dlclN0dWIgPT4gKHtcbiAgICAgIGVycm9yOiBub29wLFxuICAgICAgd2Fybjogbm9vcCxcbiAgICAgIGluZm86IG5vb3AsXG4gICAgICBkZWJ1Zzogbm9vcCxcbiAgICAgIHZlcmJvc2U6IG5vb3AsXG4gICAgICBzaWxseTogbm9vcFxuICAgIH0pXG4gIH1cbn07XG5cbi8vIEV4cG9ydCB3aW5zdG9uIHN0dWIgdXNpbmcgRVMgbW9kdWxlIHN5bnRheFxuZXhwb3J0IGRlZmF1bHQgd2luc3RvblN0dWI7Il0sInZlcnNpb24iOjN9