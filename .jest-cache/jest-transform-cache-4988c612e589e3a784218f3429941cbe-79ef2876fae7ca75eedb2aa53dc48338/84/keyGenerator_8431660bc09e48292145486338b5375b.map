{"file":"/home/runner/workspace/utils/helpers/keyGenerator.ts","mappings":";AAAA;;;;;GAKG;;AAkDD,kCAAW;AAhDb;;;;;;;;;;GAUG;AACH,SAAS,WAAW,CAAC,eAAgC,EAAE,EAAE,MAAe;IACtE,OAAO,CAAC,GAAG,CAAC,4CAA4C,YAAY,eAAe,MAAM,IAAI,MAAM,EAAE,CAAC,CAAC;IAEvG,IAAI,CAAC;QACH,+CAA+C;QAC/C,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE,CAAC;YACrC,MAAM,OAAO,GAAG,gBAAgB,YAAY,EAAE,CAAC;YAC/C,OAAO,CAAC,GAAG,CAAC,iDAAiD,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;YAC/E,OAAO,OAAO,CAAC;QACjB,CAAC;QAED,6CAA6C;QAC7C,MAAM,MAAM,GAAG,YAAsB,CAAC;QAEtC,2CAA2C;QAC3C,MAAM,KAAK,GAAG,gEAAgE,CAAC;QAC/E,IAAI,MAAM,GAAG,EAAE,CAAC;QAEhB,6BAA6B;QAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;QACnE,CAAC;QAED,yBAAyB;QACzB,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI,MAAM,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;QAEzD,OAAO,CAAC,GAAG,CAAC,4CAA4C,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QAC3E,OAAO,QAAQ,CAAC;IAElB,CAAC;IAAC,OAAO,GAAQ,EAAE,CAAC;QAClB,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QAChD,MAAM,GAAG,CAAC;IACZ,CAAC;AACH,CAAC","names":[],"sources":["/home/runner/workspace/utils/helpers/keyGenerator.ts"],"sourcesContent":["/**\n * Key Generation Utility - TypeScript Implementation\n * \n * This module provides functionality for generating random keys and identifiers\n * for testing scenarios where unique values are needed.\n */\n\n/**\n * Generate a random key for testing purposes\n * \n * This function creates a random string that can be used as API keys,\n * session tokens, or other identifiers in testing scenarios where\n * unique values are required.\n * \n * @param lengthOrType - Length of the generated key (number) or type descriptor (string) for testing\n * @param prefix - Optional prefix to add to the generated key\n * @returns Random key string suitable for testing\n */\nfunction generateKey(lengthOrType: number | string = 32, prefix?: string): string {\n  console.log(`generateKey is running with lengthOrType ${lengthOrType} and prefix ${prefix || 'none'}`);\n  \n  try {\n    // Handle testing scenario with type descriptor\n    if (typeof lengthOrType === 'string') {\n      const testKey = `test-api-key-${lengthOrType}`;\n      console.log(`generateKey is returning test key with length ${testKey.length}`);\n      return testKey;\n    }\n    \n    // Handle normal scenario with numeric length\n    const length = lengthOrType as number;\n    \n    // Character set for generating random keys\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    \n    // Generate random characters\n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    \n    // Add prefix if provided\n    const finalKey = prefix ? `${prefix}_${result}` : result;\n    \n    console.log(`generateKey is returning key with length ${finalKey.length}`);\n    return finalKey;\n    \n  } catch (err: any) {\n    console.log(`generateKey error ${err.message}`);\n    throw err;\n  }\n}\n\n// Export key generation utilities using ES module syntax\nexport {\n  generateKey\n};"],"version":3}