{"version":3,"names":["mockCollections","Map","getTestIsolatedKey","modelName","needsIsolation","process","env","JEST_WORKER_ID","NODE_ENV","argv","includes","testContext","expect","getState","state","testPath","currentTestName","e","processId","pid","hrTime","hrtime","bigint","unique","BaseMockModel","constructor","data","console","log","name","Object","assign","_id","generateId","error","message","save","collection","getCollection","existingIndex","findIndex","doc","push","Promise","resolve","remove","index","splice","key","has","set","get","clearCollection","deleteMany","query","JSON","stringify","initialLength","length","remainingDocs","filter","matchesQuery","deletedCount","acknowledged","updateMany","update","modifiedCount","forEach","countDocuments","count","Math","random","toString","substr","Date","now","find","results","chain","_data","_sortBy","_skipCount","_limitCount","sort","sortObj","skip","limit","_applyChain","sortKey","keys","sortOrder","a","b","slice","lean","finalData","exec","findOne","result","findOneAndUpdate","options","d","upsert","newDoc","createdAt","updatedAt","currentCollection","findOneAndDelete","deleted","field","value","entries","module","exports"],"sources":["baseMockModel.js"],"sourcesContent":["/**\n * Base Mock Model Class\n * \n * This class focuses solely on providing the foundation for Mongoose-compatible mock models.\n * It handles core model functionality like save, remove, and collection management.\n */\n\n// Global registry for all mock model collections with parallel-test isolation\nconst mockCollections = new Map();\n\n/**\n * Get test-isolated collection key to prevent race conditions\n * Only applies isolation when truly running in parallel (detected by environment)\n */\nfunction getTestIsolatedKey(modelName) {\n  // Check if we're in a parallel test environment that needs isolation\n  const needsIsolation = process.env.JEST_WORKER_ID || \n                        process.env.NODE_ENV === 'parallel-test' ||\n                        (process.argv.includes('--maxWorkers') && process.argv.includes('--parallel'));\n  \n  if (!needsIsolation) {\n    // Normal testing - use simple model name for shared collections\n    return modelName;\n  }\n  \n  // Parallel testing - use isolation\n  let testContext = '';\n  try {\n    if (typeof expect !== 'undefined' && expect.getState) {\n      const state = expect.getState();\n      testContext = `${state.testPath || ''}-${state.currentTestName || ''}`;\n    }\n  } catch (e) {\n    // Fallback if Jest context not available\n  }\n  \n  // Add process PID and high-resolution time for uniqueness in parallel mode\n  const processId = process.pid;\n  const hrTime = process.hrtime.bigint();\n  const unique = `${processId}-${hrTime}`;\n  \n  return `${modelName}-${testContext}-${unique}`;\n}\n\n/**\n * Base Mock Model Class\n * \n * This class provides the foundation for creating Mongoose-compatible mock models\n * that store data in memory instead of a database. It implements the most commonly\n * used Mongoose model methods for comprehensive testing scenarios.\n */\nclass BaseMockModel {\n  /**\n   * Constructor for mock model instances\n   * \n   * @param {Object} data - Initial data for the model instance\n   */\n  constructor(data = {}) {\n    console.log(`${this.constructor.name} constructor is running with ${typeof data}`);\n    \n    try {\n      Object.assign(this, data);\n      \n      // Generate _id if not provided (mimics Mongoose behavior)\n      if (!this._id) {\n        this._id = this.constructor.generateId();\n      }\n      \n      console.log(`${this.constructor.name} constructor is returning instance`);\n    } catch (error) {\n      console.log(`${this.constructor.name} constructor error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Save instance to in-memory collection\n   * \n   * @returns {Promise<Object>} Promise resolving to the saved instance\n   */\n  save() {\n    console.log(`${this.constructor.name}.save is running with instance`);\n    \n    try {\n      const collection = this.constructor.getCollection();\n      \n      // Check if this is an update (document already exists) or a new save\n      const existingIndex = collection.findIndex(doc => doc._id === this._id);\n      \n      if (existingIndex >= 0) {\n        // Update existing document\n        collection[existingIndex] = this;\n        console.log(`${this.constructor.name}.save is returning updated instance`);\n      } else {\n        // Add new document\n        collection.push(this);\n        console.log(`${this.constructor.name}.save is returning new instance`);\n      }\n      \n      return Promise.resolve(this);\n    } catch (error) {\n      console.log(`${this.constructor.name}.save error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Remove instance from collection\n   * \n   * @returns {Promise<Object>} Promise resolving to the removed instance\n   */\n  remove() {\n    console.log(`${this.constructor.name}.remove is running with instance`);\n    \n    try {\n      const collection = this.constructor.getCollection();\n      const index = collection.findIndex(doc => doc._id === this._id);\n      \n      if (index >= 0) {\n        collection.splice(index, 1);\n        console.log(`${this.constructor.name}.remove is returning removed instance`);\n        return Promise.resolve(this);\n      } else {\n        console.log(`${this.constructor.name}.remove is returning null (not found)`);\n        return Promise.resolve(null);\n      }\n    } catch (error) {\n      console.log(`${this.constructor.name}.remove error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get or create collection for this model class\n   * \n   * @returns {Array} Array serving as the in-memory collection\n   */\n  static getCollection() {\n    const key = getTestIsolatedKey(this.name || 'Anonymous');\n    \n    if (!mockCollections.has(key)) {\n      mockCollections.set(key, []);\n    }\n    \n    return mockCollections.get(key);\n  }\n  \n  /**\n   * Clear collection for this model class\n   * \n   * Removes all documents from the in-memory collection for this specific model\n   */\n  static clearCollection() {\n    console.log(`${this.name}.clearCollection is running`);\n    \n    try {\n      const key = getTestIsolatedKey(this.name || 'Anonymous');\n      mockCollections.set(key, []);\n      console.log(`${this.name}.clearCollection completed`);\n    } catch (error) {\n      console.log(`${this.name}.clearCollection error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Delete many documents matching query\n   * \n   * @param {Object} query - Query object to match documents for deletion\n   * @returns {Promise<Object>} Promise resolving to deletion result\n   */\n  static deleteMany(query = {}) {\n    console.log(`${this.name}.deleteMany is running with ${JSON.stringify(query)}`);\n    \n    try {\n      const collection = this.getCollection();\n      const initialLength = collection.length;\n      \n      // Filter out documents that match the query\n      const remainingDocs = collection.filter(doc => !this.matchesQuery(doc, query));\n      const deletedCount = initialLength - remainingDocs.length;\n      \n      // Update the collection\n      const key = getTestIsolatedKey(this.name || 'Anonymous');\n      mockCollections.set(key, remainingDocs);\n      \n      console.log(`${this.name}.deleteMany deleted ${deletedCount} documents`);\n      return Promise.resolve({ deletedCount, acknowledged: true });\n    } catch (error) {\n      console.log(`${this.name}.deleteMany error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Update many documents matching query\n   * \n   * @param {Object} query - Query object to match documents for update\n   * @param {Object} update - Update object\n   * @returns {Promise<Object>} Promise resolving to update result\n   */\n  static updateMany(query = {}, update = {}) {\n    console.log(`${this.name}.updateMany is running with query and update`);\n    \n    try {\n      const collection = this.getCollection();\n      let modifiedCount = 0;\n      \n      collection.forEach(doc => {\n        if (this.matchesQuery(doc, query)) {\n          Object.assign(doc, update);\n          modifiedCount++;\n        }\n      });\n      \n      console.log(`${this.name}.updateMany modified ${modifiedCount} documents`);\n      return Promise.resolve({ modifiedCount, acknowledged: true });\n    } catch (error) {\n      console.log(`${this.name}.updateMany error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Count documents matching query\n   * \n   * @param {Object} query - Query object to match documents\n   * @returns {Promise<number>} Promise resolving to count\n   */\n  static countDocuments(query = {}) {\n    console.log(`${this.name}.countDocuments is running with ${JSON.stringify(query)}`);\n    \n    try {\n      const collection = this.getCollection();\n      const count = collection.filter(doc => this.matchesQuery(doc, query)).length;\n      \n      console.log(`${this.name}.countDocuments is returning ${count}`);\n      return Promise.resolve(count);\n    } catch (error) {\n      console.log(`${this.name}.countDocuments error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Generate unique ID for new documents\n   * \n   * @returns {string} Unique identifier\n   */\n  static generateId() {\n    return Math.random().toString(36).substr(2, 9) + Date.now().toString(36);\n  }\n  \n  /**\n   * Find documents in collection\n   * \n   * @param {Object} query - Query object\n   * @returns {Object} Query chain object with lean() method\n   */\n  static find(query = {}) {\n    console.log(`${this.name}.find is running with ${JSON.stringify(query)}`);\n    \n    try {\n      const collection = this.getCollection();\n      let results = collection.filter(doc => this.matchesQuery(doc, query));\n      \n      // Return chainable object with full query chain (Mongoose-style)\n      const chain = {\n        _data: results,\n        _sortBy: null,\n        _skipCount: 0,\n        _limitCount: null,\n        \n        sort(sortObj) {\n          this._sortBy = sortObj;\n          return this;\n        },\n        \n        skip(count) {\n          this._skipCount = count;\n          return this;\n        },\n        \n        limit(count) {\n          this._limitCount = count;\n          return this;\n        },\n        \n        _applyChain() {\n          let data = [...this._data];\n          \n          // Apply sorting\n          if (this._sortBy) {\n            const sortKey = Object.keys(this._sortBy)[0];\n            const sortOrder = this._sortBy[sortKey];\n            data.sort((a, b) => {\n              if (sortOrder === 1) return a[sortKey] > b[sortKey] ? 1 : -1;\n              return a[sortKey] < b[sortKey] ? 1 : -1;\n            });\n          }\n          \n          // Apply skip\n          if (this._skipCount > 0) {\n            data = data.slice(this._skipCount);\n          }\n          \n          // Apply limit\n          if (this._limitCount) {\n            data = data.slice(0, this._limitCount);\n          }\n          \n          return data;\n        },\n        \n        lean() {\n          const finalData = this._applyChain();\n          console.log(`${this.name}.find.lean is returning ${finalData.length} documents`);\n          return Promise.resolve(finalData);\n        },\n        \n        exec() {\n          const finalData = this._applyChain();\n          console.log(`${this.name}.find.exec is returning ${finalData.length} documents`);\n          return Promise.resolve(finalData);\n        }\n      };\n      \n      console.log(`${this.name}.find is returning query chain`);\n      return chain;\n    } catch (error) {\n      console.log(`${this.name}.find error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Find one document in collection\n   * \n   * @param {Object} query - Query object\n   * @returns {Promise<Object|null>} Promise resolving to matching document or null\n   */\n  static findOne(query = {}) {\n    console.log(`${this.name}.findOne is running with ${JSON.stringify(query)}`);\n    \n    try {\n      const collection = this.getCollection();\n      const result = collection.find(doc => this.matchesQuery(doc, query)) || null;\n      \n      console.log(`${this.name}.findOne is returning ${result ? 'document' : 'null'}`);\n      return Promise.resolve(result);\n    } catch (error) {\n      console.log(`${this.name}.findOne error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Find and update one document\n   * \n   * @param {Object} query - Query object\n   * @param {Object} update - Update object\n   * @param {Object} options - Update options (including upsert)\n   * @returns {Promise<Object|null>} Promise resolving to updated document or null\n   * @returns {Promise<Object|null>} Promise resolving to updated document or null\n   */\n  static findOneAndUpdate(query, update, options = {}) {\n    console.log(`${this.name}.findOneAndUpdate is running with query and update`);\n    \n    try {\n      const collection = this.getCollection();\n      let doc = collection.find(d => this.matchesQuery(d, query));\n      \n      if (!doc) {\n        if (options.upsert) {\n          // Create new document combining query and update\n          const newDoc = {\n            _id: this.generateId(),\n            ...query,\n            ...update,\n            createdAt: new Date(),\n            updatedAt: new Date()\n          };\n          \n          // Add to collection  \n          const modelName = this.name || 'Anonymous';\n          const currentCollection = mockCollections.get(modelName) || [];\n          currentCollection.push(newDoc);\n          mockCollections.set(modelName, currentCollection);\n          \n          console.log(`${this.name}.findOneAndUpdate created new document with upsert`);\n          return Promise.resolve(newDoc);\n        } else {\n          console.log(`${this.name}.findOneAndUpdate is returning null`);\n          return Promise.resolve(null);\n        }\n      }\n      \n      Object.assign(doc, update, { updatedAt: new Date() });\n      console.log(`${this.name}.findOneAndUpdate is returning updated document`);\n      return Promise.resolve(doc);\n    } catch (error) {\n      console.log(`${this.name}.findOneAndUpdate error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Find and delete one document\n   * \n   * @param {Object} query - Query object\n   * @returns {Promise<Object|null>} Promise resolving to deleted document or null\n   */\n  static findOneAndDelete(query) {\n    console.log(`${this.name}.findOneAndDelete is running with ${JSON.stringify(query)}`);\n    \n    try {\n      const collection = this.getCollection();\n      const index = collection.findIndex(doc => this.matchesQuery(doc, query));\n      \n      if (index === -1) {\n        console.log(`${this.name}.findOneAndDelete is returning null`);\n        return Promise.resolve(null);\n      }\n      \n      const deleted = collection.splice(index, 1)[0];\n      console.log(`${this.name}.findOneAndDelete is returning deleted document`);\n      return Promise.resolve(deleted);\n    } catch (error) {\n      console.log(`${this.name}.findOneAndDelete error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Check if document matches query\n   * \n   * @param {Object} doc - Document to test\n   * @param {Object} query - Query object with field/value pairs\n   * @returns {boolean} True if document matches query\n   */\n  static matchesQuery(doc, query) {\n    if (!query || Object.keys(query).length === 0) {\n      return true; // empty query matches all documents\n    }\n    \n    for (const [field, value] of Object.entries(query)) {\n      if (doc[field] !== value) {\n        return false; // field doesn't match\n      }\n    }\n    \n    return true; // all fields match\n  }\n}\n\nmodule.exports = {\n  BaseMockModel,\n  mockCollections\n};"],"mappings":"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","ignoreList":[]}