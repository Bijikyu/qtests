1d34605028b94468aedfb23d37071e52
"use strict";
/**
 * Simple Test Suite Runner - TypeScript Implementation
 *
 * Lightweight test runner for simple testing scenarios where Jest or other
 * full-featured test frameworks might be overkill. Provides basic test
 * execution with pass/fail tracking and formatted console output.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.runTestSuite = runTestSuite;
exports.runTestSuites = runTestSuites;
exports.createAssertions = createAssertions;
/**
 * Run a test suite with multiple test functions
 */
function runTestSuite(suiteName, testFunctions) {
    console.log(`\n🔧 Running: ${suiteName}`);
    console.log('-'.repeat(40));
    let passed = 0;
    let failed = 0;
    const failures = [];
    for (const [testName, testFn] of testFunctions) {
        try {
            console.log(`  ▶ ${testName}`);
            testFn();
            console.log(`    ✅ PASS`);
            passed++;
        }
        catch (error) {
            console.log(`    ❌ FAIL: ${error.message}`);
            failed++;
            failures.push({ test: testName, error: error.message });
        }
    }
    // Print summary
    console.log('-'.repeat(40));
    console.log(`Summary: ${passed} passed, ${failed} failed`);
    if (failures.length > 0) {
        console.log('\nFailures:');
        failures.forEach(({ test, error }) => {
            console.log(`  ❌ ${test}: ${error}`);
        });
    }
    return { passed, failed, failures };
}
/**
 * Run multiple test suites sequentially
 */
function runTestSuites(suites) {
    let totalPassed = 0;
    let totalFailed = 0;
    const allFailures = [];
    for (const [suiteName, testFunctions] of suites) {
        const result = runTestSuite(suiteName, testFunctions);
        totalPassed += result.passed;
        totalFailed += result.failed;
        allFailures.push(...result.failures);
    }
    console.log(`\n📊 Overall Summary: ${totalPassed} passed, ${totalFailed} failed`);
    return {
        passed: totalPassed,
        failed: totalFailed,
        failures: allFailures
    };
}
/**
 * Create basic assertion helpers
 */
function createAssertions() {
    return {
        equal: (actual, expected, message) => {
            if (actual !== expected) {
                throw new Error(message || `Expected ${expected}, got ${actual}`);
            }
        },
        notEqual: (actual, expected, message) => {
            if (actual === expected) {
                throw new Error(message || `Expected values not to be equal: ${actual}`);
            }
        },
        truthy: (value, message) => {
            if (!value) {
                throw new Error(message || `Expected truthy value, got ${value}`);
            }
        },
        falsy: (value, message) => {
            if (value) {
                throw new Error(message || `Expected falsy value, got ${value}`);
            }
        }
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS91dGlscy9ydW5UZXN0U3VpdGUudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7QUEyR0Qsb0NBQVk7QUFDWixzQ0FBYTtBQUNiLDRDQUFnQjtBQWpHbEI7O0dBRUc7QUFDSCxTQUFTLFlBQVksQ0FBQyxTQUFpQixFQUFFLGFBQXlCO0lBQ2hFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFNUIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsTUFBTSxRQUFRLEdBQTJDLEVBQUUsQ0FBQztJQUU1RCxLQUFLLE1BQU0sQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUksYUFBYSxFQUFFLENBQUM7UUFDL0MsSUFBSSxDQUFDO1lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDL0IsTUFBTSxFQUFFLENBQUM7WUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFCLE1BQU0sRUFBRSxDQUFDO1FBQ1gsQ0FBQztRQUFDLE9BQU8sS0FBVSxFQUFFLENBQUM7WUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sRUFBRSxDQUFDO1lBQ1QsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzFELENBQUM7SUFDSCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxNQUFNLFlBQVksTUFBTSxTQUFTLENBQUMsQ0FBQztJQUUzRCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMzQixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUM7QUFDdEMsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBUyxhQUFhLENBQUMsTUFBbUM7SUFDeEQsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztJQUNwQixNQUFNLFdBQVcsR0FBMkMsRUFBRSxDQUFDO0lBRS9ELEtBQUssTUFBTSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNoRCxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3RELFdBQVcsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzdCLFdBQVcsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzdCLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLFdBQVcsWUFBWSxXQUFXLFNBQVMsQ0FBQyxDQUFDO0lBRWxGLE9BQU87UUFDTCxNQUFNLEVBQUUsV0FBVztRQUNuQixNQUFNLEVBQUUsV0FBVztRQUNuQixRQUFRLEVBQUUsV0FBVztLQUN0QixDQUFDO0FBQ0osQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBUyxnQkFBZ0I7SUFDdkIsT0FBTztRQUNMLEtBQUssRUFBRSxDQUFDLE1BQVcsRUFBRSxRQUFhLEVBQUUsT0FBZ0IsRUFBRSxFQUFFO1lBQ3RELElBQUksTUFBTSxLQUFLLFFBQVEsRUFBRSxDQUFDO2dCQUN4QixNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sSUFBSSxZQUFZLFFBQVEsU0FBUyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQ3BFLENBQUM7UUFDSCxDQUFDO1FBRUQsUUFBUSxFQUFFLENBQUMsTUFBVyxFQUFFLFFBQWEsRUFBRSxPQUFnQixFQUFFLEVBQUU7WUFDekQsSUFBSSxNQUFNLEtBQUssUUFBUSxFQUFFLENBQUM7Z0JBQ3hCLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxJQUFJLG9DQUFvQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQzNFLENBQUM7UUFDSCxDQUFDO1FBRUQsTUFBTSxFQUFFLENBQUMsS0FBVSxFQUFFLE9BQWdCLEVBQUUsRUFBRTtZQUN2QyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ1gsTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLElBQUksOEJBQThCLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDcEUsQ0FBQztRQUNILENBQUM7UUFFRCxLQUFLLEVBQUUsQ0FBQyxLQUFVLEVBQUUsT0FBZ0IsRUFBRSxFQUFFO1lBQ3RDLElBQUksS0FBSyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLElBQUksNkJBQTZCLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDbkUsQ0FBQztRQUNILENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3V0aWxzL3J1blRlc3RTdWl0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNpbXBsZSBUZXN0IFN1aXRlIFJ1bm5lciAtIFR5cGVTY3JpcHQgSW1wbGVtZW50YXRpb25cbiAqIFxuICogTGlnaHR3ZWlnaHQgdGVzdCBydW5uZXIgZm9yIHNpbXBsZSB0ZXN0aW5nIHNjZW5hcmlvcyB3aGVyZSBKZXN0IG9yIG90aGVyXG4gKiBmdWxsLWZlYXR1cmVkIHRlc3QgZnJhbWV3b3JrcyBtaWdodCBiZSBvdmVya2lsbC4gUHJvdmlkZXMgYmFzaWMgdGVzdFxuICogZXhlY3V0aW9uIHdpdGggcGFzcy9mYWlsIHRyYWNraW5nIGFuZCBmb3JtYXR0ZWQgY29uc29sZSBvdXRwdXQuXG4gKi9cblxuLy8gVHlwZSBkZWZpbml0aW9uc1xuaW50ZXJmYWNlIFRlc3RSZXN1bHQge1xuICBwYXNzZWQ6IG51bWJlcjtcbiAgZmFpbGVkOiBudW1iZXI7XG4gIGZhaWx1cmVzOiBBcnJheTx7IHRlc3Q6IHN0cmluZzsgZXJyb3I6IHN0cmluZyB9Pjtcbn1cblxudHlwZSBUZXN0RnVuY3Rpb24gPSAoKSA9PiB2b2lkIHwgUHJvbWlzZTx2b2lkPjtcbnR5cGUgVGVzdENhc2UgPSBbc3RyaW5nLCBUZXN0RnVuY3Rpb25dO1xuXG4vKipcbiAqIFJ1biBhIHRlc3Qgc3VpdGUgd2l0aCBtdWx0aXBsZSB0ZXN0IGZ1bmN0aW9uc1xuICovXG5mdW5jdGlvbiBydW5UZXN0U3VpdGUoc3VpdGVOYW1lOiBzdHJpbmcsIHRlc3RGdW5jdGlvbnM6IFRlc3RDYXNlW10pOiBUZXN0UmVzdWx0IHtcbiAgY29uc29sZS5sb2coYFxcbvCflKcgUnVubmluZzogJHtzdWl0ZU5hbWV9YCk7XG4gIGNvbnNvbGUubG9nKCctJy5yZXBlYXQoNDApKTtcbiAgXG4gIGxldCBwYXNzZWQgPSAwO1xuICBsZXQgZmFpbGVkID0gMDtcbiAgY29uc3QgZmFpbHVyZXM6IEFycmF5PHsgdGVzdDogc3RyaW5nOyBlcnJvcjogc3RyaW5nIH0+ID0gW107XG4gIFxuICBmb3IgKGNvbnN0IFt0ZXN0TmFtZSwgdGVzdEZuXSBvZiB0ZXN0RnVuY3Rpb25zKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKGAgIOKWtiAke3Rlc3ROYW1lfWApO1xuICAgICAgdGVzdEZuKCk7XG4gICAgICBjb25zb2xlLmxvZyhgICAgIOKchSBQQVNTYCk7XG4gICAgICBwYXNzZWQrKztcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb25zb2xlLmxvZyhgICAgIOKdjCBGQUlMOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICBmYWlsZWQrKztcbiAgICAgIGZhaWx1cmVzLnB1c2goeyB0ZXN0OiB0ZXN0TmFtZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSk7XG4gICAgfVxuICB9XG4gIFxuICAvLyBQcmludCBzdW1tYXJ5XG4gIGNvbnNvbGUubG9nKCctJy5yZXBlYXQoNDApKTtcbiAgY29uc29sZS5sb2coYFN1bW1hcnk6ICR7cGFzc2VkfSBwYXNzZWQsICR7ZmFpbGVkfSBmYWlsZWRgKTtcbiAgXG4gIGlmIChmYWlsdXJlcy5sZW5ndGggPiAwKSB7XG4gICAgY29uc29sZS5sb2coJ1xcbkZhaWx1cmVzOicpO1xuICAgIGZhaWx1cmVzLmZvckVhY2goKHsgdGVzdCwgZXJyb3IgfSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coYCAg4p2MICR7dGVzdH06ICR7ZXJyb3J9YCk7XG4gICAgfSk7XG4gIH1cbiAgXG4gIHJldHVybiB7IHBhc3NlZCwgZmFpbGVkLCBmYWlsdXJlcyB9O1xufVxuXG4vKipcbiAqIFJ1biBtdWx0aXBsZSB0ZXN0IHN1aXRlcyBzZXF1ZW50aWFsbHlcbiAqL1xuZnVuY3Rpb24gcnVuVGVzdFN1aXRlcyhzdWl0ZXM6IEFycmF5PFtzdHJpbmcsIFRlc3RDYXNlW11dPik6IFRlc3RSZXN1bHQge1xuICBsZXQgdG90YWxQYXNzZWQgPSAwO1xuICBsZXQgdG90YWxGYWlsZWQgPSAwO1xuICBjb25zdCBhbGxGYWlsdXJlczogQXJyYXk8eyB0ZXN0OiBzdHJpbmc7IGVycm9yOiBzdHJpbmcgfT4gPSBbXTtcbiAgXG4gIGZvciAoY29uc3QgW3N1aXRlTmFtZSwgdGVzdEZ1bmN0aW9uc10gb2Ygc3VpdGVzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gcnVuVGVzdFN1aXRlKHN1aXRlTmFtZSwgdGVzdEZ1bmN0aW9ucyk7XG4gICAgdG90YWxQYXNzZWQgKz0gcmVzdWx0LnBhc3NlZDtcbiAgICB0b3RhbEZhaWxlZCArPSByZXN1bHQuZmFpbGVkO1xuICAgIGFsbEZhaWx1cmVzLnB1c2goLi4ucmVzdWx0LmZhaWx1cmVzKTtcbiAgfVxuICBcbiAgY29uc29sZS5sb2coYFxcbvCfk4ogT3ZlcmFsbCBTdW1tYXJ5OiAke3RvdGFsUGFzc2VkfSBwYXNzZWQsICR7dG90YWxGYWlsZWR9IGZhaWxlZGApO1xuICBcbiAgcmV0dXJuIHtcbiAgICBwYXNzZWQ6IHRvdGFsUGFzc2VkLFxuICAgIGZhaWxlZDogdG90YWxGYWlsZWQsXG4gICAgZmFpbHVyZXM6IGFsbEZhaWx1cmVzXG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlIGJhc2ljIGFzc2VydGlvbiBoZWxwZXJzXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2VydGlvbnMoKSB7XG4gIHJldHVybiB7XG4gICAgZXF1YWw6IChhY3R1YWw6IGFueSwgZXhwZWN0ZWQ6IGFueSwgbWVzc2FnZT86IHN0cmluZykgPT4ge1xuICAgICAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UgfHwgYEV4cGVjdGVkICR7ZXhwZWN0ZWR9LCBnb3QgJHthY3R1YWx9YCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBcbiAgICBub3RFcXVhbDogKGFjdHVhbDogYW55LCBleHBlY3RlZDogYW55LCBtZXNzYWdlPzogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAoYWN0dWFsID09PSBleHBlY3RlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSB8fCBgRXhwZWN0ZWQgdmFsdWVzIG5vdCB0byBiZSBlcXVhbDogJHthY3R1YWx9YCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBcbiAgICB0cnV0aHk6ICh2YWx1ZTogYW55LCBtZXNzYWdlPzogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlIHx8IGBFeHBlY3RlZCB0cnV0aHkgdmFsdWUsIGdvdCAke3ZhbHVlfWApO1xuICAgICAgfVxuICAgIH0sXG4gICAgXG4gICAgZmFsc3k6ICh2YWx1ZTogYW55LCBtZXNzYWdlPzogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UgfHwgYEV4cGVjdGVkIGZhbHN5IHZhbHVlLCBnb3QgJHt2YWx1ZX1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbi8vIEV4cG9ydCB0ZXN0IHN1aXRlIHV0aWxpdGllcyB1c2luZyBFUyBtb2R1bGUgc3ludGF4XG5leHBvcnQge1xuICBydW5UZXN0U3VpdGUsXG4gIHJ1blRlc3RTdWl0ZXMsXG4gIGNyZWF0ZUFzc2VydGlvbnNcbn07Il0sInZlcnNpb24iOjN9