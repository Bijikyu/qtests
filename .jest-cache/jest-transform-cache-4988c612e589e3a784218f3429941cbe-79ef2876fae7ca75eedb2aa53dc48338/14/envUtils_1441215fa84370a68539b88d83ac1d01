ca2cf9b5d9e7fdc815a6829cea27d910
"use strict";
/**
 * Environment Management Utilities - TypeScript ES Module Implementation
 *
 * This module provides utilities specifically for managing test environments,
 * including environment variable manipulation and test isolation. These utilities
 * help create isolated, predictable test environments without side effects.
 *
 * Design philosophy:
 * - Environment isolation to prevent test interference
 * - Predictable test conditions with known values
 * - Easy setup and teardown of test environments
 * - Simple, focused functionality for environment management
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.testHelpers = exports.offlineMode = exports.testEnv = void 0;
// Import environment management utilities using ES module syntax
const testEnv_js_1 = require("../utils/testEnv.js");
Object.defineProperty(exports, "testEnv", { enumerable: true, get: function () { return testEnv_js_1.testEnv; } });
const offlineMode_js_1 = require("../utils/offlineMode.js");
const testHelpers_js_1 = require("../utils/testHelpers.js");
Object.defineProperty(exports, "testHelpers", { enumerable: true, get: function () { return testHelpers_js_1.testHelpers; } });
// Create offlineMode object from individual functions
const offlineMode = {
    setOfflineMode: offlineMode_js_1.setOfflineMode,
    isOfflineMode: offlineMode_js_1.isOfflineMode,
    getAxios: offlineMode_js_1.getAxios,
    getQerrors: offlineMode_js_1.getQerrors,
    getEnvironmentState: offlineMode_js_1.getEnvironmentState,
    createEnvironmentAdapters: offlineMode_js_1.createEnvironmentAdapters,
    clearOfflineCache: offlineMode_js_1.clearOfflineCache
};
exports.offlineMode = offlineMode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvZW52VXRpbHMudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7R0FZRzs7O0FBRUgsaUVBQWlFO0FBQ2pFLG9EQUE4QztBQXlCNUMsd0ZBekJPLG9CQUFPLE9BeUJQO0FBeEJULDREQVFpQztBQUNqQyw0REFBc0Q7QUFpQnBELDRGQWpCTyw0QkFBVyxPQWlCUDtBQWZiLHNEQUFzRDtBQUN0RCxNQUFNLFdBQVcsR0FBRztJQUNsQixjQUFjLEVBQWQsK0JBQWM7SUFDZCxhQUFhLEVBQWIsOEJBQWE7SUFDYixRQUFRLEVBQVIseUJBQVE7SUFDUixVQUFVLEVBQVYsMkJBQVU7SUFDVixtQkFBbUIsRUFBbkIsb0NBQW1CO0lBQ25CLHlCQUF5QixFQUF6QiwwQ0FBeUI7SUFDekIsaUJBQWlCLEVBQWpCLGtDQUFpQjtDQUNsQixDQUFDO0FBS0Esa0NBQVciLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvZW52VXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFbnZpcm9ubWVudCBNYW5hZ2VtZW50IFV0aWxpdGllcyAtIFR5cGVTY3JpcHQgRVMgTW9kdWxlIEltcGxlbWVudGF0aW9uXG4gKiBcbiAqIFRoaXMgbW9kdWxlIHByb3ZpZGVzIHV0aWxpdGllcyBzcGVjaWZpY2FsbHkgZm9yIG1hbmFnaW5nIHRlc3QgZW52aXJvbm1lbnRzLFxuICogaW5jbHVkaW5nIGVudmlyb25tZW50IHZhcmlhYmxlIG1hbmlwdWxhdGlvbiBhbmQgdGVzdCBpc29sYXRpb24uIFRoZXNlIHV0aWxpdGllc1xuICogaGVscCBjcmVhdGUgaXNvbGF0ZWQsIHByZWRpY3RhYmxlIHRlc3QgZW52aXJvbm1lbnRzIHdpdGhvdXQgc2lkZSBlZmZlY3RzLlxuICogXG4gKiBEZXNpZ24gcGhpbG9zb3BoeTpcbiAqIC0gRW52aXJvbm1lbnQgaXNvbGF0aW9uIHRvIHByZXZlbnQgdGVzdCBpbnRlcmZlcmVuY2VcbiAqIC0gUHJlZGljdGFibGUgdGVzdCBjb25kaXRpb25zIHdpdGgga25vd24gdmFsdWVzXG4gKiAtIEVhc3kgc2V0dXAgYW5kIHRlYXJkb3duIG9mIHRlc3QgZW52aXJvbm1lbnRzXG4gKiAtIFNpbXBsZSwgZm9jdXNlZCBmdW5jdGlvbmFsaXR5IGZvciBlbnZpcm9ubWVudCBtYW5hZ2VtZW50XG4gKi9cblxuLy8gSW1wb3J0IGVudmlyb25tZW50IG1hbmFnZW1lbnQgdXRpbGl0aWVzIHVzaW5nIEVTIG1vZHVsZSBzeW50YXhcbmltcG9ydCB7IHRlc3RFbnYgfSBmcm9tICcuLi91dGlscy90ZXN0RW52LmpzJztcbmltcG9ydCB7IFxuICBzZXRPZmZsaW5lTW9kZSxcbiAgaXNPZmZsaW5lTW9kZSxcbiAgZ2V0QXhpb3MsXG4gIGdldFFlcnJvcnMsXG4gIGdldEVudmlyb25tZW50U3RhdGUsXG4gIGNyZWF0ZUVudmlyb25tZW50QWRhcHRlcnMsXG4gIGNsZWFyT2ZmbGluZUNhY2hlXG59IGZyb20gJy4uL3V0aWxzL29mZmxpbmVNb2RlLmpzJztcbmltcG9ydCB7IHRlc3RIZWxwZXJzIH0gZnJvbSAnLi4vdXRpbHMvdGVzdEhlbHBlcnMuanMnO1xuXG4vLyBDcmVhdGUgb2ZmbGluZU1vZGUgb2JqZWN0IGZyb20gaW5kaXZpZHVhbCBmdW5jdGlvbnNcbmNvbnN0IG9mZmxpbmVNb2RlID0ge1xuICBzZXRPZmZsaW5lTW9kZSxcbiAgaXNPZmZsaW5lTW9kZSxcbiAgZ2V0QXhpb3MsXG4gIGdldFFlcnJvcnMsXG4gIGdldEVudmlyb25tZW50U3RhdGUsXG4gIGNyZWF0ZUVudmlyb25tZW50QWRhcHRlcnMsXG4gIGNsZWFyT2ZmbGluZUNhY2hlXG59O1xuXG4vLyBFeHBvcnQgdGhlIGNvcmUgdXRpbGl0aWVzIHRoYXQgb3VyIFR5cGVTY3JpcHQgaW5kZXggbmVlZHNcbmV4cG9ydCB7XG4gIHRlc3RFbnYsICAgICAvLyBlbnZpcm9ubWVudCB2YXJpYWJsZSBtYW5hZ2VtZW50IGFuZCB0ZXN0IGlzb2xhdGlvblxuICBvZmZsaW5lTW9kZSwgLy8gb2ZmbGluZS9vbmxpbmUgbW9kZSB1dGlsaXR5IHdpdGggYXV0b21hdGljIHN3aXRjaGluZ1xuICB0ZXN0SGVscGVycyAgLy8gYWR2YW5jZWQgdGVzdGluZyB1dGlsaXRpZXMgZm9yIG1vZHVsZSByZWxvYWRpbmcgYW5kIG1vY2tpbmdcbn07Il0sInZlcnNpb24iOjN9