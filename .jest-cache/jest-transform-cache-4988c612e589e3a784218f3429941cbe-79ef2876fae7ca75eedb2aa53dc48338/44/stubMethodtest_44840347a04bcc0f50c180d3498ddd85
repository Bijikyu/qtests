4045a41732ed6ba32c6f0213ca74a54e
// qtests dogfooding - using qtests to test itself instead of Jest
const stubMethod = require('../utils/stubMethod');
const {
  runTestSuite,
  createAssertions
} = require('../utils/runTestSuite');
const assert = createAssertions();

// Convert Jest tests to qtests format
const tests = [['stubMethod replaces and restores methods', () => {
  const obj = {
    greet: name => `Hello, ${name}`
  };
  const restore = stubMethod(obj, 'greet', () => 'Hi');
  const result = obj.greet('Bob');
  restore();
  assert.equal(result, 'Hi', 'Stub should return stubbed value');
  assert.equal(obj.greet('Bob'), 'Hello, Bob', 'Original method should be restored');
}], ['stubMethod throws for non-object target', () => {
  assert.throws(() => stubMethod(null, 'greet', () => {}), 'Should throw for null target');
}], ['stubMethod throws when method missing', () => {
  assert.throws(() => stubMethod({}, 'missing', () => {}), 'Should throw for missing method');
}], ['stubMethod throws for non-function stub', () => {
  const obj = {
    greet: () => 'hi'
  };
  assert.throws(() => stubMethod(obj, 'greet', 'notFn'), 'Should throw for non-function stub');
}], ['stubMethod handles inherited methods', () => {
  const proto = {
    greet: () => 'proto'
  };
  const obj = Object.create(proto);
  const restore = stubMethod(obj, 'greet', () => 'stub');
  assert.equal(obj.greet(), 'stub', 'Stub should work on inherited method');
  restore();
  assert.falsy(Object.prototype.hasOwnProperty.call(obj, 'greet'), 'Own property should be removed after restore');
  assert.equal(obj.greet(), 'proto', 'Inherited method should be available again');
}]];

// Run tests using qtests instead of Jest
if (require.main === module) {
  const results = runTestSuite('stubMethod', tests);
  process.exit(results.failed > 0 ? 1 : 0);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdHViTWV0aG9kIiwicmVxdWlyZSIsInJ1blRlc3RTdWl0ZSIsImNyZWF0ZUFzc2VydGlvbnMiLCJhc3NlcnQiLCJ0ZXN0cyIsIm9iaiIsImdyZWV0IiwibmFtZSIsInJlc3RvcmUiLCJyZXN1bHQiLCJlcXVhbCIsInRocm93cyIsInByb3RvIiwiT2JqZWN0IiwiY3JlYXRlIiwiZmFsc3kiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJtYWluIiwibW9kdWxlIiwicmVzdWx0cyIsInByb2Nlc3MiLCJleGl0IiwiZmFpbGVkIl0sInNvdXJjZXMiOlsic3R1Yk1ldGhvZC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHF0ZXN0cyBkb2dmb29kaW5nIC0gdXNpbmcgcXRlc3RzIHRvIHRlc3QgaXRzZWxmIGluc3RlYWQgb2YgSmVzdFxuY29uc3Qgc3R1Yk1ldGhvZCA9IHJlcXVpcmUoJy4uL3V0aWxzL3N0dWJNZXRob2QnKTtcbmNvbnN0IHsgcnVuVGVzdFN1aXRlLCBjcmVhdGVBc3NlcnRpb25zIH0gPSByZXF1aXJlKCcuLi91dGlscy9ydW5UZXN0U3VpdGUnKTtcblxuY29uc3QgYXNzZXJ0ID0gY3JlYXRlQXNzZXJ0aW9ucygpO1xuXG4vLyBDb252ZXJ0IEplc3QgdGVzdHMgdG8gcXRlc3RzIGZvcm1hdFxuY29uc3QgdGVzdHMgPSBbXG4gIFsnc3R1Yk1ldGhvZCByZXBsYWNlcyBhbmQgcmVzdG9yZXMgbWV0aG9kcycsICgpID0+IHtcbiAgICBjb25zdCBvYmogPSB7IGdyZWV0OiBuYW1lID0+IGBIZWxsbywgJHtuYW1lfWAgfTtcbiAgICBjb25zdCByZXN0b3JlID0gc3R1Yk1ldGhvZChvYmosICdncmVldCcsICgpID0+ICdIaScpO1xuICAgIGNvbnN0IHJlc3VsdCA9IG9iai5ncmVldCgnQm9iJyk7XG4gICAgcmVzdG9yZSgpO1xuICAgIGFzc2VydC5lcXVhbChyZXN1bHQsICdIaScsICdTdHViIHNob3VsZCByZXR1cm4gc3R1YmJlZCB2YWx1ZScpO1xuICAgIGFzc2VydC5lcXVhbChvYmouZ3JlZXQoJ0JvYicpLCAnSGVsbG8sIEJvYicsICdPcmlnaW5hbCBtZXRob2Qgc2hvdWxkIGJlIHJlc3RvcmVkJyk7XG4gIH1dLFxuXG4gIFsnc3R1Yk1ldGhvZCB0aHJvd3MgZm9yIG5vbi1vYmplY3QgdGFyZ2V0JywgKCkgPT4ge1xuICAgIGFzc2VydC50aHJvd3MoXG4gICAgICAoKSA9PiBzdHViTWV0aG9kKG51bGwsICdncmVldCcsICgpID0+IHt9KSxcbiAgICAgICdTaG91bGQgdGhyb3cgZm9yIG51bGwgdGFyZ2V0J1xuICAgICk7XG4gIH1dLFxuXG4gIFsnc3R1Yk1ldGhvZCB0aHJvd3Mgd2hlbiBtZXRob2QgbWlzc2luZycsICgpID0+IHtcbiAgICBhc3NlcnQudGhyb3dzKFxuICAgICAgKCkgPT4gc3R1Yk1ldGhvZCh7fSwgJ21pc3NpbmcnLCAoKSA9PiB7fSksXG4gICAgICAnU2hvdWxkIHRocm93IGZvciBtaXNzaW5nIG1ldGhvZCdcbiAgICApO1xuICB9XSxcblxuICBbJ3N0dWJNZXRob2QgdGhyb3dzIGZvciBub24tZnVuY3Rpb24gc3R1YicsICgpID0+IHtcbiAgICBjb25zdCBvYmogPSB7IGdyZWV0OiAoKSA9PiAnaGknIH07XG4gICAgYXNzZXJ0LnRocm93cyhcbiAgICAgICgpID0+IHN0dWJNZXRob2Qob2JqLCAnZ3JlZXQnLCAnbm90Rm4nKSxcbiAgICAgICdTaG91bGQgdGhyb3cgZm9yIG5vbi1mdW5jdGlvbiBzdHViJ1xuICAgICk7XG4gIH1dLFxuXG4gIFsnc3R1Yk1ldGhvZCBoYW5kbGVzIGluaGVyaXRlZCBtZXRob2RzJywgKCkgPT4ge1xuICAgIGNvbnN0IHByb3RvID0geyBncmVldDogKCkgPT4gJ3Byb3RvJyB9O1xuICAgIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUocHJvdG8pO1xuICAgIGNvbnN0IHJlc3RvcmUgPSBzdHViTWV0aG9kKG9iaiwgJ2dyZWV0JywgKCkgPT4gJ3N0dWInKTtcbiAgICBhc3NlcnQuZXF1YWwob2JqLmdyZWV0KCksICdzdHViJywgJ1N0dWIgc2hvdWxkIHdvcmsgb24gaW5oZXJpdGVkIG1ldGhvZCcpO1xuICAgIHJlc3RvcmUoKTtcbiAgICBhc3NlcnQuZmFsc3koXG4gICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCAnZ3JlZXQnKSxcbiAgICAgICdPd24gcHJvcGVydHkgc2hvdWxkIGJlIHJlbW92ZWQgYWZ0ZXIgcmVzdG9yZSdcbiAgICApO1xuICAgIGFzc2VydC5lcXVhbChvYmouZ3JlZXQoKSwgJ3Byb3RvJywgJ0luaGVyaXRlZCBtZXRob2Qgc2hvdWxkIGJlIGF2YWlsYWJsZSBhZ2FpbicpO1xuICB9XVxuXTtcblxuLy8gUnVuIHRlc3RzIHVzaW5nIHF0ZXN0cyBpbnN0ZWFkIG9mIEplc3RcbmlmIChyZXF1aXJlLm1haW4gPT09IG1vZHVsZSkge1xuICBjb25zdCByZXN1bHRzID0gcnVuVGVzdFN1aXRlKCdzdHViTWV0aG9kJywgdGVzdHMpO1xuICBwcm9jZXNzLmV4aXQocmVzdWx0cy5mYWlsZWQgPiAwID8gMSA6IDApO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0FBQ2pELE1BQU07RUFBRUMsWUFBWTtFQUFFQztBQUFpQixDQUFDLEdBQUdGLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQUUzRSxNQUFNRyxNQUFNLEdBQUdELGdCQUFnQixDQUFDLENBQUM7O0FBRWpDO0FBQ0EsTUFBTUUsS0FBSyxHQUFHLENBQ1osQ0FBQywwQ0FBMEMsRUFBRSxNQUFNO0VBQ2pELE1BQU1DLEdBQUcsR0FBRztJQUFFQyxLQUFLLEVBQUVDLElBQUksSUFBSSxVQUFVQSxJQUFJO0VBQUcsQ0FBQztFQUMvQyxNQUFNQyxPQUFPLEdBQUdULFVBQVUsQ0FBQ00sR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztFQUNwRCxNQUFNSSxNQUFNLEdBQUdKLEdBQUcsQ0FBQ0MsS0FBSyxDQUFDLEtBQUssQ0FBQztFQUMvQkUsT0FBTyxDQUFDLENBQUM7RUFDVEwsTUFBTSxDQUFDTyxLQUFLLENBQUNELE1BQU0sRUFBRSxJQUFJLEVBQUUsa0NBQWtDLENBQUM7RUFDOUROLE1BQU0sQ0FBQ08sS0FBSyxDQUFDTCxHQUFHLENBQUNDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxZQUFZLEVBQUUsb0NBQW9DLENBQUM7QUFDcEYsQ0FBQyxDQUFDLEVBRUYsQ0FBQyx5Q0FBeUMsRUFBRSxNQUFNO0VBQ2hESCxNQUFNLENBQUNRLE1BQU0sQ0FDWCxNQUFNWixVQUFVLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ3pDLDhCQUNGLENBQUM7QUFDSCxDQUFDLENBQUMsRUFFRixDQUFDLHVDQUF1QyxFQUFFLE1BQU07RUFDOUNJLE1BQU0sQ0FBQ1EsTUFBTSxDQUNYLE1BQU1aLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUN6QyxpQ0FDRixDQUFDO0FBQ0gsQ0FBQyxDQUFDLEVBRUYsQ0FBQyx5Q0FBeUMsRUFBRSxNQUFNO0VBQ2hELE1BQU1NLEdBQUcsR0FBRztJQUFFQyxLQUFLLEVBQUVBLENBQUEsS0FBTTtFQUFLLENBQUM7RUFDakNILE1BQU0sQ0FBQ1EsTUFBTSxDQUNYLE1BQU1aLFVBQVUsQ0FBQ00sR0FBRyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFDdkMsb0NBQ0YsQ0FBQztBQUNILENBQUMsQ0FBQyxFQUVGLENBQUMsc0NBQXNDLEVBQUUsTUFBTTtFQUM3QyxNQUFNTyxLQUFLLEdBQUc7SUFBRU4sS0FBSyxFQUFFQSxDQUFBLEtBQU07RUFBUSxDQUFDO0VBQ3RDLE1BQU1ELEdBQUcsR0FBR1EsTUFBTSxDQUFDQyxNQUFNLENBQUNGLEtBQUssQ0FBQztFQUNoQyxNQUFNSixPQUFPLEdBQUdULFVBQVUsQ0FBQ00sR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztFQUN0REYsTUFBTSxDQUFDTyxLQUFLLENBQUNMLEdBQUcsQ0FBQ0MsS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsc0NBQXNDLENBQUM7RUFDekVFLE9BQU8sQ0FBQyxDQUFDO0VBQ1RMLE1BQU0sQ0FBQ1ksS0FBSyxDQUNWRixNQUFNLENBQUNHLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNiLEdBQUcsRUFBRSxPQUFPLENBQUMsRUFDbEQsOENBQ0YsQ0FBQztFQUNERixNQUFNLENBQUNPLEtBQUssQ0FBQ0wsR0FBRyxDQUFDQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSw0Q0FBNEMsQ0FBQztBQUNsRixDQUFDLENBQUMsQ0FDSDs7QUFFRDtBQUNBLElBQUlOLE9BQU8sQ0FBQ21CLElBQUksS0FBS0MsTUFBTSxFQUFFO0VBQzNCLE1BQU1DLE9BQU8sR0FBR3BCLFlBQVksQ0FBQyxZQUFZLEVBQUVHLEtBQUssQ0FBQztFQUNqRGtCLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDRixPQUFPLENBQUNHLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxQyIsImlnbm9yZUxpc3QiOltdfQ==