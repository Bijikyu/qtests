a5cf3d0f3a1bf956622c930f789216a8
// Mock external dependencies for speed
_getJestObj().mock('fs', () => ({
  __esModule: true,
  default: jest.fn(),
  ...jest.requireActual('fs')
}));
_getJestObj().mock('fs', () => ({
  __esModule: true,
  default: jest.fn(),
  ...jest.requireActual('fs')
}));
_getJestObj().mock('fs', () => ({
  __esModule: true,
  default: jest.fn(),
  ...jest.requireActual('fs')
}));
_getJestObj().mock('fs', () => ({
  __esModule: true,
  default: jest.fn(),
  ...jest.requireActual('fs')
}));
_getJestObj().mock('fs', () => ({
  __esModule: true,
  default: jest.fn(),
  ...jest.requireActual('fs')
}));
_getJestObj().mock('fs', () => ({
  __esModule: true,
  default: jest.fn(),
  ...jest.requireActual('fs')
}));
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
// Auto-generated unit test for testGenerator.js - optimized for speed
import { test } from 'qtests';
import * as mod from './testGenerator.js';
describe('testGenerator.js', () => {
  test('name works', async () => {
    // Fast assertion - TODO: implement specific test logic
    expect(typeof mod.name).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImplc3QiLCJmbiIsInJlcXVpcmVBY3R1YWwiLCJyZXF1aXJlIiwidGVzdCIsIm1vZCIsImRlc2NyaWJlIiwiZXhwZWN0IiwibmFtZSIsInRvQmVEZWZpbmVkIl0sInNvdXJjZXMiOlsidGVzdEdlbmVyYXRvci50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEF1dG8tZ2VuZXJhdGVkIHVuaXQgdGVzdCBmb3IgdGVzdEdlbmVyYXRvci5qcyAtIG9wdGltaXplZCBmb3Igc3BlZWRcbmltcG9ydCB7IHRlc3QgfSBmcm9tICdxdGVzdHMnO1xuLy8gTW9jayBleHRlcm5hbCBkZXBlbmRlbmNpZXMgZm9yIHNwZWVkXG5qZXN0Lm1vY2soJ2ZzJywgKCkgPT4gKHsgX19lc01vZHVsZTogdHJ1ZSwgZGVmYXVsdDogamVzdC5mbigpLCAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ2ZzJykgfSkpO1xuamVzdC5tb2NrKCdmcycsICgpID0+ICh7IF9fZXNNb2R1bGU6IHRydWUsIGRlZmF1bHQ6IGplc3QuZm4oKSwgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCdmcycpIH0pKTtcbmplc3QubW9jaygnZnMnLCAoKSA9PiAoeyBfX2VzTW9kdWxlOiB0cnVlLCBkZWZhdWx0OiBqZXN0LmZuKCksIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnZnMnKSB9KSk7XG5qZXN0Lm1vY2soJ2ZzJywgKCkgPT4gKHsgX19lc01vZHVsZTogdHJ1ZSwgZGVmYXVsdDogamVzdC5mbigpLCAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJ2ZzJykgfSkpO1xuamVzdC5tb2NrKCdmcycsICgpID0+ICh7IF9fZXNNb2R1bGU6IHRydWUsIGRlZmF1bHQ6IGplc3QuZm4oKSwgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCdmcycpIH0pKTtcbmplc3QubW9jaygnZnMnLCAoKSA9PiAoeyBfX2VzTW9kdWxlOiB0cnVlLCBkZWZhdWx0OiBqZXN0LmZuKCksIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnZnMnKSB9KSk7XG5pbXBvcnQgKiBhcyBtb2QgZnJvbSAnLi90ZXN0R2VuZXJhdG9yLmpzJztcblxuZGVzY3JpYmUoJ3Rlc3RHZW5lcmF0b3IuanMnLCAoKSA9PiB7XG4gIHRlc3QoJ25hbWUgd29ya3MnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gRmFzdCBhc3NlcnRpb24gLSBUT0RPOiBpbXBsZW1lbnQgc3BlY2lmaWMgdGVzdCBsb2dpY1xuICAgIGV4cGVjdCh0eXBlb2YgbW9kLm5hbWUpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUVBO0FBQ0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPO0VBQUVDLFVBQVUsRUFBRSxJQUFJO0VBQUVDLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUFFLEdBQUdELElBQUksQ0FBQ0UsYUFBYSxDQUFDLElBQUk7QUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5Rk4sV0FBQSxHQUFLQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU87RUFBRUMsVUFBVSxFQUFFLElBQUk7RUFBRUMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQUUsR0FBR0QsSUFBSSxDQUFDRSxhQUFhLENBQUMsSUFBSTtBQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlGTixXQUFBLEdBQUtDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTztFQUFFQyxVQUFVLEVBQUUsSUFBSTtFQUFFQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFBRSxHQUFHRCxJQUFJLENBQUNFLGFBQWEsQ0FBQyxJQUFJO0FBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUZOLFdBQUEsR0FBS0MsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPO0VBQUVDLFVBQVUsRUFBRSxJQUFJO0VBQUVDLE9BQU8sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUFFLEdBQUdELElBQUksQ0FBQ0UsYUFBYSxDQUFDLElBQUk7QUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5Rk4sV0FBQSxHQUFLQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU87RUFBRUMsVUFBVSxFQUFFLElBQUk7RUFBRUMsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQUUsR0FBR0QsSUFBSSxDQUFDRSxhQUFhLENBQUMsSUFBSTtBQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlGTixXQUFBLEdBQUtDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTztFQUFFQyxVQUFVLEVBQUUsSUFBSTtFQUFFQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFBRSxHQUFHRCxJQUFJLENBQUNFLGFBQWEsQ0FBQyxJQUFJO0FBQUUsQ0FBQyxDQUFDLENBQUM7QUFBQyxTQUFBTixZQUFBO0VBQUE7SUFBQUk7RUFBQSxJQUFBRyxPQUFBO0VBQUFQLFdBQUEsR0FBQUEsQ0FBQSxLQUFBSSxJQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBUi9GO0FBQ0EsU0FBU0ksSUFBSSxRQUFRLFFBQVE7QUFRN0IsT0FBTyxLQUFLQyxHQUFHLE1BQU0sb0JBQW9CO0FBRXpDQyxRQUFRLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtFQUNqQ0YsSUFBSSxDQUFDLFlBQVksRUFBRSxZQUFZO0lBQzdCO0lBQ0FHLE1BQU0sQ0FBQyxPQUFPRixHQUFHLENBQUNHLElBQUksQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQztFQUN2QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=