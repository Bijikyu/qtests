cb9953bbad7b97a92efdf35575885cda
/**
 * Comprehensive Testing Suite Utilities (Refactored)
 * 
 * This module has been refactored to follow Single Responsibility Principle.
 * It now coordinates between focused testing utilities for better maintainability.
 * 
 * Components:
 * - testing/databaseTestHelper.js - Database testing utilities
 * - testing/mockManager.js - Mock management system
 * - testing/assertionHelper.js - Assertion helpers
 * - testing/testDataFactory.js - Test data creation
 * - testing/performanceTestHelper.js - Performance testing
 */

// Import focused testing utilities
const {
  DatabaseTestHelper
} = require('./testing/databaseTestHelper');
const {
  MockManager
} = require('./testing/mockManager');
const {
  AssertionHelper
} = require('./testing/assertionHelper');
const {
  TestDataFactory
} = require('./testing/testDataFactory');
const {
  PerformanceTestHelper
} = require('./testing/performanceTestHelper');

/**
 * TestSuiteBuilder - Fluent API for building comprehensive test suites
 * 
 * Provides a builder pattern for configuring test utilities with method chaining
 */
class TestSuiteBuilder {
  constructor() {
    this.config = {
      apiMocks: false,
      emailMocks: false,
      consoleMocks: false,
      performance: false,
      autoCleanup: true
    };
  }
  withApiMocks() {
    this.config.apiMocks = true;
    return this;
  }
  withEmailMocks() {
    this.config.emailMocks = true;
    return this;
  }
  withConsoleMocks() {
    this.config.consoleMocks = true;
    return this;
  }
  withPerformance() {
    this.config.performance = true;
    return this;
  }
  withDatabase() {
    this.config.database = true;
    return this;
  }
  withEnvironmentMocks(envVars) {
    this.config.environmentMocks = envVars || {};
    return this;
  }
  withHttpMocks(responses) {
    this.config.httpMocks = responses || [];
    return this;
  }
  withoutAutoCleanup() {
    this.config.autoCleanup = false;
    return this;
  }
  build() {
    const mockManager = new MockManager();

    // Set up mocks based on configuration
    if (this.config.apiMocks) {
      mockManager.setupApiClientMocks();
    }
    if (this.config.emailMocks) {
      // Set up email mocks if needed
      try {
        const {
          sendEmail
        } = require('./email/emailSender');
        mockManager.mocks.set('email', {
          sendEmail
        });
      } catch (error) {
        // Email mocks not available, skip
      }
    }
    if (this.config.consoleMocks) {
      mockManager.setupConsoleMocks();
    }
    if (this.config.environmentMocks && Object.keys(this.config.environmentMocks).length > 0) {
      mockManager.setupEnvironmentMocks(this.config.environmentMocks);
    }
    if (this.config.httpMocks && this.config.httpMocks.length > 0) {
      mockManager.setupHttpMocks(this.config.httpMocks);
    }
    const assertionHelper = new AssertionHelper();
    return {
      mocks: mockManager,
      db: this.config.database ? new DatabaseTestHelper() : undefined,
      assertions: assertionHelper,
      assert: assertionHelper,
      // Alias for compatibility - both reference same instance
      data: this.config.database ? TestDataFactory : new TestDataFactory(),
      // Class when database enabled, instance otherwise
      performance: this.config.performance ? new PerformanceTestHelper() : undefined,
      config: {
        ...this.config
      }
    };
  }
}

// Export all testing utilities following qtests framework patterns
module.exports = {
  DatabaseTestHelper,
  MockManager,
  AssertionHelper,
  TestDataFactory,
  PerformanceTestHelper,
  TestSuiteBuilder
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,