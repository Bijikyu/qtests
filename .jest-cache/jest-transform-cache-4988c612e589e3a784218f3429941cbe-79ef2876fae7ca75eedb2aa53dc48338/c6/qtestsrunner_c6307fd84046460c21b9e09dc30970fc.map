{"version":3,"names":["fs","require","path","spawn","os","colors","reset","bright","dim","red","green","yellow","blue","magenta","cyan","white","TestRunner","constructor","testFiles","passedTests","failedTests","totalTests","startTime","Date","now","results","discoverTests","testPatterns","excludePatterns","Set","walkDir","dir","existsSync","items","readdirSync","withFileTypes","item","name","startsWith","includes","fullPath","join","relativePath","relative","some","pattern","isDirectory","isFile","isTestFile","add","error","Array","from","sort","filePath","excludeFiles","exclude","endsWith","test","runTestFile","testFile","Promise","resolve","stdout","stderr","isJestTest","shouldUseJest","command","args","child","stdio","env","process","NODE_ENV","on","data","toString","code","duration","output","hasPASS","hasFAIL","DEBUG_TESTS","console","log","slice","success","file","message","content","readFileSync","runInParallel","maxConcurrency","i","length","batch","batchPromises","map","batchResults","all","push","completed","Math","min","write","displayResults","repeat","totalDuration","failedResults","filter","r","forEach","result","split","generateDebugFile","avgDuration","reduce","sum","round","creationTime","toISOString","pacificTime","toLocaleString","timeZone","weekday","year","month","day","hour","minute","second","timeZoneName","debugContent","index","writeFileSync","run","cpuCount","cpus","max","exit","main","module","runner","catch","exports"],"sources":["qtests-runner.js"],"sourcesContent":["// qtests Test Runner - Auto-generated by qtests\n// This file discovers and runs all tests in your project\n// Generated as: qtests-runner.js\n\nconst fs = require('fs');\nconst path = require('path');\nconst { spawn } = require('child_process');\nconst os = require('os');\n\n// ANSI color codes for terminal output\nconst colors = {\n  reset: '\\x1b[0m',\n  bright: '\\x1b[1m',\n  dim: '\\x1b[2m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m',\n  white: '\\x1b[37m'\n};\n\n/**\n * Parallel Test Runner for qtests\n * Discovers and executes all test files with high-performance concurrency\n */\nclass TestRunner {\n  constructor() {\n    this.testFiles = [];\n    this.passedTests = 0;\n    this.failedTests = 0;\n    this.totalTests = 0;\n    this.startTime = Date.now();\n    this.results = [];\n  }\n\n  /**\n   * Discover all test files in the project\n   */\n  discoverTests() {\n    const testPatterns = [\n      '**/*.test.js',\n      '**/*.test.ts', \n      '**/*.test.jsx',\n      '**/*.test.tsx',\n      '**/test/**/*.js',\n      '**/test/**/*.ts',\n      '**/tests/**/*.js',\n      '**/tests/**/*.ts',\n      '**/__tests__/**/*.js',\n      '**/__tests__/**/*.ts'\n    ];\n\n    const excludePatterns = [\n      'node_modules',\n      '.git',\n      'coverage',\n      'dist',\n      'build',\n      '.cache',\n      '.jest-cache',\n      'demo',        // Exclude demo directory to match Jest config\n      'examples',    // Exclude examples directory to match Jest config\n      'docs',        // Exclude docs directory to match Jest config\n      'stubs'        // Exclude stubs directory to match Jest config\n    ];\n\n    const testFiles = new Set();\n\n    const walkDir = (dir) => {\n      if (!fs.existsSync(dir)) return;\n      \n      try {\n        const items = fs.readdirSync(dir, { withFileTypes: true });\n        \n        for (const item of items) {\n          if (item.name.startsWith('.')) continue;\n          if (excludePatterns.includes(item.name)) continue;\n          \n          const fullPath = path.join(dir, item.name);\n          const relativePath = path.relative('.', fullPath);\n          \n          // Skip paths that match exclude patterns (including subdirectories)\n          if (excludePatterns.some(pattern => relativePath.includes(pattern))) continue;\n          \n          if (item.isDirectory()) {\n            walkDir(fullPath);\n          } else if (item.isFile()) {\n            // Check if file matches test patterns\n            if (this.isTestFile(relativePath)) {\n              testFiles.add(relativePath);\n            }\n          }\n        }\n      } catch (error) {\n        // Skip directories we can't read\n      }\n    };\n\n    walkDir('.');\n    this.testFiles = Array.from(testFiles).sort();\n    return this.testFiles;\n  }\n\n  /**\n   * Check if a file is a test file based on patterns\n   */\n  isTestFile(filePath) {\n    const testPatterns = [\n      /\\.test\\.[jt]sx?$/,\n      /\\.spec\\.[jt]sx?$/,\n      /test\\/.*\\.test\\.[jt]sx?$/,\n      /test\\/.*\\.spec\\.[jt]sx?$/,\n      /tests\\/.*\\.test\\.[jt]sx?$/,\n      /tests\\/.*\\.spec\\.[jt]sx?$/,\n      /__tests__\\/.*\\.[jt]sx?$/\n    ];\n\n    // Exclude utility/setup files that don't contain actual tests\n    const excludeFiles = [\n      'testSetup.js',\n      'reloadCheck.js', \n      'withoutSetup.js',\n      'setupMultiple.js',\n      'setupMultipleChild.js',\n      'setup.ts'\n    ];\n\n    if (excludeFiles.some(exclude => filePath.endsWith(exclude))) {\n      return false;\n    }\n\n    return testPatterns.some(pattern => pattern.test(filePath));\n  }\n\n  /**\n   * Run a single test file\n   */\n  async runTestFile(testFile) {\n    return new Promise((resolve) => {\n      const startTime = Date.now();\n      let stdout = '';\n      let stderr = '';\n\n      // Determine if this is a Jest/Node test based on file content\n      const isJestTest = this.shouldUseJest(testFile);\n      \n      const command = isJestTest ? 'npx' : 'node';\n      const args = isJestTest ? ['jest', '--testPathPattern', testFile, '--verbose'] : [testFile];\n\n      const child = spawn(command, args, {\n        stdio: ['ignore', 'pipe', 'pipe'],\n        env: { ...process.env, NODE_ENV: 'test' }\n      });\n\n      child.stdout.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      child.stderr.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      child.on('close', (code) => {\n        const duration = Date.now() - startTime;\n        \n        // Robust success detection based on Jest's actual behavior\n        const output = stdout + stderr;\n        \n        // Jest shows PASS when tests succeed, FAIL when they fail\n        const hasPASS = output.includes('PASS ');\n        const hasFAIL = output.includes('FAIL ');\n        \n        // For debugging - log what we're seeing\n        if (process.env.DEBUG_TESTS) {\n          console.log(`\\nFile: ${testFile}`);\n          console.log(`Code: ${code}, PASS: ${hasPASS}, FAIL: ${hasFAIL}`);\n          console.log(`Output snippet: \"${output.slice(0, 200)}...\"`);\n        }\n        \n        // Success: Jest reports PASS and no FAIL (ignore exit codes due to teardown issues)\n        const success = hasPASS && !hasFAIL;\n        \n        if (success) {\n          this.passedTests++;\n        } else {\n          this.failedTests++;\n        }\n\n        resolve({\n          file: testFile,\n          success,\n          duration,\n          output: stdout,\n          error: stderr,\n          code\n        });\n      });\n\n      child.on('error', (error) => {\n        this.failedTests++;\n        resolve({\n          file: testFile,\n          success: false,\n          duration: Date.now() - startTime,\n          output: '',\n          error: error.message,\n          code: 1\n        });\n      });\n    });\n  }\n\n  /**\n   * Determine if a test should use Jest\n   */\n  shouldUseJest(testFile) {\n    try {\n      const content = fs.readFileSync(testFile, 'utf8');\n      // Look for Jest-specific patterns\n      return /\\b(describe|it|test|expect|jest|beforeEach|afterEach|beforeAll|afterAll)\\b/.test(content);\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Run tests in parallel batches\n   */\n  async runInParallel(testFiles, maxConcurrency) {\n    const results = [];\n    \n    for (let i = 0; i < testFiles.length; i += maxConcurrency) {\n      const batch = testFiles.slice(i, i + maxConcurrency);\n      const batchPromises = batch.map(file => this.runTestFile(file));\n      \n      try {\n        const batchResults = await Promise.all(batchPromises);\n        results.push(...batchResults);\n        \n        // Show progress\n        const completed = Math.min(i + maxConcurrency, testFiles.length);\n        process.stdout.write(`\\r${colors.dim}Progress: ${completed}/${testFiles.length} files completed${colors.reset}`);\n      } catch (error) {\n        console.error(`${colors.red}Batch error:${colors.reset}`, error);\n      }\n    }\n    \n    console.log(); // New line after progress\n    return results;\n  }\n\n  /**\n   * Display test results with colorful output\n   */\n  displayResults(results) {\n    console.log(`\\n${colors.bright}üìä Test Results Summary${colors.reset}`);\n    console.log(`${colors.dim}${'='.repeat(50)}${colors.reset}`);\n\n    const totalDuration = Date.now() - this.startTime;\n\n    // Summary stats\n    console.log(`${colors.green}‚úÖ Passed: ${this.passedTests}${colors.reset}`);\n    console.log(`${colors.red}‚ùå Failed: ${this.failedTests}${colors.reset}`);\n    console.log(`${colors.blue}üìÅ Total Files: ${results.length}${colors.reset}`);\n    console.log(`${colors.cyan}‚è±Ô∏è  Duration: ${totalDuration}ms${colors.reset}\\n`);\n\n    // Show failed tests with details\n    const failedResults = results.filter(r => !r.success);\n    if (failedResults.length > 0) {\n      console.log(`${colors.red}${colors.bright}Failed Tests:${colors.reset}`);\n      failedResults.forEach(result => {\n        console.log(`\\n${colors.red}‚ùå ${result.file}${colors.reset}`);\n        if (result.error) {\n          console.log(`${colors.dim}${result.error.split('\\n').slice(0, 5).join('\\n')}${colors.reset}`);\n        }\n      });\n\n      // Generate debug file for failed tests\n      this.generateDebugFile(failedResults);\n    }\n\n    // Performance summary\n    const avgDuration = results.reduce((sum, r) => sum + r.duration, 0) / results.length;\n    console.log(`\\n${colors.dim}Average test duration: ${Math.round(avgDuration)}ms${colors.reset}`);\n  }\n\n  /**\n   * Generate DEBUG_TESTS.md file for failed test analysis\n   */\n  generateDebugFile(failedResults) {\n    if (failedResults.length === 0) return;\n    \n    const now = new Date();\n    const creationTime = now.toISOString();\n    const pacificTime = now.toLocaleString('en-US', { \n      timeZone: 'America/Los_Angeles',\n      weekday: 'long',\n      year: 'numeric', \n      month: 'long', \n      day: 'numeric',\n      hour: '2-digit', \n      minute: '2-digit', \n      second: '2-digit',\n      timeZoneName: 'short'\n    });\n    \n    let debugContent = '# Test Failure Analysis\\n\\n';\n    debugContent += `**Creation Time:** ${creationTime}\\n`;\n    debugContent += `**Pacific Time:** ${pacificTime}\\n\\n`;\n    debugContent += '‚ö†Ô∏è **STALENESS WARNING:** If your code changes are after the creation time above and you are checking this file, then it is stale and tests need to be rerun.\\n\\n';\n    debugContent += 'Analyze and address the following test failures:\\n\\n';\n    \n    failedResults.forEach((result, index) => {\n      debugContent += `## Failed Test ${index + 1}: ${result.file}\\n\\n`;\n      debugContent += '### Output:\\n';\n      debugContent += '```\\n';\n      debugContent += result.error || result.output || 'No error output available';\n      debugContent += '\\n```\\n\\n';\n      debugContent += `### Duration: ${result.duration}ms\\n\\n`;\n      debugContent += '---\\n\\n';\n    });\n    \n    debugContent += '## Summary\\n\\n';\n    debugContent += `- Total failed tests: ${failedResults.length}\\n`;\n    debugContent += `- Failed test files: ${failedResults.map(r => r.file).join(', ')}\\n`;\n    debugContent += `- Generated: ${new Date().toISOString()}\\n`;\n    \n    try {\n      fs.writeFileSync('DEBUG_TESTS.md', debugContent);\n      console.log(`\\n${colors.yellow}üìã Debug file created: DEBUG_TESTS.md${colors.reset}`);\n    } catch (error) {\n      console.log(`${colors.red}‚ö†Ô∏è  Could not create DEBUG_TESTS.md: ${error.message}${colors.reset}`);\n    }\n  }\n\n  /**\n   * Main execution method\n   */\n  async run() {\n    console.log(`${colors.bright}üß™ qtests Test Runner - Parallel Mode${colors.reset}`);\n    console.log(`${colors.dim}Discovering and running all tests...${colors.reset}\\n`);\n\n    // Discover all test files\n    const testFiles = this.discoverTests();\n    \n    if (testFiles.length === 0) {\n      console.log(`${colors.yellow}‚ö†Ô∏è  No test files found${colors.reset}`);\n      console.log(`${colors.dim}Looking for files matching: *.test.js, *.spec.js, test/*, tests/*, __tests__/*${colors.reset}`);\n      return;\n    }\n\n    console.log(`${colors.blue}Found ${testFiles.length} test file(s):${colors.reset}`);\n    testFiles.forEach(file => console.log(`  ${colors.dim}‚Ä¢${colors.reset} ${file}`));\n    console.log(`\\n${colors.magenta}üöÄ Running tests in parallel...${colors.reset}\\n`);\n    \n    // Run tests in parallel with aggressive concurrency for speed\n    const cpuCount = os.cpus().length;\n    const maxConcurrency = Math.min(testFiles.length, Math.max(4, cpuCount * 2)); // Use 2x CPU cores for I/O-bound tests\n    console.log(`${colors.dim}Max concurrency: ${maxConcurrency} workers (${cpuCount} CPU cores)${colors.reset}\\n`);\n    \n    const results = await this.runInParallel(testFiles, maxConcurrency);\n    this.results = results;\n    \n    // Display comprehensive results\n    this.displayResults(results);\n    \n    // Exit with appropriate code\n    process.exit(this.failedTests > 0 ? 1 : 0);\n  }\n}\n\n// Run the test suite\nif (require.main === module) {\n  const runner = new TestRunner();\n  runner.run().catch(error => {\n    console.error(`${colors.red}Test runner error:${colors.reset}`, error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = TestRunner;\n"],"mappings":"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","ignoreList":[]}