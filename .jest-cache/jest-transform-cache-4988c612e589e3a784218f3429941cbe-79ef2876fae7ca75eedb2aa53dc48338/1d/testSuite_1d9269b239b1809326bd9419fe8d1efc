277e98557d9a35798c5887612b1134ff
/**
 * Comprehensive Testing Suite Utilities (Refactored)
 * 
 * This module has been refactored to follow Single Responsibility Principle.
 * It now coordinates between focused testing utilities for better maintainability.
 * 
 * Components:
 * - testing/databaseTestHelper.js - Database testing utilities
 * - testing/mockManager.js - Mock management system
 * - testing/assertionHelper.js - Assertion helpers
 * - testing/testDataFactory.js - Test data creation
 * - testing/performanceTestHelper.js - Performance testing
 */

// Import focused testing utilities
const {
  DatabaseTestHelper
} = require('./testing/databaseTestHelper');
const {
  MockManager
} = require('./testing/mockManager');
const {
  AssertionHelper
} = require('./testing/assertionHelper');
const {
  TestDataFactory
} = require('./testing/testDataFactory');
const {
  PerformanceTestHelper
} = require('./testing/performanceTestHelper');

/**
 * TestSuiteBuilder - Fluent API for building comprehensive test suites
 * 
 * Provides a builder pattern for configuring test utilities with method chaining
 */
class TestSuiteBuilder {
  constructor() {
    this.config = {
      apiMocks: false,
      emailMocks: false,
      consoleMocks: false,
      performance: false,
      autoCleanup: true
    };
  }
  withApiMocks() {
    this.config.apiMocks = true;
    return this;
  }
  withEmailMocks() {
    this.config.emailMocks = true;
    return this;
  }
  withConsoleMocks() {
    this.config.consoleMocks = true;
    return this;
  }
  withPerformance() {
    this.config.performance = true;
    return this;
  }
  withoutAutoCleanup() {
    this.config.autoCleanup = false;
    return this;
  }
  build() {
    return {
      mocks: new MockManager(),
      db: new DatabaseTestHelper(),
      assertions: new AssertionHelper(),
      data: new TestDataFactory(),
      performance: this.config.performance ? new PerformanceTestHelper() : null,
      config: {
        ...this.config
      }
    };
  }
}

// Export all testing utilities following qtests framework patterns
module.exports = {
  DatabaseTestHelper,
  MockManager,
  AssertionHelper,
  TestDataFactory,
  PerformanceTestHelper,
  TestSuiteBuilder
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEYXRhYmFzZVRlc3RIZWxwZXIiLCJyZXF1aXJlIiwiTW9ja01hbmFnZXIiLCJBc3NlcnRpb25IZWxwZXIiLCJUZXN0RGF0YUZhY3RvcnkiLCJQZXJmb3JtYW5jZVRlc3RIZWxwZXIiLCJUZXN0U3VpdGVCdWlsZGVyIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJhcGlNb2NrcyIsImVtYWlsTW9ja3MiLCJjb25zb2xlTW9ja3MiLCJwZXJmb3JtYW5jZSIsImF1dG9DbGVhbnVwIiwid2l0aEFwaU1vY2tzIiwid2l0aEVtYWlsTW9ja3MiLCJ3aXRoQ29uc29sZU1vY2tzIiwid2l0aFBlcmZvcm1hbmNlIiwid2l0aG91dEF1dG9DbGVhbnVwIiwiYnVpbGQiLCJtb2NrcyIsImRiIiwiYXNzZXJ0aW9ucyIsImRhdGEiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidGVzdFN1aXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29tcHJlaGVuc2l2ZSBUZXN0aW5nIFN1aXRlIFV0aWxpdGllcyAoUmVmYWN0b3JlZClcbiAqIFxuICogVGhpcyBtb2R1bGUgaGFzIGJlZW4gcmVmYWN0b3JlZCB0byBmb2xsb3cgU2luZ2xlIFJlc3BvbnNpYmlsaXR5IFByaW5jaXBsZS5cbiAqIEl0IG5vdyBjb29yZGluYXRlcyBiZXR3ZWVuIGZvY3VzZWQgdGVzdGluZyB1dGlsaXRpZXMgZm9yIGJldHRlciBtYWludGFpbmFiaWxpdHkuXG4gKiBcbiAqIENvbXBvbmVudHM6XG4gKiAtIHRlc3RpbmcvZGF0YWJhc2VUZXN0SGVscGVyLmpzIC0gRGF0YWJhc2UgdGVzdGluZyB1dGlsaXRpZXNcbiAqIC0gdGVzdGluZy9tb2NrTWFuYWdlci5qcyAtIE1vY2sgbWFuYWdlbWVudCBzeXN0ZW1cbiAqIC0gdGVzdGluZy9hc3NlcnRpb25IZWxwZXIuanMgLSBBc3NlcnRpb24gaGVscGVyc1xuICogLSB0ZXN0aW5nL3Rlc3REYXRhRmFjdG9yeS5qcyAtIFRlc3QgZGF0YSBjcmVhdGlvblxuICogLSB0ZXN0aW5nL3BlcmZvcm1hbmNlVGVzdEhlbHBlci5qcyAtIFBlcmZvcm1hbmNlIHRlc3RpbmdcbiAqL1xuXG4vLyBJbXBvcnQgZm9jdXNlZCB0ZXN0aW5nIHV0aWxpdGllc1xuY29uc3QgeyBEYXRhYmFzZVRlc3RIZWxwZXIgfSA9IHJlcXVpcmUoJy4vdGVzdGluZy9kYXRhYmFzZVRlc3RIZWxwZXInKTtcbmNvbnN0IHsgTW9ja01hbmFnZXIgfSA9IHJlcXVpcmUoJy4vdGVzdGluZy9tb2NrTWFuYWdlcicpO1xuY29uc3QgeyBBc3NlcnRpb25IZWxwZXIgfSA9IHJlcXVpcmUoJy4vdGVzdGluZy9hc3NlcnRpb25IZWxwZXInKTtcbmNvbnN0IHsgVGVzdERhdGFGYWN0b3J5IH0gPSByZXF1aXJlKCcuL3Rlc3RpbmcvdGVzdERhdGFGYWN0b3J5Jyk7XG5jb25zdCB7IFBlcmZvcm1hbmNlVGVzdEhlbHBlciB9ID0gcmVxdWlyZSgnLi90ZXN0aW5nL3BlcmZvcm1hbmNlVGVzdEhlbHBlcicpO1xuXG4vKipcbiAqIFRlc3RTdWl0ZUJ1aWxkZXIgLSBGbHVlbnQgQVBJIGZvciBidWlsZGluZyBjb21wcmVoZW5zaXZlIHRlc3Qgc3VpdGVzXG4gKiBcbiAqIFByb3ZpZGVzIGEgYnVpbGRlciBwYXR0ZXJuIGZvciBjb25maWd1cmluZyB0ZXN0IHV0aWxpdGllcyB3aXRoIG1ldGhvZCBjaGFpbmluZ1xuICovXG5jbGFzcyBUZXN0U3VpdGVCdWlsZGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICBhcGlNb2NrczogZmFsc2UsXG4gICAgICBlbWFpbE1vY2tzOiBmYWxzZSxcbiAgICAgIGNvbnNvbGVNb2NrczogZmFsc2UsXG4gICAgICBwZXJmb3JtYW5jZTogZmFsc2UsXG4gICAgICBhdXRvQ2xlYW51cDogdHJ1ZVxuICAgIH07XG4gIH1cbiAgXG4gIHdpdGhBcGlNb2NrcygpIHtcbiAgICB0aGlzLmNvbmZpZy5hcGlNb2NrcyA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIHdpdGhFbWFpbE1vY2tzKCkge1xuICAgIHRoaXMuY29uZmlnLmVtYWlsTW9ja3MgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICB3aXRoQ29uc29sZU1vY2tzKCkge1xuICAgIHRoaXMuY29uZmlnLmNvbnNvbGVNb2NrcyA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIHdpdGhQZXJmb3JtYW5jZSgpIHtcbiAgICB0aGlzLmNvbmZpZy5wZXJmb3JtYW5jZSA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgXG4gIHdpdGhvdXRBdXRvQ2xlYW51cCgpIHtcbiAgICB0aGlzLmNvbmZpZy5hdXRvQ2xlYW51cCA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIFxuICBidWlsZCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbW9ja3M6IG5ldyBNb2NrTWFuYWdlcigpLFxuICAgICAgZGI6IG5ldyBEYXRhYmFzZVRlc3RIZWxwZXIoKSwgXG4gICAgICBhc3NlcnRpb25zOiBuZXcgQXNzZXJ0aW9uSGVscGVyKCksXG4gICAgICBkYXRhOiBuZXcgVGVzdERhdGFGYWN0b3J5KCksXG4gICAgICBwZXJmb3JtYW5jZTogdGhpcy5jb25maWcucGVyZm9ybWFuY2UgPyBuZXcgUGVyZm9ybWFuY2VUZXN0SGVscGVyKCkgOiBudWxsLFxuICAgICAgY29uZmlnOiB7IC4uLnRoaXMuY29uZmlnIH1cbiAgICB9O1xuICB9XG59XG5cbi8vIEV4cG9ydCBhbGwgdGVzdGluZyB1dGlsaXRpZXMgZm9sbG93aW5nIHF0ZXN0cyBmcmFtZXdvcmsgcGF0dGVybnNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBEYXRhYmFzZVRlc3RIZWxwZXIsXG4gIE1vY2tNYW5hZ2VyLFxuICBBc3NlcnRpb25IZWxwZXIsXG4gIFRlc3REYXRhRmFjdG9yeSxcbiAgUGVyZm9ybWFuY2VUZXN0SGVscGVyLFxuICBUZXN0U3VpdGVCdWlsZGVyXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0VBQUVBO0FBQW1CLENBQUMsR0FBR0MsT0FBTyxDQUFDLDhCQUE4QixDQUFDO0FBQ3RFLE1BQU07RUFBRUM7QUFBWSxDQUFDLEdBQUdELE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQUN4RCxNQUFNO0VBQUVFO0FBQWdCLENBQUMsR0FBR0YsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0FBQ2hFLE1BQU07RUFBRUc7QUFBZ0IsQ0FBQyxHQUFHSCxPQUFPLENBQUMsMkJBQTJCLENBQUM7QUFDaEUsTUFBTTtFQUFFSTtBQUFzQixDQUFDLEdBQUdKLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQzs7QUFFNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1LLGdCQUFnQixDQUFDO0VBQ3JCQyxXQUFXQSxDQUFBLEVBQUc7SUFDWixJQUFJLENBQUNDLE1BQU0sR0FBRztNQUNaQyxRQUFRLEVBQUUsS0FBSztNQUNmQyxVQUFVLEVBQUUsS0FBSztNQUNqQkMsWUFBWSxFQUFFLEtBQUs7TUFDbkJDLFdBQVcsRUFBRSxLQUFLO01BQ2xCQyxXQUFXLEVBQUU7SUFDZixDQUFDO0VBQ0g7RUFFQUMsWUFBWUEsQ0FBQSxFQUFHO0lBQ2IsSUFBSSxDQUFDTixNQUFNLENBQUNDLFFBQVEsR0FBRyxJQUFJO0lBQzNCLE9BQU8sSUFBSTtFQUNiO0VBRUFNLGNBQWNBLENBQUEsRUFBRztJQUNmLElBQUksQ0FBQ1AsTUFBTSxDQUFDRSxVQUFVLEdBQUcsSUFBSTtJQUM3QixPQUFPLElBQUk7RUFDYjtFQUVBTSxnQkFBZ0JBLENBQUEsRUFBRztJQUNqQixJQUFJLENBQUNSLE1BQU0sQ0FBQ0csWUFBWSxHQUFHLElBQUk7SUFDL0IsT0FBTyxJQUFJO0VBQ2I7RUFFQU0sZUFBZUEsQ0FBQSxFQUFHO0lBQ2hCLElBQUksQ0FBQ1QsTUFBTSxDQUFDSSxXQUFXLEdBQUcsSUFBSTtJQUM5QixPQUFPLElBQUk7RUFDYjtFQUVBTSxrQkFBa0JBLENBQUEsRUFBRztJQUNuQixJQUFJLENBQUNWLE1BQU0sQ0FBQ0ssV0FBVyxHQUFHLEtBQUs7SUFDL0IsT0FBTyxJQUFJO0VBQ2I7RUFFQU0sS0FBS0EsQ0FBQSxFQUFHO0lBQ04sT0FBTztNQUNMQyxLQUFLLEVBQUUsSUFBSWxCLFdBQVcsQ0FBQyxDQUFDO01BQ3hCbUIsRUFBRSxFQUFFLElBQUlyQixrQkFBa0IsQ0FBQyxDQUFDO01BQzVCc0IsVUFBVSxFQUFFLElBQUluQixlQUFlLENBQUMsQ0FBQztNQUNqQ29CLElBQUksRUFBRSxJQUFJbkIsZUFBZSxDQUFDLENBQUM7TUFDM0JRLFdBQVcsRUFBRSxJQUFJLENBQUNKLE1BQU0sQ0FBQ0ksV0FBVyxHQUFHLElBQUlQLHFCQUFxQixDQUFDLENBQUMsR0FBRyxJQUFJO01BQ3pFRyxNQUFNLEVBQUU7UUFBRSxHQUFHLElBQUksQ0FBQ0E7TUFBTztJQUMzQixDQUFDO0VBQ0g7QUFDRjs7QUFFQTtBQUNBZ0IsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZnpCLGtCQUFrQjtFQUNsQkUsV0FBVztFQUNYQyxlQUFlO0VBQ2ZDLGVBQWU7RUFDZkMscUJBQXFCO0VBQ3JCQztBQUNGLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=