{"file":"/home/runner/workspace/utils/testing/expect/index.ts","mappings":";AAAA;;;;;;GAMG;;AAoBH,wBA8BC;AAMD,wCAIC;AAMD,0CAEC;AA5DD,qCAAqC;AACrC,MAAM,eAAe,GAAG,IAAI,GAAG,EAAqB,CAAC;AAQrD;;GAEG;AACH,SAAgB,MAAM,CAAC,QAAa;IAClC,MAAM,GAAG,GAAQ,EAAE,CAAC;IAEpB,yCAAyC;IACzC,KAAK,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,eAAe,EAAE,CAAC;QAChD,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAW,EAAE,EAAE;YAC7B,MAAM,OAAO,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;YACjC,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;YAE1D,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBACjB,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;YACpC,CAAC;QACH,CAAC,CAAC;IACJ,CAAC;IAED,uCAAuC;IACvC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC;IACb,KAAK,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,eAAe,EAAE,CAAC;QAChD,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAW,EAAE,EAAE;YACjC,MAAM,OAAO,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;YAChC,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;YAE1D,2CAA2C;YAC3C,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;YACpC,CAAC;QACH,CAAC,CAAC;IACJ,CAAC;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAED;;;GAGG;AACH,SAAgB,cAAc,CAAC,QAAmC;IAChE,KAAK,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;QACzD,eAAe,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACvC,CAAC;AACH,CAAC;AAED;;;GAGG;AACH,SAAgB,eAAe;IAC7B,OAAO,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC;AAC5C,CAAC","names":[],"sources":["/home/runner/workspace/utils/testing/expect/index.ts"],"sourcesContent":["/**\n * Expect API - Core Assertion System\n * \n * This module provides the familiar expect() API that developers expect from\n * modern test frameworks. It supports extensible matchers and provides\n * helpful error messages with diffs.\n */\n\n// Type definition for matcher functions\ntype MatcherFn = (this: { isNot: boolean }, received: any, ...args: any[]) => { \n  pass: boolean; \n  message: () => string \n};\n\n// Registry of all available matchers\nconst matcherRegistry = new Map<string, MatcherFn>();\n\n// Interface for the expect API\ninterface ExpectAPI {\n  [key: string]: (...args: any[]) => void;\n  not: ExpectAPI;\n}\n\n/**\n * Main expect function - creates expectation object with matchers\n */\nexport function expect(received: any): ExpectAPI {\n  const api: any = {};\n  \n  // Add all registered matchers to the API\n  for (const [name, matcherFn] of matcherRegistry) {\n    api[name] = (...args: any[]) => {\n      const context = { isNot: false };\n      const result = matcherFn.call(context, received, ...args);\n      \n      if (!result.pass) {\n        throw new Error(result.message());\n      }\n    };\n  }\n  \n  // Create 'not' version of all matchers\n  api.not = {};\n  for (const [name, matcherFn] of matcherRegistry) {\n    api.not[name] = (...args: any[]) => {\n      const context = { isNot: true };\n      const result = matcherFn.call(context, received, ...args);\n      \n      // Invert the result for 'not' expectations\n      if (result.pass) {\n        throw new Error(result.message());\n      }\n    };\n  }\n  \n  return api;\n}\n\n/**\n * Register new matchers with the expect API\n * This allows for extensible custom matchers\n */\nexport function extendMatchers(matchers: Record<string, MatcherFn>): void {\n  for (const [name, matcherFn] of Object.entries(matchers)) {\n    matcherRegistry.set(name, matcherFn);\n  }\n}\n\n/**\n * Get all registered matcher names\n * Useful for debugging and introspection\n */\nexport function getMatcherNames(): string[] {\n  return Array.from(matcherRegistry.keys());\n}"],"version":3}