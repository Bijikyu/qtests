{"file":"/home/runner/workspace/utils/testSuite.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/testSuite.ts"],"sourcesContent":["/**\n * Comprehensive Testing Suite Utilities - TypeScript Implementation (Refactored)\n * \n * This module has been refactored to follow Single Responsibility Principle.\n * It now coordinates between focused testing utilities for better maintainability.\n * \n * Components:\n * - testing/databaseTestHelper.ts - Database testing utilities\n * - testing/mockManager.ts - Mock management system\n * - testing/assertionHelper.ts - Assertion helpers\n * - testing/testDataFactory.ts - Test data creation\n * - testing/performanceTestHelper.ts - Performance testing\n */\n\n// Import focused testing utilities\nimport { DatabaseTestHelper } from './testing/databaseTestHelper.js';\nimport { MockManager } from './testing/mockManager.js';\nimport { AssertionHelper } from './testing/assertionHelper.js';\nimport { TestDataFactory } from './testing/testDataFactory.js';\nimport { PerformanceTestHelper } from './testing/performanceTestHelper.js';\n\n// Type definitions\ninterface TestSuiteConfig {\n  apiMocks?: boolean;\n  emailMocks?: boolean;\n  consoleMocks?: boolean;\n  performance?: boolean;\n  autoCleanup?: boolean;\n  database?: boolean;\n  environmentMocks?: Record<string, string>;\n  httpMocks?: any[];\n}\n\ninterface TestSuiteInstance {\n  mocks: MockManager;\n  db?: DatabaseTestHelper;\n  assertions: AssertionHelper;\n  assert: typeof AssertionHelper;\n  data: typeof TestDataFactory;\n  performance?: typeof PerformanceTestHelper;\n  config: TestSuiteConfig;\n}\n\n/**\n * TestSuiteBuilder - Fluent API for building comprehensive test suites\n * \n * Provides a builder pattern for configuring test utilities with method chaining\n */\nclass TestSuiteBuilder {\n  private config: TestSuiteConfig;\n\n  constructor() {\n    this.config = {\n      apiMocks: false,\n      emailMocks: false,\n      consoleMocks: false,\n      performance: false,\n      autoCleanup: true\n    };\n  }\n  \n  withApiMocks(): TestSuiteBuilder {\n    this.config.apiMocks = true;\n    return this;\n  }\n  \n  withEmailMocks(): TestSuiteBuilder {\n    this.config.emailMocks = true;\n    return this;\n  }\n  \n  withConsoleMocks(): TestSuiteBuilder {\n    this.config.consoleMocks = true;\n    return this;\n  }\n  \n  withPerformance(): TestSuiteBuilder {\n    this.config.performance = true;\n    return this;\n  }\n\n  withDatabase(): TestSuiteBuilder {\n    this.config.database = true;\n    return this;\n  }\n\n  withEnvironmentMocks(envVars?: Record<string, string>): TestSuiteBuilder {\n    this.config.environmentMocks = envVars || {};\n    return this;\n  }\n\n  withHttpMocks(responses?: any[]): TestSuiteBuilder {\n    this.config.httpMocks = responses || [];\n    return this;\n  }\n  \n  withoutAutoCleanup(): TestSuiteBuilder {\n    this.config.autoCleanup = false;\n    return this;\n  }\n  \n  build(): TestSuiteInstance {\n    const mockManager = new MockManager();\n    \n    // Set up mocks based on configuration\n    if (this.config.apiMocks) {\n      mockManager.setupApiClientMocks();\n    }\n    if (this.config.emailMocks) {\n      // Set up email mocks if needed\n      try {\n        // Note: Dynamic import would be needed for ES modules\n        // For now, this is a placeholder for the email functionality\n        mockManager.mocks.set('email', { sendEmail: () => {} });\n      } catch (error) {\n        // Email mocks not available, skip\n      }\n    }\n    if (this.config.consoleMocks) {\n      mockManager.setupConsoleMocks();\n    }\n    if (this.config.environmentMocks && Object.keys(this.config.environmentMocks).length > 0) {\n      mockManager.setupEnvironmentMocks(this.config.environmentMocks);\n    }\n    if (this.config.httpMocks && this.config.httpMocks.length > 0) {\n      mockManager.setupHttpMocks(this.config.httpMocks);\n    }\n    \n    const assertionHelper = new AssertionHelper();\n    \n    return {\n      mocks: mockManager,\n      db: this.config.database ? new DatabaseTestHelper() : undefined,\n      assertions: assertionHelper,\n      assert: AssertionHelper, // Return class for toBe() equality checks\n      data: TestDataFactory, // Always return class for toBe() equality checks\n      performance: this.config.performance ? PerformanceTestHelper : undefined, // Return class for toBe() equality checks\n      config: { ...this.config }\n    };\n  }\n}\n\n// Export all testing utilities following qtests framework patterns using ES module syntax\nexport {\n  DatabaseTestHelper,\n  MockManager,\n  AssertionHelper,\n  TestDataFactory,\n  PerformanceTestHelper,\n  TestSuiteBuilder\n};"],"version":3}