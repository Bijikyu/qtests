{"file":"/home/runner/workspace/utils/models/modelFactory.ts","mappings":";AAAA;;;;;GAKG;;AA6GD,0CAAe;AACf,kDAAmB;AACnB,8CAAiB;AACjB,0CAAe;AA9GjB,yDAAoE;AACpE,qDAA+C;AAC/C,qDAA4C;AAY5C;;;;;;;;;;GAUG;AACH,SAAS,eAAe,CAAC,SAAiB,EAAE,SAA2B,EAAE;IACvE,OAAO,CAAC,GAAG,CAAC,mCAAmC,SAAS,EAAE,CAAC,CAAC;IAE5D,IAAI,CAAC;QACH,2CAA2C;QAC3C,MAAM,UAAW,SAAQ,gCAAa;YAGpC,YAAY,IAAU;gBACpB,KAAK,CAAC,IAAI,CAAC,CAAC;gBACX,IAAI,CAAC,WAAmB,CAAC,SAAS,GAAG,SAAS,CAAC;YAClD,CAAC;;QALM,oBAAS,GAAG,SAAS,CAAC;QAQ/B,+CAA+C;QAC/C,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;QAEhE,OAAO,CAAC,GAAG,CAAC,gCAAgC,SAAS,QAAQ,CAAC,CAAC;QAC/D,OAAO,UAAkC,CAAC;IAC5C,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,yBAAyB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACtD,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC;AAED;;;;;GAKG;AACH,SAAS,mBAAmB;IAC1B,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;IAExD,IAAI,CAAC;QACH,mCAAmC;QACnC,kCAAe,CAAC,KAAK,EAAE,CAAC;QAExB,iDAAiD;QACjD,4BAAW,CAAC,MAAM,GAAG,CAAC,CAAC;QACvB,yBAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;QAEpB,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;IAC/C,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,6BAA6B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC1D,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAS,iBAAiB;IACxB,OAAO,kCAAe,CAAC;AACzB,CAAC;AAED;;GAEG;AACH,SAAS,eAAe,CAAC,SAAiB;IACxC,OAAO,CAAC,GAAG,CAAC,mCAAmC,SAAS,EAAE,CAAC,CAAC;IAE5D,IAAI,CAAC;QACH,IAAI,kCAAe,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;YACnC,MAAM,UAAU,GAAG,kCAAe,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAClD,IAAI,UAAU,EAAE,CAAC;gBACf,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;YACxB,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,2BAA2B,SAAS,EAAE,CAAC,CAAC;YACpD,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,mBAAmB,SAAS,YAAY,CAAC,CAAC;QACtD,OAAO,KAAK,CAAC;IACf,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,yBAAyB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACtD,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC","names":[],"sources":["/home/runner/workspace/utils/models/modelFactory.ts"],"sourcesContent":["/**\n * Model Factory and Utilities - TypeScript Implementation\n * \n * This module focuses solely on model creation, factory functions, and collection management.\n * It provides utilities for creating custom models and managing collections.\n */\n\nimport { BaseMockModel, mockCollections } from './baseMockModel.js';\nimport { mockApiKeys } from './apiKeyModel.js';\nimport { mockLogs } from './apiLogModel.js';\n\n// Type definitions\ninterface MockModelConstructor {\n  new (data?: any): BaseMockModel;\n  modelName?: string;\n}\n\ninterface SchemaDefinition {\n  [key: string]: any;\n}\n\n/**\n * Create custom mock model class\n * \n * Factory function that creates a new mock model class with the specified name.\n * The created class extends BaseMockModel and can be used like any Mongoose model.\n * \n * @example\n * const User = createMockModel('User');\n * const user = new User({ name: 'John', email: 'john@example.com' });\n * await user.save();\n */\nfunction createMockModel(modelName: string, schema: SchemaDefinition = {}): MockModelConstructor {\n  console.log(`createMockModel is running with ${modelName}`);\n  \n  try {\n    // Create dynamic class with specified name\n    class ModelClass extends BaseMockModel {\n      static modelName = modelName;\n\n      constructor(data?: any) {\n        super(data);\n        (this.constructor as any).modelName = modelName;\n      }\n    }\n    \n    // Set the class name for debugging and logging\n    Object.defineProperty(ModelClass, 'name', { value: modelName });\n    \n    console.log(`createMockModel is returning ${modelName} class`);\n    return ModelClass as MockModelConstructor;\n  } catch (error: any) {\n    console.log(`createMockModel error ${error.message}`);\n    throw error;\n  }\n}\n\n/**\n * Reset all mock collections\n * \n * Utility function that clears all in-memory collections for clean test state.\n * Useful for test setup and teardown to ensure test isolation.\n */\nfunction resetAllCollections(): void {\n  console.log(`resetAllCollections is running with none`);\n  \n  try {\n    // Clear the global collections map\n    mockCollections.clear();\n    \n    // Clear legacy arrays for backward compatibility\n    mockApiKeys.length = 0;\n    mockLogs.length = 0;\n    \n    console.log(`resetAllCollections completed`);\n  } catch (error: any) {\n    console.log(`resetAllCollections error ${error.message}`);\n    throw error;\n  }\n}\n\n/**\n * Get all collections for debugging or testing\n */\nfunction getAllCollections(): Map<string, any[]> {\n  return mockCollections;\n}\n\n/**\n * Clear specific collection by model name\n */\nfunction clearCollection(modelName: string): boolean {\n  console.log(`clearCollection is running with ${modelName}`);\n  \n  try {\n    if (mockCollections.has(modelName)) {\n      const collection = mockCollections.get(modelName);\n      if (collection) {\n        collection.length = 0;\n      }\n      console.log(`clearCollection cleared ${modelName}`);\n      return true;\n    }\n    \n    console.log(`clearCollection ${modelName} not found`);\n    return false;\n  } catch (error: any) {\n    console.log(`clearCollection error ${error.message}`);\n    throw error;\n  }\n}\n\n// Export using ES module syntax\nexport {\n  createMockModel,\n  resetAllCollections,\n  getAllCollections,\n  clearCollection\n};"],"version":3}