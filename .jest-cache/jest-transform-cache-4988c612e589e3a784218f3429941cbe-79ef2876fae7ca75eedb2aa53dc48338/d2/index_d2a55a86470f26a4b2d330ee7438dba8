d5ee4580b68a9ed6b587d4f46365596e
/**
 * qtests - Main Entry Point
 *
 * This module serves as the unified export point for all qtests functionality.
 * The architecture is designed to provide a clean, intuitive API where users
 * can access all testing utilities through a single import.
 *
 * Design rationale:
 * - Single entry point reduces cognitive load for users
 * - Organized by functionality (core, environment, setup, stubs) for clarity
 * - Each category is kept in separate lib files for maintainability
 * - Maintains backward compatibility with existing API
 */
// Import organized utility categories from lib directory
import { stubMethod, mockConsole } from './lib/coreUtils.js';
import { testEnv, offlineMode, testHelpers } from './lib/envUtils.js';
import { setup } from './lib/setup.js';
import stubs from './lib/stubs.js';
import { TestGenerator } from './lib/testGenerator.js';
import { runTestSuite, runTestSuites, createAssertions } from './utils/runTestSuite.js';
// Named exports for ES module compatibility
export { stubMethod, // method replacement utility for isolating dependencies
mockConsole, // console output capture for testing logging behavior
testEnv, // environment and mock management for complex test scenarios
offlineMode, // offline/online mode utility with automatic switching
testHelpers, // advanced testing utilities for module reloading and mocking
TestGenerator, // automatic test generation from source code analysis
runTestSuite, // lightweight test runner for simple test scenarios
runTestSuites, // run multiple test suites with overall summary
createAssertions, // basic assertion helpers for test writing
setup, // call this to activate stubs when desired
stubs // stub library organized under namespace
 };
// Default export for backward compatibility
const qtests = {
    stubMethod,
    mockConsole,
    testEnv,
    offlineMode,
    testHelpers,
    TestGenerator,
    runTestSuite,
    runTestSuites,
    createAssertions,
    setup,
    stubs
};
export default qtests;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9pbmRleC50cyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0dBWUc7QUFFSCx5REFBeUQ7QUFDekQsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkMsT0FBTyxLQUFLLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFpQnhGLDRDQUE0QztBQUM1QyxPQUFPLEVBQ0wsVUFBVSxFQUFFLHdEQUF3RDtBQUNwRSxXQUFXLEVBQUUsc0RBQXNEO0FBQ25FLE9BQU8sRUFBRSw2REFBNkQ7QUFDdEUsV0FBVyxFQUFFLHVEQUF1RDtBQUNwRSxXQUFXLEVBQUUsOERBQThEO0FBQzNFLGFBQWEsRUFBRSxzREFBc0Q7QUFDckUsWUFBWSxFQUFFLG9EQUFvRDtBQUNsRSxhQUFhLEVBQUUsZ0RBQWdEO0FBQy9ELGdCQUFnQixFQUFFLDJDQUEyQztBQUM3RCxLQUFLLEVBQUUsMkNBQTJDO0FBQ2xELEtBQUssQ0FBQyx5Q0FBeUM7RUFDaEQsQ0FBQztBQUVGLDRDQUE0QztBQUM1QyxNQUFNLE1BQU0sR0FBYztJQUN4QixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxXQUFXO0lBQ1gsV0FBVztJQUNYLGFBQWE7SUFDYixZQUFZO0lBQ1osYUFBYTtJQUNiLGdCQUFnQjtJQUNoQixLQUFLO0lBQ0wsS0FBSztDQUNOLENBQUM7QUFFRixlQUFlLE1BQU0sQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogcXRlc3RzIC0gTWFpbiBFbnRyeSBQb2ludFxuICogXG4gKiBUaGlzIG1vZHVsZSBzZXJ2ZXMgYXMgdGhlIHVuaWZpZWQgZXhwb3J0IHBvaW50IGZvciBhbGwgcXRlc3RzIGZ1bmN0aW9uYWxpdHkuXG4gKiBUaGUgYXJjaGl0ZWN0dXJlIGlzIGRlc2lnbmVkIHRvIHByb3ZpZGUgYSBjbGVhbiwgaW50dWl0aXZlIEFQSSB3aGVyZSB1c2Vyc1xuICogY2FuIGFjY2VzcyBhbGwgdGVzdGluZyB1dGlsaXRpZXMgdGhyb3VnaCBhIHNpbmdsZSBpbXBvcnQuXG4gKiBcbiAqIERlc2lnbiByYXRpb25hbGU6XG4gKiAtIFNpbmdsZSBlbnRyeSBwb2ludCByZWR1Y2VzIGNvZ25pdGl2ZSBsb2FkIGZvciB1c2Vyc1xuICogLSBPcmdhbml6ZWQgYnkgZnVuY3Rpb25hbGl0eSAoY29yZSwgZW52aXJvbm1lbnQsIHNldHVwLCBzdHVicykgZm9yIGNsYXJpdHlcbiAqIC0gRWFjaCBjYXRlZ29yeSBpcyBrZXB0IGluIHNlcGFyYXRlIGxpYiBmaWxlcyBmb3IgbWFpbnRhaW5hYmlsaXR5XG4gKiAtIE1haW50YWlucyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggZXhpc3RpbmcgQVBJXG4gKi9cblxuLy8gSW1wb3J0IG9yZ2FuaXplZCB1dGlsaXR5IGNhdGVnb3JpZXMgZnJvbSBsaWIgZGlyZWN0b3J5XG5pbXBvcnQgeyBzdHViTWV0aG9kLCBtb2NrQ29uc29sZSB9IGZyb20gJy4vbGliL2NvcmVVdGlscy5qcyc7XG5pbXBvcnQgeyB0ZXN0RW52LCBvZmZsaW5lTW9kZSwgdGVzdEhlbHBlcnMgfSBmcm9tICcuL2xpYi9lbnZVdGlscy5qcyc7XG5pbXBvcnQgeyBzZXR1cCB9IGZyb20gJy4vbGliL3NldHVwLmpzJztcbmltcG9ydCBzdHVicyBmcm9tICcuL2xpYi9zdHVicy5qcyc7XG5pbXBvcnQgeyBUZXN0R2VuZXJhdG9yIH0gZnJvbSAnLi9saWIvdGVzdEdlbmVyYXRvci5qcyc7XG5pbXBvcnQgeyBydW5UZXN0U3VpdGUsIHJ1blRlc3RTdWl0ZXMsIGNyZWF0ZUFzc2VydGlvbnMgfSBmcm9tICcuL3V0aWxzL3J1blRlc3RTdWl0ZS5qcyc7XG5cbi8vIFR5cGUgZGVmaW5pdGlvbnMgZm9yIHRoZSBtYWluIG1vZHVsZSBleHBvcnRzXG5leHBvcnQgaW50ZXJmYWNlIFF0ZXN0c0FQSSB7XG4gIHN0dWJNZXRob2Q6IHR5cGVvZiBzdHViTWV0aG9kO1xuICBtb2NrQ29uc29sZTogdHlwZW9mIG1vY2tDb25zb2xlO1xuICB0ZXN0RW52OiB0eXBlb2YgdGVzdEVudjtcbiAgb2ZmbGluZU1vZGU6IHR5cGVvZiBvZmZsaW5lTW9kZTtcbiAgdGVzdEhlbHBlcnM6IHR5cGVvZiB0ZXN0SGVscGVycztcbiAgVGVzdEdlbmVyYXRvcjogdHlwZW9mIFRlc3RHZW5lcmF0b3I7XG4gIHJ1blRlc3RTdWl0ZTogdHlwZW9mIHJ1blRlc3RTdWl0ZTtcbiAgcnVuVGVzdFN1aXRlczogdHlwZW9mIHJ1blRlc3RTdWl0ZXM7XG4gIGNyZWF0ZUFzc2VydGlvbnM6IHR5cGVvZiBjcmVhdGVBc3NlcnRpb25zO1xuICBzZXR1cDogdHlwZW9mIHNldHVwO1xuICBzdHViczogdHlwZW9mIHN0dWJzO1xufVxuXG4vLyBOYW1lZCBleHBvcnRzIGZvciBFUyBtb2R1bGUgY29tcGF0aWJpbGl0eVxuZXhwb3J0IHtcbiAgc3R1Yk1ldGhvZCwgLy8gbWV0aG9kIHJlcGxhY2VtZW50IHV0aWxpdHkgZm9yIGlzb2xhdGluZyBkZXBlbmRlbmNpZXNcbiAgbW9ja0NvbnNvbGUsIC8vIGNvbnNvbGUgb3V0cHV0IGNhcHR1cmUgZm9yIHRlc3RpbmcgbG9nZ2luZyBiZWhhdmlvclxuICB0ZXN0RW52LCAvLyBlbnZpcm9ubWVudCBhbmQgbW9jayBtYW5hZ2VtZW50IGZvciBjb21wbGV4IHRlc3Qgc2NlbmFyaW9zXG4gIG9mZmxpbmVNb2RlLCAvLyBvZmZsaW5lL29ubGluZSBtb2RlIHV0aWxpdHkgd2l0aCBhdXRvbWF0aWMgc3dpdGNoaW5nXG4gIHRlc3RIZWxwZXJzLCAvLyBhZHZhbmNlZCB0ZXN0aW5nIHV0aWxpdGllcyBmb3IgbW9kdWxlIHJlbG9hZGluZyBhbmQgbW9ja2luZ1xuICBUZXN0R2VuZXJhdG9yLCAvLyBhdXRvbWF0aWMgdGVzdCBnZW5lcmF0aW9uIGZyb20gc291cmNlIGNvZGUgYW5hbHlzaXNcbiAgcnVuVGVzdFN1aXRlLCAvLyBsaWdodHdlaWdodCB0ZXN0IHJ1bm5lciBmb3Igc2ltcGxlIHRlc3Qgc2NlbmFyaW9zXG4gIHJ1blRlc3RTdWl0ZXMsIC8vIHJ1biBtdWx0aXBsZSB0ZXN0IHN1aXRlcyB3aXRoIG92ZXJhbGwgc3VtbWFyeVxuICBjcmVhdGVBc3NlcnRpb25zLCAvLyBiYXNpYyBhc3NlcnRpb24gaGVscGVycyBmb3IgdGVzdCB3cml0aW5nXG4gIHNldHVwLCAvLyBjYWxsIHRoaXMgdG8gYWN0aXZhdGUgc3R1YnMgd2hlbiBkZXNpcmVkXG4gIHN0dWJzIC8vIHN0dWIgbGlicmFyeSBvcmdhbml6ZWQgdW5kZXIgbmFtZXNwYWNlXG59O1xuXG4vLyBEZWZhdWx0IGV4cG9ydCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuY29uc3QgcXRlc3RzOiBRdGVzdHNBUEkgPSB7XG4gIHN0dWJNZXRob2QsXG4gIG1vY2tDb25zb2xlLFxuICB0ZXN0RW52LFxuICBvZmZsaW5lTW9kZSxcbiAgdGVzdEhlbHBlcnMsXG4gIFRlc3RHZW5lcmF0b3IsXG4gIHJ1blRlc3RTdWl0ZSxcbiAgcnVuVGVzdFN1aXRlcyxcbiAgY3JlYXRlQXNzZXJ0aW9ucyxcbiAgc2V0dXAsXG4gIHN0dWJzXG59O1xuXG5leHBvcnQgZGVmYXVsdCBxdGVzdHM7Il0sInZlcnNpb24iOjN9