{"file":"/home/runner/workspace/utils/runTestSuite.ts","mappings":"AAAA;;;;;;GAMG;AAYH;;GAEG;AACH,SAAS,YAAY,CAAC,SAAiB,EAAE,aAAyB;IAChE,OAAO,CAAC,GAAG,CAAC,iBAAiB,SAAS,EAAE,CAAC,CAAC;IAC1C,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAE5B,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,MAAM,QAAQ,GAA2C,EAAE,CAAC;IAE5D,KAAK,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,aAAa,EAAE,CAAC;QAC/C,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,OAAO,QAAQ,EAAE,CAAC,CAAC;YAC/B,MAAM,EAAE,CAAC;YACT,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC1B,MAAM,EAAE,CAAC;QACX,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,OAAO,CAAC,GAAG,CAAC,eAAe,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC5C,MAAM,EAAE,CAAC;YACT,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC1D,CAAC;IACH,CAAC;IAED,gBAAgB;IAChB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5B,OAAO,CAAC,GAAG,CAAC,YAAY,MAAM,YAAY,MAAM,SAAS,CAAC,CAAC;IAE3D,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC3B,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE;YACnC,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC;AACtC,CAAC;AAED;;GAEG;AACH,SAAS,aAAa,CAAC,MAAmC;IACxD,IAAI,WAAW,GAAG,CAAC,CAAC;IACpB,IAAI,WAAW,GAAG,CAAC,CAAC;IACpB,MAAM,WAAW,GAA2C,EAAE,CAAC;IAE/D,KAAK,MAAM,CAAC,SAAS,EAAE,aAAa,CAAC,IAAI,MAAM,EAAE,CAAC;QAChD,MAAM,MAAM,GAAG,YAAY,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QACtD,WAAW,IAAI,MAAM,CAAC,MAAM,CAAC;QAC7B,WAAW,IAAI,MAAM,CAAC,MAAM,CAAC;QAC7B,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;IAED,OAAO,CAAC,GAAG,CAAC,yBAAyB,WAAW,YAAY,WAAW,SAAS,CAAC,CAAC;IAElF,OAAO;QACL,MAAM,EAAE,WAAW;QACnB,MAAM,EAAE,WAAW;QACnB,QAAQ,EAAE,WAAW;KACtB,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAS,gBAAgB;IACvB,OAAO;QACL,KAAK,EAAE,CAAC,MAAW,EAAE,QAAa,EAAE,OAAgB,EAAE,EAAE;YACtD,IAAI,MAAM,KAAK,QAAQ,EAAE,CAAC;gBACxB,MAAM,IAAI,KAAK,CAAC,OAAO,IAAI,YAAY,QAAQ,SAAS,MAAM,EAAE,CAAC,CAAC;YACpE,CAAC;QACH,CAAC;QAED,QAAQ,EAAE,CAAC,MAAW,EAAE,QAAa,EAAE,OAAgB,EAAE,EAAE;YACzD,IAAI,MAAM,KAAK,QAAQ,EAAE,CAAC;gBACxB,MAAM,IAAI,KAAK,CAAC,OAAO,IAAI,oCAAoC,MAAM,EAAE,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC;QAED,MAAM,EAAE,CAAC,KAAU,EAAE,OAAgB,EAAE,EAAE;YACvC,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,MAAM,IAAI,KAAK,CAAC,OAAO,IAAI,8BAA8B,KAAK,EAAE,CAAC,CAAC;YACpE,CAAC;QACH,CAAC;QAED,KAAK,EAAE,CAAC,KAAU,EAAE,OAAgB,EAAE,EAAE;YACtC,IAAI,KAAK,EAAE,CAAC;gBACV,MAAM,IAAI,KAAK,CAAC,OAAO,IAAI,6BAA6B,KAAK,EAAE,CAAC,CAAC;YACnE,CAAC;QACH,CAAC;KACF,CAAC;AACJ,CAAC;AAED,qDAAqD;AACrD,OAAO,EACL,YAAY,EACZ,aAAa,EACb,gBAAgB,EACjB,CAAC","names":[],"sources":["/home/runner/workspace/utils/runTestSuite.ts"],"sourcesContent":["/**\n * Simple Test Suite Runner - TypeScript Implementation\n * \n * Lightweight test runner for simple testing scenarios where Jest or other\n * full-featured test frameworks might be overkill. Provides basic test\n * execution with pass/fail tracking and formatted console output.\n */\n\n// Type definitions\ninterface TestResult {\n  passed: number;\n  failed: number;\n  failures: Array<{ test: string; error: string }>;\n}\n\ntype TestFunction = () => void | Promise<void>;\ntype TestCase = [string, TestFunction];\n\n/**\n * Run a test suite with multiple test functions\n */\nfunction runTestSuite(suiteName: string, testFunctions: TestCase[]): TestResult {\n  console.log(`\\nüîß Running: ${suiteName}`);\n  console.log('-'.repeat(40));\n  \n  let passed = 0;\n  let failed = 0;\n  const failures: Array<{ test: string; error: string }> = [];\n  \n  for (const [testName, testFn] of testFunctions) {\n    try {\n      console.log(`  ‚ñ∂ ${testName}`);\n      testFn();\n      console.log(`    ‚úÖ PASS`);\n      passed++;\n    } catch (error: any) {\n      console.log(`    ‚ùå FAIL: ${error.message}`);\n      failed++;\n      failures.push({ test: testName, error: error.message });\n    }\n  }\n  \n  // Print summary\n  console.log('-'.repeat(40));\n  console.log(`Summary: ${passed} passed, ${failed} failed`);\n  \n  if (failures.length > 0) {\n    console.log('\\nFailures:');\n    failures.forEach(({ test, error }) => {\n      console.log(`  ‚ùå ${test}: ${error}`);\n    });\n  }\n  \n  return { passed, failed, failures };\n}\n\n/**\n * Run multiple test suites sequentially\n */\nfunction runTestSuites(suites: Array<[string, TestCase[]]>): TestResult {\n  let totalPassed = 0;\n  let totalFailed = 0;\n  const allFailures: Array<{ test: string; error: string }> = [];\n  \n  for (const [suiteName, testFunctions] of suites) {\n    const result = runTestSuite(suiteName, testFunctions);\n    totalPassed += result.passed;\n    totalFailed += result.failed;\n    allFailures.push(...result.failures);\n  }\n  \n  console.log(`\\nüìä Overall Summary: ${totalPassed} passed, ${totalFailed} failed`);\n  \n  return {\n    passed: totalPassed,\n    failed: totalFailed,\n    failures: allFailures\n  };\n}\n\n/**\n * Create basic assertion helpers\n */\nfunction createAssertions() {\n  return {\n    equal: (actual: any, expected: any, message?: string) => {\n      if (actual !== expected) {\n        throw new Error(message || `Expected ${expected}, got ${actual}`);\n      }\n    },\n    \n    notEqual: (actual: any, expected: any, message?: string) => {\n      if (actual === expected) {\n        throw new Error(message || `Expected values not to be equal: ${actual}`);\n      }\n    },\n    \n    truthy: (value: any, message?: string) => {\n      if (!value) {\n        throw new Error(message || `Expected truthy value, got ${value}`);\n      }\n    },\n    \n    falsy: (value: any, message?: string) => {\n      if (value) {\n        throw new Error(message || `Expected falsy value, got ${value}`);\n      }\n    }\n  };\n}\n\n// Export test suite utilities using ES module syntax\nexport {\n  runTestSuite,\n  runTestSuites,\n  createAssertions\n};"],"version":3}