41eebef071164eebb4878be585d2e671
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import path from 'path';
// Detect if we're running in Jest environment
const isJestEnvironment = typeof jest !== 'undefined' || process.env.NODE_ENV === 'test';
// Export functions instead of direct variables to avoid top-level import.meta usage
export function getThisFilename() {
    if (isJestEnvironment) {
        return path.resolve(process.cwd(), 'utils/esm-globals.ts');
    }
    // Use eval to hide import.meta from Jest's static analysis
    return fileURLToPath((0, eval)('import.meta.url'));
}
export function getThisDirname() {
    return dirname(getThisFilename());
}
// Legacy exports for compatibility
export const __filename = getThisFilename();
export const __dirname = getThisDirname();
export function getModuleFilename(importMetaUrl) {
    if (isJestEnvironment) {
        // In Jest, return a reasonable fallback
        return path.resolve(process.cwd(), 'mock-module.ts');
    }
    return fileURLToPath(importMetaUrl);
}
export function getModuleDirname(importMetaUrl) {
    if (isJestEnvironment) {
        // In Jest, return current working directory as fallback
        return process.cwd();
    }
    try {
        return dirname(fileURLToPath(importMetaUrl));
    }
    catch (error) {
        // Fallback if there's any issue with the URL
        return process.cwd();
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS91dGlscy9lc20tZ2xvYmFscy50cyIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRXhCLDhDQUE4QztBQUM5QyxNQUFNLGlCQUFpQixHQUFHLE9BQU8sSUFBSSxLQUFLLFdBQVcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxNQUFNLENBQUM7QUFFekYsb0ZBQW9GO0FBQ3BGLE1BQU0sVUFBVSxlQUFlO0lBQzdCLElBQUksaUJBQWlCLEVBQUUsQ0FBQztRQUN0QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUNELDJEQUEyRDtJQUMzRCxPQUFPLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7QUFDckQsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjO0lBQzVCLE9BQU8sT0FBTyxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQUVELG1DQUFtQztBQUNuQyxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsZUFBZSxFQUFFLENBQUM7QUFDNUMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLGNBQWMsRUFBRSxDQUFDO0FBRTFDLE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxhQUFxQjtJQUNyRCxJQUFJLGlCQUFpQixFQUFFLENBQUM7UUFDdEIsd0NBQXdDO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBQ0QsT0FBTyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxhQUFxQjtJQUNwRCxJQUFJLGlCQUFpQixFQUFFLENBQUM7UUFDdEIsd0RBQXdEO1FBQ3hELE9BQU8sT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFDRCxJQUFJLENBQUM7UUFDSCxPQUFPLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLDZDQUE2QztRQUM3QyxPQUFPLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixDQUFDO0FBQ0gsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3V0aWxzL2VzbS1nbG9iYWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICd1cmwnO1xuaW1wb3J0IHsgZGlybmFtZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbi8vIERldGVjdCBpZiB3ZSdyZSBydW5uaW5nIGluIEplc3QgZW52aXJvbm1lbnRcbmNvbnN0IGlzSmVzdEVudmlyb25tZW50ID0gdHlwZW9mIGplc3QgIT09ICd1bmRlZmluZWQnIHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCc7XG5cbi8vIEV4cG9ydCBmdW5jdGlvbnMgaW5zdGVhZCBvZiBkaXJlY3QgdmFyaWFibGVzIHRvIGF2b2lkIHRvcC1sZXZlbCBpbXBvcnQubWV0YSB1c2FnZVxuZXhwb3J0IGZ1bmN0aW9uIGdldFRoaXNGaWxlbmFtZSgpIHtcbiAgaWYgKGlzSmVzdEVudmlyb25tZW50KSB7XG4gICAgcmV0dXJuIHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAndXRpbHMvZXNtLWdsb2JhbHMudHMnKTtcbiAgfVxuICAvLyBVc2UgZXZhbCB0byBoaWRlIGltcG9ydC5tZXRhIGZyb20gSmVzdCdzIHN0YXRpYyBhbmFseXNpc1xuICByZXR1cm4gZmlsZVVSTFRvUGF0aCgoMCwgZXZhbCkoJ2ltcG9ydC5tZXRhLnVybCcpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRoaXNEaXJuYW1lKCkge1xuICByZXR1cm4gZGlybmFtZShnZXRUaGlzRmlsZW5hbWUoKSk7XG59XG5cbi8vIExlZ2FjeSBleHBvcnRzIGZvciBjb21wYXRpYmlsaXR5XG5leHBvcnQgY29uc3QgX19maWxlbmFtZSA9IGdldFRoaXNGaWxlbmFtZSgpO1xuZXhwb3J0IGNvbnN0IF9fZGlybmFtZSA9IGdldFRoaXNEaXJuYW1lKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2R1bGVGaWxlbmFtZShpbXBvcnRNZXRhVXJsOiBzdHJpbmcpIHtcbiAgaWYgKGlzSmVzdEVudmlyb25tZW50KSB7XG4gICAgLy8gSW4gSmVzdCwgcmV0dXJuIGEgcmVhc29uYWJsZSBmYWxsYmFja1xuICAgIHJldHVybiBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJ21vY2stbW9kdWxlLnRzJyk7XG4gIH1cbiAgcmV0dXJuIGZpbGVVUkxUb1BhdGgoaW1wb3J0TWV0YVVybCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2R1bGVEaXJuYW1lKGltcG9ydE1ldGFVcmw6IHN0cmluZykge1xuICBpZiAoaXNKZXN0RW52aXJvbm1lbnQpIHtcbiAgICAvLyBJbiBKZXN0LCByZXR1cm4gY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBhcyBmYWxsYmFja1xuICAgIHJldHVybiBwcm9jZXNzLmN3ZCgpO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRpcm5hbWUoZmlsZVVSTFRvUGF0aChpbXBvcnRNZXRhVXJsKSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gRmFsbGJhY2sgaWYgdGhlcmUncyBhbnkgaXNzdWUgd2l0aCB0aGUgVVJMXG4gICAgcmV0dXJuIHByb2Nlc3MuY3dkKCk7XG4gIH1cbn0iXSwidmVyc2lvbiI6M30=