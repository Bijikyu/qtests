{"version":3,"names":["safeSerialize","require","util","test","expect","toBe","obj","a","JSON","stringify","undefined","circ","self","expected","inspect","depth","bad","toJSON","Error","custom"],"sources":["safeSerialize.test.js"],"sourcesContent":["const { safeSerialize } = require('../lib/logUtils'); //import serializer under test\nconst util = require('util'); //node util for expected output\n\ntest('serializes primitives and objects', () => { //verify JSON path\n  expect(safeSerialize(5)).toBe('5'); //number serialization\n  expect(safeSerialize('hi')).toBe('\"hi\"'); //string serialization\n  const obj = { a: 1 }; //simple object\n  expect(safeSerialize(obj)).toBe(JSON.stringify(obj)); //object serialization output\n});\n\ntest('handles undefined value', () => { //new test for explicit undefined handling\n  expect(safeSerialize(undefined)).toBe('undefined'); //should return string literal\n});\n\ntest('falls back to util.inspect for circular references', () => { //verify fallback\n  const circ = {}; //create base object\n  circ.self = circ; //circular reference\n  const expected = util.inspect(circ, { depth: null }); //expected inspect\n  expect(safeSerialize(circ)).toBe(expected); //uses inspect output\n});\n\ntest('returns \"[unserializable]\" on inspect failure', () => { //verify final fallback\n  const bad = {}; //object that forces errors\n  bad.toJSON = () => { throw new Error('json fail'); }; //stringify will throw\n  bad[util.inspect.custom] = () => { throw new Error('inspect fail'); }; //inspect will throw\n  expect(safeSerialize(bad)).toBe('[unserializable]'); //fallback result string\n});\n"],"mappings":"AAAA,MAAM;EAAEA;AAAc,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;AACtD,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;;AAE9BE,IAAI,CAAC,mCAAmC,EAAE,MAAM;EAAE;EAChDC,MAAM,CAACJ,aAAa,CAAC,CAAC,CAAC,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;EACpCD,MAAM,CAACJ,aAAa,CAAC,IAAI,CAAC,CAAC,CAACK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;EAC1C,MAAMC,GAAG,GAAG;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC,CAAC;EACtBH,MAAM,CAACJ,aAAa,CAACM,GAAG,CAAC,CAAC,CAACD,IAAI,CAACG,IAAI,CAACC,SAAS,CAACH,GAAG,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC;AAEFH,IAAI,CAAC,yBAAyB,EAAE,MAAM;EAAE;EACtCC,MAAM,CAACJ,aAAa,CAACU,SAAS,CAAC,CAAC,CAACL,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC;AAEFF,IAAI,CAAC,oDAAoD,EAAE,MAAM;EAAE;EACjE,MAAMQ,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;EACjBA,IAAI,CAACC,IAAI,GAAGD,IAAI,CAAC,CAAC;EAClB,MAAME,QAAQ,GAAGX,IAAI,CAACY,OAAO,CAACH,IAAI,EAAE;IAAEI,KAAK,EAAE;EAAK,CAAC,CAAC,CAAC,CAAC;EACtDX,MAAM,CAACJ,aAAa,CAACW,IAAI,CAAC,CAAC,CAACN,IAAI,CAACQ,QAAQ,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC;AAEFV,IAAI,CAAC,+CAA+C,EAAE,MAAM;EAAE;EAC5D,MAAMa,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EAChBA,GAAG,CAACC,MAAM,GAAG,MAAM;IAAE,MAAM,IAAIC,KAAK,CAAC,WAAW,CAAC;EAAE,CAAC,CAAC,CAAC;EACtDF,GAAG,CAACd,IAAI,CAACY,OAAO,CAACK,MAAM,CAAC,GAAG,MAAM;IAAE,MAAM,IAAID,KAAK,CAAC,cAAc,CAAC;EAAE,CAAC,CAAC,CAAC;EACvEd,MAAM,CAACJ,aAAa,CAACgB,GAAG,CAAC,CAAC,CAACX,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC","ignoreList":[]}