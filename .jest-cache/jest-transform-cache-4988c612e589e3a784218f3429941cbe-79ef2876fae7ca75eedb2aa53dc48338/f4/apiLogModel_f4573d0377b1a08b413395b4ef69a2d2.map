{"file":"/home/runner/workspace/utils/models/apiLogModel.ts","mappings":";AAAA;;;;;GAKG;;;AAEH,yDAAmD;AAoBnD,2CAA2C;AAC3C,MAAM,QAAQ,GAAU,EAAE,CAAC;AAgDV,4BAAQ;AA9CzB;;;;;GAKG;AACH,MAAM,MAAO,SAAQ,gCAAa;IAMhC,YAAY,OAAmB,EAAE;QAC/B,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,wCAAwC;QACxC,IAAI,CAAC,IAAI,CAAC,SAAS;YAAE,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;QACjD,IAAI,CAAC,IAAI,CAAC,KAAK;YAAE,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;IACvC,CAAC;IAED,yEAAyE;IACzE,MAAM,CAAC,aAAa;QAClB,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,4CAA4C;IAC5C,MAAM,CAAC,IAAI,CAAC,QAAqD,EAAE;QACjE,OAAO,CAAC,GAAG,CAAC,+BAA+B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACpE,MAAM,QAAQ,GAAG,KAAK,CAAC,UAAU;YAC/B,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,KAAK,KAAK,CAAC,UAAU,CAAC;YACzD,CAAC,CAAC,QAAQ,CAAC;QAEb,MAAM,KAAK,GAAkB;YAC3B,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,GAAG,EAAE,CAAC,KAAK;YACjB,IAAI,EAAE,GAAG,EAAE,CAAC,KAAK;YACjB,KAAK,EAAE,GAAG,EAAE,CAAC,KAAK;YAClB,IAAI,EAAE,GAAG,EAAE;gBACT,OAAO,CAAC,GAAG,CAAC,iCAAiC,KAAK,CAAC,IAAI,CAAC,MAAM,OAAO,CAAC,CAAC;gBACvE,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACrC,CAAC;SACF,CAAC;QACF,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAGQ,wBAAM","names":[],"sources":["/home/runner/workspace/utils/models/apiLogModel.ts"],"sourcesContent":["/**\n * API Log Model - TypeScript Implementation\n * \n * This class focuses solely on API log model functionality and behavior.\n * It extends BaseMockModel with logging-specific methods and properties.\n */\n\nimport { BaseMockModel } from './baseMockModel.js';\n\n// Type definitions\ninterface ApiLogData {\n  _id?: string;\n  level?: string;\n  message?: string;\n  timestamp?: Date;\n  allowedApi?: string;\n  [key: string]: any;\n}\n\ninterface LogQueryChain {\n  data: any[];\n  sort: () => LogQueryChain;\n  skip: () => LogQueryChain;\n  limit: () => LogQueryChain;\n  lean: () => Promise<any[]>;\n}\n\n// Legacy array for backwards compatibility\nconst mockLogs: any[] = [];\n\n/**\n * API Log Model Class\n * \n * Provides Mongoose-compatible API log model for testing scenarios.\n * Includes logging-specific validation and query methods.\n */\nclass ApiLog extends BaseMockModel {\n  public level?: string;\n  public message?: string;\n  public timestamp?: Date;\n  public allowedApi?: string;\n\n  constructor(data: ApiLogData = {}) {\n    super(data);\n    // Set default values specific to ApiLog\n    if (!this.timestamp) this.timestamp = new Date();\n    if (!this.level) this.level = 'info';\n  }\n  \n  // Override getCollection to use legacy array for backwards compatibility\n  static getCollection(): any[] {\n    return mockLogs;\n  }\n  \n  // Legacy methods for backward compatibility\n  static find(query: { allowedApi?: string; [key: string]: any } = {}): LogQueryChain {\n    console.log(`ApiLog.find is running with ${JSON.stringify(query)}`);\n    const filtered = query.allowedApi \n      ? mockLogs.filter(l => l.allowedApi === query.allowedApi) \n      : mockLogs;\n    \n    const chain: LogQueryChain = { \n      data: filtered,\n      sort: () => chain,\n      skip: () => chain,\n      limit: () => chain,\n      lean: () => {\n        console.log(`ApiLog.find.lean is returning ${chain.data.length} logs`);\n        return Promise.resolve(chain.data);\n      }\n    };\n    return chain;\n  }\n}\n\n// Export using ES module syntax\nexport { ApiLog, mockLogs };"],"version":3}