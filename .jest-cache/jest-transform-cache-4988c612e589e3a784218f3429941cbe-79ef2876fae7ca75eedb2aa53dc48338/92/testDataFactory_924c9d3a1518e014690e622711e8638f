4c590b82b2c77de2ee10ad6fabd6f2a1
/**
 * Test Data Factory for Creating Realistic Test Entities - TypeScript Implementation
 *
 * This class focuses solely on test data creation and management.
 * It eliminates duplicate test data creation across test files.
 */
import { logStart, logReturn } from '../../lib/logUtils.js';
/**
 * Test Data Factory for Creating Realistic Test Entities
 *
 * This class eliminates duplicate test data creation across test files
 * by providing standardized factory methods for common test entities.
 *
 * PARALLEL TEST SAFETY:
 * - Uses process.hrtime.bigint() for unique IDs to avoid race conditions
 * - No shared static state between parallel test executions
 * - Each test gets unique data that won't conflict with other tests
 */
class TestDataFactory {
    /**
     * Gets next unique ID for test data (parallel-safe when needed)
     */
    static nextId() {
        // Only use complex IDs in very specific parallel execution scenarios
        const isJestParallel = process.env.JEST_WORKER_ID && process.env.JEST_WORKER_ID !== '1';
        const isExplicitParallel = process.env.QTESTS_PARALLEL_MODE === 'true';
        if (!isJestParallel && !isExplicitParallel) {
            // Normal testing - use simple counter for expected format
            return ++this.counter;
        }
        // Parallel testing - use complex unique identifier
        const hrTime = process.hrtime.bigint();
        const random = Math.random().toString(36).substr(2, 9);
        return `${hrTime}-${random}`;
    }
    /**
     * Creates a test user with realistic properties
     */
    static createUser(overrides = {}) {
        logStart('TestDataFactory.createUser', overrides);
        const id = this.nextId();
        const user = {
            id: `user-${id}`,
            username: `testuser${id}`,
            email: `test${id}@example.com`,
            password: `hashedpassword${id}`,
            firstName: 'Test',
            lastName: `User${id}`,
            isActive: true,
            createdAt: new Date(),
            updatedAt: new Date(),
            ...overrides
        };
        logReturn('TestDataFactory.createUser', user);
        return user;
    }
    /**
     * Creates a test API key with realistic properties
     */
    static createApiKey(overrides = {}) {
        logStart('TestDataFactory.createApiKey', overrides);
        const id = this.nextId();
        const apiKey = {
            id: `key-${id}`,
            key: `test-api-key-${id}-${Math.random().toString(36).substr(2, 9)}`,
            name: `Test API Key ${id}`,
            userId: `user-${id}`,
            isActive: true,
            permissions: ['read', 'write'],
            createdAt: new Date(),
            expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days
            ...overrides
        };
        logReturn('TestDataFactory.createApiKey', apiKey);
        return apiKey;
    }
    /**
     * Creates a test log entry with realistic properties
     */
    static createLogEntry(overrides = {}) {
        logStart('TestDataFactory.createLogEntry', overrides);
        const id = this.nextId();
        const logEntry = {
            id: `log-${id}`,
            level: 'info',
            message: `Test log message ${id}`,
            timestamp: new Date(),
            userId: `user-${id}`,
            source: 'test-system',
            ...overrides
        };
        logReturn('TestDataFactory.createLogEntry', logEntry);
        return logEntry;
    }
    /**
     * Creates multiple test users in batch
     */
    static createUsers(count, baseOverrides = {}) {
        logStart('TestDataFactory.createUsers', count, baseOverrides);
        const users = [];
        for (let i = 0; i < count; i++) {
            const overrides = { ...baseOverrides };
            if (overrides.username) {
                overrides.username = `${overrides.username}${i + 1}`;
            }
            if (overrides.email) {
                overrides.email = `test${i + 1}@example.com`;
            }
            users.push(this.createUser(overrides));
        }
        logReturn('TestDataFactory.createUsers', users);
        return users;
    }
    /**
     * Creates a complete test dataset with related entities
     */
    static createTestDataset() {
        logStart('TestDataFactory.createTestDataset');
        // Create 3 test users
        const users = this.createUsers(3);
        // Create API keys for each user
        const apiKeys = users.map(user => this.createApiKey({ userId: user.id }));
        // Create log entries for each user
        const logs = users.flatMap(user => [
            this.createLogEntry({ userId: user.id, level: 'info', message: `User ${user.username} logged in` }),
            this.createLogEntry({ userId: user.id, level: 'debug', message: `User ${user.username} performed action` })
        ]);
        const dataset = { users, apiKeys, logs };
        logReturn('TestDataFactory.createTestDataset', dataset);
        return dataset;
    }
    /**
     * Creates test HTTP request data
     */
    static createHttpRequest(overrides = {}) {
        logStart('TestDataFactory.createHttpRequest', overrides);
        const id = this.nextId();
        const request = {
            method: 'GET',
            url: `/api/test/${id}`,
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'qtests-test-agent'
            },
            body: null,
            timestamp: new Date(),
            ...overrides
        };
        logReturn('TestDataFactory.createHttpRequest', request);
        return request;
    }
    /**
     * Creates test HTTP response data
     */
    static createHttpResponse(overrides = {}) {
        logStart('TestDataFactory.createHttpResponse', overrides);
        const response = {
            status: 200,
            statusText: 'OK',
            headers: {
                'Content-Type': 'application/json',
                'X-Test-Response': 'true'
            },
            data: { success: true, message: 'Test response' },
            timestamp: new Date(),
            ...overrides
        };
        logReturn('TestDataFactory.createHttpResponse', response);
        return response;
    }
    /**
     * Resets the counter for predictable test IDs
     */
    static resetCounter() {
        this.counter = 0;
    }
}
TestDataFactory.counter = 0;
// Export TestDataFactory using ES module syntax
export { TestDataFactory };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS91dGlscy90ZXN0aW5nL3Rlc3REYXRhRmFjdG9yeS50cyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7R0FLRztBQUVILE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFzQzVEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxNQUFNLGVBQWU7SUFHbkI7O09BRUc7SUFDSCxNQUFNLENBQUMsTUFBTTtRQUNYLHFFQUFxRTtRQUNyRSxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsS0FBSyxHQUFHLENBQUM7UUFDeEYsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixLQUFLLE1BQU0sQ0FBQztRQUV2RSxJQUFJLENBQUMsY0FBYyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztZQUMzQywwREFBMEQ7WUFDMUQsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDeEIsQ0FBQztRQUVELG1EQUFtRDtRQUNuRCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3ZDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2RCxPQUFPLEdBQUcsTUFBTSxJQUFJLE1BQU0sRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBMkIsRUFBRTtRQUM3QyxRQUFRLENBQUMsNEJBQTRCLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbEQsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3pCLE1BQU0sSUFBSSxHQUFTO1lBQ2pCLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFB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U0FBUyxDQUFDLG9DQUFvQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzFELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxZQUFZO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLENBQUM7O0FBeExjLHVCQUFPLEdBQUcsQ0FBQyxDQUFDO0FBMkw3QixnREFBZ0Q7QUFDaEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvdXRpbHMvdGVzdGluZy90ZXN0RGF0YUZhY3RvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUZXN0IERhdGEgRmFjdG9yeSBmb3IgQ3JlYXRpbmcgUmVhbGlzdGljIFRlc3QgRW50aXRpZXMgLSBUeXBlU2NyaXB0IEltcGxlbWVudGF0aW9uXG4gKiBcbiAqIFRoaXMgY2xhc3MgZm9jdXNlcyBzb2xlbHkgb24gdGVzdCBkYXRhIGNyZWF0aW9uIGFuZCBtYW5hZ2VtZW50LlxuICogSXQgZWxpbWluYXRlcyBkdXBsaWNhdGUgdGVzdCBkYXRhIGNyZWF0aW9uIGFjcm9zcyB0ZXN0IGZpbGVzLlxuICovXG5cbmltcG9ydCB7IGxvZ1N0YXJ0LCBsb2dSZXR1cm4gfSBmcm9tICcuLi8uLi9saWIvbG9nVXRpbHMuanMnO1xuXG4vLyBUeXBlIGRlZmluaXRpb25zXG5pbnRlcmZhY2UgVXNlciB7XG4gIGlkOiBzdHJpbmc7XG4gIHVzZXJuYW1lOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIHBhc3N3b3JkOiBzdHJpbmc7XG4gIGZpcnN0TmFtZTogc3RyaW5nO1xuICBsYXN0TmFtZTogc3RyaW5nO1xuICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgY3JlYXRlZEF0OiBEYXRlO1xuICB1cGRhdGVkQXQ6IERhdGU7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuaW50ZXJmYWNlIEFwaUtleSB7XG4gIGlkOiBzdHJpbmc7XG4gIGtleTogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIHVzZXJJZDogc3RyaW5nO1xuICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgcGVybWlzc2lvbnM6IHN0cmluZ1tdO1xuICBjcmVhdGVkQXQ6IERhdGU7XG4gIGV4cGlyZXNBdDogRGF0ZTtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5pbnRlcmZhY2UgTG9nRW50cnkge1xuICBpZDogc3RyaW5nO1xuICBsZXZlbDogc3RyaW5nO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIHRpbWVzdGFtcDogRGF0ZTtcbiAgdXNlcklkPzogc3RyaW5nO1xuICBzb3VyY2U6IHN0cmluZztcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG4vKipcbiAqIFRlc3QgRGF0YSBGYWN0b3J5IGZvciBDcmVhdGluZyBSZWFsaXN0aWMgVGVzdCBFbnRpdGllc1xuICogXG4gKiBUaGlzIGNsYXNzIGVsaW1pbmF0ZXMgZHVwbGljYXRlIHRlc3QgZGF0YSBjcmVhdGlvbiBhY3Jvc3MgdGVzdCBmaWxlc1xuICogYnkgcHJvdmlkaW5nIHN0YW5kYXJkaXplZCBmYWN0b3J5IG1ldGhvZHMgZm9yIGNvbW1vbiB0ZXN0IGVudGl0aWVzLlxuICogXG4gKiBQQVJBTExFTCBURVNUIFNBRkVUWTpcbiAqIC0gVXNlcyBwcm9jZXNzLmhydGltZS5iaWdpbnQoKSBmb3IgdW5pcXVlIElEcyB0byBhdm9pZCByYWNlIGNvbmRpdGlvbnNcbiAqIC0gTm8gc2hhcmVkIHN0YXRpYyBzdGF0ZSBiZXR3ZWVuIHBhcmFsbGVsIHRlc3QgZXhlY3V0aW9uc1xuICogLSBFYWNoIHRlc3QgZ2V0cyB1bmlxdWUgZGF0YSB0aGF0IHdvbid0IGNvbmZsaWN0IHdpdGggb3RoZXIgdGVzdHNcbiAqL1xuY2xhc3MgVGVzdERhdGFGYWN0b3J5IHtcbiAgcHJpdmF0ZSBzdGF0aWMgY291bnRlciA9IDA7XG5cbiAgLyoqXG4gICAqIEdldHMgbmV4dCB1bmlxdWUgSUQgZm9yIHRlc3QgZGF0YSAocGFyYWxsZWwtc2FmZSB3aGVuIG5lZWRlZClcbiAgICovXG4gIHN0YXRpYyBuZXh0SWQoKTogc3RyaW5nIHwgbnVtYmVyIHtcbiAgICAvLyBPbmx5IHVzZSBjb21wbGV4IElEcyBpbiB2ZXJ5IHNwZWNpZmljIHBhcmFsbGVsIGV4ZWN1dGlvbiBzY2VuYXJpb3NcbiAgICBjb25zdCBpc0plc3RQYXJhbGxlbCA9IHByb2Nlc3MuZW52LkpFU1RfV09SS0VSX0lEICYmIHByb2Nlc3MuZW52LkpFU1RfV09SS0VSX0lEICE9PSAnMSc7XG4gICAgY29uc3QgaXNFeHBsaWNpdFBhcmFsbGVsID0gcHJvY2Vzcy5lbnYuUVRFU1RTX1BBUkFMTEVMX01PREUgPT09ICd0cnVlJztcbiAgICBcbiAgICBpZiAoIWlzSmVzdFBhcmFsbGVsICYmICFpc0V4cGxpY2l0UGFyYWxsZWwpIHtcbiAgICAgIC8vIE5vcm1hbCB0ZXN0aW5nIC0gdXNlIHNpbXBsZSBjb3VudGVyIGZvciBleHBlY3RlZCBmb3JtYXRcbiAgICAgIHJldHVybiArK3RoaXMuY291bnRlcjtcbiAgICB9XG4gICAgXG4gICAgLy8gUGFyYWxsZWwgdGVzdGluZyAtIHVzZSBjb21wbGV4IHVuaXF1ZSBpZGVudGlmaWVyXG4gICAgY29uc3QgaHJUaW1lID0gcHJvY2Vzcy5ocnRpbWUuYmlnaW50KCk7XG4gICAgY29uc3QgcmFuZG9tID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpO1xuICAgIHJldHVybiBgJHtoclRpbWV9LSR7cmFuZG9tfWA7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHRlc3QgdXNlciB3aXRoIHJlYWxpc3RpYyBwcm9wZXJ0aWVzXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlVXNlcihvdmVycmlkZXM6IFBhcnRpYWw8VXNlcj4gPSB7fSk6IFVzZXIge1xuICAgIGxvZ1N0YXJ0KCdUZXN0RGF0YUZhY3RvcnkuY3JlYXRlVXNlcicsIG92ZXJyaWRlcyk7XG4gICAgXG4gICAgY29uc3QgaWQgPSB0aGlzLm5leHRJZCgpO1xuICAgIGNvbnN0IHVzZXI6IFVzZXIgPSB7XG4gICAgICBpZDogYHVzZXItJHtpZH1gLFxuICAgICAgdXNlcm5hbWU6IGB0ZXN0dXNlciR7aWR9YCxcbiAgICAgIGVtYWlsOiBgdGVzdCR7aWR9QGV4YW1wbGUuY29tYCxcbiAgICAgIHBhc3N3b3JkOiBgaGFzaGVkcGFzc3dvcmQke2lkfWAsXG4gICAgICBmaXJzdE5hbWU6ICdUZXN0JyxcbiAgICAgIGxhc3ROYW1lOiBgVXNlciR7aWR9YCxcbiAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgLi4ub3ZlcnJpZGVzXG4gICAgfTtcbiAgICBcbiAgICBsb2dSZXR1cm4oJ1Rlc3REYXRhRmFjdG9yeS5jcmVhdGVVc2VyJywgdXNlcik7XG4gICAgcmV0dXJuIHVzZXI7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHRlc3QgQVBJIGtleSB3aXRoIHJlYWxpc3RpYyBwcm9wZXJ0aWVzXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlQXBpS2V5KG92ZXJyaWRlczogUGFydGlhbDxBcGlLZXk+ID0ge30pOiBBcGlLZXkge1xuICAgIGxvZ1N0YXJ0KCdUZXN0RGF0YUZhY3RvcnkuY3JlYXRlQXBpS2V5Jywgb3ZlcnJpZGVzKTtcbiAgICBcbiAgICBjb25zdCBpZCA9IHRoaXMubmV4dElkKCk7XG4gICAgY29uc3QgYXBpS2V5OiBBcGlLZXkgPSB7XG4gICAgICBpZDogYGtleS0ke2lkfWAsXG4gICAgICBrZXk6IGB0ZXN0LWFwaS1rZXktJHtpZH0tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9YCxcbiAgICAgIG5hbWU6IGBUZXN0IEFQSSBLZXkgJHtpZH1gLFxuICAgICAgdXNlcklkOiBgdXNlci0ke2lkfWAsXG4gICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgIHBlcm1pc3Npb25zOiBbJ3JlYWQnLCAnd3JpdGUnXSxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIGV4cGlyZXNBdDogbmV3IERhdGUoRGF0ZS5ub3coKSArIDMwICogMjQgKiA2MCAqIDYwICogMTAwMCksIC8vIDMwIGRheXNcbiAgICAgIC4uLm92ZXJyaWRlc1xuICAgIH07XG4gICAgXG4gICAgbG9nUmV0dXJuKCdUZXN0RGF0YUZhY3RvcnkuY3JlYXRlQXBpS2V5JywgYXBpS2V5KTtcbiAgICByZXR1cm4gYXBpS2V5O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB0ZXN0IGxvZyBlbnRyeSB3aXRoIHJlYWxpc3RpYyBwcm9wZXJ0aWVzXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlTG9nRW50cnkob3ZlcnJpZGVzOiBQYXJ0aWFsPExvZ0VudHJ5PiA9IHt9KTogTG9nRW50cnkge1xuICAgIGxvZ1N0YXJ0KCdUZXN0RGF0YUZhY3RvcnkuY3JlYXRlTG9nRW50cnknLCBvdmVycmlkZXMpO1xuICAgIFxuICAgIGNvbnN0IGlkID0gdGhpcy5uZXh0SWQoKTtcbiAgICBjb25zdCBsb2dFbnRyeTogTG9nRW50cnkgPSB7XG4gICAgICBpZDogYGxvZy0ke2lkfWAsXG4gICAgICBsZXZlbDogJ2luZm8nLFxuICAgICAgbWVzc2FnZTogYFRlc3QgbG9nIG1lc3NhZ2UgJHtpZH1gLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgdXNlcklkOiBgdXNlci0ke2lkfWAsXG4gICAgICBzb3VyY2U6ICd0ZXN0LXN5c3RlbScsXG4gICAgICAuLi5vdmVycmlkZXNcbiAgICB9O1xuICAgIFxuICAgIGxvZ1JldHVybignVGVzdERhdGFGYWN0b3J5LmNyZWF0ZUxvZ0VudHJ5JywgbG9nRW50cnkpO1xuICAgIHJldHVybiBsb2dFbnRyeTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG11bHRpcGxlIHRlc3QgdXNlcnMgaW4gYmF0Y2hcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVVc2Vycyhjb3VudDogbnVtYmVyLCBiYXNlT3ZlcnJpZGVzOiBQYXJ0aWFsPFVzZXI+ID0ge30pOiBVc2VyW10ge1xuICAgIGxvZ1N0YXJ0KCdUZXN0RGF0YUZhY3RvcnkuY3JlYXRlVXNlcnMnLCBjb3VudCwgYmFzZU92ZXJyaWRlcyk7XG4gICAgXG4gICAgY29uc3QgdXNlcnM6IFVzZXJbXSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgY29uc3Qgb3ZlcnJpZGVzID0geyAuLi5iYXNlT3ZlcnJpZGVzIH07XG4gICAgICBpZiAob3ZlcnJpZGVzLnVzZXJuYW1lKSB7XG4gICAgICAgIG92ZXJyaWRlcy51c2VybmFtZSA9IGAke292ZXJyaWRlcy51c2VybmFtZX0ke2kgKyAxfWA7XG4gICAgICB9XG4gICAgICBpZiAob3ZlcnJpZGVzLmVtYWlsKSB7XG4gICAgICAgIG92ZXJyaWRlcy5lbWFpbCA9IGB0ZXN0JHtpICsgMX1AZXhhbXBsZS5jb21gO1xuICAgICAgfVxuICAgICAgdXNlcnMucHVzaCh0aGlzLmNyZWF0ZVVzZXIob3ZlcnJpZGVzKSk7XG4gICAgfVxuICAgIFxuICAgIGxvZ1JldHVybignVGVzdERhdGFGYWN0b3J5LmNyZWF0ZVVzZXJzJywgdXNlcnMpO1xuICAgIHJldHVybiB1c2VycztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY29tcGxldGUgdGVzdCBkYXRhc2V0IHdpdGggcmVsYXRlZCBlbnRpdGllc1xuICAgKi9cbiAgc3RhdGljIGNyZWF0ZVRlc3REYXRhc2V0KCk6IHsgdXNlcnM6IFVzZXJbXTsgYXBpS2V5czogQXBpS2V5W107IGxvZ3M6IExvZ0VudHJ5W10gfSB7XG4gICAgbG9nU3RhcnQoJ1Rlc3REYXRhRmFjdG9yeS5jcmVhdGVUZXN0RGF0YXNldCcpO1xuICAgIFxuICAgIC8vIENyZWF0ZSAzIHRlc3QgdXNlcnNcbiAgICBjb25zdCB1c2VycyA9IHRoaXMuY3JlYXRlVXNlcnMoMyk7XG4gICAgXG4gICAgLy8gQ3JlYXRlIEFQSSBrZXlzIGZvciBlYWNoIHVzZXJcbiAgICBjb25zdCBhcGlLZXlzID0gdXNlcnMubWFwKHVzZXIgPT4gdGhpcy5jcmVhdGVBcGlLZXkoeyB1c2VySWQ6IHVzZXIuaWQgfSkpO1xuICAgIFxuICAgIC8vIENyZWF0ZSBsb2cgZW50cmllcyBmb3IgZWFjaCB1c2VyXG4gICAgY29uc3QgbG9ncyA9IHVzZXJzLmZsYXRNYXAodXNlciA9PiBbXG4gICAgICB0aGlzLmNyZWF0ZUxvZ0VudHJ5KHsgdXNlcklkOiB1c2VyLmlkLCBsZXZlbDogJ2luZm8nLCBtZXNzYWdlOiBgVXNlciAke3VzZXIudXNlcm5hbWV9IGxvZ2dlZCBpbmAgfSksXG4gICAgICB0aGlzLmNyZWF0ZUxvZ0VudHJ5KHsgdXNlcklkOiB1c2VyLmlkLCBsZXZlbDogJ2RlYnVnJywgbWVzc2FnZTogYFVzZXIgJHt1c2VyLnVzZXJuYW1lfSBwZXJmb3JtZWQgYWN0aW9uYCB9KVxuICAgIF0pO1xuICAgIFxuICAgIGNvbnN0IGRhdGFzZXQgPSB7IHVzZXJzLCBhcGlLZXlzLCBsb2dzIH07XG4gICAgbG9nUmV0dXJuKCdUZXN0RGF0YUZhY3RvcnkuY3JlYXRlVGVzdERhdGFzZXQnLCBkYXRhc2V0KTtcbiAgICByZXR1cm4gZGF0YXNldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRlc3QgSFRUUCByZXF1ZXN0IGRhdGFcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVIdHRwUmVxdWVzdChvdmVycmlkZXM6IGFueSA9IHt9KTogYW55IHtcbiAgICBsb2dTdGFydCgnVGVzdERhdGFGYWN0b3J5LmNyZWF0ZUh0dHBSZXF1ZXN0Jywgb3ZlcnJpZGVzKTtcbiAgICBcbiAgICBjb25zdCBpZCA9IHRoaXMubmV4dElkKCk7XG4gICAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICB1cmw6IGAvYXBpL3Rlc3QvJHtpZH1gLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnVXNlci1BZ2VudCc6ICdxdGVzdHMtdGVzdC1hZ2VudCdcbiAgICAgIH0sXG4gICAgICBib2R5OiBudWxsLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgLi4ub3ZlcnJpZGVzXG4gICAgfTtcbiAgICBcbiAgICBsb2dSZXR1cm4oJ1Rlc3REYXRhRmFjdG9yeS5jcmVhdGVIdHRwUmVxdWVzdCcsIHJlcXVlc3QpO1xuICAgIHJldHVybiByZXF1ZXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGVzdCBIVFRQIHJlc3BvbnNlIGRhdGFcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVIdHRwUmVzcG9uc2Uob3ZlcnJpZGVzOiBhbnkgPSB7fSk6IGFueSB7XG4gICAgbG9nU3RhcnQoJ1Rlc3REYXRhRmFjdG9yeS5jcmVhdGVIdHRwUmVzcG9uc2UnLCBvdmVycmlkZXMpO1xuICAgIFxuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICBzdGF0dXNUZXh0OiAnT0snLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnWC1UZXN0LVJlc3BvbnNlJzogJ3RydWUnXG4gICAgICB9LFxuICAgICAgZGF0YTogeyBzdWNjZXNzOiB0cnVlLCBtZXNzYWdlOiAnVGVzdCByZXNwb25zZScgfSxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgIC4uLm92ZXJyaWRlc1xuICAgIH07XG4gICAgXG4gICAgbG9nUmV0dXJuKCdUZXN0RGF0YUZhY3RvcnkuY3JlYXRlSHR0cFJlc3BvbnNlJywgcmVzcG9uc2UpO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIGNvdW50ZXIgZm9yIHByZWRpY3RhYmxlIHRlc3QgSURzXG4gICAqL1xuICBzdGF0aWMgcmVzZXRDb3VudGVyKCk6IHZvaWQge1xuICAgIHRoaXMuY291bnRlciA9IDA7XG4gIH1cbn1cblxuLy8gRXhwb3J0IFRlc3REYXRhRmFjdG9yeSB1c2luZyBFUyBtb2R1bGUgc3ludGF4XG5leHBvcnQgeyBUZXN0RGF0YUZhY3RvcnkgfTsiXSwidmVyc2lvbiI6M30=