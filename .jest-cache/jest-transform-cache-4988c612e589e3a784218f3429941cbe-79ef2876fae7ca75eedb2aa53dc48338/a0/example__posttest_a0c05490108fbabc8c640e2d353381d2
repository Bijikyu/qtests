66742cccfea3510b229cc26575adbaa0
// Auto-generated API test for POST /api/users - TypeScript ES module
// PARALLEL-SAFE DESIGN: This test avoids race conditions
// Unique API test session for parallel execution safety
const apiTestSession = `${process.hrtime.bigint()}-${Math.random().toString(36).substr(2, 9)}`;
const uniqueRoute = '/api/users' + ('/api/users'.includes('?') ? '&' : '?') + 'testSession=' + apiTestSession;
import * as httpTest from '../../utils/httpTest.js';
describe(`POST /api/users [API-${apiTestSession}]`, () => {
    // Test data factory for unique request/response data
    const createUniqueTestData = () => ({
        sessionId: apiTestSession,
        requestId: `req-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`,
        timestamp: new Date().toISOString(),
    });
    test('should succeed with unique test data', async () => {
        const testData = createUniqueTestData();
        const app = httpTest.createMockApp();
        app.post(uniqueRoute, (req, res) => {
            res.statusCode = 200;
            res.setHeader('content-type', 'application/json');
            res.end(JSON.stringify({
                success: true,
                testSession: apiTestSession,
                requestId: testData.requestId
            }));
        });
        const res = await httpTest.supertest(app)
            .post(uniqueRoute)
            .send(testData)
            .expect(200);
        expect(res.body.success).toBe(true);
        expect(res.body.testSession).toBe(apiTestSession);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9nZW5lcmF0ZWQtdGVzdHMvaW50ZWdyYXRpb24vZXhhbXBsZV9fcG9zdC50ZXN0LnRzIiwibWFwcGluZ3MiOiJBQUFBLHFFQUFxRTtBQUNyRSx5REFBeUQ7QUFFekQsd0RBQXdEO0FBQ3hELE1BQU0sY0FBYyxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUMvRixNQUFNLFdBQVcsR0FBRyxZQUFZLEdBQUcsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLGNBQWMsR0FBRyxjQUFjLENBQUM7QUFFOUcsT0FBTyxLQUFLLFFBQVEsTUFBTSx5QkFBeUIsQ0FBQztBQUVwRCxRQUFRLENBQUMsd0JBQXdCLGNBQWMsR0FBRyxFQUFFLEdBQUcsRUFBRTtJQUN2RCxxREFBcUQ7SUFDckQsTUFBTSxvQkFBb0IsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ2xDLFNBQVMsRUFBRSxjQUFjO1FBQ3pCLFNBQVMsRUFBRSxPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7UUFDekUsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO0tBQ3BDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN0RCxNQUFNLFFBQVEsR0FBRyxvQkFBb0IsRUFBRSxDQUFDO1FBQ3hDLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUVyQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNqQyxHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztZQUNyQixHQUFHLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1lBQ2xELEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDckIsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsV0FBVyxFQUFFLGNBQWM7Z0JBQzNCLFNBQVMsRUFBRSxRQUFRLENBQUMsU0FBUzthQUM5QixDQUFDLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxHQUFHLEdBQUcsTUFBTSxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQzthQUN0QyxJQUFJLENBQUMsV0FBVyxDQUFDO2FBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDZCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFZixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9nZW5lcmF0ZWQtdGVzdHMvaW50ZWdyYXRpb24vZXhhbXBsZV9fcG9zdC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEF1dG8tZ2VuZXJhdGVkIEFQSSB0ZXN0IGZvciBQT1NUIC9hcGkvdXNlcnMgLSBUeXBlU2NyaXB0IEVTIG1vZHVsZVxuLy8gUEFSQUxMRUwtU0FGRSBERVNJR046IFRoaXMgdGVzdCBhdm9pZHMgcmFjZSBjb25kaXRpb25zXG5cbi8vIFVuaXF1ZSBBUEkgdGVzdCBzZXNzaW9uIGZvciBwYXJhbGxlbCBleGVjdXRpb24gc2FmZXR5XG5jb25zdCBhcGlUZXN0U2Vzc2lvbiA9IGAke3Byb2Nlc3MuaHJ0aW1lLmJpZ2ludCgpfS0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gO1xuY29uc3QgdW5pcXVlUm91dGUgPSAnL2FwaS91c2VycycgKyAoJy9hcGkvdXNlcnMnLmluY2x1ZGVzKCc/JykgPyAnJicgOiAnPycpICsgJ3Rlc3RTZXNzaW9uPScgKyBhcGlUZXN0U2Vzc2lvbjtcblxuaW1wb3J0ICogYXMgaHR0cFRlc3QgZnJvbSAnLi4vLi4vdXRpbHMvaHR0cFRlc3QuanMnO1xuXG5kZXNjcmliZShgUE9TVCAvYXBpL3VzZXJzIFtBUEktJHthcGlUZXN0U2Vzc2lvbn1dYCwgKCkgPT4ge1xuICAvLyBUZXN0IGRhdGEgZmFjdG9yeSBmb3IgdW5pcXVlIHJlcXVlc3QvcmVzcG9uc2UgZGF0YVxuICBjb25zdCBjcmVhdGVVbmlxdWVUZXN0RGF0YSA9ICgpID0+ICh7XG4gICAgc2Vzc2lvbklkOiBhcGlUZXN0U2Vzc2lvbixcbiAgICByZXF1ZXN0SWQ6IGByZXEtJHtEYXRlLm5vdygpfS0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA2KX1gLFxuICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgc3VjY2VlZCB3aXRoIHVuaXF1ZSB0ZXN0IGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdGVzdERhdGEgPSBjcmVhdGVVbmlxdWVUZXN0RGF0YSgpO1xuICAgIGNvbnN0IGFwcCA9IGh0dHBUZXN0LmNyZWF0ZU1vY2tBcHAoKTtcbiAgICBcbiAgICBhcHAucG9zdCh1bmlxdWVSb3V0ZSwgKHJlcSwgcmVzKSA9PiB7XG4gICAgICByZXMuc3RhdHVzQ29kZSA9IDIwMDtcbiAgICAgIHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHsgXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsIFxuICAgICAgICB0ZXN0U2Vzc2lvbjogYXBpVGVzdFNlc3Npb24sXG4gICAgICAgIHJlcXVlc3RJZDogdGVzdERhdGEucmVxdWVzdElkXG4gICAgICB9KSk7XG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgcmVzID0gYXdhaXQgaHR0cFRlc3Quc3VwZXJ0ZXN0KGFwcClcbiAgICAgIC5wb3N0KHVuaXF1ZVJvdXRlKVxuICAgICAgLnNlbmQodGVzdERhdGEpXG4gICAgICAuZXhwZWN0KDIwMCk7XG4gICAgXG4gICAgZXhwZWN0KHJlcy5ib2R5LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KHJlcy5ib2R5LnRlc3RTZXNzaW9uKS50b0JlKGFwaVRlc3RTZXNzaW9uKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==