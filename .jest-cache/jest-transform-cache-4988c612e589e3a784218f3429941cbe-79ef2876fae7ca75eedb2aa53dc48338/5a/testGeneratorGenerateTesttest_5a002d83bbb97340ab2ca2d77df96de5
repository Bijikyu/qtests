2a5928838720fce853221a3c814590d5
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Generated unit test for testGenerator.ts - TypeScript ES module
// ðŸš©AI: ENTRY_POINT_FOR_GENERATED_TEST_IMPORTS
require("qtests/setup");
const testModule = __importStar(require("./testGenerator.js"));
const testGenerator_js_1 = require("./testGenerator.js");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
// External dependencies automatically stubbed by qtests/setup:
// - fs: stubbed by qtests (no jest.mock needed)
describe('TestGenerator', () => {
    let tempDir;
    let generator;
    beforeEach(() => {
        // Create temporary directory for tests
        tempDir = path_1.default.join(process.cwd(), 'test-temp');
        if (!fs_1.default.existsSync(tempDir)) {
            fs_1.default.mkdirSync(tempDir, { recursive: true });
        }
        generator = new testGenerator_js_1.TestGenerator({
            SRC_DIR: tempDir,
            TEST_DIR: path_1.default.join(tempDir, 'generated-tests')
        });
    });
    afterEach(() => {
        // Clean up temporary files
        if (fs_1.default.existsSync(tempDir)) {
            fs_1.default.rmSync(tempDir, { recursive: true, force: true });
        }
    });
    it('should create generator with default config', () => {
        const gen = new testGenerator_js_1.TestGenerator();
        expect(gen).toBeDefined();
        expect(gen).toBeInstanceOf(testGenerator_js_1.TestGenerator);
    });
    it('should generate unit test with .GenerateTest.test.ts naming', () => {
        // Create a test source file
        const sourceFile = path_1.default.join(tempDir, 'example.ts');
        fs_1.default.writeFileSync(sourceFile, 'export function testFunc() { return "hello"; }');
        // Analyze the file
        generator.analyze(sourceFile);
        const results = generator.getResults();
        expect(results).toHaveLength(1);
        expect(results[0].type).toBe('unit');
        expect(results[0].file).toMatch(/\.GenerateTest\.test\.ts$/);
        // Verify no placeholder assertions were generated
        const generatedPath = path_1.default.join(tempDir, 'example.GenerateTest.test.ts');
        const generatedContent = fs_1.default.readFileSync(generatedPath, 'utf8');
        expect(generatedContent).not.toMatch(/expectedOutput|TODO:/);
    });
    it('should include qtests/setup import in generated tests', () => {
        // Create a test source file
        const sourceFile = path_1.default.join(tempDir, 'example.ts');
        fs_1.default.writeFileSync(sourceFile, 'export function testFunc() { return "hello"; }');
        // Analyze the file
        generator.analyze(sourceFile);
        // Check that the generated test includes qtests/setup
        const testFile = path_1.default.join(tempDir, 'example.GenerateTest.test.ts');
        expect(fs_1.default.existsSync(testFile)).toBe(true);
        const testContent = fs_1.default.readFileSync(testFile, 'utf8');
        expect(testContent).toMatch(/import 'qtests\/setup';/);
    });
    it('should handle dry-run mode without writing files', () => {
        // Create a test source file
        const sourceFile = path_1.default.join(tempDir, 'example.ts');
        fs_1.default.writeFileSync(sourceFile, 'export function testFunc() { return "hello"; }');
        // Analyze in dry-run mode
        generator.analyze(sourceFile, true);
        // Check that no test file was actually written
        const testFile = path_1.default.join(tempDir, 'example.GenerateTest.test.ts');
        expect(fs_1.default.existsSync(testFile)).toBe(false);
        // But results should still be tracked
        const results = generator.getResults();
        expect(results).toHaveLength(1);
    });
    it('should detect API routes and generate integration tests', () => {
        // Create a file with API routes
        const sourceFile = path_1.default.join(tempDir, 'routes.ts');
        fs_1.default.writeFileSync(sourceFile, `
      import express from 'express';
      const router = express.Router();
      router.get('/api/users', (req, res) => res.json([]));
      export default router;
    `);
        // Analyze the file
        generator.analyze(sourceFile);
        const results = generator.getResults();
        const apiTests = results.filter(r => r.type === 'api');
        expect(apiTests).toHaveLength(1);
        expect(apiTests[0].file).toMatch(/\.GenerateTest__get\.test\.ts$/);
        // Validate that the generated API test imports httpTest without extension
        const apiTestPath = path_1.default.join(tempDir, 'generated-tests', path_1.default.relative(process.cwd(), sourceFile)
            .replace(/\.[tj]sx?$/, '.GenerateTest__get.test.ts')
            .replace(/[\\/]/g, '__'));
        const apiTestContent = fs_1.default.readFileSync(apiTestPath, 'utf8');
        expect(apiTestContent).toMatch(/from '\.\.\/utils\/httpTest';/);
        // Local httpTest utils are scaffolded by the generator in non-dry runs.
        // Existence is environment-dependent in this test sandbox, so we only assert import shape.
    });
    it('should skip generating tests inside __mocks__ directory', async () => {
        const srcFile = path_1.default.join(tempDir, 'real.ts');
        const mockFile = path_1.default.join(tempDir, '__mocks__', 'mocked.ts');
        fs_1.default.mkdirSync(path_1.default.dirname(mockFile), { recursive: true });
        fs_1.default.writeFileSync(srcFile, 'export const real = 1;');
        fs_1.default.writeFileSync(mockFile, 'export const fake = 2;');
        await generator.generateTestFiles(true); // dry-run scan of tempDir
        // Only the real file should be considered for generation in results
        // After dry run, analyze explicitly to populate results for assertions
        await generator.analyze(srcFile, true);
        const results = generator.getResults();
        // Ensure no tests were planned for the __mocks__ file
        const anyMock = results.some(r => r.file.includes('__mocks__'));
        expect(anyMock).toBe(false);
    });
    it('optionally wraps React tests with MemoryRouter when flag is set and router is detected', async () => {
        // Create a React component that uses react-router-dom
        const reactFile = path_1.default.join(tempDir, 'MyComponent.tsx');
        fs_1.default.writeFileSync(reactFile, `
      import React from 'react';
      import { Link } from 'react-router-dom';
      export function MyComponent(){
        return React.createElement('div', {}, React.createElement('a', {href: '#'}, 'ok'));
      }
    `);
        const genWithRouter = new testGenerator_js_1.TestGenerator({ SRC_DIR: tempDir, withRouter: true });
        await genWithRouter.analyze(reactFile);
        const genTestPath = path_1.default.join(tempDir, 'MyComponent.GenerateTest.test.tsx');
        expect(fs_1.default.existsSync(genTestPath)).toBe(true);
        const genContent = fs_1.default.readFileSync(genTestPath, 'utf8');
        expect(genContent).toMatch(/MemoryRouter/);
    });
});
describe('testModule exports', () => {
    it('should export TestGenerator class', () => {
        expect(testModule.TestGenerator).toBeDefined();
        expect(typeof testModule.TestGenerator).toBe('function');
    });
    it('should export default TestGenerator', () => {
        expect(testModule.default).toBeDefined();
        expect(testModule.default).toBe(testModule.TestGenerator);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,