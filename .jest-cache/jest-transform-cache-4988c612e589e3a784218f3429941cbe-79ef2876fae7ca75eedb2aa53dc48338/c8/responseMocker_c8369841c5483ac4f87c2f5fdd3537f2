6bc599ca51c78c7dd2991b7f59c25973
/**
 * Response Mocking Utility - TypeScript Implementation
 *
 * This module provides functionality for creating mock HTTP response objects
 * for API testing scenarios without requiring actual HTTP infrastructure.
 */
/**
 * Create a mock JSON response object
 *
 * This function creates a mock response object that mimics Express.js response
 * interface for testing API endpoints without requiring a full HTTP server.
 *
 * @param data - JSON data to include in the response
 * @param statusCode - HTTP status code (default: 200)
 * @returns Mock response object with Express-like interface
 */
function createJsonRes(data = {}, statusCode = 200) {
    console.log(`createJsonRes is running with data and status ${statusCode}`);
    try {
        let responseData = data;
        let currentStatus = statusCode;
        const headers = {
            'Content-Type': 'application/json'
        };
        let sent = false;
        const mockResponse = {
            status: (code) => {
                currentStatus = code;
                mockResponse.statusCode = code;
                return mockResponse;
            },
            json: (jsonData) => {
                responseData = jsonData;
                mockResponse._data = JSON.stringify(jsonData);
                headers['Content-Type'] = 'application/json';
                return mockResponse;
            },
            send: (sendData) => {
                responseData = sendData;
                mockResponse._data = typeof sendData === 'string' ? sendData : JSON.stringify(sendData);
                return mockResponse;
            },
            end: (endData) => {
                if (endData !== undefined) {
                    responseData = endData;
                    mockResponse._data = typeof endData === 'string' ? endData : JSON.stringify(endData);
                }
                sent = true;
                mockResponse._sent = true;
            },
            setHeader: (name, value) => {
                headers[name] = value;
                return mockResponse;
            },
            statusCode: currentStatus,
            headers: headers,
            _data: JSON.stringify(responseData),
            _sent: sent
        };
        console.log(`createJsonRes is returning mock response`);
        return mockResponse;
    }
    catch (err) {
        console.log(`createJsonRes error ${err.message}`);
        throw err;
    }
}
/**
 * Create a generic mock response object
 *
 * This function creates a basic mock response object with common HTTP response
 * methods for testing scenarios that don't specifically require JSON responses.
 *
 * @param statusCode - HTTP status code (default: 200)
 * @returns Mock response object with basic HTTP interface
 */
function createRes(statusCode = 200) {
    console.log(`createRes is running with status ${statusCode}`);
    try {
        let currentStatus = statusCode;
        const headers = {};
        let responseData = '';
        let sent = false;
        const mockResponse = {
            status: (code) => {
                currentStatus = code;
                mockResponse.statusCode = code;
                return mockResponse;
            },
            json: (data) => {
                responseData = data;
                mockResponse._data = JSON.stringify(data);
                headers['Content-Type'] = 'application/json';
                return mockResponse;
            },
            send: (data) => {
                responseData = data;
                mockResponse._data = typeof data === 'string' ? data : JSON.stringify(data);
                return mockResponse;
            },
            end: (data) => {
                if (data !== undefined) {
                    responseData = data;
                    mockResponse._data = typeof data === 'string' ? data : JSON.stringify(data);
                }
                sent = true;
                mockResponse._sent = true;
            },
            setHeader: (name, value) => {
                headers[name] = value;
                return mockResponse;
            },
            statusCode: currentStatus,
            headers: headers,
            _data: responseData,
            _sent: sent
        };
        console.log(`createRes is returning mock response`);
        return mockResponse;
    }
    catch (err) {
        console.log(`createRes error ${err.message}`);
        throw err;
    }
}
// Export response mocking utilities using ES module syntax
export { createJsonRes, createRes };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,