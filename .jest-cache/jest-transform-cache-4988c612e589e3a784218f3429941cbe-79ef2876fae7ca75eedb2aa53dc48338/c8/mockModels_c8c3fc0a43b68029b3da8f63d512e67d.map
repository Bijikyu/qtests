{"file":"/home/runner/workspace/utils/mockModels.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/mockModels.ts"],"sourcesContent":["/**\n * Mock Models for Testing - TypeScript Implementation\n */\n\n// Collections storage\nconst collections = new Map<string, any[]>();\n\n/**\n * Base Mock Model class\n */\nclass BaseMockModel {\n  _id: string;\n  [key: string]: any;\n\n  constructor(data: Record<string, any> = {}) {\n    this._id = data._id || `mock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    Object.assign(this, data);\n  }\n  \n  async save(): Promise<this> {\n    const collectionName = (this.constructor as any).modelName || 'default';\n    if (!collections.has(collectionName)) {\n      collections.set(collectionName, []);\n    }\n    \n    const collection = collections.get(collectionName)!;\n    const existingIndex = collection.findIndex(item => item._id === this._id);\n    \n    if (existingIndex >= 0) {\n      collection[existingIndex] = this;\n    } else {\n      collection.push(this);\n    }\n    \n    return this;\n  }\n  \n  static getCollection(): any[] {\n    const collectionName = (this as any).modelName || 'default';\n    return collections.get(collectionName) || [];\n  }\n  \n  static find(query: Record<string, any> = {}): any[] {\n    const collection = this.getCollection();\n    if (Object.keys(query).length === 0) {\n      return [...collection]; // Return copy\n    }\n    \n    return collection.filter(item => {\n      return Object.keys(query).every(key => item[key] === query[key]);\n    });\n  }\n}\n\n/**\n * Create mock model class\n */\nfunction createMockModel(modelName: string) {\n  class MockModel extends BaseMockModel {\n    static modelName = modelName;\n  }\n  MockModel.modelName = modelName;\n  return MockModel;\n}\n\n/**\n * Pre-built API Key model\n */\nclass ApiKey extends BaseMockModel {\n  static modelName = 'ApiKey';\n  key: string;\n  name: string;\n  permissions: string[];\n  createdAt: Date;\n  \n  constructor(data: Record<string, any> = {}) {\n    super(data);\n    this.key = data.key || '';\n    this.name = data.name || '';\n    this.permissions = data.permissions || [];\n    this.createdAt = data.createdAt || new Date();\n  }\n}\n\n/**\n * Pre-built API Log model  \n */\nclass ApiLog extends BaseMockModel {\n  static modelName = 'ApiLog';\n  endpoint: string;\n  method: string;\n  statusCode: number;\n  timestamp: Date;\n  \n  constructor(data: Record<string, any> = {}) {\n    super(data);\n    this.endpoint = data.endpoint || '';\n    this.method = data.method || 'GET';\n    this.statusCode = data.statusCode || 200;\n    this.timestamp = data.timestamp || new Date();\n  }\n}\n\n/**\n * Reset all collections\n */\nfunction resetAllCollections(): void {\n  collections.clear();\n}\n\n// Export mock model utilities using ES module syntax\nexport {\n  BaseMockModel,\n  ApiKey,\n  ApiLog,\n  createMockModel,\n  resetAllCollections\n};\n\n// Default export for main functionality\nconst mockModels = {\n  BaseMockModel,\n  ApiKey,\n  ApiLog,\n  createMockModel,\n  resetAllCollections,\n  // Legacy exports for compatibility\n  mockApiKeys: () => ApiKey.getCollection(),\n  mockLogs: () => ApiLog.getCollection()\n};\n\nexport default mockModels;"],"version":3}