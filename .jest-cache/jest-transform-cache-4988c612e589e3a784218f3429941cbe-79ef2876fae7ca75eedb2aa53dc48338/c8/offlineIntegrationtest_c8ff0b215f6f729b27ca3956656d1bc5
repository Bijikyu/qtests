27c4317d302d8e0d92c97e91e9064c61
const {
  execFileSync
} = require('child_process'); // (import execFileSync for child process)
const path = require('path'); // (path helper)

function runToggleScript() {
  // (execute a node script toggling offline mode)
  const script = `
    const offline = require('${path.join(__dirname, '../utils/offlineMode')}');
    const stubAxios = require('${path.join(__dirname, '../stubs/axios')}');
    const realAxios = require(require.resolve('axios'));
    const states = []; 
    offline.setOfflineMode(true);
    states.push({ offline: offline.isOfflineMode(), axiosStub: offline.getAxios() === stubAxios, qType: typeof offline.getQerrors().qerrors });
    offline.setOfflineMode(false);
    states.push({ offline: offline.isOfflineMode(), axiosReal: offline.getAxios() === realAxios, qType: typeof offline.getQerrors().qerrors });
    offline.setOfflineMode(true);
    states.push({ offline: offline.isOfflineMode(), axiosStub: offline.getAxios() === stubAxios, qType: typeof offline.getQerrors().qerrors });
    console.log(JSON.stringify(states));
  `; // (script toggles offline mode and captures results)
  const out = execFileSync(process.execPath, ['-e', script], {
    env: {
      NODE_PATH: ''
    }
  }).toString(); // (run script)
  const lastLine = out.trim().split('\n').pop(); // (extract JSON line ignoring logs)
  return JSON.parse(lastLine); // (parse child output)
}
test('offlineMode toggles axios and qerrors correctly', () => {
  // (jest test verifying offlineMode integration)
  const results = runToggleScript(); // (run toggle script)
  const [first, second, third] = results; // (destructure results)
  expect(first.offline).toBe(true); // (initial mode should be offline)
  expect(first.axiosStub).toBe(true); // (axios stub used when offline)
  expect(first.qType).toBe('function'); // (qerrors function present)
  expect(second.offline).toBe(false); // (mode toggled to online)
  expect(second.axiosReal).toBe(true); // (real axios returned when online)
  expect(second.qType).toBe('function'); // (qerrors function still present)
  expect(third.offline).toBe(true); // (mode toggled back to offline)
  expect(third.axiosStub).toBe(true); // (axios stub restored)
  expect(third.qType).toBe('function'); // (qerrors function still present)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleGVjRmlsZVN5bmMiLCJyZXF1aXJlIiwicGF0aCIsInJ1blRvZ2dsZVNjcmlwdCIsInNjcmlwdCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJvdXQiLCJwcm9jZXNzIiwiZXhlY1BhdGgiLCJlbnYiLCJOT0RFX1BBVEgiLCJ0b1N0cmluZyIsImxhc3RMaW5lIiwidHJpbSIsInNwbGl0IiwicG9wIiwiSlNPTiIsInBhcnNlIiwidGVzdCIsInJlc3VsdHMiLCJmaXJzdCIsInNlY29uZCIsInRoaXJkIiwiZXhwZWN0Iiwib2ZmbGluZSIsInRvQmUiLCJheGlvc1N0dWIiLCJxVHlwZSIsImF4aW9zUmVhbCJdLCJzb3VyY2VzIjpbIm9mZmxpbmVJbnRlZ3JhdGlvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZXhlY0ZpbGVTeW5jIH0gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7IC8vIChpbXBvcnQgZXhlY0ZpbGVTeW5jIGZvciBjaGlsZCBwcm9jZXNzKVxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTsgLy8gKHBhdGggaGVscGVyKVxuXG5mdW5jdGlvbiBydW5Ub2dnbGVTY3JpcHQoKXsgLy8gKGV4ZWN1dGUgYSBub2RlIHNjcmlwdCB0b2dnbGluZyBvZmZsaW5lIG1vZGUpXG4gIGNvbnN0IHNjcmlwdCA9IGBcbiAgICBjb25zdCBvZmZsaW5lID0gcmVxdWlyZSgnJHtwYXRoLmpvaW4oX19kaXJuYW1lLCcuLi91dGlscy9vZmZsaW5lTW9kZScpfScpO1xuICAgIGNvbnN0IHN0dWJBeGlvcyA9IHJlcXVpcmUoJyR7cGF0aC5qb2luKF9fZGlybmFtZSwnLi4vc3R1YnMvYXhpb3MnKX0nKTtcbiAgICBjb25zdCByZWFsQXhpb3MgPSByZXF1aXJlKHJlcXVpcmUucmVzb2x2ZSgnYXhpb3MnKSk7XG4gICAgY29uc3Qgc3RhdGVzID0gW107IFxuICAgIG9mZmxpbmUuc2V0T2ZmbGluZU1vZGUodHJ1ZSk7XG4gICAgc3RhdGVzLnB1c2goeyBvZmZsaW5lOiBvZmZsaW5lLmlzT2ZmbGluZU1vZGUoKSwgYXhpb3NTdHViOiBvZmZsaW5lLmdldEF4aW9zKCkgPT09IHN0dWJBeGlvcywgcVR5cGU6IHR5cGVvZiBvZmZsaW5lLmdldFFlcnJvcnMoKS5xZXJyb3JzIH0pO1xuICAgIG9mZmxpbmUuc2V0T2ZmbGluZU1vZGUoZmFsc2UpO1xuICAgIHN0YXRlcy5wdXNoKHsgb2ZmbGluZTogb2ZmbGluZS5pc09mZmxpbmVNb2RlKCksIGF4aW9zUmVhbDogb2ZmbGluZS5nZXRBeGlvcygpID09PSByZWFsQXhpb3MsIHFUeXBlOiB0eXBlb2Ygb2ZmbGluZS5nZXRRZXJyb3JzKCkucWVycm9ycyB9KTtcbiAgICBvZmZsaW5lLnNldE9mZmxpbmVNb2RlKHRydWUpO1xuICAgIHN0YXRlcy5wdXNoKHsgb2ZmbGluZTogb2ZmbGluZS5pc09mZmxpbmVNb2RlKCksIGF4aW9zU3R1Yjogb2ZmbGluZS5nZXRBeGlvcygpID09PSBzdHViQXhpb3MsIHFUeXBlOiB0eXBlb2Ygb2ZmbGluZS5nZXRRZXJyb3JzKCkucWVycm9ycyB9KTtcbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShzdGF0ZXMpKTtcbiAgYDsgLy8gKHNjcmlwdCB0b2dnbGVzIG9mZmxpbmUgbW9kZSBhbmQgY2FwdHVyZXMgcmVzdWx0cylcbiAgY29uc3Qgb3V0ID0gZXhlY0ZpbGVTeW5jKHByb2Nlc3MuZXhlY1BhdGgsIFsnLWUnLCBzY3JpcHRdLCB7IGVudjogeyBOT0RFX1BBVEg6ICcnIH0gfSkudG9TdHJpbmcoKTsgLy8gKHJ1biBzY3JpcHQpXG4gIGNvbnN0IGxhc3RMaW5lID0gb3V0LnRyaW0oKS5zcGxpdCgnXFxuJykucG9wKCk7IC8vIChleHRyYWN0IEpTT04gbGluZSBpZ25vcmluZyBsb2dzKVxuICByZXR1cm4gSlNPTi5wYXJzZShsYXN0TGluZSk7IC8vIChwYXJzZSBjaGlsZCBvdXRwdXQpXG59XG5cbnRlc3QoJ29mZmxpbmVNb2RlIHRvZ2dsZXMgYXhpb3MgYW5kIHFlcnJvcnMgY29ycmVjdGx5JywgKCkgPT4geyAvLyAoamVzdCB0ZXN0IHZlcmlmeWluZyBvZmZsaW5lTW9kZSBpbnRlZ3JhdGlvbilcbiAgY29uc3QgcmVzdWx0cyA9IHJ1blRvZ2dsZVNjcmlwdCgpOyAvLyAocnVuIHRvZ2dsZSBzY3JpcHQpXG4gIGNvbnN0IFtmaXJzdCwgc2Vjb25kLCB0aGlyZF0gPSByZXN1bHRzOyAvLyAoZGVzdHJ1Y3R1cmUgcmVzdWx0cylcbiAgZXhwZWN0KGZpcnN0Lm9mZmxpbmUpLnRvQmUodHJ1ZSk7IC8vIChpbml0aWFsIG1vZGUgc2hvdWxkIGJlIG9mZmxpbmUpXG4gIGV4cGVjdChmaXJzdC5heGlvc1N0dWIpLnRvQmUodHJ1ZSk7IC8vIChheGlvcyBzdHViIHVzZWQgd2hlbiBvZmZsaW5lKVxuICBleHBlY3QoZmlyc3QucVR5cGUpLnRvQmUoJ2Z1bmN0aW9uJyk7IC8vIChxZXJyb3JzIGZ1bmN0aW9uIHByZXNlbnQpXG4gIGV4cGVjdChzZWNvbmQub2ZmbGluZSkudG9CZShmYWxzZSk7IC8vIChtb2RlIHRvZ2dsZWQgdG8gb25saW5lKVxuICBleHBlY3Qoc2Vjb25kLmF4aW9zUmVhbCkudG9CZSh0cnVlKTsgLy8gKHJlYWwgYXhpb3MgcmV0dXJuZWQgd2hlbiBvbmxpbmUpXG4gIGV4cGVjdChzZWNvbmQucVR5cGUpLnRvQmUoJ2Z1bmN0aW9uJyk7IC8vIChxZXJyb3JzIGZ1bmN0aW9uIHN0aWxsIHByZXNlbnQpXG4gIGV4cGVjdCh0aGlyZC5vZmZsaW5lKS50b0JlKHRydWUpOyAvLyAobW9kZSB0b2dnbGVkIGJhY2sgdG8gb2ZmbGluZSlcbiAgZXhwZWN0KHRoaXJkLmF4aW9zU3R1YikudG9CZSh0cnVlKTsgLy8gKGF4aW9zIHN0dWIgcmVzdG9yZWQpXG4gIGV4cGVjdCh0aGlyZC5xVHlwZSkudG9CZSgnZnVuY3Rpb24nKTsgLy8gKHFlcnJvcnMgZnVuY3Rpb24gc3RpbGwgcHJlc2VudClcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0VBQUVBO0FBQWEsQ0FBQyxHQUFH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