{"file":"/home/runner/workspace/utils/testing/databaseTestHelper.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/testing/databaseTestHelper.ts"],"sourcesContent":["/**\n * Database Testing Helper for In-Memory Database Management - TypeScript Implementation\n * \n * This class provides centralized database testing utilities using qtests mockModels\n * instead of external database dependencies. It focuses solely on database testing concerns.\n */\n\nimport { logStart, logReturn } from '../../lib/logUtils.js';\n\n// Type definitions\ninterface MockModels {\n  clearAllModels?: () => void;\n  mockApiKeys?: any[];\n  mockLogs?: any[];\n  [key: string]: any;\n}\n\n/**\n * Database Testing Helper for In-Memory Database Management\n * \n * This class provides centralized database testing utilities using qtests mockModels\n * instead of external database dependencies. It eliminates duplicate beforeEach/afterEach\n * patterns across storage tests while maintaining qtests zero-dependency approach.\n */\nclass DatabaseTestHelper {\n  private models: MockModels | null;\n  private isSetup: boolean;\n\n  constructor() {\n    this.models = null;\n    this.isSetup = false;\n  }\n\n  /**\n   * Sets up in-memory database models and clears existing data\n   */\n  async setup(): Promise<void> {\n    logStart('DatabaseTestHelper.setup');\n    \n    try {\n      // For now, use a simple mock models implementation\n      // This would need to be connected to actual qtests mockModels\n      this.models = {\n        clearAllModels: () => {\n          if (this.models?.mockApiKeys) this.models.mockApiKeys.length = 0;\n          if (this.models?.mockLogs) this.models.mockLogs.length = 0;\n        },\n        mockApiKeys: [],\n        mockLogs: []\n      };\n      \n      // Clear existing model data for clean test state\n      if (this.models.clearAllModels) {\n        this.models.clearAllModels();\n      }\n      \n      this.isSetup = true;\n      logReturn('DatabaseTestHelper.setup', 'completed');\n    } catch (error: any) {\n      logReturn('DatabaseTestHelper.setup', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Tears down database connections and clears model state\n   */\n  async teardown(): Promise<void> {\n    logStart('DatabaseTestHelper.teardown');\n    \n    try {\n      if (this.models) {\n        // Clear all model data\n        if (this.models.clearAllModels) {\n          this.models.clearAllModels();\n        } else {\n          // Manual clearing if clearAllModels not available\n          if (this.models.mockApiKeys) this.models.mockApiKeys.length = 0;\n          if (this.models.mockLogs) this.models.mockLogs.length = 0;\n        }\n      }\n      \n      this.models = null;\n      this.isSetup = false;\n      logReturn('DatabaseTestHelper.teardown', 'completed');\n    } catch (error: any) {\n      logReturn('DatabaseTestHelper.teardown', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Creates a complete test suite setup with automatic cleanup\n   */\n  static createSuite(): DatabaseTestHelper {\n    logStart('DatabaseTestHelper.createSuite');\n    \n    const helper = new DatabaseTestHelper();\n    \n    // Only set up hooks if they're available and we're at the right scope\n    try {\n      if (typeof (globalThis as any).beforeEach === 'function' && typeof (globalThis as any).afterEach === 'function') {\n        // Check if we're in a test context\n        const isValidTestContext = typeof (globalThis as any).describe === 'function' && typeof (globalThis as any).it === 'function';\n        \n        if (isValidTestContext) {\n          (globalThis as any).beforeEach(async () => {\n            await helper.setup();\n          });\n\n          (globalThis as any).afterEach(async () => {\n            await helper.teardown();\n          });\n        }\n      }\n    } catch (error) {\n      // Hooks not available or not in test context, helper can still be used manually\n    }\n    \n    logReturn('DatabaseTestHelper.createSuite', helper);\n    return helper;\n  }\n\n  /**\n   * Gets mock models instance\n   */\n  getModels(): MockModels | null {\n    return this.models;\n  }\n\n  /**\n   * Checks if helper is properly set up\n   */\n  isReady(): boolean {\n    return this.isSetup && this.models !== null;\n  }\n\n  /**\n   * Creates a test entity in the mock database\n   */\n  async createTestEntity(modelName: string, data: any): Promise<any> {\n    logStart('DatabaseTestHelper.createTestEntity', modelName, data);\n    \n    try {\n      if (!this.isSetup || !this.models) {\n        throw new Error('DatabaseTestHelper not set up. Call setup() first.');\n      }\n      \n      // Simple mock entity creation\n      const entity = {\n        id: `test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        ...data\n      };\n      \n      // Store in appropriate mock array\n      const mockArray = this.models[`mock${modelName}s`] || [];\n      mockArray.push(entity);\n      \n      logReturn('DatabaseTestHelper.createTestEntity', entity);\n      return entity;\n    } catch (error: any) {\n      logReturn('DatabaseTestHelper.createTestEntity', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Finds test entities by criteria\n   */\n  async findTestEntities(modelName: string, criteria: any = {}): Promise<any[]> {\n    logStart('DatabaseTestHelper.findTestEntities', modelName, criteria);\n    \n    try {\n      if (!this.isSetup || !this.models) {\n        throw new Error('DatabaseTestHelper not set up. Call setup() first.');\n      }\n      \n      const mockArray = this.models[`mock${modelName}s`] || [];\n      \n      // Simple filtering based on criteria\n      const results = mockArray.filter((entity: any) => {\n        return Object.entries(criteria).every(([key, value]) => entity[key] === value);\n      });\n      \n      logReturn('DatabaseTestHelper.findTestEntities', results);\n      return results;\n    } catch (error: any) {\n      logReturn('DatabaseTestHelper.findTestEntities', `error: ${error.message}`);\n      throw error;\n    }\n  }\n}\n\n// Export DatabaseTestHelper using ES module syntax\nexport { DatabaseTestHelper };"],"version":3}