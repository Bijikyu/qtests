{"file":"/home/runner/workspace/utils/helpers/responseMocker.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/helpers/responseMocker.ts"],"sourcesContent":["/**\n * Response Mocking Utility - TypeScript Implementation\n * \n * This module provides functionality for creating mock HTTP response objects\n * for API testing scenarios without requiring actual HTTP infrastructure.\n */\n\n// Type definitions for HTTP response objects\ninterface MockResponse {\n  status: (code: number) => MockResponse;\n  json: (data: any) => MockResponse;\n  send: (data: any) => MockResponse;\n  end: (data?: any) => void;\n  setHeader: (name: string, value: string) => MockResponse;\n  statusCode?: number;\n  headers?: Record<string, string>;\n  _data?: any;\n  _sent?: boolean;\n}\n\n/**\n * Create a mock JSON response object\n * \n * This function creates a mock response object that mimics Express.js response\n * interface for testing API endpoints without requiring a full HTTP server.\n * \n * @param data - JSON data to include in the response\n * @param statusCode - HTTP status code (default: 200)\n * @returns Mock response object with Express-like interface\n */\nfunction createJsonRes(data: any = {}, statusCode: number = 200): MockResponse {\n  console.log(`createJsonRes is running with data and status ${statusCode}`);\n  \n  try {\n    let responseData = data;\n    let currentStatus = statusCode;\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json'\n    };\n    let sent = false;\n    \n    const mockResponse: MockResponse = {\n      status: (code: number) => {\n        currentStatus = code;\n        mockResponse.statusCode = code;\n        return mockResponse;\n      },\n      \n      json: (jsonData: any) => {\n        responseData = jsonData;\n        mockResponse._data = JSON.stringify(jsonData);\n        headers['Content-Type'] = 'application/json';\n        return mockResponse;\n      },\n      \n      send: (sendData: any) => {\n        responseData = sendData;\n        mockResponse._data = typeof sendData === 'string' ? sendData : JSON.stringify(sendData);\n        return mockResponse;\n      },\n      \n      end: (endData?: any) => {\n        if (endData !== undefined) {\n          responseData = endData;\n          mockResponse._data = typeof endData === 'string' ? endData : JSON.stringify(endData);\n        }\n        sent = true;\n        mockResponse._sent = true;\n      },\n      \n      setHeader: (name: string, value: string) => {\n        headers[name] = value;\n        return mockResponse;\n      },\n      \n      statusCode: currentStatus,\n      headers: headers,\n      _data: JSON.stringify(responseData),\n      _sent: sent\n    };\n    \n    console.log(`createJsonRes is returning mock response`);\n    return mockResponse;\n    \n  } catch (err: any) {\n    console.log(`createJsonRes error ${err.message}`);\n    throw err;\n  }\n}\n\n/**\n * Create a generic mock response object\n * \n * This function creates a basic mock response object with common HTTP response\n * methods for testing scenarios that don't specifically require JSON responses.\n * \n * @param statusCode - HTTP status code (default: 200)\n * @returns Mock response object with basic HTTP interface\n */\nfunction createRes(statusCode: number = 200): MockResponse {\n  console.log(`createRes is running with status ${statusCode}`);\n  \n  try {\n    let currentStatus = statusCode;\n    const headers: Record<string, string> = {};\n    let responseData: any = '';\n    let sent = false;\n    \n    const mockResponse: MockResponse = {\n      status: (code: number) => {\n        currentStatus = code;\n        mockResponse.statusCode = code;\n        return mockResponse;\n      },\n      \n      json: (data: any) => {\n        responseData = data;\n        mockResponse._data = JSON.stringify(data);\n        headers['Content-Type'] = 'application/json';\n        return mockResponse;\n      },\n      \n      send: (data: any) => {\n        responseData = data;\n        mockResponse._data = typeof data === 'string' ? data : JSON.stringify(data);\n        return mockResponse;\n      },\n      \n      end: (data?: any) => {\n        if (data !== undefined) {\n          responseData = data;\n          mockResponse._data = typeof data === 'string' ? data : JSON.stringify(data);\n        }\n        sent = true;\n        mockResponse._sent = true;\n      },\n      \n      setHeader: (name: string, value: string) => {\n        headers[name] = value;\n        return mockResponse;\n      },\n      \n      statusCode: currentStatus,\n      headers: headers,\n      _data: responseData,\n      _sent: sent\n    };\n    \n    console.log(`createRes is returning mock response`);\n    return mockResponse;\n    \n  } catch (err: any) {\n    console.log(`createRes error ${err.message}`);\n    throw err;\n  }\n}\n\n// Export response mocking utilities using ES module syntax\nexport {\n  createJsonRes,\n  createRes\n};"],"version":3}