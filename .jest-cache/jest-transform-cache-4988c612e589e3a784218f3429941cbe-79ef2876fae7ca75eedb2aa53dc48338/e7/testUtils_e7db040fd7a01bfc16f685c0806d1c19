3e4ad89d250383ffaa1eba39b454e07c
"use strict";
/**
 * Advanced Testing Utilities
 *
 * This module provides advanced testing utilities for complex testing scenarios,
 * including comprehensive test suite management, helper functions, and pattern
 * elimination utilities. These are higher-level utilities that build upon the
 * core testing functionality.
 *
 * Design philosophy:
 * - Eliminate duplicate patterns across test suites
 * - Provide comprehensive testing workflows
 * - Advanced helper functions for complex scenarios
 * - Framework-agnostic patterns supporting multiple test runners
 *
 * Why advanced testing utilities are grouped together:
 * 1. All utilities provide sophisticated testing patterns
 * 2. They build upon core utilities to provide higher-level functionality
 * 3. Often used together in large-scale testing scenarios
 * 4. Share common patterns for advanced test management
 *
 * Module organization rationale:
 * These utilities are grouped because they all serve the purpose of
 * providing advanced testing capabilities that go beyond basic mocking
 * and stubbing, offering comprehensive solutions for complex testing needs.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testSuite = exports.testHelpers = void 0;
// Import testHelpers for advanced testing scenarios
// testHelpers provides module reloading, response mocking, and other
// specialized utilities needed for integration and complex unit testing
const testHelpers_js_1 = __importDefault(require("../utils/testHelpers.js"));
exports.testHelpers = testHelpers_js_1.default;
// Import testSuite utilities for comprehensive test pattern elimination
// testSuite provides centralized setup, teardown, mocking, and assertion
// patterns to eliminate duplicate code across test suites
const testSuite_js_1 = __importDefault(require("../utils/testSuite.js"));
exports.testSuite = testSuite_js_1.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvdGVzdFV0aWxzLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JHOzs7Ozs7QUFFSCxvREFBb0Q7QUFDcEQscUVBQXFFO0FBQ3JFLHdFQUF3RTtBQUN4RSw2RUFBa0Q7QUF1QmhELHNCQXZCSyx3QkFBVyxDQXVCTDtBQXJCYix3RUFBd0U7QUFDeEUseUVBQXlFO0FBQ3pFLDBEQUEwRDtBQUMxRCx5RUFBOEM7QUFxQjVDLG9CQXJCSyxzQkFBUyxDQXFCTCIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL2xpYi90ZXN0VXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBZHZhbmNlZCBUZXN0aW5nIFV0aWxpdGllc1xuICogXG4gKiBUaGlzIG1vZHVsZSBwcm92aWRlcyBhZHZhbmNlZCB0ZXN0aW5nIHV0aWxpdGllcyBmb3IgY29tcGxleCB0ZXN0aW5nIHNjZW5hcmlvcyxcbiAqIGluY2x1ZGluZyBjb21wcmVoZW5zaXZlIHRlc3Qgc3VpdGUgbWFuYWdlbWVudCwgaGVscGVyIGZ1bmN0aW9ucywgYW5kIHBhdHRlcm5cbiAqIGVsaW1pbmF0aW9uIHV0aWxpdGllcy4gVGhlc2UgYXJlIGhpZ2hlci1sZXZlbCB1dGlsaXRpZXMgdGhhdCBidWlsZCB1cG9uIHRoZVxuICogY29yZSB0ZXN0aW5nIGZ1bmN0aW9uYWxpdHkuXG4gKiBcbiAqIERlc2lnbiBwaGlsb3NvcGh5OlxuICogLSBFbGltaW5hdGUgZHVwbGljYXRlIHBhdHRlcm5zIGFjcm9zcyB0ZXN0IHN1aXRlc1xuICogLSBQcm92aWRlIGNvbXByZWhlbnNpdmUgdGVzdGluZyB3b3JrZmxvd3NcbiAqIC0gQWR2YW5jZWQgaGVscGVyIGZ1bmN0aW9ucyBmb3IgY29tcGxleCBzY2VuYXJpb3NcbiAqIC0gRnJhbWV3b3JrLWFnbm9zdGljIHBhdHRlcm5zIHN1cHBvcnRpbmcgbXVsdGlwbGUgdGVzdCBydW5uZXJzXG4gKiBcbiAqIFdoeSBhZHZhbmNlZCB0ZXN0aW5nIHV0aWxpdGllcyBhcmUgZ3JvdXBlZCB0b2dldGhlcjpcbiAqIDEuIEFsbCB1dGlsaXRpZXMgcHJvdmlkZSBzb3BoaXN0aWNhdGVkIHRlc3RpbmcgcGF0dGVybnNcbiAqIDIuIFRoZXkgYnVpbGQgdXBvbiBjb3JlIHV0aWxpdGllcyB0byBwcm92aWRlIGhpZ2hlci1sZXZlbCBmdW5jdGlvbmFsaXR5XG4gKiAzLiBPZnRlbiB1c2VkIHRvZ2V0aGVyIGluIGxhcmdlLXNjYWxlIHRlc3Rpbmcgc2NlbmFyaW9zXG4gKiA0LiBTaGFyZSBjb21tb24gcGF0dGVybnMgZm9yIGFkdmFuY2VkIHRlc3QgbWFuYWdlbWVudFxuICogXG4gKiBNb2R1bGUgb3JnYW5pemF0aW9uIHJhdGlvbmFsZTpcbiAqIFRoZXNlIHV0aWxpdGllcyBhcmUgZ3JvdXBlZCBiZWNhdXNlIHRoZXkgYWxsIHNlcnZlIHRoZSBwdXJwb3NlIG9mXG4gKiBwcm92aWRpbmcgYWR2YW5jZWQgdGVzdGluZyBjYXBhYmlsaXRpZXMgdGhhdCBnbyBiZXlvbmQgYmFzaWMgbW9ja2luZ1xuICogYW5kIHN0dWJiaW5nLCBvZmZlcmluZyBjb21wcmVoZW5zaXZlIHNvbHV0aW9ucyBmb3IgY29tcGxleCB0ZXN0aW5nIG5lZWRzLlxuICovXG5cbi8vIEltcG9ydCB0ZXN0SGVscGVycyBmb3IgYWR2YW5jZWQgdGVzdGluZyBzY2VuYXJpb3Ncbi8vIHRlc3RIZWxwZXJzIHByb3ZpZGVzIG1vZHVsZSByZWxvYWRpbmcsIHJlc3BvbnNlIG1vY2tpbmcsIGFuZCBvdGhlclxuLy8gc3BlY2lhbGl6ZWQgdXRpbGl0aWVzIG5lZWRlZCBmb3IgaW50ZWdyYXRpb24gYW5kIGNvbXBsZXggdW5pdCB0ZXN0aW5nXG5pbXBvcnQgdGVzdEhlbHBlcnMgZnJvbSAnLi4vdXRpbHMvdGVzdEhlbHBlcnMuanMnO1xuXG4vLyBJbXBvcnQgdGVzdFN1aXRlIHV0aWxpdGllcyBmb3IgY29tcHJlaGVuc2l2ZSB0ZXN0IHBhdHRlcm4gZWxpbWluYXRpb25cbi8vIHRlc3RTdWl0ZSBwcm92aWRlcyBjZW50cmFsaXplZCBzZXR1cCwgdGVhcmRvd24sIG1vY2tpbmcsIGFuZCBhc3NlcnRpb25cbi8vIHBhdHRlcm5zIHRvIGVsaW1pbmF0ZSBkdXBsaWNhdGUgY29kZSBhY3Jvc3MgdGVzdCBzdWl0ZXNcbmltcG9ydCB0ZXN0U3VpdGUgZnJvbSAnLi4vdXRpbHMvdGVzdFN1aXRlLmpzJztcblxuLyoqXG4gKiBFeHBvcnQgYWR2YW5jZWQgdGVzdGluZyB1dGlsaXRpZXNcbiAqIFxuICogVGhlc2UgdXRpbGl0aWVzIGFyZSBleHBvcnRlZCB0b2dldGhlciBiZWNhdXNlIHRoZXkgcHJvdmlkZVxuICogY29tcGxlbWVudGFyeSBmdW5jdGlvbmFsaXR5IGZvciBhZHZhbmNlZCB0ZXN0aW5nIHNjZW5hcmlvczpcbiAqIFxuICogLSB0ZXN0SGVscGVyczogRm9yIGNvbXBsZXggdGVzdGluZyBzY2VuYXJpb3MgYW5kIGludGVncmF0aW9uIHRlc3RpbmdcbiAqIC0gdGVzdFN1aXRlOiBGb3IgY29tcHJlaGVuc2l2ZSB0ZXN0IHN1aXRlIG1hbmFnZW1lbnQgYW5kIHBhdHRlcm4gZWxpbWluYXRpb25cbiAqIFxuICogRXhwb3J0IHN0cmF0ZWd5OlxuICogLSBOYW1lZCBleHBvcnRzIGZvciBFUyBtb2R1bGUgY29tcGF0aWJpbGl0eVxuICogLSBEZXNjcmlwdGl2ZSBwcm9wZXJ0eSBuYW1lcyB0aGF0IGluZGljYXRlIHB1cnBvc2VcbiAqIC0gR3JvdXBlZCBieSBhZHZhbmNlZCBmdW5jdGlvbmFsaXR5IGZvciBkZXZlbG9wZXIgY29udmVuaWVuY2VcbiAqL1xuZXhwb3J0IHtcbiAgLy8gQWR2YW5jZWQgaGVscGVyIGZ1bmN0aW9ucyBmb3IgY29tcGxleCB0ZXN0aW5nIHNjZW5hcmlvc1xuICB0ZXN0SGVscGVycyxcbiAgXG4gIC8vIENvbXByZWhlbnNpdmUgdGVzdCBzdWl0ZSB1dGlsaXRpZXMgZm9yIHBhdHRlcm4gZWxpbWluYXRpb25cbiAgdGVzdFN1aXRlXG59OyJdLCJ2ZXJzaW9uIjozfQ==