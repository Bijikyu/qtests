b2545b67d679f2fb5c9f270fed84f260
/**
 * Email History Management Utility
 * 
 * This module manages email history for testing and verification purposes.
 * It provides a clean separation of history management from email sending logic.
 */

const {
  logStart,
  logReturn
} = require('../../lib/logUtils');

// In-memory storage for email history during testing
const emailHistory = [];

/**
 * Clear email history for test isolation
 * 
 * This function provides a clean slate for each test by removing all previously
 * mocked email records. Essential for test isolation and preventing test
 * interference when running multiple email-related test suites.
 * 
 * @returns {number} Number of emails cleared from history
 */
function clearEmailHistory() {
  logStart('clearEmailHistory');
  const cleared = emailHistory.length;
  emailHistory.length = 0;
  logReturn('clearEmailHistory', cleared);
  return cleared;
}

/**
 * Get email history for test verification
 * 
 * This function provides access to all emails that have been "sent" through
 * the sendEmail function. Returns a copy to prevent accidental modification.
 * 
 * @returns {Array} Copy of all emails in chronological order
 */
function getEmailHistory() {
  logStart('getEmailHistory');
  const history = [...emailHistory];
  logReturn('getEmailHistory', `${history.length} emails`);
  return history;
}

/**
 * Add email to history
 * 
 * Internal function to add an email to the history tracking.
 * 
 * @param {Object} emailData - Email data to add to history
 */
function addToHistory(emailData) {
  emailHistory.push(emailData);
}
module.exports = {
  clearEmailHistory,
  getEmailHistory,
  addToHistory,
  emailHistory // Export for direct access in advanced testing scenarios
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dTdGFydCIsImxvZ1JldHVybiIsInJlcXVpcmUiLCJlbWFpbEhpc3RvcnkiLCJjbGVhckVtYWlsSGlzdG9yeSIsImNsZWFyZWQiLCJsZW5ndGgiLCJnZXRFbWFpbEhpc3RvcnkiLCJoaXN0b3J5IiwiYWRkVG9IaXN0b3J5IiwiZW1haWxEYXRhIiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJlbWFpbEhpc3RvcnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFbWFpbCBIaXN0b3J5IE1hbmFnZW1lbnQgVXRpbGl0eVxuICogXG4gKiBUaGlzIG1vZHVsZSBtYW5hZ2VzIGVtYWlsIGhpc3RvcnkgZm9yIHRlc3RpbmcgYW5kIHZlcmlmaWNhdGlvbiBwdXJwb3Nlcy5cbiAqIEl0IHByb3ZpZGVzIGEgY2xlYW4gc2VwYXJhdGlvbiBvZiBoaXN0b3J5IG1hbmFnZW1lbnQgZnJvbSBlbWFpbCBzZW5kaW5nIGxvZ2ljLlxuICovXG5cbmNvbnN0IHsgbG9nU3RhcnQsIGxvZ1JldHVybiB9ID0gcmVxdWlyZSgnLi4vLi4vbGliL2xvZ1V0aWxzJyk7XG5cbi8vIEluLW1lbW9yeSBzdG9yYWdlIGZvciBlbWFpbCBoaXN0b3J5IGR1cmluZyB0ZXN0aW5nXG5jb25zdCBlbWFpbEhpc3RvcnkgPSBbXTtcblxuLyoqXG4gKiBDbGVhciBlbWFpbCBoaXN0b3J5IGZvciB0ZXN0IGlzb2xhdGlvblxuICogXG4gKiBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIGEgY2xlYW4gc2xhdGUgZm9yIGVhY2ggdGVzdCBieSByZW1vdmluZyBhbGwgcHJldmlvdXNseVxuICogbW9ja2VkIGVtYWlsIHJlY29yZHMuIEVzc2VudGlhbCBmb3IgdGVzdCBpc29sYXRpb24gYW5kIHByZXZlbnRpbmcgdGVzdFxuICogaW50ZXJmZXJlbmNlIHdoZW4gcnVubmluZyBtdWx0aXBsZSBlbWFpbC1yZWxhdGVkIHRlc3Qgc3VpdGVzLlxuICogXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBOdW1iZXIgb2YgZW1haWxzIGNsZWFyZWQgZnJvbSBoaXN0b3J5XG4gKi9cbmZ1bmN0aW9uIGNsZWFyRW1haWxIaXN0b3J5KCkge1xuICBsb2dTdGFydCgnY2xlYXJFbWFpbEhpc3RvcnknKTtcbiAgY29uc3QgY2xlYXJlZCA9IGVtYWlsSGlzdG9yeS5sZW5ndGg7XG4gIGVtYWlsSGlzdG9yeS5sZW5ndGggPSAwO1xuICBsb2dSZXR1cm4oJ2NsZWFyRW1haWxIaXN0b3J5JywgY2xlYXJlZCk7XG4gIHJldHVybiBjbGVhcmVkO1xufVxuXG4vKipcbiAqIEdldCBlbWFpbCBoaXN0b3J5IGZvciB0ZXN0IHZlcmlmaWNhdGlvblxuICogXG4gKiBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIGFjY2VzcyB0byBhbGwgZW1haWxzIHRoYXQgaGF2ZSBiZWVuIFwic2VudFwiIHRocm91Z2hcbiAqIHRoZSBzZW5kRW1haWwgZnVuY3Rpb24uIFJldHVybnMgYSBjb3B5IHRvIHByZXZlbnQgYWNjaWRlbnRhbCBtb2RpZmljYXRpb24uXG4gKiBcbiAqIEByZXR1cm5zIHtBcnJheX0gQ29weSBvZiBhbGwgZW1haWxzIGluIGNocm9ub2xvZ2ljYWwgb3JkZXJcbiAqL1xuZnVuY3Rpb24gZ2V0RW1haWxIaXN0b3J5KCkge1xuICBsb2dTdGFydCgnZ2V0RW1haWxIaXN0b3J5Jyk7XG4gIGNvbnN0IGhpc3RvcnkgPSBbLi4uZW1haWxIaXN0b3J5XTtcbiAgbG9nUmV0dXJuKCdnZXRFbWFpbEhpc3RvcnknLCBgJHtoaXN0b3J5Lmxlbmd0aH0gZW1haWxzYCk7XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG4vKipcbiAqIEFkZCBlbWFpbCB0byBoaXN0b3J5XG4gKiBcbiAqIEludGVybmFsIGZ1bmN0aW9uIHRvIGFkZCBhbiBlbWFpbCB0byB0aGUgaGlzdG9yeSB0cmFja2luZy5cbiAqIFxuICogQHBhcmFtIHtPYmplY3R9IGVtYWlsRGF0YSAtIEVtYWlsIGRhdGEgdG8gYWRkIHRvIGhpc3RvcnlcbiAqL1xuZnVuY3Rpb24gYWRkVG9IaXN0b3J5KGVtYWlsRGF0YSkge1xuICBlbWFpbEhpc3RvcnkucHVzaChlbWFpbERhdGEpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2xlYXJFbWFpbEhpc3RvcnksXG4gIGdldEVtYWlsSGlzdG9yeSxcbiAgYWRkVG9IaXN0b3J5LFxuICBlbWFpbEhpc3RvcnkgLy8gRXhwb3J0IGZvciBkaXJlY3QgYWNjZXNzIGluIGFkdmFuY2VkIHRlc3Rpbmcgc2NlbmFyaW9zXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU07RUFBRUEsUUFBUTtFQUFFQztBQUFVLENBQUMsR0FBR0MsT0FBTyxDQUFDLG9CQUFvQixDQUFDOztBQUU3RDtBQUNBLE1BQU1DLFlBQVksR0FBRyxFQUFFOztBQUV2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxpQkFBaUJBLENBQUEsRUFBRztFQUMzQkosUUFBUSxDQUFDLG1CQUFtQixDQUFDO0VBQzdCLE1BQU1LLE9BQU8sR0FBR0YsWUFBWSxDQUFDRyxNQUFNO0VBQ25DSCxZQUFZLENBQUNHLE1BQU0sR0FBRyxDQUFDO0VBQ3ZCTCxTQUFTLENBQUMsbUJBQW1CLEVBQUVJLE9BQU8sQ0FBQztFQUN2QyxPQUFPQSxPQUFPO0FBQ2hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxlQUFlQSxDQUFBLEVBQUc7RUFDekJQLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQztFQUMzQixNQUFNUSxPQUFPLEdBQUcsQ0FBQyxHQUFHTCxZQUFZLENBQUM7RUFDakNGLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHTyxPQUFPLENBQUNGLE1BQU0sU0FBUyxDQUFDO0VBQ3hELE9BQU9FLE9BQU87QUFDaEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxZQUFZQSxDQUFDQyxTQUFTLEVBQUU7RUFDL0JQLFlBQVksQ0FBQ1EsSUFBSSxDQUFDRCxTQUFTLENBQUM7QUFDOUI7QUFFQUUsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZlQsaUJBQWlCO0VBQ2pCRyxlQUFlO0VBQ2ZFLFlBQVk7RUFDWk4sWUFBWSxDQUFDO0FBQ2YsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==