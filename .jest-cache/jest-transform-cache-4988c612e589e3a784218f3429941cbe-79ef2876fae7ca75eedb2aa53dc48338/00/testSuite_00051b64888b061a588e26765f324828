c450586760f6ec8ef15a477b7d60b7f0
"use strict";
/**
 * Comprehensive Testing Suite Utilities - TypeScript Implementation (Refactored)
 *
 * This module has been refactored to follow Single Responsibility Principle.
 * It now coordinates between focused testing utilities for better maintainability.
 *
 * Components:
 * - testing/databaseTestHelper.ts - Database testing utilities
 * - testing/mockManager.ts - Mock management system
 * - testing/assertionHelper.ts - Assertion helpers
 * - testing/testDataFactory.ts - Test data creation
 * - testing/performanceTestHelper.ts - Performance testing
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestSuiteBuilder = exports.PerformanceTestHelper = exports.TestDataFactory = exports.AssertionHelper = exports.MockManager = exports.DatabaseTestHelper = void 0;
// Import focused testing utilities
const databaseTestHelper_js_1 = require("./testing/databaseTestHelper.js");
Object.defineProperty(exports, "DatabaseTestHelper", { enumerable: true, get: function () { return databaseTestHelper_js_1.DatabaseTestHelper; } });
const mockManager_js_1 = require("./testing/mockManager.js");
Object.defineProperty(exports, "MockManager", { enumerable: true, get: function () { return mockManager_js_1.MockManager; } });
const assertionHelper_js_1 = require("./testing/assertionHelper.js");
Object.defineProperty(exports, "AssertionHelper", { enumerable: true, get: function () { return assertionHelper_js_1.AssertionHelper; } });
const testDataFactory_js_1 = require("./testing/testDataFactory.js");
Object.defineProperty(exports, "TestDataFactory", { enumerable: true, get: function () { return testDataFactory_js_1.TestDataFactory; } });
const performanceTestHelper_js_1 = require("./testing/performanceTestHelper.js");
Object.defineProperty(exports, "PerformanceTestHelper", { enumerable: true, get: function () { return performanceTestHelper_js_1.PerformanceTestHelper; } });
/**
 * TestSuiteBuilder - Fluent API for building comprehensive test suites
 *
 * Provides a builder pattern for configuring test utilities with method chaining
 */
class TestSuiteBuilder {
    constructor() {
        this.config = {
            apiMocks: false,
            emailMocks: false,
            consoleMocks: false,
            performance: false,
            autoCleanup: true
        };
    }
    withApiMocks() {
        this.config.apiMocks = true;
        return this;
    }
    withEmailMocks() {
        this.config.emailMocks = true;
        return this;
    }
    withConsoleMocks() {
        this.config.consoleMocks = true;
        return this;
    }
    withPerformance() {
        this.config.performance = true;
        return this;
    }
    withDatabase() {
        this.config.database = true;
        return this;
    }
    withEnvironmentMocks(envVars) {
        this.config.environmentMocks = envVars || {};
        return this;
    }
    withHttpMocks(responses) {
        this.config.httpMocks = responses || [];
        return this;
    }
    withoutAutoCleanup() {
        this.config.autoCleanup = false;
        return this;
    }
    build() {
        const mockManager = new mockManager_js_1.MockManager();
        // Set up mocks based on configuration
        if (this.config.apiMocks) {
            mockManager.setupApiClientMocks();
        }
        if (this.config.emailMocks) {
            // Set up email mocks if needed
            try {
                // Note: Dynamic import would be needed for ES modules
                // For now, this is a placeholder for the email functionality
                mockManager.mocks.set('email', { sendEmail: () => { } });
            }
            catch (error) {
                // Email mocks not available, skip
            }
        }
        if (this.config.consoleMocks) {
            mockManager.setupConsoleMocks();
        }
        if (this.config.environmentMocks && Object.keys(this.config.environmentMocks).length > 0) {
            mockManager.setupEnvironmentMocks(this.config.environmentMocks);
        }
        if (this.config.httpMocks && this.config.httpMocks.length > 0) {
            mockManager.setupHttpMocks(this.config.httpMocks);
        }
        const assertionHelper = new assertionHelper_js_1.AssertionHelper();
        return {
            mocks: mockManager,
            db: this.config.database ? new databaseTestHelper_js_1.DatabaseTestHelper() : undefined,
            assertions: assertionHelper,
            assert: assertionHelper_js_1.AssertionHelper, // Return class for toBe() equality checks
            data: testDataFactory_js_1.TestDataFactory, // Always return class for toBe() equality checks
            performance: this.config.performance ? performanceTestHelper_js_1.PerformanceTestHelper : undefined, // Return class for toBe() equality checks
            config: { ...this.config }
        };
    }
}
exports.TestSuiteBuilder = TestSuiteBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,