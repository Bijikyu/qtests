0b233d751850dd144e6d18f02dbb53a4
"use strict";
/**
 * Test DSL (Domain Specific Language)
 *
 * This module provides the familiar describe/it/test API that users expect
 * from modern test frameworks. It handles test registration, suite nesting,
 * and hook registration while maintaining compatibility with Jest/Mocha patterns.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.test = void 0;
exports.describe = describe;
exports.it = it;
exports.beforeAll = beforeAll;
exports.afterAll = afterAll;
exports.beforeEach = beforeEach;
exports.afterEach = afterEach;
const context_js_1 = require("./context.js");
const hooks_js_1 = require("./hooks.js");
/**
 * Create a test suite with nested context
 * This is the primary way to group related tests and establish shared setup/teardown
 */
function describe(name, fn) {
    // Create new suite and add it to current suite's children
    const suite = {
        name,
        tests: [],
        suites: [],
        hooks: {
            beforeAll: [],
            afterAll: [],
            beforeEach: [],
            afterEach: []
        }
    };
    const currentSuite = (0, context_js_1.getCurrentSuite)();
    currentSuite.suites.push(suite);
    // Execute the suite definition function with new suite as context
    (0, context_js_1.pushSuite)(suite);
    try {
        fn(); // User's describe block runs here, registering tests and hooks
    }
    finally {
        // Always restore previous suite context, even if describe block throws
        (0, context_js_1.popSuite)();
    }
}
/**
 * Register an individual test case
 * Supports both sync and async test functions, plus optional done callback
 */
function it(name, fn) {
    const currentSuite = (0, context_js_1.getCurrentSuite)();
    currentSuite.tests.push({
        name,
        fn,
        mode: 'normal'
    });
}
// Alias for it() - many developers prefer 'test' over 'it'
exports.test = it;
/**
 * Mark a test to run exclusively (only this test and other .only tests will run)
 * Useful for focusing on specific failing tests during development
 */
it.only = (name, fn) => {
    const currentSuite = (0, context_js_1.getCurrentSuite)();
    currentSuite.tests.push({
        name,
        fn,
        mode: 'only'
    });
};
/**
 * Skip a test (it will appear in results but not execute)
 * Useful for temporarily disabling tests without deleting them
 */
it.skip = (name, fn) => {
    const currentSuite = (0, context_js_1.getCurrentSuite)();
    currentSuite.tests.push({
        name,
        fn,
        mode: 'skip'
    });
};
/**
 * Mark a test as todo (placeholder for future implementation)
 * Test will appear in results as pending/todo
 */
it.todo = (name) => {
    const currentSuite = (0, context_js_1.getCurrentSuite)();
    currentSuite.tests.push({
        name,
        fn: () => { }, // no-op function for todo tests
        mode: 'todo'
    });
};
// Provide the same modifiers for test() alias
exports.test.only = it.only;
exports.test.skip = it.skip;
exports.test.todo = it.todo;
/**
 * Add support for describe.only and describe.skip
 * These affect all tests within the suite
 */
describe.only = (name, fn) => {
    // For now, implement as regular describe
    // TODO: Implement suite-level only/skip filtering
    describe(name, fn);
};
describe.skip = (name, fn) => {
    // For now, implement as regular describe but mark all tests as skipped
    // TODO: Implement suite-level skip functionality
    describe(name, fn);
};
/**
 * Lifecycle Hooks - Setup and teardown functions
 */
/**
 * Run once before all tests in the current suite
 * Used for expensive setup that can be shared across tests
 */
function beforeAll(fn) {
    const currentSuite = (0, context_js_1.getCurrentSuite)();
    (0, hooks_js_1.pushHook)(currentSuite, 'beforeAll', fn);
}
/**
 * Run once after all tests in the current suite
 * Used for cleanup that only needs to happen once per suite
 */
function afterAll(fn) {
    const currentSuite = (0, context_js_1.getCurrentSuite)();
    (0, hooks_js_1.pushHook)(currentSuite, 'afterAll', fn);
}
/**
 * Run before each individual test in the current suite
 * Used for per-test setup to ensure test isolation
 */
function beforeEach(fn) {
    const currentSuite = (0, context_js_1.getCurrentSuite)();
    (0, hooks_js_1.pushHook)(currentSuite, 'beforeEach', fn);
}
/**
 * Run after each individual test in the current suite
 * Used for per-test cleanup to ensure test isolation
 */
function afterEach(fn) {
    const currentSuite = (0, context_js_1.getCurrentSuite)();
    (0, hooks_js_1.pushHook)(currentSuite, 'afterEach', fn);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,