a75f503bc02f8a602d92167bd3130582
"use strict";
/**
 * Test Generator for qtests Framework - TypeScript Implementation
 *
 * Automatically generates unit tests and API tests by scanning source code.
 * Analyzes JavaScript/TypeScript files to detect exports, imports, and API routes,
 * then creates appropriate test files with proper structure and mocking.
 *
 * Features:
 * - Unit test generation for exported functions/classes
 * - API test generation for Express routes
 * - Automatic mock setup for known libraries
 * - Jest configuration scaffolding
 * - Support for qtests framework integration
 * - TypeScript ES module only (no version duplication)
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestGenerator = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const esm_globals_js_1 = require("../utils/esm-globals.js");
// ES Module __dirname equivalent - lazy initialization to avoid Jest issues
let moduleDirname;
function getModuleDirnameForTestGenerator() {
    if (moduleDirname === undefined) {
        // Use a try-catch to handle Jest environment gracefully
        try {
            // Use eval to hide import.meta from Jest's static parser
            const importMetaUrl = (0, eval)('import.meta.url');
            moduleDirname = (0, esm_globals_js_1.getModuleDirname)(importMetaUrl);
        }
        catch (error) {
            // Fallback for Jest environment
            moduleDirname = process.cwd();
        }
    }
    return moduleDirname;
}
// Configuration constants - TypeScript ES module only
const DEFAULT_CONFIG = {
    SRC_DIR: '.',
    TEST_DIR: 'generated-tests',
    KNOWN_MOCKS: ['axios', 'node-fetch', 'pg', 'mongoose', 'fs', 'redis'],
    VALID_EXTS: ['.ts', '.js', '.tsx', '.jsx']
};
// Regex patterns for code analysis - Enhanced for both ES modules and CommonJS
const PATTERNS = {
    qtests: /from ['"]qtests['"]|require\(['"]qtests['"]\)/,
    api: /\b(app|router)\.(get|post|put|delete|patch)\s*\(\s*['"`]([^'"`]+)['"`]/gi,
    // ES module exports: export const, export function, export class
    exportsES: /^\s*export\s+(?:const|function|class)\s+([a-zA-Z0-9_]+)/gm,
    // ES module named exports: export { name1, name2, name3 }
    exportsNamed: /export\s*\{\s*([^}]+)\s*\}/g,
    // ES module default exports: export default SomeName
    exportsDefault: /export\s+default\s+([a-zA-Z0-9_]+)/g,
    // CommonJS exports: module.exports = {}, module.exports.name =, exports.name =
    exportsCommonJS: /(?:module\.exports\.([a-zA-Z0-9_]+)\s*=|exports\.([a-zA-Z0-9_]+)\s*=|module\.exports\s*=\s*([a-zA-Z0-9_]+))/gm,
    // Function declarations that might be exported
    functionDeclarations: /^\s*(?:async\s+)?function\s+([a-zA-Z0-9_]+)\s*\(/gm,
    // Class declarations that might be exported
    classDeclarations: /^\s*class\s+([a-zA-Z0-9_]+)/gm,
    imports: /from ['"]([^'"]+)['"]|require\(['"]([^'"]+)['"]\)/g
};
class TestGenerator {
    constructor(options = {}) {
        // Precompiled include/exclude regexes for fast filtering
        this.includeRegexes = [];
        this.excludeRegexes = [];
        this.config = { ...DEFAULT_CONFIG, ...options };
        this.scanned = [];
        this.isESModule = this.detectESModule(); // Detect module type once during initialization
        // Compile include/exclude glob patterns to regex for matching
        this.includeRegexes = (this.config.include || []).map(this.globToRegExp);
        this.excludeRegexes = (this.config.exclude || []).map(this.globToRegExp);
    }
    /**
     * Detect if the current project uses ES modules or CommonJS
     * Since we're now "TypeScript ES module only", this defaults to true for TypeScript projects
     */
    detectESModule() {
        try {
            // Check package.json for explicit "type": "module"
            const packagePath = path_1.default.resolve(process.cwd(), 'package.json');
            if (fs_1.default.existsSync(packagePath)) {
                const packageJson = JSON.parse(fs_1.default.readFileSync(packagePath, 'utf8'));
                if (packageJson.type === 'module') {
                    return true;
                }
                // For TypeScript ES module only approach, prefer ES modules when TypeScript is detected
                if (packageJson.devDependencies?.typescript || packageJson.dependencies?.typescript) {
                    return true;
                }
            }
            // Check for ES module patterns in source files (excluding test files and node_modules)
            const sourceFiles = this.walkProject()
                .filter(file => {
                const ext = path_1.default.extname(file);
                const isValidExt = this.config.VALID_EXTS.includes(ext);
                const isTestFile = this.isTestFile(path_1.default.basename(file));
                const isNodeModules = file.includes('node_modules');
                return isValidExt && !isTestFile && !isNodeModules;
            })
                .slice(0, 10); // Sample first 10 files for performance
            let esModuleCount = 0;
            let commonJSCount = 0;
            for (const file of sourceFiles) {
                try {
                    const content = fs_1.default.readFileSync(file, 'utf8');
                    // Look for ES module patterns (import OR export statements)
                    if (content.includes('import ') || content.includes('export ')) {
                        esModuleCount++;
                    }
                    // Look for CommonJS patterns
                    if (content.includes('require(') || content.includes('module.exports')) {
                        commonJSCount++;
                    }
                }
                catch (error) {
                    // Skip files we can't read
                    continue;
                }
            }
            // For TypeScript ES module only approach, prefer ES modules when equal or when TypeScript files are present
            if (esModuleCount === 0 && commonJSCount === 0) {
                return true; // Default to ES modules for TypeScript ES module only approach
            }
            if (esModuleCount === 0) {
                return false; // No ES module patterns found, default to CommonJS
            }
            return esModuleCount >= commonJSCount; // Changed from > to >= to prefer ES modules
        }
        catch (error) {
            // Default to ES modules for TypeScript ES module only approach
            return true;
        }
    }
    /**
     * Check if directory should be skipped during discovery
     */
    shouldSkipDirectory(dirName) {
        const skipPatterns = [
            'node_modules', '.git', '.next', 'dist', 'build', 'coverage',
            '.vscode', '.idea', 'docs', 'documentation', 'assets', 'public', 'static',
            '.replit_cache', '.config', '.npm', 'logs',
            'examples', 'demo', 'demos', 'samples', 'bin',
            // Skip common test and generated directories
            '__mocks__', '__tests__', 'tests', 'test', 'generated-tests',
            // Skip manual test directories and fixtures
            'manual-tests', 'fixtures', 'test-fixtures'
        ];
        return skipPatterns.includes(dirName) || dirName.startsWith('.');
    }
    /**
     * Walk entire project directory structure, respecting skip patterns
     */
    walkProject() {
        const root = this.config.SRC_DIR
            ? path_1.default.resolve(process.cwd(), this.config.SRC_DIR)
            : process.cwd();
        return this.walkRecursive(root);
    }
    /**
     * Recursively walk directory and return all file paths, skipping irrelevant directories
     */
    walkRecursive(dir) {
        if (!fs_1.default.existsSync(dir)) {
            return [];
        }
        return fs_1.default.readdirSync(dir, { withFileTypes: true }).flatMap(entry => {
            const full = path_1.default.resolve(dir, entry.name);
            if (entry.isDirectory()) {
                // Skip directories that shouldn't contain tests or source files
                if (this.shouldSkipDirectory(entry.name)) {
                    return [];
                }
                return this.walkRecursive(full);
            }
            else {
                return [full];
            }
        });
    }
    /**
     * Convert a glob pattern (supports *, **, ?) into a RegExp
     * - *  matches any sequence except path separator
     * - ** matches any sequence including path separators
     * - ?  matches a single character except path separator
     */
    globToRegExp(pattern) {
        // Normalize to posix style for matching
        let pat = pattern.replace(/\\/g, '/');
        // Escape regex special chars, except our glob tokens * ?
        pat = pat.replace(/([.+^${}()|\[\]\\])/g, '\\$1');
        // Convert ** to a special token first to avoid conflict with *
        pat = pat.replace(/\*\*/g, '::GLOBSTAR::');
        // Convert remaining * and ?
        pat = pat.replace(/\*/g, '[^/]*').replace(/\?/g, '[^/]');
        // Convert GLOBSTAR
        pat = pat.replace(/::GLOBSTAR::/g, '.*');
        // Anchor pattern
        pat = '^' + pat + '$';
        return new RegExp(pat);
    }
    /**
     * Check include/exclude patterns against a path (posix normalized)
     */
    pathMatchesFilters(filePath) {
        const posixPath = filePath.replace(/\\/g, '/');
        // Apply exclude first
        if (this.excludeRegexes.some(rx => rx.test(posixPath))) {
            return false;
        }
        // If includes provided, must match at least one include
        if (this.includeRegexes.length > 0) {
            return this.includeRegexes.some(rx => rx.test(posixPath));
        }
        return true; // No includes means include all (after excludes)
    }
    /**
     * Legacy walk method for backwards compatibility (walks single directory)
     */
    walk(dir) {
        if (!fs_1.default.existsSync(dir)) {
            return [];
        }
        return fs_1.default.readdirSync(dir, { withFileTypes: true }).flatMap(entry => {
            const full = path_1.default.resolve(dir, entry.name);
            return entry.isDirectory() ? this.walk(full) : [full];
        });
    }
    /**
     * Check if file should be skipped as a source file (config, setup, etc.)
     */
    shouldSkipSourceFile(file) {
        const basename = path_1.default.basename(file);
        const dirname = path_1.default.dirname(file);
        // Skip files in test-related or excluded directories (path-wise guard)
        const excludedDirs = ['__mocks__', '__tests__', `${path_1.default.sep}test${path_1.default.sep}`, `${path_1.default.sep}tests${path_1.default.sep}`, 'generated-tests', 'manual-tests', 'node_modules', `${path_1.default.sep}dist${path_1.default.sep}`, `${path_1.default.sep}build${path_1.default.sep}`, `${path_1.default.sep}.git${path_1.default.sep}`, 'fixtures'];
        if (excludedDirs.some(seg => dirname.includes(seg))) {
            return true;
        }
        const skipPatterns = [
            /^jest\.config\./, // Jest config files
            /^jest-setup\./, // Jest setup files
            /^setup\./, // Setup files
            /^config\./, // Config files  
            /-demo\./, // Demo files
            /-example\./, // Example files
            /\.config\./, // Any config files
            /^example\./, // Files named "example.*"
            /^demo\./, // Files named "demo.*"
            /qtests-runner\./, // Generated runner files
            /setupMultiple/, // Test setup helpers
            /reloadCheck/, // Test utilities
            /testSetup/, // Test setup files
        ];
        return skipPatterns.some(pattern => pattern.test(basename));
    }
    /**
     * Categorize discovered files into source files and existing tests
     */
    categorizeFiles(files) {
        const sourceFiles = [];
        const existingTests = [];
        files.forEach(file => {
            const ext = path_1.default.extname(file);
            const basename = path_1.default.basename(file);
            // Skip files with invalid extensions
            if (!this.config.VALID_EXTS.includes(ext)) {
                return;
            }
            // Apply CLI include/exclude filters against project-relative path
            const relFromCwd = path_1.default.relative(process.cwd(), file);
            if (!this.pathMatchesFilters(relFromCwd)) {
                return;
            }
            // Skip config, demo, and setup files
            if (this.shouldSkipSourceFile(file)) {
                return;
            }
            // Check if this is a test file
            if (this.isTestFile(basename)) {
                existingTests.push(file);
            }
            else {
                // Check if this source file already has a corresponding test
                const hasTest = this.hasCorrespondingTest(file, files);
                if (!hasTest) {
                    sourceFiles.push(file);
                }
            }
        });
        return { sourceFiles, existingTests };
    }
    /**
     * Check if filename indicates it's a test file
     */
    isTestFile(filename) {
        const testPatterns = [
            /\.test\./,
            /\.spec\./,
            /_test\./,
            /_spec\./,
            /\.e2e\./,
            /\.integration\./
        ];
        return testPatterns.some(pattern => pattern.test(filename));
    }
    /**
     * Check if a source file has a corresponding test file
     */
    hasCorrespondingTest(sourceFile, allFiles) {
        const dir = path_1.default.dirname(sourceFile);
        const basename = path_1.default.basename(sourceFile, path_1.default.extname(sourceFile));
        const ext = path_1.default.extname(sourceFile);
        // Common test file patterns to look for - TypeScript ES module only
        const testPatterns = [
            `${basename}.test.ts`,
            `${basename}.GenerateTest.test.ts`, // Updated generated unit test pattern  
            `${basename}GeneratedTest.test.ts`, // Legacy pattern for backwards compatibility
            `${basename}.spec.ts`,
            `${basename}_test.ts`,
            `${basename}_spec.ts`,
            `${basename}.test${ext}`,
            `${basename}.spec${ext}`
        ];
        // Look for test files in the same directory
        const sameDirectoryTests = testPatterns.map(pattern => path_1.default.join(dir, pattern));
        // Look for test files in common test directories
        const testDirectories = ['tests', 'test', '__tests__', 'spec'];
        const testDirectoryTests = testDirectories.flatMap(testDir => {
            const testPath = path_1.default.join(dir, testDir);
            return testPatterns.map(pattern => path_1.default.join(testPath, pattern));
        });
        // Check if any of these test files exist
        const allTestPaths = [...sameDirectoryTests, ...testDirectoryTests];
        // Normalize paths for comparison - convert both to absolute paths
        const normalizedAllFiles = allFiles.map(file => path_1.default.resolve(file));
        const normalizedTestPaths = allTestPaths.map(testPath => path_1.default.resolve(testPath));
        return normalizedTestPaths.some(testPath => normalizedAllFiles.includes(testPath));
    }
    /**
     * Detect if source file or content indicates React usage
     */
    detectReactUsage(file, content = '') {
        // Check file extension
        if (file.endsWith('.tsx') || file.endsWith('.jsx')) {
            return true;
        }
        // Check for React imports
        const reactImports = /import.*(?:react|React|@types\/react)/i.test(content);
        if (reactImports)
            return true;
        // Check for JSX patterns
        const jsxPatterns = [
            /<[A-Z][a-zA-Z0-9]*[\s\/>]/, // Component tags like <MyComponent
            /<[a-z]+[\s\/>]/, // HTML tags like <div>
            /React\.createElement/, // React.createElement calls
            /jsx.*:/, // JSX pragma
        ];
        return jsxPatterns.some(pattern => pattern.test(content));
    }
    /**
     * Detect if export name is likely a React hook
     */
    isReactHook(exportName) {
        return exportName.startsWith('use') && exportName.length > 3;
    }
    /**
     * Detect if export name is likely a React component
     */
    isReactComponent(exportName, content = '') {
        // Check if it starts with uppercase (component convention)
        if (!/^[A-Z]/.test(exportName))
            return false;
        // Check if it's defined as a function that might return JSX
        const componentPatterns = [
            new RegExp(`function\\s+${exportName}\\s*\\(`),
            new RegExp(`const\\s+${exportName}\\s*=\\s*\\(`),
            new RegExp(`export\\s+function\\s+${exportName}\\s*\\(`),
            new RegExp(`${exportName}\\s*=\\s*\\(.*\\)\\s*=>`) // Arrow function
        ];
        return componentPatterns.some(pattern => pattern.test(content));
    }
    /**
     * Heuristically detect if a React component likely requires props.
     * - TS inline prop types without ?: required (e.g., props: { id: string })
     * - Destructured props without defaults (e.g., function C({ id }: { id: string }))
     * - propTypes with isRequired
     */
    componentRequiresProps(exportName, content = '') {
        try {
            // 1) propTypes isRequired
            const propTypesReq = new RegExp(`${exportName}\.propTypes\s*=\s*\{[\s\S]*?isRequired`, 'm');
            if (propTypesReq.test(content))
                return true;
            // 2) TS inline type with required fields (no ?)
            // Simple conservative detection for inline typed props/destructuring with inline types
            const tsInlineSimple = new RegExp(`${exportName}[\\s\\S]*\\(\\s*props\\s*:\\s*\\{[^}]+\\}`, 'm');
            const tsDestructuredSimple = new RegExp(`${exportName}[\\s\\S]*\\(\\s*\\{[^}]+\\}\\s*:\\s*\\{[^}]+\\}`, 'm');
            if (tsInlineSimple.test(content) || tsDestructuredSimple.test(content)) {
                return true;
            }
            const tsInline1 = new RegExp(`(?:export\\s+)?function\\s+${exportName}\\s*\\(\\s*props\\s*:\\s*\\{([\\n\\r\\t \\w:<>\\|\\[\\]\\n\\r,?]+)\\}\\s*\\)`, 'm');
            const tsInline2 = new RegExp(`(?:export\s+)?const\s+${exportName}\s*=\s*\(\s*props\s*:\s*\{([\n\r\t \w:<>\|\[\]\n\r,?]+)\}\s*\)`, 'm');
            const tsDestructured = new RegExp(`(?:export\s+)?function\s+${exportName}\s*\(\s*\{([^}=]+)\}\s*:\s*\{([^}]+)\}\s*\)`, 'm');
            const tsArrowDestructured = new RegExp(`(?:export\s+)?const\s+${exportName}\s*=\s*\(\s*\{([^}=]+)\}\s*:\s*\{([^}]+)\}\s*\)`, 'm');
            const matches = [tsInline1.exec(content), tsInline2.exec(content), tsDestructured.exec(content), tsArrowDestructured.exec(content)];
            for (const m of matches) {
                if (!m)
                    continue;
                const typeBlock = (m[1] || m[2] || '').trim();
                if (!typeBlock)
                    continue;
                // If any field lacks ?, assume required
                const fields = typeBlock.split(',');
                for (const f of fields) {
                    const field = f.trim();
                    if (!field)
                        continue;
                    // Example: id?: string vs id: string
                    if (/^[A-Za-z_$][\w$]*\s*:\s*[^?]/.test(field)) {
                        return true;
                    }
                }
            }
            // 3) Destructured props without default object for param (no = {})
            const destructuredNoDefaultFn = new RegExp(`(?:export\s+)?function\s+${exportName}\s*\(\s*\{([^}]+)\}\s*\)`, 'm');
            const destructuredNoDefaultArrow = new RegExp(`(?:export\s+)?const\s+${exportName}\s*=\s*\(\s*\{([^}]+)\}\s*\)`, 'm');
            if (destructuredNoDefaultFn.test(content) || destructuredNoDefaultArrow.test(content)) {
                // If the param includes = {}, it's optional; otherwise assume required
                const paramWithDefault = new RegExp(`${exportName}[^\n]*\(\s*\{[^}]+\}\s*=\s*\{\}\s*\)`);
                if (!paramWithDefault.test(content))
                    return true;
            }
            return false;
        }
        catch {
            return false;
        }
    }
    /**
     * Generate test file path based on source file and test type
     * React-aware: generates .tsx for React components/hooks, .ts otherwise
     */
    getRelativeTestPath(file, type = 'unit', content = '') {
        const dir = path_1.default.dirname(file);
        const basename = path_1.default.basename(file, path_1.default.extname(file));
        // Prefer JSX-free tests: choose .tsx ONLY when emitting JSX (we do not)
        const testExt = '.ts';
        if (type === 'unit') {
            // For unit tests, place them alongside the source file with GeneratedTest naming
            return path_1.default.join(dir, `${basename}.GenerateTest.test${testExt}`);
        }
        else {
            // For API/integration tests, use the configured test directory with appropriate extension
            const rel = path_1.default.relative(process.cwd(), file);
            return path_1.default.join(this.config.TEST_DIR, rel.replace(/\.[tj]sx?$/, `.GenerateTest.test${testExt}`).replace(/[\\/]/g, '__'));
        }
    }
    /**
     * Create directory if it doesn't exist
     */
    createDir(p) {
        const dir = path_1.default.dirname(p);
        if (!fs_1.default.existsSync(dir)) {
            fs_1.default.mkdirSync(dir, { recursive: true });
        }
    }
    /**
     * Write file only if it doesn't already exist, unless force flag is set
     * Supports dry-run mode for previewing planned files
     */
    writeIfMissing(p, content, dryRun = false) {
        const exists = fs_1.default.existsSync(p);
        // Allow overwrite only for files generated by this tool (contain ".GenerateTest")
        const isGeneratedTest = p.includes('.GenerateTest');
        const canWrite = !exists || (Boolean(this.config.force) && isGeneratedTest);
        if (dryRun) {
            // In dry-run mode, just log what would be written
            console.log(`${exists ? '[WOULD OVERWRITE]' : '[WOULD CREATE]'} ${path_1.default.relative('.', p)}`);
            return canWrite;
        }
        if (canWrite) {
            this.createDir(p);
            fs_1.default.writeFileSync(p, content, 'utf8');
            return true;
        }
        return false;
    }
    /**
     * Extract imported modules from file content - Enhanced for both ES modules and CommonJS
     */
    getUsedModules(content) {
        return [...content.matchAll(PATTERNS.imports)]
            .map(m => m[1] || m[2]) // m[1] for ES modules, m[2] for CommonJS
            .filter(x => x && !x.startsWith('.') && !x.startsWith('/'));
    }
    /**
     * Ensure a local copy of API test utilities exists at generated-tests/utils/httpTest.js
     * so that generated integration tests work without extra project wiring.
     * Idempotent: only writes if missing.
     */
    ensureLocalHttpTestUtils() {
        try {
            const targetDir = path_1.default.join(process.cwd(), this.config.TEST_DIR || 'generated-tests', 'utils');
            const targetFile = path_1.default.join(targetDir, 'httpTest.js');
            if (fs_1.default.existsSync(targetFile))
                return;
            // Minimal, dependency-free supertest-like shim and express-style matcher
            const content = `// generated-tests/utils/httpTest.js - minimal local test http helpers (ESM)
export function createMockApp() {
  // Route table keyed by METHOD + space + path
  const routes = new Map();
  const add = (m, p, h) => { routes.set(m.toUpperCase() + ' ' + p, h); };
  const app = {
    get: (p, h) => add('GET', p, h),
    post: (p, h) => add('POST', p, h),
    put: (p, h) => add('PUT', p, h),
    patch: (p, h) => add('PATCH', p, h),
    delete: (p, h) => add('DELETE', p, h),
    async handle(method, url, body) {
      const key = method.toUpperCase() + ' ' + url;
      const handler = routes.get(key);
      const query = (() => {
        try {
          const qs = url.includes('?') ? url.split('?')[1] : '';
          return Object.fromEntries(new URLSearchParams(qs));
        } catch {
          return {};
        }
      })();
      const req = { method: method.toUpperCase(), url, body, query };
      const res = {
        statusCode: 404,
        headers: {},
        body: undefined,
        _rawBody: undefined,
        setHeader(name, value) { this.headers[String(name).toLowerCase()] = String(value); },
        end(payload) {
          this._rawBody = payload;
          try {
            this.body = typeof payload === 'string' ? JSON.parse(payload) : payload;
          } catch {
            this.body = payload;
          }
        }
      };
      if (!handler) {
        res.statusCode = 404;
        res.end(JSON.stringify({ error: 'Not Found' }));
        return res;
      }
      // Default to 200 unless handler sets otherwise
      res.statusCode = 200;
      await handler(req, res);
      return res;
    }
  };
  return app;
}

export function supertest(app) {
  const make = (method) => (route) => ({
    _payload: undefined,
    send(data) { this._payload = data; return this; },
    async expect(status) {
      const res = await app.handle(method, route, this._payload);
      if (res.statusCode !== status) {
        throw new Error(\`Expected status \${status} but got \${res.statusCode}\`);
      }
      return res;
    }
  });
  return {
    get: make('GET'),
    post: make('POST'),
    put: make('PUT'),
    patch: make('PATCH'),
    delete: make('DELETE')
  };
}
`;
            fs_1.default.mkdirSync(targetDir, { recursive: true });
            fs_1.default.writeFileSync(targetFile, content, 'utf8');
            console.log(`✅ Scaffolded local API test utils at ${path_1.default.relative(process.cwd(), targetFile)}`);
        }
        catch (err) {
            console.warn('⚠️  Could not scaffold local httpTest utils:', err?.message || String(err));
        }
    }
    /**
     * Detect if code uses Date or Math.random for deterministic test helpers
     * 🚩AI: DETERMINISM_HELPERS — fake timers and seeded randomness scaffolding
     */
    detectNonDeterministicCode(content) {
        const usesDate = /new Date\(|Date\.now\(|\.getTime\(/.test(content);
        const usesRandom = /Math\.random\(/.test(content);
        return { usesDate, usesRandom };
    }
    /**
     * Optional TypeScript AST analysis for better type inference
     * 🚩AI: TYPE_INFERENCE_OPTION — dynamic import('typescript') with heuristics fallback
     */
    async tryTypeScriptAnalysis(file, content) {
        try {
            // Dynamic import of TypeScript - only if available
            const ts = await Promise.resolve().then(() => __importStar(require('typescript'))).catch(() => null);
            if (!ts) {
                return null;
            }
            // Parse the TypeScript source
            const sourceFile = ts.createSourceFile(file, content, ts.ScriptTarget.Latest, true);
            const functions = [];
            // Visitor function to extract function declarations with types
            const visit = (node) => {
                if (ts.isFunctionDeclaration(node) && node.name) {
                    const funcName = node.name.getText();
                    const params = node.parameters.map((param) => ({
                        name: param.name.getText(),
                        type: param.type ? param.type.getText() : 'any'
                    }));
                    functions.push({ name: funcName, params });
                }
                ts.forEachChild(node, visit);
            };
            visit(sourceFile);
            return { functions };
        }
        catch (error) {
            // Fallback gracefully if TypeScript analysis fails
            console.log(`TypeScript analysis failed: ${error.message}`);
            return null;
        }
    }
    /**
     * Generate sample values based on TypeScript types
     */
    generateSampleValue(type) {
        const cleanType = type.toLowerCase().trim();
        switch (cleanType) {
            case 'string':
                return `'test-string'`;
            case 'number':
                return '42';
            case 'boolean':
                return 'true';
            case 'array':
            case 'string[]':
                return `['item1', 'item2']`;
            case 'number[]':
                return '[1, 2, 3]';
            case 'object':
                return `{ key: 'value' }`;
            default:
                if (cleanType.endsWith('[]')) {
                    return '[]';
                }
                if (cleanType.includes('|')) {
                    // Union type - pick first option
                    const firstType = cleanType.split('|')[0].trim();
                    return this.generateSampleValue(firstType);
                }
                return 'undefined';
        }
    }
    /**
     * Detect if function has parameterized logic suitable for table-driven tests
     */
    detectParameterizedLogic(content, functionName) {
        // Look for the function definition
        const funcRegex = new RegExp(`function\\s+${functionName}\\s*\\([^)]*\\)\\s*\\{([^}]+)\\}`, 'i');
        const match = content.match(funcRegex);
        if (!match)
            return false;
        const functionBody = match[1];
        // Heuristics for parameterized logic
        const hasConditionals = /if\s*\(|switch\s*\(|case\s+/.test(functionBody);
        const hasArithmetic = /[+\-*/%]/.test(functionBody);
        const hasComparisons = /[<>=!]+/.test(functionBody);
        const hasStringOps = /\.split\(|\.substring\(|\.slice\(/.test(functionBody);
        return hasConditionals || hasArithmetic || hasComparisons || hasStringOps;
    }
    /**
     * Generate realistic test inputs based on function parameters
     */
    generateRealisticInputs(functionName, params) {
        const inputs = [];
        const paramNames = [];
        params.forEach(param => {
            paramNames.push(param.name);
            // Generate contextually appropriate values based on parameter name
            const paramName = param.name.toLowerCase();
            const paramType = param.type.toLowerCase();
            if (paramName.includes('id') || paramName.includes('uuid')) {
                inputs.push(paramType === 'string' ? `'user-123'` : '123');
            }
            else if (paramName.includes('name') || paramName.includes('title')) {
                inputs.push(`'TestName'`);
            }
            else if (paramName.includes('email')) {
                inputs.push(`'test@example.com'`);
            }
            else if (paramName.includes('age') || paramName.includes('count')) {
                inputs.push('25');
            }
            else if (paramName.includes('url') || paramName.includes('path')) {
                inputs.push(`'/api/test'`);
            }
            else if (paramName.includes('data') || paramName.includes('payload')) {
                inputs.push(`{ test: 'data' }`);
            }
            else {
                inputs.push(this.generateSampleValue(param.type));
            }
        });
        const expectedPattern = `// Expected: meaningful result based on ${paramNames.join(', ')}`;
        return { inputs, expectedPattern };
    }
    /**
     * Generate deterministic helpers for tests that need them
     */
    generateDeterministicHelpers(usesDate, usesRandom) {
        const helpers = [];
        if (usesDate || usesRandom) {
            helpers.push(`// Deterministic test helpers`);
            helpers.push(`beforeEach(() => {`);
            if (usesDate) {
                helpers.push(`  // Fix time for deterministic Date behavior`);
                helpers.push(`  jest.useFakeTimers().setSystemTime(new Date('2023-01-01T00:00:00Z'));`);
            }
            if (usesRandom) {
                helpers.push(`  // Seed Math.random for deterministic behavior`);
                helpers.push(`  let seed = 12345;`);
                helpers.push(`  Math.random = jest.fn(() => {`);
                helpers.push(`    seed = (seed * 9301 + 49297) % 233280;`);
                helpers.push(`    return seed / 233280;`);
                helpers.push(`  });`);
            }
            helpers.push(`});`);
            helpers.push(``);
            if (usesDate) {
                helpers.push(`afterEach(() => {`);
                helpers.push(`  jest.useRealTimers();`);
                helpers.push(`});`);
                helpers.push(``);
            }
        }
        return helpers;
    }
    /**
     * Generate React component test using React.createElement (no JSX)
     */
    createReactComponentTest(exportName, basename, useProviders) {
        const renderLine = useProviders
            ? `const { container } = render(React.createElement(Providers as any, {}, React.createElement(Component as any, {})));`
            : `const { container } = render(React.createElement(Component as any, {}));`;
        return [
            `describe('${exportName} Component', () => {`,
            `  it('renders without crashing', () => {`,
            `    // Resolve component from exports`,
            `    const Component = (testModule as any).default ?? (testModule as any)['${exportName}'];`,
            `    expect(Component).toBeDefined();`,
            `    // Smoke render using React.createElement (no JSX)`,
            `    ${renderLine}`,
            `    expect(container).toBeDefined();`,
            `  });`,
            `});`,
            ``
        ];
    }
    /**
     * Generate React hook test using wrapper component
     */
    createReactHookTest(exportName, basename, useProviders) {
        const probeRender = useProviders
            ? `render(React.createElement(Providers as any, {}, React.createElement(HookProbe)))`
            : `render(React.createElement(HookProbe))`;
        return [
            `describe('${exportName} Hook', () => {`,
            `  it('mounts via probe without errors', () => {`,
            `    // Create hook probe component (never call hooks outside a component)`,
            `    function HookProbe() {`,
            `      const hookResult = (testModule as any)['${exportName}']();`,
            `      return React.createElement('div', { 'data-testid': 'hook-result' }, String(!!hookResult));`,
            `    }`,
            `    const { getByTestId } = ${probeRender};`,
            `    expect(getByTestId('hook-result')).toBeInTheDocument();`,
            `  });`,
            `});`,
            ``
        ];
    }
    /**
     * Generate unit test content for a file - TypeScript ES module with React support
     * 🚩AI: ENTRY_POINT_FOR_GENERATED_TEST_IMPORTS — insert `import 'qtests/setup'` first
     * 🚩AI: UNIT_TEMPLATE_SECTION — write per-export describe/it with positive + edge
     */
    createUnitTest(file, exports, usesQtests, mocks, content = '') {
        const basename = path_1.default.basename(file, path_1.default.extname(file));
        const ext = path_1.default.extname(file);
        const lines = [
            `// Generated unit test for ${path_1.default.basename(file)} - TypeScript ES module`,
            `// 🚩AI: ENTRY_POINT_FOR_GENERATED_TEST_IMPORTS`,
            `import 'qtests/setup';`, // Always import qtests/setup first
            ``
        ];
        // Detect if this is a React file and whether it uses common providers
        const isReactFile = this.detectReactUsage(file, content);
        const usesReactQuery = /@tanstack\/react-query/.test(content);
        const usesReactHookForm = /react-hook-form/.test(content) || /useFormContext|FormProvider/.test(content);
        const wantsRouter = Boolean(this.config.withRouter);
        const detectsRouter = /react-router(?:-dom)?/.test(content);
        const usesReactRouter = isReactFile && wantsRouter && detectsRouter;
        // Import the module being tested (no extension for better ts-jest compatibility)
        lines.push(`import * as testModule from './${basename}';`);
        // Add React imports if needed
        if (isReactFile) {
            lines.push(`import * as React from 'react';`);
            lines.push(`import { render } from '@testing-library/react';`);
            if (usesReactRouter) {
                // Prefer matching the imported module from source when possible
                const routerModule = content.includes('react-router-dom') ? 'react-router-dom' : 'react-router';
                lines.push(`import { MemoryRouter } from '${routerModule}';`);
            }
            if (usesReactQuery) {
                lines.push(`import { QueryClient, QueryClientProvider } from '@tanstack/react-query';`);
            }
            if (usesReactHookForm) {
                lines.push(`import { FormProvider, useForm } from 'react-hook-form';`);
            }
            if (usesReactQuery || usesReactRouter || usesReactHookForm) {
                // Compose providers deterministically: MemoryRouter (outer) -> QueryClientProvider -> FormProvider (inner)
                lines.push(`// Minimal provider composition for tests`);
                lines.push(`const Providers: React.FC<{ children?: React.ReactNode }> = ({ children }) => {`);
                if (usesReactQuery) {
                    lines.push(`  const client = new QueryClient();`);
                }
                if (usesReactHookForm) {
                    lines.push(`  const methods = useForm();`);
                }
                // Build nested providers without JSX using React.createElement
                if (usesReactRouter && usesReactQuery && usesReactHookForm) {
                    lines.push(`  return React.createElement(MemoryRouter as any, {},`);
                    lines.push(`    React.createElement(QueryClientProvider as any, { client },`);
                    lines.push(`      React.createElement(FormProvider as any, methods as any, children as any)`);
                    lines.push(`    )`);
                    lines.push(`  );`);
                }
                else if (usesReactRouter && usesReactQuery) {
                    lines.push(`  return React.createElement(MemoryRouter as any, {},`);
                    lines.push(`    React.createElement(QueryClientProvider as any, { client }, children as any)`);
                    lines.push(`  );`);
                }
                else if (usesReactRouter && usesReactHookForm) {
                    lines.push(`  return React.createElement(MemoryRouter as any, {},`);
                    lines.push(`    React.createElement(FormProvider as any, methods as any, children as any)`);
                    lines.push(`  );`);
                }
                else if (usesReactQuery && usesReactHookForm) {
                    lines.push(`  return React.createElement(QueryClientProvider as any, { client },`);
                    lines.push(`    React.createElement(FormProvider as any, methods as any, children as any)`);
                    lines.push(`  );`);
                }
                else if (usesReactRouter) {
                    lines.push(`  return React.createElement(MemoryRouter as any, {}, children as any);`);
                }
                else if (usesReactQuery) {
                    lines.push(`  return React.createElement(QueryClientProvider as any, { client }, children as any);`);
                }
                else if (usesReactHookForm) {
                    lines.push(`  return React.createElement(FormProvider as any, methods as any, children as any);`);
                }
                lines.push(`};`);
            }
        }
        // Add console capture if needed
        if (usesQtests) {
            lines.push(`import { mockConsole } from 'qtests';`);
        }
        lines.push(``);
        // Replace jest.mock with qtests stub comments for known libraries
        if (mocks.length > 0) {
            lines.push(`// External dependencies automatically stubbed by qtests/setup:`);
            mocks.forEach(lib => {
                lines.push(`// - ${lib}: stubbed by qtests (no jest.mock needed)`);
            });
            lines.push(``);
        }
        // Add deterministic helpers if the source code uses Date or Math.random
        if (content) {
            const { usesDate, usesRandom } = this.detectNonDeterministicCode(content);
            const deterministicHelpers = this.generateDeterministicHelpers(usesDate, usesRandom);
            deterministicHelpers.forEach(helper => lines.push(helper));
        }
        // Validate export names for safety; skip reserved or falsy/non-identifiers
        const reserved = new Set(['default', 'function', 'undefined', 'null', 'NaN', 'Infinity']);
        const isValidIdent = (name) => /^[A-Za-z_$][\w$]*$/.test(name) && !reserved.has(name);
        const safeExports = (exports || []).filter(isValidIdent);
        // If React file: test only React components/hooks; avoid generic "is defined" blocks alongside
        if (safeExports.length > 0) {
            const reactTargets = [];
            if (isReactFile) {
                for (const exportName of safeExports) {
                    if (this.isReactHook(exportName) || this.isReactComponent(exportName, content)) {
                        reactTargets.push(exportName);
                    }
                }
            }
            if (isReactFile && reactTargets.length > 0) {
                // Emit only React tests; skip appending generic tests afterwards
                for (const exportName of reactTargets) {
                    if (this.isReactHook(exportName)) {
                        const hookTestLines = this.createReactHookTest(exportName, basename, (usesReactQuery || usesReactRouter || usesReactHookForm));
                        lines.push(...hookTestLines);
                    }
                    else if (this.isReactComponent(exportName, content)) {
                        if (this.componentRequiresProps(exportName, content)) {
                            lines.push(`describe('${exportName} Component', () => {`);
                            lines.push(`  it('is defined (fallback: required props detected)', () => {`);
                            lines.push(`    const Component = (testModule as any).default ?? (testModule as any)['${exportName}'];`);
                            lines.push(`    expect(Component).toBeDefined();`);
                            lines.push(`  });`);
                            lines.push(`});`);
                            lines.push('');
                        }
                        else {
                            const componentTestLines = this.createReactComponentTest(exportName, basename, (usesReactQuery || usesReactRouter || usesReactHookForm));
                            lines.push(...componentTestLines);
                        }
                    }
                }
            }
            else {
                // Non-React path or no React targets: generate safe existence tests
                safeExports.forEach(exportName => {
                    lines.push(`describe('${exportName}', () => {`);
                    lines.push(`  it('is defined', () => {`);
                    lines.push(`    expect((testModule as any)['${exportName}']).toBeDefined();`);
                    lines.push(`  });`);
                    lines.push(`});`);
                    lines.push('');
                });
            }
        }
        else {
            // Fallback test when no exports detected
            lines.push(`describe('${path_1.default.basename(file)} module', () => {`);
            lines.push(`  it('should load without errors', async () => {`);
            lines.push(`    expect(testModule).toBeDefined();`);
            lines.push(`    expect(typeof testModule).toBe('object');`);
            lines.push(`  });`);
            lines.push(`});`);
            lines.push(``);
        }
        return lines.join('\n');
    }
    /**
     * Generate API test content for an endpoint - TypeScript ES module only
     * 🚩AI: INTEGRATION_TEMPLATE_SECTION — createMockApp + supertest + failure path
     */
    createApiTest(method, route) {
        const lines = [
            `// Generated integration test for ${method.toUpperCase()} ${route} - TypeScript ES module`,
            `// 🚩AI: ENTRY_POINT_FOR_GENERATED_TEST_IMPORTS`,
            `import 'qtests/setup';`, // Always import qtests/setup first
            ``
        ];
        // Import testing utilities (omit extension for ts-jest compatibility)
        lines.push(`import { createMockApp, supertest } from '../utils/httpTest';`);
        lines.push(``);
        // 🚩AI: DETERMINISM_HELPERS — fake timers and seeded randomness scaffolding
        lines.push(`// Deterministic test helpers`);
        lines.push(`beforeEach(() => {`);
        lines.push(`  // Use fake timers for deterministic time-based behavior`);
        lines.push(`  jest.useFakeTimers().setSystemTime(new Date('2023-01-01T00:00:00Z'));`);
        lines.push(`});`);
        lines.push(``);
        lines.push(`afterEach(() => {`);
        lines.push(`  jest.useRealTimers();`);
        lines.push(`});`);
        lines.push(``);
        // Generate unique test session for API isolation
        lines.push(`// Deterministic unique route for parallel test safety`);
        lines.push(`const testHash = require('crypto').createHash('md5').update('${route}').digest('hex').slice(0, 8);`);
        lines.push(`const uniqueRoute = '${route}' + ('${route}'.includes('?') ? '&' : '?') + 'testId=' + testHash;`);
        lines.push(``);
        // TypeScript test suite
        lines.push(`describe('${method.toUpperCase()} ${route}', () => {`);
        lines.push(`  let app: ReturnType<typeof createMockApp>;`);
        lines.push(``);
        lines.push(`  beforeEach(() => {`);
        lines.push(`    app = createMockApp();`);
        lines.push(`  });`);
        lines.push(``);
        // Success test case
        lines.push(`  it('should return success response', async () => {`);
        lines.push(`    // Setup route handler`);
        lines.push(`    app.${method.toLowerCase()}(uniqueRoute, (req, res) => {`);
        lines.push(`      res.statusCode = 200;`);
        lines.push(`      res.setHeader('content-type', 'application/json');`);
        lines.push(`      res.end(JSON.stringify({`);
        lines.push(`        success: true,`);
        lines.push(`        message: 'Request processed successfully'`);
        lines.push(`      }));`);
        lines.push(`    });`);
        lines.push(``);
        lines.push(`    // Execute test`);
        lines.push(`    const res = await supertest(app)`);
        lines.push(`      .${method.toLowerCase()}(uniqueRoute)`);
        if (method.toLowerCase() !== 'get') {
            lines.push(`      .send({ testData: 'valid input' })`);
        }
        lines.push(`      .expect(200);`);
        lines.push(``);
        lines.push(`    // Verify response`);
        lines.push(`    expect(res.body.success).toBe(true);`);
        lines.push(`    expect(res.body.message).toBe('Request processed successfully');`);
        lines.push(`  });`);
        lines.push(``);
        // Failure test case  
        lines.push(`  it('should handle not found case', async () => {`);
        lines.push(`    // Don't setup any route handlers to simulate 404`);
        lines.push(``);
        lines.push(`    // Execute test`);
        lines.push(`    const res = await supertest(app)`);
        lines.push(`      .${method.toLowerCase()}('/nonexistent-route')`);
        if (method.toLowerCase() !== 'get') {
            lines.push(`      .send({ testData: 'any data' })`);
        }
        lines.push(`      .expect(404);`);
        lines.push(``);
        lines.push(`    // Verify error response`);
        lines.push(`    expect(res.body.error).toBe('Not Found');`);
        lines.push(`  });`);
        lines.push(`});`);
        lines.push('');
        return lines.join('\n');
    }
    /**
     * Intelligently extract exports from both ES modules and CommonJS
     */
    extractExports(content) {
        const exports = new Set();
        // Remove comments to avoid false positives
        const cleanContent = content
            .replace(/\/\*[\s\S]*?\*\//g, '') // Remove /* */ comments
            .replace(/\/\/.*$/gm, ''); // Remove // comments
        // Extract ES module exports (export const/function/class)
        const esExports = [...cleanContent.matchAll(PATTERNS.exportsES)];
        esExports.forEach(match => {
            if (match[1])
                exports.add(match[1]);
        });
        // Extract ES module named exports: export { name1, name2, name3 }
        const namedExports = [...cleanContent.matchAll(PATTERNS.exportsNamed)];
        namedExports.forEach(match => {
            if (match[1]) {
                // Parse the named exports list
                const exportList = match[1].split(',').map(name => name.trim());
                exportList.forEach(name => {
                    // Handle potential aliases: "name as alias" -> use "name"
                    const cleanName = name.split(' as ')[0].trim();
                    if (cleanName && /^[a-zA-Z0-9_]+$/.test(cleanName)) {
                        exports.add(cleanName);
                    }
                });
            }
        });
        // Extract ES module default exports: export default SomeName
        const defaultExports = [...cleanContent.matchAll(PATTERNS.exportsDefault)];
        defaultExports.forEach(match => {
            if (match[1])
                exports.add(match[1]);
        });
        // Extract CommonJS exports
        const commonJSExports = [...cleanContent.matchAll(PATTERNS.exportsCommonJS)];
        commonJSExports.forEach(match => {
            // match[1] = module.exports.name, match[2] = exports.name, match[3] = single assignment
            for (let i = 1; i <= 3; i++) {
                if (match[i])
                    exports.add(match[i]);
            }
        });
        // Handle module.exports = { name1, name2, ... } pattern
        const objectExportMatch = cleanContent.match(/module\.exports\s*=\s*\{([^}]+)\}/);
        if (objectExportMatch) {
            const objectContent = objectExportMatch[1];
            const propertyMatches = objectContent.matchAll(/\b(\w+)(?:\s*:\s*\w+)?\s*[,}]/g);
            for (const match of propertyMatches) {
                if (match[1])
                    exports.add(match[1]);
            }
        }
        return Array.from(exports).filter(name => name && name.length > 0);
    }
    /**
     * Analyze a single file and generate appropriate tests - TypeScript ES module only
     */
    async analyze(file, dryRun = false) {
        const ext = path_1.default.extname(file);
        if (!this.config.VALID_EXTS.includes(ext)) {
            return;
        }
        const content = fs_1.default.readFileSync(file, 'utf8');
        const usesQtests = PATTERNS.qtests.test(content);
        const imports = this.getUsedModules(content);
        const mockTargets = imports.filter(i => this.config.KNOWN_MOCKS.includes(i) && i !== 'qtests');
        // Use intelligent export detection for both ES modules and CommonJS
        let exports = this.extractExports(content);
        // If AST mode requested, attempt to augment exports via TypeScript parser
        if (this.config.mode === 'ast') {
            try {
                const astInfo = await this.tryTypeScriptAnalysis(file, content);
                if (astInfo && Array.isArray(astInfo.functions)) {
                    const astExports = astInfo.functions.map(fn => fn.name).filter(Boolean);
                    exports = Array.from(new Set([...(exports || []), ...astExports]));
                }
            }
            catch {
                // Swallow AST errors and proceed with heuristic
            }
        }
        if (exports.length > 0 && (!this.config.integration)) {
            const testPath = this.getRelativeTestPath(file, 'unit', content);
            const created = this.writeIfMissing(testPath, this.createUnitTest(file, exports, usesQtests, mockTargets, content), dryRun);
            if (created) {
                this.scanned.push({
                    type: 'unit',
                    file: path_1.default.relative('.', testPath)
                });
            }
        }
        // Generate API tests for detected routes - TypeScript only
        const apis = [...content.matchAll(PATTERNS.api)];
        if (apis.length > 0 && (!this.config.unit)) {
            for (const [, , method, route] of apis) {
                const testPath = this.getRelativeTestPath(file, 'api', content)
                    .replace(/\.GenerateTest\.test\.(ts|tsx)$/, `.GenerateTest__${method.toLowerCase()}.test.$1`);
                const created = this.writeIfMissing(testPath, this.createApiTest(method, route), dryRun);
                // If an API test was created, ensure local httpTest utilities exist (idempotent)
                if (created && !dryRun) {
                    this.ensureLocalHttpTestUtils();
                }
                if (created) {
                    this.scanned.push({
                        type: 'api',
                        file: path_1.default.relative('.', testPath)
                    });
                }
            }
        }
    }
    /**
     * Detect if project uses React based on dependencies and source files
     */
    detectReactProject() {
        try {
            // Honor forced React mode if provided via CLI
            if (this.config.react)
                return true;
            // Check package.json for React dependencies
            const packagePath = path_1.default.join(process.cwd(), 'package.json');
            if (fs_1.default.existsSync(packagePath)) {
                const packageJson = JSON.parse(fs_1.default.readFileSync(packagePath, 'utf8'));
                const allDeps = {
                    ...packageJson.dependencies,
                    ...packageJson.devDependencies,
                    ...packageJson.peerDependencies
                };
                const reactDeps = ['react', '@types/react', 'react-dom', '@types/react-dom',
                    '@testing-library/react', '@tanstack/react-query'];
                if (reactDeps.some(dep => allDeps[dep])) {
                    return true;
                }
            }
            // Scan for .tsx files or React imports in source code
            const allFiles = this.walkProject();
            return allFiles.some(file => {
                if (file.endsWith('.tsx') || file.endsWith('.jsx'))
                    return true;
                try {
                    const content = fs_1.default.readFileSync(file, 'utf8');
                    return this.detectReactUsage(file, content);
                }
                catch {
                    return false;
                }
            });
        }
        catch {
            return false;
        }
    }
    /**
     * Create Jest configuration and setup files - React-aware TypeScript ES Module
     */
    scaffoldJestSetup() {
        const isReactProject = this.detectReactProject();
        // Generate Jest config for TypeScript ES modules with React support
        const extensionsToTreatAsEsm = isReactProject ? ['.ts', '.tsx'] : ['.ts'];
        const moduleFileExtensions = isReactProject ? ['ts', 'tsx', 'js', 'jsx', 'json'] : ['ts', 'js', 'json'];
        const testEnvironment = isReactProject ? 'jsdom' : 'node';
        const testMatchPatterns = isReactProject
            ? [
                '**/*.test.ts',
                '**/*.test.tsx',
                '**/*.spec.ts',
                '**/*.spec.tsx',
                '**/*.GenerateTest.test.ts',
                '**/*.GenerateTest.test.tsx',
                '**/manual-tests/**/*.test.ts',
                '**/generated-tests/**/*.test.ts'
            ]
            : [
                '**/*.test.ts',
                '**/*.spec.ts',
                '**/*.GenerateTest.test.ts',
                '**/manual-tests/**/*.test.ts',
                '**/generated-tests/**/*.test.ts'
            ];
        // Build transform config with explicit tsconfig path, ESM, isolatedModules, and JSX when React
        const transformOptions = isReactProject
            ? { tsconfig: '<rootDir>/tsconfig.json', useESM: true, isolatedModules: true, tsconfigFile: undefined, tsconfig: { jsx: 'react-jsx' } }
            : { tsconfig: '<rootDir>/tsconfig.json', useESM: true, isolatedModules: true };
        const transformConfig = {
            '^.+\\.(ts|tsx)$': ['ts-jest', transformOptions]
        };
        // Allow transforming specific ESM-heavy libs and qtests
        const transformIgnore = 'node_modules/(?!(?:qtests|@tanstack|@radix-ui|lucide-react|react-resizable-panels|cmdk|vaul)/)';
        const config = `
// jest.config.mjs - TypeScript ES Module configuration${isReactProject ? ' (React-enabled)' : ''}
// Use ESM export to avoid CommonJS issues under "type": "module"
export default {
  preset: 'ts-jest/presets/default-esm',
  testEnvironment: '${testEnvironment}',
  setupFilesAfterEnv: ['<rootDir>/jest-setup.ts'],
  roots: ['<rootDir>'],
  testMatch: ${JSON.stringify(testMatchPatterns, null, 2)},
  moduleFileExtensions: ${JSON.stringify(moduleFileExtensions)},
  transform: ${JSON.stringify(transformConfig, null, 2)},
  extensionsToTreatAsEsm: ${JSON.stringify(extensionsToTreatAsEsm)},
  transformIgnorePatterns: ['${transformIgnore}'],
  moduleNameMapper: {
    '^(\\.{1,2}/.*)\\.js$': '$1',
    '^qtests/(.*)$': '<rootDir>/node_modules/qtests/$1'
  }
};
`.trim();
        // Generate TypeScript ES module setup with React support
        const domPolyfills = isReactProject ? `

// DOM polyfills for React Testing Library
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(), // Deprecated
    removeListener: jest.fn(), // Deprecated
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});

// ResizeObserver polyfill
global.ResizeObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn(),
}));

// IntersectionObserver polyfill
global.IntersectionObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn(),
}));

// Clipboard polyfill
Object.assign(global.navigator, { clipboard: { writeText: jest.fn().mockResolvedValue(undefined) } });

// URL.createObjectURL polyfill
// Note: keep deterministic
global.URL.createObjectURL = jest.fn().mockReturnValue('blob:stub');` : '';
        const setup = `
// jest-setup.ts - Jest setup for TypeScript ESM${isReactProject ? ' with React support' : ''}
// Keep qtests setup FIRST to ensure global stubbing is active
import 'qtests/setup';
import 'jest';${isReactProject ? "\nimport '@testing-library/jest-dom';" : ''}

// Set test environment early
process.env.NODE_ENV = 'test';

beforeAll(() => {
  jest.setTimeout(10000);
});

afterEach(() => {
  jest.clearAllMocks();
});${domPolyfills}
`.trim();
        this.writeIfMissing('jest.config.mjs', config);
        this.writeIfMissing('jest-setup.ts', setup);
    }
    /**
     * Generate qtests test runner file - TypeScript ES module compatible
     */
    generateQtestsRunner() {
        try {
            // Read the existing qtests-ts-runner.ts as template
            const templatePath = path_1.default.join(getModuleDirnameForTestGenerator(), '..', 'qtests-ts-runner.ts');
            let template = '';
            if (fs_1.default.existsSync(templatePath)) {
                template = fs_1.default.readFileSync(templatePath, 'utf8');
            }
            else {
                // Fallback template for TypeScript ES modules with correct Jest configuration
                template = `
// Generated qtests runner - TypeScript ES module compatible
import { spawn } from 'child_process';
import path from 'path';

// Run tests with TypeScript support and correct Jest arguments
const args = process.argv.slice(2);
const testProcess = spawn('jest', args, {
  stdio: 'inherit',
  shell: true
});

testProcess.on('exit', (code) => {
  process.exit(code || 0);
});
`.trim();
            }
            // Always overwrite qtests-ts-runner.ts to ensure latest functionality and TypeScript compliance
            const outputPath = path_1.default.join(process.cwd(), 'qtests-ts-runner.ts');
            fs_1.default.writeFileSync(outputPath, template, 'utf8');
            console.log('✅ Generated qtests-ts-runner.ts for TypeScript ES modules');
        }
        catch (error) {
            console.error('Failed to generate qtests-ts-runner.ts:', error.message);
        }
    }
    /**
     * Update package.json test script to use qtests-ts-runner.ts
     */
    updatePackageJsonTestScript() {
        try {
            const packagePath = path_1.default.join(process.cwd(), 'package.json');
            if (!fs_1.default.existsSync(packagePath)) {
                console.log('⚠️  package.json not found, skipping test script update');
                return;
            }
            const packageJson = JSON.parse(fs_1.default.readFileSync(packagePath, 'utf8'));
            if (!packageJson.scripts) {
                packageJson.scripts = {};
            }
            packageJson.scripts.test = 'npx tsx qtests-ts-runner.ts';
            fs_1.default.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2), 'utf8');
            console.log('✅ Updated package.json test script to use qtests-ts-runner.ts');
        }
        catch (error) {
            console.log('⚠️  Could not update package.json:', error.message);
        }
    }
    /**
     * Scan for files without tests and generate them - TypeScript ES module only
     */
    async generateTestFiles(dryRun = false) {
        console.log('🔍 Scanning for files that need TypeScript tests...');
        const allFiles = this.walkProject();
        const { sourceFiles } = this.categorizeFiles(allFiles);
        console.log(`📁 Found ${sourceFiles.length} source files without tests`);
        // Generate tests for each source file
        for (const file of sourceFiles) {
            await this.analyze(file, dryRun);
        }
        // On non-dry runs, always scaffold Jest and runner even if there were no new files
        if (!dryRun) {
            this.scaffoldJestSetup();
            this.generateQtestsRunner();
            // Only update package.json if requested via CLI flag
            if (this.config.updatePackageScript) {
                this.updatePackageJsonTestScript();
            }
        }
        else {
            console.log('ℹ️ Dry run: Skipping Jest config and runner generation');
        }
        console.log(`📝 Generated ${this.scanned.length} TypeScript test files:`);
        this.scanned.forEach(test => {
            console.log(`   ${test.type}: ${test.file}`);
        });
    }
    /**
     * Get scan results
     */
    getResults() {
        return this.scanned;
    }
}
exports.TestGenerator = TestGenerator;
exports.default = TestGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,