{"file":"/home/runner/workspace/lib/runner/dsl.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/lib/runner/dsl.ts"],"sourcesContent":["/**\n * Test DSL (Domain Specific Language) \n * \n * This module provides the familiar describe/it/test API that users expect\n * from modern test frameworks. It handles test registration, suite nesting,\n * and hook registration while maintaining compatibility with Jest/Mocha patterns.\n */\n\nimport { \n  getCurrentSuite, \n  pushSuite, \n  popSuite,\n  type Suite, \n  type TestCase \n} from './context.js';\nimport { pushHook } from './hooks.js';\n\n/**\n * Create a test suite with nested context\n * This is the primary way to group related tests and establish shared setup/teardown\n */\nexport function describe(name: string, fn: () => void): void {\n  // Create new suite and add it to current suite's children\n  const suite: Suite = {\n    name,\n    tests: [],\n    suites: [],\n    hooks: { \n      beforeAll: [], \n      afterAll: [], \n      beforeEach: [], \n      afterEach: [] \n    }\n  };\n  \n  const currentSuite = getCurrentSuite();\n  currentSuite.suites.push(suite);\n  \n  // Execute the suite definition function with new suite as context\n  pushSuite(suite);\n  try {\n    fn(); // User's describe block runs here, registering tests and hooks\n  } finally {\n    // Always restore previous suite context, even if describe block throws\n    popSuite();\n  }\n}\n\n/**\n * Register an individual test case\n * Supports both sync and async test functions, plus optional done callback\n */\nexport function it(name: string, fn: TestCase['fn']): void {\n  const currentSuite = getCurrentSuite();\n  currentSuite.tests.push({ \n    name, \n    fn, \n    mode: 'normal' \n  });\n}\n\n// Alias for it() - many developers prefer 'test' over 'it'\nexport const test = it;\n\n/**\n * Mark a test to run exclusively (only this test and other .only tests will run)\n * Useful for focusing on specific failing tests during development\n */\nit.only = (name: string, fn: TestCase['fn']): void => {\n  const currentSuite = getCurrentSuite();\n  currentSuite.tests.push({ \n    name, \n    fn, \n    mode: 'only' \n  });\n};\n\n/**\n * Skip a test (it will appear in results but not execute)\n * Useful for temporarily disabling tests without deleting them\n */\nit.skip = (name: string, fn: TestCase['fn']): void => {\n  const currentSuite = getCurrentSuite();\n  currentSuite.tests.push({ \n    name, \n    fn, \n    mode: 'skip' \n  });\n};\n\n/**\n * Mark a test as todo (placeholder for future implementation)\n * Test will appear in results as pending/todo\n */\nit.todo = (name: string): void => {\n  const currentSuite = getCurrentSuite();\n  currentSuite.tests.push({ \n    name, \n    fn: () => {}, // no-op function for todo tests\n    mode: 'todo' \n  });\n};\n\n// Provide the same modifiers for test() alias\ntest.only = it.only;\ntest.skip = it.skip;\ntest.todo = it.todo;\n\n/**\n * Add support for describe.only and describe.skip\n * These affect all tests within the suite\n */\ndescribe.only = (name: string, fn: () => void): void => {\n  // For now, implement as regular describe\n  // TODO: Implement suite-level only/skip filtering\n  describe(name, fn);\n};\n\ndescribe.skip = (name: string, fn: () => void): void => {\n  // For now, implement as regular describe but mark all tests as skipped\n  // TODO: Implement suite-level skip functionality\n  describe(name, fn);\n};\n\n/**\n * Lifecycle Hooks - Setup and teardown functions\n */\n\n/**\n * Run once before all tests in the current suite\n * Used for expensive setup that can be shared across tests\n */\nexport function beforeAll(fn: () => any | Promise<any>): void {\n  const currentSuite = getCurrentSuite();\n  pushHook(currentSuite, 'beforeAll', fn);\n}\n\n/**\n * Run once after all tests in the current suite\n * Used for cleanup that only needs to happen once per suite\n */\nexport function afterAll(fn: () => any | Promise<any>): void {\n  const currentSuite = getCurrentSuite();\n  pushHook(currentSuite, 'afterAll', fn);\n}\n\n/**\n * Run before each individual test in the current suite\n * Used for per-test setup to ensure test isolation\n */\nexport function beforeEach(fn: () => any | Promise<any>): void {\n  const currentSuite = getCurrentSuite();\n  pushHook(currentSuite, 'beforeEach', fn);\n}\n\n/**\n * Run after each individual test in the current suite\n * Used for per-test cleanup to ensure test isolation\n */\nexport function afterEach(fn: () => any | Promise<any>): void {\n  const currentSuite = getCurrentSuite();\n  pushHook(currentSuite, 'afterEach', fn);\n}"],"version":3}