04136505302f273266715d0efe41bbaa
"use strict";
/**
 * Diff and Formatting Utilities for Assertions
 *
 * This module provides utilities for deep equality comparison and
 * generating helpful diff outputs for failed assertions.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepEqual = deepEqual;
exports.formatValue = formatValue;
exports.generateDiff = generateDiff;
/**
 * Deep equality comparison that handles all JavaScript types
 * Including primitives, objects, arrays, dates, regexes, etc.
 */
function deepEqual(a, b) {
    // Handle same reference
    if (a === b)
        return true;
    // Handle null/undefined
    if (a == null || b == null)
        return a === b;
    // Handle different types
    if (typeof a !== typeof b)
        return false;
    // Handle primitives
    if (typeof a !== 'object')
        return a === b;
    // Handle arrays
    if (Array.isArray(a) !== Array.isArray(b))
        return false;
    if (Array.isArray(a)) {
        if (a.length !== b.length)
            return false;
        for (let i = 0; i < a.length; i++) {
            if (!deepEqual(a[i], b[i]))
                return false;
        }
        return true;
    }
    // Handle dates
    if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
    }
    // Handle regexes
    if (a instanceof RegExp && b instanceof RegExp) {
        return a.toString() === b.toString();
    }
    // Handle objects
    const keysA = Object.keys(a);
    const keysB = Object.keys(b);
    if (keysA.length !== keysB.length)
        return false;
    for (const key of keysA) {
        if (!keysB.includes(key))
            return false;
        if (!deepEqual(a[key], b[key]))
            return false;
    }
    return true;
}
/**
 * Format a value for display in error messages
 */
function formatValue(value) {
    if (value === null)
        return 'null';
    if (value === undefined)
        return 'undefined';
    if (typeof value === 'string')
        return `"${value}"`;
    if (typeof value === 'number')
        return String(value);
    if (typeof value === 'boolean')
        return String(value);
    if (typeof value === 'function')
        return `[Function: ${value.name || 'anonymous'}]`;
    if (value instanceof Date)
        return `Date(${value.toISOString()})`;
    if (value instanceof RegExp)
        return value.toString();
    if (Array.isArray(value)) {
        if (value.length <= 5) {
            return `[${value.map(formatValue).join(', ')}]`;
        }
        else {
            return `[${value.slice(0, 3).map(formatValue).join(', ')}, ... ${value.length - 3} more]`;
        }
    }
    // Handle objects
    try {
        const json = JSON.stringify(value, null, 2);
        if (json.length <= 100)
            return json;
        return `{\n  ${Object.keys(value).slice(0, 3).join(', ')}${Object.keys(value).length > 3 ? ', ...' : ''}\n}`;
    }
    catch {
        return `[Object: ${Object.prototype.toString.call(value)}]`;
    }
}
/**
 * Generate a diff between expected and received values
 * Provides a simple but helpful diff for debugging test failures
 */
function generateDiff(expected, received) {
    const expectedStr = formatValue(expected);
    const receivedStr = formatValue(received);
    // Simple line-by-line diff for multiline strings
    if (typeof expected === 'string' && typeof received === 'string' &&
        (expected.includes('\n') || received.includes('\n'))) {
        const expectedLines = expected.split('\n');
        const receivedLines = received.split('\n');
        const diff = [];
        const maxLines = Math.max(expectedLines.length, receivedLines.length);
        for (let i = 0; i < maxLines; i++) {
            const expectedLine = expectedLines[i];
            const receivedLine = receivedLines[i];
            if (expectedLine === receivedLine) {
                diff.push(`  ${expectedLine || ''}`);
            }
            else {
                if (expectedLine !== undefined) {
                    diff.push(`- ${expectedLine}`);
                }
                if (receivedLine !== undefined) {
                    diff.push(`+ ${receivedLine}`);
                }
            }
        }
        return diff.join('\n');
    }
    // Simple object property diff
    if (typeof expected === 'object' && typeof received === 'object' &&
        expected !== null && received !== null &&
        !Array.isArray(expected) && !Array.isArray(received)) {
        const allKeys = new Set([...Object.keys(expected), ...Object.keys(received)]);
        const diff = [];
        diff.push('Object {');
        for (const key of allKeys) {
            const hasExpected = key in expected;
            const hasReceived = key in received;
            if (hasExpected && hasReceived) {
                if (deepEqual(expected[key], received[key])) {
                    diff.push(`  ${key}: ${formatValue(expected[key])}`);
                }
                else {
                    diff.push(`- ${key}: ${formatValue(expected[key])}`);
                    diff.push(`+ ${key}: ${formatValue(received[key])}`);
                }
            }
            else if (hasExpected) {
                diff.push(`- ${key}: ${formatValue(expected[key])}`);
            }
            else {
                diff.push(`+ ${key}: ${formatValue(received[key])}`);
            }
        }
        diff.push('}');
        return diff.join('\n  ');
    }
    // Default diff format
    return `Expected: ${expectedStr}\nReceived: ${receivedStr}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,