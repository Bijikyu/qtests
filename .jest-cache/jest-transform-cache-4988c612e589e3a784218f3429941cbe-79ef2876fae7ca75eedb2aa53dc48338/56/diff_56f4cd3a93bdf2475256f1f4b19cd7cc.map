{"file":"/home/runner/workspace/utils/testing/expect/diff.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/testing/expect/diff.ts"],"sourcesContent":["/**\n * Diff and Formatting Utilities for Assertions\n * \n * This module provides utilities for deep equality comparison and\n * generating helpful diff outputs for failed assertions.\n */\n\n/**\n * Deep equality comparison that handles all JavaScript types\n * Including primitives, objects, arrays, dates, regexes, etc.\n */\nexport function deepEqual(a: any, b: any): boolean {\n  // Handle same reference\n  if (a === b) return true;\n  \n  // Handle null/undefined\n  if (a == null || b == null) return a === b;\n  \n  // Handle different types\n  if (typeof a !== typeof b) return false;\n  \n  // Handle primitives\n  if (typeof a !== 'object') return a === b;\n  \n  // Handle arrays\n  if (Array.isArray(a) !== Array.isArray(b)) return false;\n  if (Array.isArray(a)) {\n    if (a.length !== b.length) return false;\n    for (let i = 0; i < a.length; i++) {\n      if (!deepEqual(a[i], b[i])) return false;\n    }\n    return true;\n  }\n  \n  // Handle dates\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() === b.getTime();\n  }\n  \n  // Handle regexes\n  if (a instanceof RegExp && b instanceof RegExp) {\n    return a.toString() === b.toString();\n  }\n  \n  // Handle objects\n  const keysA = Object.keys(a);\n  const keysB = Object.keys(b);\n  \n  if (keysA.length !== keysB.length) return false;\n  \n  for (const key of keysA) {\n    if (!keysB.includes(key)) return false;\n    if (!deepEqual(a[key], b[key])) return false;\n  }\n  \n  return true;\n}\n\n/**\n * Format a value for display in error messages\n */\nexport function formatValue(value: any): string {\n  if (value === null) return 'null';\n  if (value === undefined) return 'undefined';\n  if (typeof value === 'string') return `\"${value}\"`;\n  if (typeof value === 'number') return String(value);\n  if (typeof value === 'boolean') return String(value);\n  if (typeof value === 'function') return `[Function: ${value.name || 'anonymous'}]`;\n  if (value instanceof Date) return `Date(${value.toISOString()})`;\n  if (value instanceof RegExp) return value.toString();\n  if (Array.isArray(value)) {\n    if (value.length <= 5) {\n      return `[${value.map(formatValue).join(', ')}]`;\n    } else {\n      return `[${value.slice(0, 3).map(formatValue).join(', ')}, ... ${value.length - 3} more]`;\n    }\n  }\n  \n  // Handle objects\n  try {\n    const json = JSON.stringify(value, null, 2);\n    if (json.length <= 100) return json;\n    return `{\\n  ${Object.keys(value).slice(0, 3).join(', ')}${Object.keys(value).length > 3 ? ', ...' : ''}\\n}`;\n  } catch {\n    return `[Object: ${Object.prototype.toString.call(value)}]`;\n  }\n}\n\n/**\n * Generate a diff between expected and received values\n * Provides a simple but helpful diff for debugging test failures\n */\nexport function generateDiff(expected: any, received: any): string {\n  const expectedStr = formatValue(expected);\n  const receivedStr = formatValue(received);\n  \n  // Simple line-by-line diff for multiline strings\n  if (typeof expected === 'string' && typeof received === 'string' && \n      (expected.includes('\\n') || received.includes('\\n'))) {\n    const expectedLines = expected.split('\\n');\n    const receivedLines = received.split('\\n');\n    \n    const diff: string[] = [];\n    const maxLines = Math.max(expectedLines.length, receivedLines.length);\n    \n    for (let i = 0; i < maxLines; i++) {\n      const expectedLine = expectedLines[i];\n      const receivedLine = receivedLines[i];\n      \n      if (expectedLine === receivedLine) {\n        diff.push(`  ${expectedLine || ''}`);\n      } else {\n        if (expectedLine !== undefined) {\n          diff.push(`- ${expectedLine}`);\n        }\n        if (receivedLine !== undefined) {\n          diff.push(`+ ${receivedLine}`);\n        }\n      }\n    }\n    \n    return diff.join('\\n');\n  }\n  \n  // Simple object property diff\n  if (typeof expected === 'object' && typeof received === 'object' && \n      expected !== null && received !== null && \n      !Array.isArray(expected) && !Array.isArray(received)) {\n    \n    const allKeys = new Set([...Object.keys(expected), ...Object.keys(received)]);\n    const diff: string[] = [];\n    \n    diff.push('Object {');\n    \n    for (const key of allKeys) {\n      const hasExpected = key in expected;\n      const hasReceived = key in received;\n      \n      if (hasExpected && hasReceived) {\n        if (deepEqual(expected[key], received[key])) {\n          diff.push(`  ${key}: ${formatValue(expected[key])}`);\n        } else {\n          diff.push(`- ${key}: ${formatValue(expected[key])}`);\n          diff.push(`+ ${key}: ${formatValue(received[key])}`);\n        }\n      } else if (hasExpected) {\n        diff.push(`- ${key}: ${formatValue(expected[key])}`);\n      } else {\n        diff.push(`+ ${key}: ${formatValue(received[key])}`);\n      }\n    }\n    \n    diff.push('}');\n    return diff.join('\\n  ');\n  }\n  \n  // Default diff format\n  return `Expected: ${expectedStr}\\nReceived: ${receivedStr}`;\n}"],"version":3}