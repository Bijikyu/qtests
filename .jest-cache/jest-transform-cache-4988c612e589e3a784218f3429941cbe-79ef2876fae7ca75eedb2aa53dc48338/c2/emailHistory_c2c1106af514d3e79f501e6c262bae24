32637a84921bb9932f8a2e17b1587012
/**
 * Email History Management Utility - TypeScript Implementation
 *
 * This module manages email history for testing and verification purposes.
 * It provides a clean separation of history management from email sending logic.
 */
import { logStart, logReturn } from '../../lib/logUtils.js';
// In-memory storage for email history during testing
const emailHistory = [];
/**
 * Clear email history for test isolation
 *
 * This function provides a clean slate for each test by removing all previously
 * mocked email records. Essential for test isolation and preventing test
 * interference when running multiple email-related test suites.
 */
function clearEmailHistory() {
    logStart('clearEmailHistory');
    const cleared = emailHistory.length;
    emailHistory.length = 0;
    logReturn('clearEmailHistory', cleared);
    return cleared;
}
/**
 * Get email history for test verification
 *
 * This function provides access to all emails that have been "sent" through
 * the sendEmail function. Returns a copy to prevent accidental modification.
 */
function getEmailHistory() {
    logStart('getEmailHistory');
    const history = [...emailHistory];
    logReturn('getEmailHistory', `${history.length} emails`);
    return history;
}
/**
 * Add email to history
 *
 * Internal function to add an email to the history tracking.
 */
function addToHistory(emailData) {
    emailHistory.push(emailData);
}
// Export using ES module syntax
export { clearEmailHistory, getEmailHistory, addToHistory, emailHistory // Export for direct access in advanced testing scenarios
 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS91dGlscy9lbWFpbC9lbWFpbEhpc3RvcnkudHMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0dBS0c7QUFFSCxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBYTVELHFEQUFxRDtBQUNyRCxNQUFNLFlBQVksR0FBd0IsRUFBRSxDQUFDO0FBRTdDOzs7Ozs7R0FNRztBQUNILFNBQVMsaUJBQWlCO0lBQ3hCLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQzlCLE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUM7SUFDcEMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDeEIsU0FBUyxDQUFDLG1CQUFtQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDLE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQVMsZUFBZTtJQUN0QixRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUM1QixNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUcsWUFBWSxDQUFDLENBQUM7SUFDbEMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sU0FBUyxDQUFDLENBQUM7SUFDekQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFTLFlBQVksQ0FBQyxTQUE0QjtJQUNoRCxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFFRCxnQ0FBZ0M7QUFDaEMsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixlQUFlLEVBQ2YsWUFBWSxFQUNaLFlBQVksQ0FBQyx5REFBeUQ7RUFDdkUsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3V0aWxzL2VtYWlsL2VtYWlsSGlzdG9yeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVtYWlsIEhpc3RvcnkgTWFuYWdlbWVudCBVdGlsaXR5IC0gVHlwZVNjcmlwdCBJbXBsZW1lbnRhdGlvblxuICogXG4gKiBUaGlzIG1vZHVsZSBtYW5hZ2VzIGVtYWlsIGhpc3RvcnkgZm9yIHRlc3RpbmcgYW5kIHZlcmlmaWNhdGlvbiBwdXJwb3Nlcy5cbiAqIEl0IHByb3ZpZGVzIGEgY2xlYW4gc2VwYXJhdGlvbiBvZiBoaXN0b3J5IG1hbmFnZW1lbnQgZnJvbSBlbWFpbCBzZW5kaW5nIGxvZ2ljLlxuICovXG5cbmltcG9ydCB7IGxvZ1N0YXJ0LCBsb2dSZXR1cm4gfSBmcm9tICcuLi8uLi9saWIvbG9nVXRpbHMuanMnO1xuXG4vLyBUeXBlIGRlZmluaXRpb25zXG5pbnRlcmZhY2UgRW1haWxIaXN0b3J5RW50cnkge1xuICBzdWNjZXNzOiBib29sZWFuO1xuICBlbWFpbERhdGE/OiBhbnk7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgdGltZXN0YW1wOiBEYXRlO1xuICBpZD86IHN0cmluZztcbiAgZXJyb3I/OiBzdHJpbmc7XG4gIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuLy8gSW4tbWVtb3J5IHN0b3JhZ2UgZm9yIGVtYWlsIGhpc3RvcnkgZHVyaW5nIHRlc3RpbmdcbmNvbnN0IGVtYWlsSGlzdG9yeTogRW1haWxIaXN0b3J5RW50cnlbXSA9IFtdO1xuXG4vKipcbiAqIENsZWFyIGVtYWlsIGhpc3RvcnkgZm9yIHRlc3QgaXNvbGF0aW9uXG4gKiBcbiAqIFRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgYSBjbGVhbiBzbGF0ZSBmb3IgZWFjaCB0ZXN0IGJ5IHJlbW92aW5nIGFsbCBwcmV2aW91c2x5XG4gKiBtb2NrZWQgZW1haWwgcmVjb3Jkcy4gRXNzZW50aWFsIGZvciB0ZXN0IGlzb2xhdGlvbiBhbmQgcHJldmVudGluZyB0ZXN0XG4gKiBpbnRlcmZlcmVuY2Ugd2hlbiBydW5uaW5nIG11bHRpcGxlIGVtYWlsLXJlbGF0ZWQgdGVzdCBzdWl0ZXMuXG4gKi9cbmZ1bmN0aW9uIGNsZWFyRW1haWxIaXN0b3J5KCk6IG51bWJlciB7XG4gIGxvZ1N0YXJ0KCdjbGVhckVtYWlsSGlzdG9yeScpO1xuICBjb25zdCBjbGVhcmVkID0gZW1haWxIaXN0b3J5Lmxlbmd0aDtcbiAgZW1haWxIaXN0b3J5Lmxlbmd0aCA9IDA7XG4gIGxvZ1JldHVybignY2xlYXJFbWFpbEhpc3RvcnknLCBjbGVhcmVkKTtcbiAgcmV0dXJuIGNsZWFyZWQ7XG59XG5cbi8qKlxuICogR2V0IGVtYWlsIGhpc3RvcnkgZm9yIHRlc3QgdmVyaWZpY2F0aW9uXG4gKiBcbiAqIFRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgYWNjZXNzIHRvIGFsbCBlbWFpbHMgdGhhdCBoYXZlIGJlZW4gXCJzZW50XCIgdGhyb3VnaFxuICogdGhlIHNlbmRFbWFpbCBmdW5jdGlvbi4gUmV0dXJucyBhIGNvcHkgdG8gcHJldmVudCBhY2NpZGVudGFsIG1vZGlmaWNhdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0RW1haWxIaXN0b3J5KCk6IEVtYWlsSGlzdG9yeUVudHJ5W10ge1xuICBsb2dTdGFydCgnZ2V0RW1haWxIaXN0b3J5Jyk7XG4gIGNvbnN0IGhpc3RvcnkgPSBbLi4uZW1haWxIaXN0b3J5XTtcbiAgbG9nUmV0dXJuKCdnZXRFbWFpbEhpc3RvcnknLCBgJHtoaXN0b3J5Lmxlbmd0aH0gZW1haWxzYCk7XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG4vKipcbiAqIEFkZCBlbWFpbCB0byBoaXN0b3J5XG4gKiBcbiAqIEludGVybmFsIGZ1bmN0aW9uIHRvIGFkZCBhbiBlbWFpbCB0byB0aGUgaGlzdG9yeSB0cmFja2luZy5cbiAqL1xuZnVuY3Rpb24gYWRkVG9IaXN0b3J5KGVtYWlsRGF0YTogRW1haWxIaXN0b3J5RW50cnkpOiB2b2lkIHtcbiAgZW1haWxIaXN0b3J5LnB1c2goZW1haWxEYXRhKTtcbn1cblxuLy8gRXhwb3J0IHVzaW5nIEVTIG1vZHVsZSBzeW50YXhcbmV4cG9ydCB7IFxuICBjbGVhckVtYWlsSGlzdG9yeSwgXG4gIGdldEVtYWlsSGlzdG9yeSwgXG4gIGFkZFRvSGlzdG9yeSwgXG4gIGVtYWlsSGlzdG9yeSAvLyBFeHBvcnQgZm9yIGRpcmVjdCBhY2Nlc3MgaW4gYWR2YW5jZWQgdGVzdGluZyBzY2VuYXJpb3Ncbn07Il0sInZlcnNpb24iOjN9