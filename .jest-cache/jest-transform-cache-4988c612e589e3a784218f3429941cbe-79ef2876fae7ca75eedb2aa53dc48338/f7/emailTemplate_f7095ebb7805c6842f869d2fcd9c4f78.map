{"file":"/home/runner/workspace/utils/email/emailTemplate.ts","mappings":";AAAA;;;;;;GAMG;;AAwFM,kDAAmB;AAtF5B,uDAA4D;AAqB5D;;;;;GAKG;AACH,SAAS,mBAAmB,CAAC,YAAoB,EAAE,YAA+B,EAAE;IAClF,IAAA,sBAAQ,EAAC,qBAAqB,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC;IAEzD,MAAM,SAAS,GAAkC;QAC/C,OAAO,EAAE;YACP,OAAO,EAAE,yBAAyB;YAClC,IAAI,EAAE,4HAA4H;SACnI;QACD,YAAY,EAAE;YACZ,OAAO,EAAE,qCAAqC;YAC9C,IAAI,EAAE,2EAA2E;SAClF;QACD,KAAK,EAAE;YACL,OAAO,EAAE,iCAAiC;YAC1C,IAAI,EAAE,4LAA4L;SACnM;KACF,CAAC;IAEF,MAAM,QAAQ,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;IACzC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,KAAK,GAAmB;YAC5B,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,2BAA2B,YAAY,EAAE;YAClD,kBAAkB,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;SAC3C,CAAC;QACF,IAAA,uBAAS,EAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;QACxC,OAAO,KAAK,CAAC;IACf,CAAC;IAED,mCAAmC;IACnC,IAAI,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;IAC/B,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;IAEzB,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;QACrD,MAAM,WAAW,GAAG,KAAK,GAAG,IAAI,CAAC;QACjC,MAAM,QAAQ,GAAG,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QACzC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;QAClE,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;IAC9D,CAAC;IAED,wDAAwD;IACxD,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;IAChD,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;IAE1C,MAAM,MAAM,GAAmB;QAC7B,OAAO,EAAE,IAAI;QACb,QAAQ,EAAE;YACR,OAAO;YACP,IAAI;SACL;QACD,YAAY;QACZ,SAAS;KACV,CAAC;IAEF,IAAA,uBAAS,EAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;IACzC,OAAO,MAAM,CAAC;AAChB,CAAC","names":[],"sources":["/home/runner/workspace/utils/email/emailTemplate.ts"],"sourcesContent":["/**\n * Email Template Utility - TypeScript Implementation\n * \n * This module provides email templating functionality for consistent\n * email formatting across the application. It handles template creation\n * and variable substitution.\n */\n\nimport { logStart, logReturn } from '../../lib/logUtils.js';\n\n// Type definitions\ninterface EmailTemplate {\n  subject: string;\n  body: string;\n}\n\ninterface TemplateResult {\n  success: boolean;\n  template?: EmailTemplate;\n  templateName?: string;\n  variables?: Record<string, any>;\n  message?: string;\n  availableTemplates?: string[];\n}\n\ninterface TemplateVariables {\n  [key: string]: string | number | undefined;\n}\n\n/**\n * Create email template for consistent formatting\n * \n * This function provides a template system for common email patterns.\n * Useful for applications that send similar emails with variable content.\n */\nfunction createEmailTemplate(templateName: string, variables: TemplateVariables = {}): TemplateResult {\n  logStart('createEmailTemplate', templateName, variables);\n  \n  const templates: Record<string, EmailTemplate> = {\n    welcome: {\n      subject: 'Welcome to {{appName}}!',\n      body: 'Hello {{userName}},\\n\\nWelcome to {{appName}}! We\\'re excited to have you on board.\\n\\nBest regards,\\nThe {{appName}} Team'\n    },\n    notification: {\n      subject: '{{appName}} Notification: {{title}}',\n      body: 'Hello {{userName}},\\n\\n{{message}}\\n\\nBest regards,\\nThe {{appName}} Team'\n    },\n    reset: {\n      subject: 'Reset your {{appName}} password',\n      body: 'Hello {{userName}},\\n\\nYou requested to reset your password. Use this link: {{resetLink}}\\n\\nIf you didn\\'t request this, please ignore this email.\\n\\nBest regards,\\nThe {{appName}} Team'\n    }\n  };\n  \n  const template = templates[templateName];\n  if (!template) {\n    const error: TemplateResult = {\n      success: false,\n      message: `Unknown email template: ${templateName}`,\n      availableTemplates: Object.keys(templates)\n    };\n    logReturn('createEmailTemplate', error);\n    return error;\n  }\n  \n  // Substitute variables in template\n  let subject = template.subject;\n  let body = template.body;\n  \n  for (const [key, value] of Object.entries(variables)) {\n    const placeholder = `{{${key}}}`;\n    const valueStr = value?.toString() || '';\n    subject = subject.replace(new RegExp(placeholder, 'g'), valueStr);\n    body = body.replace(new RegExp(placeholder, 'g'), valueStr);\n  }\n  \n  // Replace any remaining placeholders with empty strings\n  subject = subject.replace(/\\{\\{[^}]+\\}\\}/g, '');\n  body = body.replace(/\\{\\{[^}]+\\}\\}/g, '');\n  \n  const result: TemplateResult = {\n    success: true,\n    template: {\n      subject,\n      body\n    },\n    templateName,\n    variables\n  };\n  \n  logReturn('createEmailTemplate', result);\n  return result;\n}\n\n// Export using ES module syntax\nexport { createEmailTemplate };"],"version":3}