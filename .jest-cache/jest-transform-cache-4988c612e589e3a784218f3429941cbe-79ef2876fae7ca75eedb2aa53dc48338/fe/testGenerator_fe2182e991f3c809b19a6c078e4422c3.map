{"version":3,"names":["fs","require","path","DEFAULT_CONFIG","SRC_DIR","TEST_DIR","KNOWN_MOCKS","VALID_EXTS","PATTERNS","qtests","api","exports","imports","TestGenerator","constructor","options","config","scanned","shouldSkipDirectory","dirName","skipPatterns","includes","startsWith","walkProject","currentDir","process","cwd","walkRecursive","dir","existsSync","readdirSync","withFileTypes","flatMap","entry","full","resolve","name","isDirectory","walk","categorizeFiles","files","sourceFiles","existingTests","forEach","file","ext","extname","basename","isTestFile","push","hasTest","hasCorrespondingTest","filename","testPatterns","some","pattern","test","sourceFile","allFiles","dirname","sameDirectoryTests","map","join","testDirectories","testDirectoryTests","testDir","testPath","allTestPaths","getRelativeTestPath","type","rel","relative","testExt","replace","createDir","p","mkdirSync","recursive","writeIfMissing","content","writeFileSync","getUsedModules","matchAll","m","filter","x","createUnitTest","usesQtests","mocks","isTypeScript","lines","length","lib","fn","createApiTest","method","route","toUpperCase","toLowerCase","analyze","readFileSync","mockTargets","i","created","apis","scaffoldJestSetup","trim","setup","generateTestRunner","templatePath","__dirname","runnerContent","updatePackageJsonTestScript","packagePath","console","log","packageJson","JSON","parse","scripts","stringify","error","message","generate","projectFiles","label","getResults","module"],"sources":["testGenerator.js"],"sourcesContent":["/**\n * Test Generator for qtests Framework\n * \n * Automatically generates unit tests and API tests by scanning source code.\n * Analyzes JavaScript/TypeScript files to detect exports, imports, and API routes,\n * then creates appropriate test files with proper structure and mocking.\n * \n * Features:\n * - Unit test generation for exported functions/classes\n * - API test generation for Express routes\n * - Automatic mock setup for known libraries\n * - Jest configuration scaffolding\n * - Support for qtests framework integration\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\n// Configuration constants\nconst DEFAULT_CONFIG = {\n  SRC_DIR: 'src',\n  TEST_DIR: 'tests/integration',\n  KNOWN_MOCKS: ['axios', 'node-fetch', 'pg', 'mongoose', 'fs', 'redis'],\n  VALID_EXTS: ['.ts', '.js', '.tsx', '.jsx']\n};\n\n// Regex patterns for code analysis\nconst PATTERNS = {\n  qtests: /from ['\"]qtests['\"]/,\n  api: /\\b(app|router)\\.(get|post|put|delete|patch)\\s*\\(\\s*['\"`]([^'\"`]+)['\"`]/gi,\n  exports: /^\\s*export\\s+(?:const|function|class)\\s+([a-zA-Z0-9_]+)/gm,\n  imports: /from ['\"]([^'\"]+)['\"]/g\n};\n\nclass TestGenerator {\n  constructor(options = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...options };\n    this.scanned = [];\n  }\n\n  /**\n   * Check if directory should be skipped during discovery\n   */\n  shouldSkipDirectory(dirName) {\n    const skipPatterns = [\n      'node_modules', '.git', '.next', 'dist', 'build', 'coverage',\n      '.vscode', '.idea', 'docs', 'documentation', 'assets', 'public', 'static',\n      '.replit_cache', '.config', '.npm', 'logs'\n    ];\n    return skipPatterns.includes(dirName) || dirName.startsWith('.');\n  }\n\n  /**\n   * Walk entire project directory structure, respecting skip patterns\n   */\n  walkProject() {\n    const currentDir = process.cwd();\n    return this.walkRecursive(currentDir);\n  }\n\n  /**\n   * Recursively walk directory and return all file paths, skipping irrelevant directories\n   */\n  walkRecursive(dir) {\n    if (!fs.existsSync(dir)) {\n      return [];\n    }\n    \n    return fs.readdirSync(dir, { withFileTypes: true }).flatMap(entry => {\n      const full = path.resolve(dir, entry.name);\n      \n      if (entry.isDirectory()) {\n        // Skip directories that shouldn't contain tests or source files\n        if (this.shouldSkipDirectory(entry.name)) {\n          return [];\n        }\n        return this.walkRecursive(full);\n      } else {\n        return [full];\n      }\n    });\n  }\n\n  /**\n   * Legacy walk method for backwards compatibility (walks single directory)\n   */\n  walk(dir) {\n    if (!fs.existsSync(dir)) {\n      return [];\n    }\n    \n    return fs.readdirSync(dir, { withFileTypes: true }).flatMap(entry => {\n      const full = path.resolve(dir, entry.name);\n      return entry.isDirectory() ? this.walk(full) : full;\n    });\n  }\n\n  /**\n   * Categorize discovered files into source files and existing tests\n   */\n  categorizeFiles(files) {\n    const sourceFiles = [];\n    const existingTests = [];\n    \n    files.forEach(file => {\n      const ext = path.extname(file);\n      const basename = path.basename(file);\n      \n      // Skip files with invalid extensions\n      if (!this.config.VALID_EXTS.includes(ext)) {\n        return;\n      }\n      \n      // Check if this is a test file\n      if (this.isTestFile(basename)) {\n        existingTests.push(file);\n      } else {\n        // Check if this source file already has a corresponding test\n        const hasTest = this.hasCorrespondingTest(file, files);\n        if (!hasTest) {\n          sourceFiles.push(file);\n        }\n      }\n    });\n    \n    return { sourceFiles, existingTests };\n  }\n\n  /**\n   * Check if filename indicates it's a test file\n   */\n  isTestFile(filename) {\n    const testPatterns = [\n      /\\.test\\./,\n      /\\.spec\\./,\n      /_test\\./,\n      /_spec\\./,\n      /\\.e2e\\./,\n      /\\.integration\\./\n    ];\n    \n    return testPatterns.some(pattern => pattern.test(filename));\n  }\n\n  /**\n   * Check if a source file has a corresponding test file\n   */\n  hasCorrespondingTest(sourceFile, allFiles) {\n    const dir = path.dirname(sourceFile);\n    const basename = path.basename(sourceFile, path.extname(sourceFile));\n    const ext = path.extname(sourceFile);\n    \n    // Common test file patterns to look for\n    const testPatterns = [\n      `${basename}.test${ext}`,\n      `${basename}.spec${ext}`,\n      `${basename}_test${ext}`,\n      `${basename}_spec${ext}`,\n      `${basename}.test.js`,\n      `${basename}.spec.js`,\n      `${basename}.test.ts`,\n      `${basename}.spec.ts`\n    ];\n    \n    // Look for test files in the same directory\n    const sameDirectoryTests = testPatterns.map(pattern => \n      path.join(dir, pattern)\n    );\n    \n    // Look for test files in common test directories\n    const testDirectories = ['tests', 'test', '__tests__', 'spec'];\n    const testDirectoryTests = testDirectories.flatMap(testDir => {\n      const testPath = path.join(dir, testDir);\n      return testPatterns.map(pattern => path.join(testPath, pattern));\n    });\n    \n    // Check if any of these test files exist\n    const allTestPaths = [...sameDirectoryTests, ...testDirectoryTests];\n    return allTestPaths.some(testPath => \n      allFiles.some(file => path.resolve(file) === path.resolve(testPath))\n    );\n  }\n\n  /**\n   * Generate test file path based on source file and test type\n   * Supports both feature-first (tests alongside files) and traditional (separate test directory) structures\n   */\n  getRelativeTestPath(file, type = 'unit') {\n    const dir = path.dirname(file);\n    const basename = path.basename(file, path.extname(file));\n    const ext = path.extname(file);\n    \n    if (type === 'unit') {\n      // For unit tests, place them alongside the source file with matching extension\n      return path.join(dir, `${basename}.test${ext}`);\n    } else {\n      // For API/integration tests, use the configured test directory\n      // Preserve TypeScript for .ts/.tsx files, use JavaScript for others\n      const rel = path.relative(process.cwd(), file);\n      const testExt = ['.ts', '.tsx'].includes(ext) ? '.ts' : '.js';\n      return path.join(this.config.TEST_DIR, rel.replace(/\\.[tj]sx?$/, `.test${testExt}`).replace(/[\\\\/]/g, '__'));\n    }\n  }\n\n  /**\n   * Create directory if it doesn't exist\n   */\n  createDir(p) {\n    const dir = path.dirname(p);\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n  }\n\n  /**\n   * Write file only if it doesn't already exist\n   */\n  writeIfMissing(p, content) {\n    if (!fs.existsSync(p)) {\n      this.createDir(p);\n      fs.writeFileSync(p, content, 'utf8');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Extract imported modules from file content\n   */\n  getUsedModules(content) {\n    return [...content.matchAll(PATTERNS.imports)]\n      .map(m => m[1])\n      .filter(x => !x.startsWith('.') && !x.startsWith('/'));\n  }\n\n  /**\n   * Generate unit test content for a file - optimized for speed\n   */\n  createUnitTest(file, exports, usesQtests, mocks) {\n    const ext = path.extname(file);\n    const isTypeScript = ['.ts', '.tsx'].includes(ext);\n    \n    const lines = [`// Auto-generated unit test for ${path.basename(file)} - optimized for speed`];\n    \n    // Fast test setup - minimal imports\n    if (usesQtests) {\n      if (isTypeScript) {\n        lines.push(`import { test } from 'qtests';`);\n      } else {\n        lines.push(`const { test } = require('qtests');`);\n      }\n    }\n    \n    // Batch mock all libraries at once for performance\n    if (mocks.length > 0) {\n      lines.push(`// Mock external dependencies for speed`);\n      mocks.forEach(lib => {\n        lines.push(`jest.mock('${lib}', () => ({ __esModule: true, default: jest.fn(), ...jest.requireActual('${lib}') }));`);\n      });\n    }\n    \n    if (isTypeScript) {\n      const basename = path.basename(file, path.extname(file));\n      lines.push(`import * as mod from './${basename}';`, '');\n    } else {\n      lines.push(`const mod = require('./${path.basename(file)}');`, '');\n    }\n    \n    // Standard Jest with optimized performance\n    lines.push(`describe('${path.basename(file)}', () => {`);\n    \n    for (const fn of exports) {\n      lines.push(`  test('${fn} works', async () => {`);\n      lines.push(`    // Fast assertion - TODO: implement specific test logic`);\n      lines.push(`    expect(typeof mod.${fn}).toBeDefined();`);\n      lines.push('  });');\n    }\n    \n    lines.push('});\\n');\n    return lines.join('\\n');\n  }\n\n  /**\n   * Generate API test content for an endpoint - optimized for speed\n   */\n  createApiTest(method, route, isTypeScript = false) {\n    const lines = [`// Auto-generated API test for ${method.toUpperCase()} ${route} - optimized for speed`];\n    \n    if (isTypeScript) {\n      lines.push(`import { httpTest } from 'qtests/lib/envUtils';`, '');\n    } else {\n      lines.push(`const { httpTest } = require('qtests/lib/envUtils');`, '');\n    }\n    \n    // Standard Jest with optimized performance\n    lines.push(`describe('${method.toUpperCase()} ${route}', () => {`);\n    lines.push(`  // Shared app setup for performance`);\n    lines.push(`  let sharedApp;`);\n    lines.push(`  beforeAll(() => {`);\n    lines.push(`    sharedApp = httpTest.createMockApp();`);\n    lines.push(`  });`);\n    lines.push(``);\n    \n    lines.push(`  test('should succeed', async () => {`);\n    lines.push(`    // Reuse shared app for speed`);\n    lines.push(`    const app = httpTest.createMockApp();`);\n    lines.push(`    app.${method.toLowerCase()}('${route}', (req, res) => {`);\n    lines.push(`      res.statusCode = 200;`);\n    lines.push(`      res.setHeader('content-type', 'application/json');`);\n    lines.push(`      res.end(JSON.stringify({ success: true }));`);\n    lines.push(`    });`);\n    lines.push(`    `);\n    lines.push(`    const res = await httpTest.supertest(app)`);\n    lines.push(`      .${method.toLowerCase()}('${route}')`);\n    lines.push(`      .expect(200)`);\n    lines.push(`      .end();`);\n    lines.push(`    `);\n    lines.push(`    expect(res.body.success).toBe(true);`);\n    lines.push('  });', '');\n    \n    lines.push('  test(\\'should handle error responses\\', async () => {');\n    lines.push(`    const app = httpTest.createMockApp();`);\n    lines.push(`    app.${method.toLowerCase()}('${route}', (req, res) => {`);\n    lines.push(`      res.statusCode = 400;`);\n    lines.push(`      res.setHeader('content-type', 'application/json');`);\n    lines.push(`      res.end(JSON.stringify({ error: 'Bad request' }));`);\n    lines.push(`    });`);\n    lines.push(`    `);\n    lines.push(`    const res = await httpTest.supertest(app)`);\n    lines.push(`      .${method.toLowerCase()}('${route}')`);\n    lines.push(`      .expect(400)`);\n    lines.push(`      .end();`);\n    lines.push(`    `);\n    lines.push(`    expect(res.body.error).toBe('Bad request');`);\n    lines.push('  });');\n    lines.push('});\\n');\n    return lines.join('\\n');\n  }\n\n  /**\n   * Analyze a single file and generate appropriate tests\n   */\n  analyze(file) {\n    const ext = path.extname(file);\n    if (!this.config.VALID_EXTS.includes(ext)) {\n      return;\n    }\n\n    const content = fs.readFileSync(file, 'utf8');\n    const usesQtests = PATTERNS.qtests.test(content);\n    const imports = this.getUsedModules(content);\n    const mockTargets = imports.filter(i => \n      this.config.KNOWN_MOCKS.includes(i) && i !== 'qtests'\n    );\n\n    // Generate unit tests for exported functions/classes\n    const exports = [...content.matchAll(PATTERNS.exports)].map(m => m[1]);\n    if (exports.length > 0) {\n      const testPath = this.getRelativeTestPath(file, 'unit');\n      const created = this.writeIfMissing(\n        testPath, \n        this.createUnitTest(file, exports, usesQtests, mockTargets)\n      );\n      if (created) {\n        this.scanned.push({ \n          type: 'unit', \n          file: path.relative('.', testPath) \n        });\n      }\n    }\n\n    // Generate API tests for detected routes\n    const apis = [...content.matchAll(PATTERNS.api)];\n    for (const [, , method, route] of apis) {\n      const isTypeScript = ['.ts', '.tsx'].includes(ext);\n      const testPath = this.getRelativeTestPath(file, 'api')\n        .replace(/\\.test\\.[jt]s$/, `__${method.toLowerCase()}.test${isTypeScript ? '.ts' : '.js'}`);\n      const created = this.writeIfMissing(\n        testPath, \n        this.createApiTest(method, route, isTypeScript)\n      );\n      if (created) {\n        this.scanned.push({ \n          type: 'api', \n          file: path.relative('.', testPath) \n        });\n      }\n    }\n  }\n\n  /**\n   * Create Jest configuration and setup files\n   */\n  scaffoldJestSetup() {\n    const config = `\n// jest.config.js\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  setupFilesAfterEnv: ['./tests/setup.ts'],\n  moduleFileExtensions: ['ts', 'js', 'json'],\n  roots: ['<rootDir>/src', '<rootDir>/tests'],\n};\n`.trim();\n\n    const setup = `\n// tests/setup.ts\nlet server;\n\nbeforeAll(async () => {\n  const app = require('../src/app').default || require('../src/app');\n  server = app.listen(4000, () => console.log('Test server started'));\n});\n\nafterAll(async () => {\n  if (server) server.close();\n});\n`.trim();\n\n    this.writeIfMissing('jest.config.js', config);\n    this.writeIfMissing('tests/setup.ts', setup);\n  }\n\n  /**\n   * Generate qtests test runner file and update package.json\n   * Creates qtests-runner.js and updates the test script in package.json\n   */\n  generateTestRunner() {\n    const fs = require('fs');\n    const path = require('path');\n    \n    // Read the existing qtests-runner.js as template\n    const templatePath = path.join(__dirname, '..', 'qtests-runner.js');\n    let runnerContent;\n    \n    if (fs.existsSync(templatePath)) {\n      runnerContent = fs.readFileSync(templatePath, 'utf8');\n    } else {\n      // Fallback basic template\n      runnerContent = `// qtests Test Runner - Auto-generated by qtests\n// This file discovers and runs all tests in your project\n// Generated as: qtests-runner.js\n\n// Basic test runner implementation\nconst { spawn } = require('child_process');\nconsole.log('🧪 Basic qtests Test Runner');\nconsole.log('Run tests with: npm test');\n`;\n    }\n    \n    const created = this.writeIfMissing('qtests-runner.js', runnerContent);\n    \n    if (created) {\n      this.updatePackageJsonTestScript();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Update package.json test script to use qtests-runner.js\n   */\n  updatePackageJsonTestScript() {\n    try {\n      const packagePath = path.join(process.cwd(), 'package.json');\n      if (!fs.existsSync(packagePath)) {\n        console.log('⚠️  package.json not found, skipping test script update');\n        return false;\n      }\n\n      const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));\n      \n      // Update test script\n      if (!packageJson.scripts) {\n        packageJson.scripts = {};\n      }\n      packageJson.scripts.test = 'node qtests-runner.js';\n      \n      fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2), 'utf8');\n      console.log('✅ Updated package.json test script to use qtests-runner.js');\n      return true;\n    } catch (error) {\n      console.log('⚠️  Could not update package.json:', error.message);\n      return false;\n    }\n  }\n\n  /**\n   * Main generator function - comprehensively scans project for test generation\n   */\n  generate() {\n    console.log(`Scanning project for test generation...`);\n    \n    // Walk entire project to discover all source files and existing tests\n    const projectFiles = this.walkProject();\n    const { sourceFiles, existingTests } = this.categorizeFiles(projectFiles);\n    \n    console.log(`Found ${sourceFiles.length} source files and ${existingTests.length} existing tests`);\n    \n    // Analyze each source file for test generation\n    sourceFiles.forEach(file => this.analyze(file));\n    \n    this.scaffoldJestSetup();\n\n    if (this.scanned.length === 0) {\n      console.log('✅ All tests already exist. Nothing to generate.');\n    } else {\n      console.log(`✅ Generated ${this.scanned.length} new test files:`);\n      this.scanned.forEach(({ type, file }) => {\n        const label = type === 'unit' ? '📦 Unit' : '🌐 API';\n        console.log(`  ${label} → ${file}`);\n      });\n    }\n\n    return this.scanned;\n  }\n\n  /**\n   * Get generation results\n   */\n  getResults() {\n    return this.scanned;\n  }\n}\n\nmodule.exports = { TestGenerator, DEFAULT_CONFIG, PATTERNS };"],"mappings":"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","ignoreList":[]}