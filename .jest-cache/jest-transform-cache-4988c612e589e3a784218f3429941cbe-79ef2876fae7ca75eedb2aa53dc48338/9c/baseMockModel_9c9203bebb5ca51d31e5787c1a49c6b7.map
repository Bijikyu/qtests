{"file":"/home/runner/workspace/utils/models/baseMockModel.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/models/baseMockModel.ts"],"sourcesContent":["/**\n * Base Mock Model Class - TypeScript Implementation\n * \n * This class focuses solely on providing the foundation for Mongoose-compatible mock models.\n * It handles core model functionality like save, remove, and collection management.\n */\n\n// Type definitions\ninterface QueryObject {\n  [key: string]: any;\n}\n\ninterface DeleteResult {\n  deletedCount: number;\n  acknowledged: boolean;\n}\n\ninterface UpdateResult {\n  matchedCount: number;\n  modifiedCount: number;\n  acknowledged: boolean;\n}\n\n// Global registry for all mock model collections with parallel-test isolation\nconst mockCollections = new Map<string, any[]>();\n\n/**\n * Get test-isolated collection key to prevent race conditions\n * Only applies isolation when truly running in parallel (detected by environment)\n */\nfunction getTestIsolatedKey(modelName: string): string {\n  // Only apply isolation in very specific parallel execution scenarios\n  // Check for Jest worker ID (indicates Jest is running with multiple workers)\n  const isJestParallel = process.env.JEST_WORKER_ID && process.env.JEST_WORKER_ID !== '1';\n  \n  // Check if explicitly set to parallel mode\n  const isExplicitParallel = process.env.QTESTS_PARALLEL_MODE === 'true';\n  \n  if (!isJestParallel && !isExplicitParallel) {\n    // Normal testing - use simple model name for shared collections\n    return modelName;\n  }\n  \n  // Parallel testing - use isolation\n  let testContext = '';\n  try {\n    if (typeof (globalThis as any).expect !== 'undefined' && (globalThis as any).expect.getState) {\n      const state = (globalThis as any).expect.getState();\n      testContext = `${state.testPath || ''}-${state.currentTestName || ''}`;\n    }\n  } catch (e) {\n    // Fallback if Jest context not available\n  }\n  \n  // Add process PID and high-resolution time for uniqueness in parallel mode\n  const processId = process.pid;\n  const hrTime = process.hrtime.bigint();\n  const unique = `${processId}-${hrTime}`;\n  \n  return `${modelName}-${testContext}-${unique}`;\n}\n\n/**\n * Base Mock Model Class\n * \n * This class provides the foundation for creating Mongoose-compatible mock models\n * that store data in memory instead of a database. It implements the most commonly\n * used Mongoose model methods for comprehensive testing scenarios.\n */\nclass BaseMockModel {\n  public _id?: string;\n  [key: string]: any;\n\n  /**\n   * Constructor for mock model instances\n   */\n  constructor(data: any = {}) {\n    console.log(`${this.constructor.name} constructor is running with ${typeof data}`);\n    \n    try {\n      Object.assign(this, data);\n      \n      // Generate _id if not provided (mimics Mongoose behavior)\n      if (!this._id) {\n        this._id = (this.constructor as typeof BaseMockModel).generateId();\n      }\n      \n      console.log(`${this.constructor.name} constructor is returning instance`);\n    } catch (error: any) {\n      console.log(`${this.constructor.name} constructor error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Save instance to in-memory collection\n   */\n  save(): Promise<this> {\n    console.log(`${this.constructor.name}.save is running with instance`);\n    \n    try {\n      const collection = (this.constructor as typeof BaseMockModel).getCollection();\n      \n      // Check if this is an update (document already exists) or a new save\n      const existingIndex = collection.findIndex(doc => doc._id === this._id);\n      \n      if (existingIndex >= 0) {\n        // Update existing document\n        collection[existingIndex] = this;\n        console.log(`${this.constructor.name}.save is returning updated instance`);\n      } else {\n        // Add new document\n        collection.push(this);\n        console.log(`${this.constructor.name}.save is returning new instance`);\n      }\n      \n      return Promise.resolve(this);\n    } catch (error: any) {\n      console.log(`${this.constructor.name}.save error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Remove instance from collection\n   */\n  remove(): Promise<this | null> {\n    console.log(`${this.constructor.name}.remove is running with instance`);\n    \n    try {\n      const collection = (this.constructor as typeof BaseMockModel).getCollection();\n      const index = collection.findIndex(doc => doc._id === this._id);\n      \n      if (index >= 0) {\n        collection.splice(index, 1);\n        console.log(`${this.constructor.name}.remove is returning removed instance`);\n        return Promise.resolve(this);\n      } else {\n        console.log(`${this.constructor.name}.remove is returning null (not found)`);\n        return Promise.resolve(null);\n      }\n    } catch (error: any) {\n      console.log(`${this.constructor.name}.remove error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get or create collection for this model class\n   */\n  static getCollection(): any[] {\n    const key = getTestIsolatedKey(this.name || 'Anonymous');\n    \n    if (!mockCollections.has(key)) {\n      mockCollections.set(key, []);\n    }\n    \n    return mockCollections.get(key)!;\n  }\n  \n  /**\n   * Clear collection for this model class\n   */\n  static clearCollection(): void {\n    console.log(`${this.name}.clearCollection is running`);\n    \n    try {\n      const key = getTestIsolatedKey(this.name || 'Anonymous');\n      mockCollections.set(key, []);\n      console.log(`${this.name}.clearCollection completed`);\n    } catch (error: any) {\n      console.log(`${this.name}.clearCollection error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Delete many documents matching query\n   */\n  static deleteMany(query: QueryObject = {}): Promise<DeleteResult> {\n    console.log(`${this.name}.deleteMany is running with ${JSON.stringify(query)}`);\n    \n    try {\n      const collection = this.getCollection();\n      const initialCount = collection.length;\n      \n      // Simple query matching\n      const matchingIndices: number[] = [];\n      collection.forEach((doc, index) => {\n        let matches = true;\n        for (const [key, value] of Object.entries(query)) {\n          if (doc[key] !== value) {\n            matches = false;\n            break;\n          }\n        }\n        if (matches) {\n          matchingIndices.push(index);\n        }\n      });\n      \n      // Remove matching documents (in reverse order to maintain indices)\n      for (let i = matchingIndices.length - 1; i >= 0; i--) {\n        collection.splice(matchingIndices[i], 1);\n      }\n      \n      const deletedCount = matchingIndices.length;\n      const result: DeleteResult = {\n        deletedCount,\n        acknowledged: true\n      };\n      \n      console.log(`${this.name}.deleteMany is returning result with ${deletedCount} deleted`);\n      return Promise.resolve(result);\n    } catch (error: any) {\n      console.log(`${this.name}.deleteMany error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Find one document matching query\n   */\n  static findOne(query: QueryObject = {}): Promise<any | null> {\n    console.log(`${this.name}.findOne is running with ${JSON.stringify(query)}`);\n    \n    try {\n      const collection = this.getCollection();\n      \n      const result = collection.find(doc => {\n        for (const [key, value] of Object.entries(query)) {\n          if (doc[key] !== value) {\n            return false;\n          }\n        }\n        return true;\n      }) || null;\n      \n      console.log(`${this.name}.findOne is returning ${result ? 'document' : 'null'}`);\n      return Promise.resolve(result);\n    } catch (error: any) {\n      console.log(`${this.name}.findOne error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Find all documents matching query\n   */\n  static find(query: QueryObject = {}): any {\n    console.log(`${this.name}.find is running with ${JSON.stringify(query)}`);\n    \n    try {\n      const collection = this.getCollection();\n      \n      const filtered = collection.filter(doc => {\n        for (const [key, value] of Object.entries(query)) {\n          if (doc[key] !== value) {\n            return false;\n          }\n        }\n        return true;\n      });\n      \n      // Return chainable query object\n      const chain = {\n        data: filtered,\n        sort: () => chain,\n        skip: () => chain,\n        limit: () => chain,\n        lean: () => {\n          console.log(`${this.name}.find.lean is returning ${chain.data.length} documents`);\n          return Promise.resolve(chain.data);\n        },\n        exec: () => {\n          console.log(`${this.name}.find.exec is returning ${chain.data.length} documents`);\n          return Promise.resolve(chain.data);\n        }\n      };\n      \n      return chain;\n    } catch (error: any) {\n      console.log(`${this.name}.find error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Update many documents matching query\n   */\n  static updateMany(query: QueryObject, update: QueryObject): Promise<UpdateResult> {\n    console.log(`${this.name}.updateMany is running with query and update`);\n    \n    try {\n      const collection = this.getCollection();\n      let modifiedCount = 0;\n      \n      collection.forEach(doc => {\n        let matches = true;\n        for (const [key, value] of Object.entries(query)) {\n          if (doc[key] !== value) {\n            matches = false;\n            break;\n          }\n        }\n        \n        if (matches) {\n          Object.assign(doc, update);\n          modifiedCount++;\n        }\n      });\n      \n      const result: UpdateResult = {\n        matchedCount: modifiedCount,\n        modifiedCount,\n        acknowledged: true\n      };\n      \n      console.log(`${this.name}.updateMany is returning result with ${modifiedCount} modified`);\n      return Promise.resolve(result);\n    } catch (error: any) {\n      console.log(`${this.name}.updateMany error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Generate unique ID for model instances\n   */\n  static generateId(): string {\n    const timestamp = Date.now().toString(36);\n    const random = Math.random().toString(36).substr(2, 9);\n    return `mock-${timestamp}-${random}`;\n  }\n  \n  /**\n   * Create new model instance\n   */\n  static create(data: any): Promise<any> {\n    console.log(`${this.name}.create is running with data`);\n    \n    try {\n      const instance = new (this as any)(data);\n      return instance.save();\n    } catch (error: any) {\n      console.log(`${this.name}.create error ${error.message}`);\n      throw error;\n    }\n  }\n}\n\n// Export using ES module syntax\nexport { BaseMockModel, mockCollections };"],"version":3}