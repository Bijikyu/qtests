{"version":3,"names":["logStart","logReturn","require","PerformanceTestHelper","measureTime","operation","name","start","process","hrtime","bigint","result","end","durationNs","Number","durationMs","measurement","duration","timestamp","Date","toFixed","error","message","assertTimingConstraint","maxDuration","Error","testConcurrency","operations","length","promises","map","index","opStart","opEnd","success","results","Promise","all","totalDuration","successful","filter","r","failed","analysis","averageDuration","reduce","sum","Math","max","minDuration","min","measureMemory","startMem","memoryUsage","endMem","memoryDelta","rss","heapTotal","heapUsed","external","memoryStart","memoryEnd","module","exports"],"sources":["performanceTestHelper.js"],"sourcesContent":["/**\n * Performance Testing Helper for Load and Timing Tests\n * \n * This class focuses solely on performance measurement and testing concerns.\n * It provides standardized performance measurement across test suites.\n */\n\nconst { logStart, logReturn } = require('../../lib/logUtils');\n\n/**\n * Performance Testing Helper for Load and Timing Tests\n * \n * This class provides standardized performance measurement across test suites\n * with timing assertions and concurrency testing capabilities.\n */\nclass PerformanceTestHelper {\n  /**\n   * Measures execution time of async operations with high precision\n   * \n   * @param {Function} operation - Async operation to measure\n   * @returns {Promise<Object>} Result object with operation result and timing\n   */\n  static async measureTime(operation) {\n    logStart('PerformanceTestHelper.measureTime', operation.name || 'anonymous');\n    \n    try {\n      const start = process.hrtime.bigint();\n      const result = await operation();\n      const end = process.hrtime.bigint();\n      \n      const durationNs = Number(end - start);\n      const durationMs = durationNs / 1000000; // Convert nanoseconds to milliseconds\n      \n      const measurement = {\n        result,\n        duration: durationMs,\n        durationNs,\n        timestamp: new Date()\n      };\n      \n      logReturn('PerformanceTestHelper.measureTime', `${durationMs.toFixed(2)}ms`);\n      return measurement;\n    } catch (error) {\n      logReturn('PerformanceTestHelper.measureTime', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Asserts operation completes within time limit\n   * \n   * @param {Function} operation - Operation to test\n   * @param {number} maxDuration - Maximum allowed duration in milliseconds\n   * @returns {Promise<any>} Operation result if within time limit\n   */\n  static async assertTimingConstraint(operation, maxDuration) {\n    logStart('PerformanceTestHelper.assertTimingConstraint', operation.name, maxDuration);\n    \n    try {\n      const { result, duration } = await this.measureTime(operation);\n      \n      if (duration > maxDuration) {\n        throw new Error(\n          `Operation took ${duration.toFixed(2)}ms, exceeding limit of ${maxDuration}ms`\n        );\n      }\n      \n      logReturn('PerformanceTestHelper.assertTimingConstraint', `passed in ${duration.toFixed(2)}ms`);\n      return result;\n    } catch (error) {\n      logReturn('PerformanceTestHelper.assertTimingConstraint', `failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Tests concurrent operations for race conditions and performance\n   * \n   * @param {Array<Function>} operations - Array of async operations to run concurrently\n   * @returns {Promise<Object>} Results with timing and concurrency analysis\n   */\n  static async testConcurrency(operations) {\n    logStart('PerformanceTestHelper.testConcurrency', `${operations.length} operations`);\n    \n    try {\n      const start = process.hrtime.bigint();\n      \n      // Run all operations concurrently\n      const promises = operations.map(async (operation, index) => {\n        try {\n          const opStart = process.hrtime.bigint();\n          const result = await operation();\n          const opEnd = process.hrtime.bigint();\n          \n          return {\n            index,\n            result,\n            duration: Number(opEnd - opStart) / 1000000,\n            success: true\n          };\n        } catch (error) {\n          return {\n            index,\n            error: error.message,\n            duration: 0,\n            success: false\n          };\n        }\n      });\n      \n      const results = await Promise.all(promises);\n      const end = process.hrtime.bigint();\n      \n      const totalDuration = Number(end - start) / 1000000;\n      const successful = results.filter(r => r.success).length;\n      const failed = results.length - successful;\n      \n      const analysis = {\n        totalDuration,\n        successful,\n        failed,\n        results,\n        averageDuration: results.reduce((sum, r) => sum + r.duration, 0) / results.length,\n        maxDuration: Math.max(...results.map(r => r.duration)),\n        minDuration: Math.min(...results.map(r => r.duration))\n      };\n      \n      logReturn('PerformanceTestHelper.testConcurrency', `${successful}/${results.length} succeeded in ${totalDuration.toFixed(2)}ms`);\n      return analysis;\n    } catch (error) {\n      logReturn('PerformanceTestHelper.testConcurrency', `failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Measures memory usage during operation execution\n   * \n   * @param {Function} operation - Operation to measure memory usage for\n   * @returns {Promise<Object>} Result with memory usage statistics\n   */\n  static async measureMemory(operation) {\n    logStart('PerformanceTestHelper.measureMemory', operation.name || 'anonymous');\n    \n    try {\n      const startMem = process.memoryUsage();\n      \n      const { result, duration } = await this.measureTime(operation);\n      \n      const endMem = process.memoryUsage();\n      \n      const memoryDelta = {\n        rss: endMem.rss - startMem.rss,\n        heapTotal: endMem.heapTotal - startMem.heapTotal,\n        heapUsed: endMem.heapUsed - startMem.heapUsed,\n        external: endMem.external - startMem.external\n      };\n      \n      const measurement = {\n        result,\n        duration,\n        memoryStart: startMem,\n        memoryEnd: endMem,\n        memoryDelta,\n        timestamp: new Date()\n      };\n      \n      logReturn('PerformanceTestHelper.measureMemory', `${duration.toFixed(2)}ms, heap: ${(memoryDelta.heapUsed / 1024 / 1024).toFixed(2)}MB`);\n      return measurement;\n    } catch (error) {\n      logReturn('PerformanceTestHelper.measureMemory', `error: ${error.message}`);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = {\n  PerformanceTestHelper\n};"],"mappings":"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","ignoreList":[]}