{"version":3,"names":["logStart","logReturn","require","TestDataFactory","counter","nextId","createUser","overrides","id","user","username","email","password","firstName","lastName","isActive","createdAt","Date","updatedAt","createApiKey","apiKey","key","Math","random","toString","substr","name","userId","permissions","expiresAt","now","createLogEntry","logEntry","message","level","timestamp","source","metadata","testId","environment","createConfig","config","value","type","createRelatedEntities","options","userCount","apiKeyCount","logCount","configCount","userOverrides","apiKeyOverrides","logOverrides","configOverrides","result","users","apiKeys","logs","configs","i","push","linkedUser","length","reset","module","exports"],"sources":["testDataFactory.js"],"sourcesContent":["/**\n * Test Data Factory for Creating Realistic Test Entities\n * \n * This class focuses solely on test data creation and management.\n * It eliminates duplicate test data creation across test files.\n */\n\nconst { logStart, logReturn } = require('../../lib/logUtils');\n\n/**\n * Test Data Factory for Creating Realistic Test Entities\n * \n * This class eliminates duplicate test data creation across test files\n * by providing standardized factory methods for common test entities.\n */\nclass TestDataFactory {\n  static counter = 0;\n\n  /**\n   * Gets next unique counter value for test data\n   * \n   * @returns {number} Incremented counter value\n   */\n  static nextId() {\n    return ++this.counter;\n  }\n\n  /**\n   * Creates a test user with realistic properties\n   * \n   * @param {Object} overrides - Properties to override defaults\n   * @returns {Object} Test user object\n   */\n  static createUser(overrides = {}) {\n    logStart('TestDataFactory.createUser', overrides);\n    \n    const id = this.nextId();\n    const user = {\n      id: `user-${id}`,\n      username: `testuser${id}`,\n      email: `test${id}@example.com`,\n      password: `hashedpassword${id}`,\n      firstName: 'Test',\n      lastName: `User${id}`,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createUser', user);\n    return user;\n  }\n\n  /**\n   * Creates a test API key with realistic properties\n   * \n   * @param {Object} overrides - Properties to override defaults\n   * @returns {Object} Test API key object\n   */\n  static createApiKey(overrides = {}) {\n    logStart('TestDataFactory.createApiKey', overrides);\n    \n    const id = this.nextId();\n    const apiKey = {\n      id: `key-${id}`,\n      key: `test-api-key-${id}-${Math.random().toString(36).substr(2, 9)}`,\n      name: `Test API Key ${id}`,\n      userId: `user-${id}`,\n      isActive: true,\n      permissions: ['read', 'write'],\n      createdAt: new Date(),\n      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createApiKey', apiKey);\n    return apiKey;\n  }\n\n  /**\n   * Creates a test log entry with realistic properties\n   * \n   * @param {Object} overrides - Properties to override defaults\n   * @returns {Object} Test log entry object\n   */\n  static createLogEntry(overrides = {}) {\n    logStart('TestDataFactory.createLogEntry', overrides);\n    \n    const id = this.nextId();\n    const logEntry = {\n      id: `log-${id}`,\n      message: `Test log message ${id}`,\n      level: 'info',\n      timestamp: new Date(),\n      userId: `user-${id}`,\n      source: 'test-application',\n      metadata: {\n        testId: id,\n        environment: 'test'\n      },\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createLogEntry', logEntry);\n    return logEntry;\n  }\n\n  /**\n   * Creates a test configuration object with realistic properties\n   * \n   * @param {Object} overrides - Properties to override defaults\n   * @returns {Object} Test configuration object\n   */\n  static createConfig(overrides = {}) {\n    logStart('TestDataFactory.createConfig', overrides);\n    \n    const id = this.nextId();\n    const config = {\n      id: `config-${id}`,\n      name: `Test Config ${id}`,\n      value: `test-value-${id}`,\n      environment: 'test',\n      type: 'string',\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createConfig', config);\n    return config;\n  }\n\n  /**\n   * Creates multiple related entities for complex test scenarios\n   * \n   * @param {Object} options - Options for entity creation\n   * @returns {Object} Object containing all created entities\n   */\n  static createRelatedEntities(options = {}) {\n    logStart('TestDataFactory.createRelatedEntities', options);\n    \n    const {\n      userCount = 1,\n      apiKeyCount = 1,\n      logCount = 1,\n      configCount = 1,\n      userOverrides = {},\n      apiKeyOverrides = {},\n      logOverrides = {},\n      configOverrides = {}\n    } = options;\n    \n    const result = {\n      users: [],\n      apiKeys: [],\n      logs: [],\n      configs: []\n    };\n    \n    // Create users first\n    for (let i = 0; i < userCount; i++) {\n      result.users.push(this.createUser(userOverrides));\n    }\n    \n    // Create API keys linked to users\n    for (let i = 0; i < apiKeyCount; i++) {\n      const linkedUser = result.users[i % result.users.length];\n      result.apiKeys.push(this.createApiKey({\n        userId: linkedUser?.id,\n        ...apiKeyOverrides\n      }));\n    }\n    \n    // Create log entries linked to users\n    for (let i = 0; i < logCount; i++) {\n      const linkedUser = result.users[i % result.users.length];\n      result.logs.push(this.createLogEntry({\n        userId: linkedUser?.id,\n        ...logOverrides\n      }));\n    }\n    \n    // Create configurations\n    for (let i = 0; i < configCount; i++) {\n      result.configs.push(this.createConfig(configOverrides));\n    }\n    \n    logReturn('TestDataFactory.createRelatedEntities', result);\n    return result;\n  }\n\n  /**\n   * Resets the counter for consistent test data generation\n   */\n  static reset() {\n    this.counter = 0;\n  }\n}\n\nmodule.exports = {\n  TestDataFactory\n};"],"mappings":"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","ignoreList":[]}