{"version":3,"names":["mockCollections","Map","BaseMockModel","constructor","data","console","log","name","Object","assign","_id","generateId","error","message","save","collection","getCollection","existingIndex","findIndex","doc","push","Promise","resolve","remove","index","splice","modelName","has","set","get","Math","random","toString","substr","Date","now","find","query","JSON","stringify","results","filter","matchesQuery","length","findOne","result","findOneAndUpdate","update","options","d","findOneAndDelete","deleted","keys","field","value","entries","module","exports"],"sources":["baseMockModel.js"],"sourcesContent":["/**\n * Base Mock Model Class\n * \n * This class focuses solely on providing the foundation for Mongoose-compatible mock models.\n * It handles core model functionality like save, remove, and collection management.\n */\n\n// Global registry for all mock model collections\nconst mockCollections = new Map();\n\n/**\n * Base Mock Model Class\n * \n * This class provides the foundation for creating Mongoose-compatible mock models\n * that store data in memory instead of a database. It implements the most commonly\n * used Mongoose model methods for comprehensive testing scenarios.\n */\nclass BaseMockModel {\n  /**\n   * Constructor for mock model instances\n   * \n   * @param {Object} data - Initial data for the model instance\n   */\n  constructor(data = {}) {\n    console.log(`${this.constructor.name} constructor is running with ${typeof data}`);\n    \n    try {\n      Object.assign(this, data);\n      \n      // Generate _id if not provided (mimics Mongoose behavior)\n      if (!this._id) {\n        this._id = this.constructor.generateId();\n      }\n      \n      console.log(`${this.constructor.name} constructor is returning instance`);\n    } catch (error) {\n      console.log(`${this.constructor.name} constructor error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Save instance to in-memory collection\n   * \n   * @returns {Promise<Object>} Promise resolving to the saved instance\n   */\n  save() {\n    console.log(`${this.constructor.name}.save is running with instance`);\n    \n    try {\n      const collection = this.constructor.getCollection();\n      \n      // Check if this is an update (document already exists) or a new save\n      const existingIndex = collection.findIndex(doc => doc._id === this._id);\n      \n      if (existingIndex >= 0) {\n        // Update existing document\n        collection[existingIndex] = this;\n        console.log(`${this.constructor.name}.save is returning updated instance`);\n      } else {\n        // Add new document\n        collection.push(this);\n        console.log(`${this.constructor.name}.save is returning new instance`);\n      }\n      \n      return Promise.resolve(this);\n    } catch (error) {\n      console.log(`${this.constructor.name}.save error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Remove instance from collection\n   * \n   * @returns {Promise<Object>} Promise resolving to the removed instance\n   */\n  remove() {\n    console.log(`${this.constructor.name}.remove is running with instance`);\n    \n    try {\n      const collection = this.constructor.getCollection();\n      const index = collection.findIndex(doc => doc._id === this._id);\n      \n      if (index >= 0) {\n        collection.splice(index, 1);\n        console.log(`${this.constructor.name}.remove is returning removed instance`);\n        return Promise.resolve(this);\n      } else {\n        console.log(`${this.constructor.name}.remove is returning null (not found)`);\n        return Promise.resolve(null);\n      }\n    } catch (error) {\n      console.log(`${this.constructor.name}.remove error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Get or create collection for this model class\n   * \n   * @returns {Array} Array serving as the in-memory collection\n   */\n  static getCollection() {\n    const modelName = this.name || 'Anonymous';\n    \n    if (!mockCollections.has(modelName)) {\n      mockCollections.set(modelName, []);\n    }\n    \n    return mockCollections.get(modelName);\n  }\n  \n  /**\n   * Generate unique ID for new documents\n   * \n   * @returns {string} Unique identifier\n   */\n  static generateId() {\n    return Math.random().toString(36).substr(2, 9) + Date.now().toString(36);\n  }\n  \n  /**\n   * Find documents in collection\n   * \n   * @param {Object} query - Query object\n   * @returns {Promise<Array>} Promise resolving to array of matching documents\n   */\n  static find(query = {}) {\n    console.log(`${this.name}.find is running with ${JSON.stringify(query)}`);\n    \n    try {\n      const collection = this.getCollection();\n      const results = collection.filter(doc => this.matchesQuery(doc, query));\n      \n      console.log(`${this.name}.find is returning ${results.length} documents`);\n      return Promise.resolve(results);\n    } catch (error) {\n      console.log(`${this.name}.find error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Find one document in collection\n   * \n   * @param {Object} query - Query object\n   * @returns {Promise<Object|null>} Promise resolving to matching document or null\n   */\n  static findOne(query = {}) {\n    console.log(`${this.name}.findOne is running with ${JSON.stringify(query)}`);\n    \n    try {\n      const collection = this.getCollection();\n      const result = collection.find(doc => this.matchesQuery(doc, query)) || null;\n      \n      console.log(`${this.name}.findOne is returning ${result ? 'document' : 'null'}`);\n      return Promise.resolve(result);\n    } catch (error) {\n      console.log(`${this.name}.findOne error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Find and update one document\n   * \n   * @param {Object} query - Query object\n   * @param {Object} update - Update object\n   * @param {Object} options - Update options\n   * @returns {Promise<Object|null>} Promise resolving to updated document or null\n   */\n  static findOneAndUpdate(query, update, options = {}) {\n    console.log(`${this.name}.findOneAndUpdate is running with query and update`);\n    \n    try {\n      const collection = this.getCollection();\n      const doc = collection.find(d => this.matchesQuery(d, query));\n      \n      if (!doc) {\n        console.log(`${this.name}.findOneAndUpdate is returning null`);\n        return Promise.resolve(null);\n      }\n      \n      Object.assign(doc, update);\n      console.log(`${this.name}.findOneAndUpdate is returning updated document`);\n      return Promise.resolve(doc);\n    } catch (error) {\n      console.log(`${this.name}.findOneAndUpdate error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Find and delete one document\n   * \n   * @param {Object} query - Query object\n   * @returns {Promise<Object|null>} Promise resolving to deleted document or null\n   */\n  static findOneAndDelete(query) {\n    console.log(`${this.name}.findOneAndDelete is running with ${JSON.stringify(query)}`);\n    \n    try {\n      const collection = this.getCollection();\n      const index = collection.findIndex(doc => this.matchesQuery(doc, query));\n      \n      if (index === -1) {\n        console.log(`${this.name}.findOneAndDelete is returning null`);\n        return Promise.resolve(null);\n      }\n      \n      const deleted = collection.splice(index, 1)[0];\n      console.log(`${this.name}.findOneAndDelete is returning deleted document`);\n      return Promise.resolve(deleted);\n    } catch (error) {\n      console.log(`${this.name}.findOneAndDelete error ${error.message}`);\n      throw error;\n    }\n  }\n  \n  /**\n   * Check if document matches query\n   * \n   * @param {Object} doc - Document to test\n   * @param {Object} query - Query object with field/value pairs\n   * @returns {boolean} True if document matches query\n   */\n  static matchesQuery(doc, query) {\n    if (!query || Object.keys(query).length === 0) {\n      return true; // empty query matches all documents\n    }\n    \n    for (const [field, value] of Object.entries(query)) {\n      if (doc[field] !== value) {\n        return false; // field doesn't match\n      }\n    }\n    \n    return true; // all fields match\n  }\n}\n\nmodule.exports = {\n  BaseMockModel,\n  mockCollections\n};"],"mappings":"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","ignoreList":[]}