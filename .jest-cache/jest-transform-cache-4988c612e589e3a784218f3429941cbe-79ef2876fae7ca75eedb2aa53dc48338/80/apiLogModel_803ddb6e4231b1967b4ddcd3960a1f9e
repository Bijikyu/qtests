51ad3bdb9afd90f618940c884f39cc63
/**
 * API Log Model
 * 
 * This class focuses solely on API log model functionality and behavior.
 * It extends BaseMockModel with logging-specific methods and properties.
 */

const {
  BaseMockModel
} = require('./baseMockModel');

// Legacy array for backwards compatibility
const mockLogs = [];

/**
 * API Log Model Class
 * 
 * Provides Mongoose-compatible API log model for testing scenarios.
 * Includes logging-specific validation and query methods.
 */
class ApiLog extends BaseMockModel {
  constructor(data) {
    super(data);
    // Set default values specific to ApiLog
    if (!this.timestamp) this.timestamp = new Date();
    if (!this.level) this.level = 'info';
  }

  // Override getCollection to use legacy array for backwards compatibility
  static getCollection() {
    return mockLogs;
  }

  // Legacy methods for backward compatibility
  static find(query = {}) {
    console.log(`ApiLog.find is running with ${JSON.stringify(query)}`);
    const filtered = query.allowedApi ? mockLogs.filter(l => l.allowedApi === query.allowedApi) : mockLogs;
    const chain = {
      data: filtered
    };
    chain.sort = () => chain;
    chain.skip = () => chain;
    chain.limit = () => chain;
    chain.lean = () => {
      console.log(`ApiLog.find.lean is returning ${chain.data.length} logs`);
      return Promise.resolve(chain.data);
    };
    return chain;
  }
}
module.exports = {
  ApiLog,
  mockLogs
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCYXNlTW9ja01vZGVsIiwicmVxdWlyZSIsIm1vY2tMb2dzIiwiQXBpTG9nIiwiY29uc3RydWN0b3IiLCJkYXRhIiwidGltZXN0YW1wIiwiRGF0ZSIsImxldmVsIiwiZ2V0Q29sbGVjdGlvbiIsImZpbmQiLCJxdWVyeSIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwiZmlsdGVyZWQiLCJhbGxvd2VkQXBpIiwiZmlsdGVyIiwibCIsImNoYWluIiwic29ydCIsInNraXAiLCJsaW1pdCIsImxlYW4iLCJsZW5ndGgiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJhcGlMb2dNb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFQSSBMb2cgTW9kZWxcbiAqIFxuICogVGhpcyBjbGFzcyBmb2N1c2VzIHNvbGVseSBvbiBBUEkgbG9nIG1vZGVsIGZ1bmN0aW9uYWxpdHkgYW5kIGJlaGF2aW9yLlxuICogSXQgZXh0ZW5kcyBCYXNlTW9ja01vZGVsIHdpdGggbG9nZ2luZy1zcGVjaWZpYyBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzLlxuICovXG5cbmNvbnN0IHsgQmFzZU1vY2tNb2RlbCB9ID0gcmVxdWlyZSgnLi9iYXNlTW9ja01vZGVsJyk7XG5cbi8vIExlZ2FjeSBhcnJheSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbmNvbnN0IG1vY2tMb2dzID0gW107XG5cbi8qKlxuICogQVBJIExvZyBNb2RlbCBDbGFzc1xuICogXG4gKiBQcm92aWRlcyBNb25nb29zZS1jb21wYXRpYmxlIEFQSSBsb2cgbW9kZWwgZm9yIHRlc3Rpbmcgc2NlbmFyaW9zLlxuICogSW5jbHVkZXMgbG9nZ2luZy1zcGVjaWZpYyB2YWxpZGF0aW9uIGFuZCBxdWVyeSBtZXRob2RzLlxuICovXG5jbGFzcyBBcGlMb2cgZXh0ZW5kcyBCYXNlTW9ja01vZGVsIHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIHN1cGVyKGRhdGEpO1xuICAgIC8vIFNldCBkZWZhdWx0IHZhbHVlcyBzcGVjaWZpYyB0byBBcGlMb2dcbiAgICBpZiAoIXRoaXMudGltZXN0YW1wKSB0aGlzLnRpbWVzdGFtcCA9IG5ldyBEYXRlKCk7XG4gICAgaWYgKCF0aGlzLmxldmVsKSB0aGlzLmxldmVsID0gJ2luZm8nO1xuICB9XG4gIFxuICAvLyBPdmVycmlkZSBnZXRDb2xsZWN0aW9uIHRvIHVzZSBsZWdhY3kgYXJyYXkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gIHN0YXRpYyBnZXRDb2xsZWN0aW9uKCkge1xuICAgIHJldHVybiBtb2NrTG9ncztcbiAgfVxuICBcbiAgLy8gTGVnYWN5IG1ldGhvZHMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgc3RhdGljIGZpbmQocXVlcnkgPSB7fSkge1xuICAgIGNvbnNvbGUubG9nKGBBcGlMb2cuZmluZCBpcyBydW5uaW5nIHdpdGggJHtKU09OLnN0cmluZ2lmeShxdWVyeSl9YCk7XG4gICAgY29uc3QgZmlsdGVyZWQgPSBxdWVyeS5hbGxvd2VkQXBpIFxuICAgICAgPyBtb2NrTG9ncy5maWx0ZXIobCA9PiBsLmFsbG93ZWRBcGkgPT09IHF1ZXJ5LmFsbG93ZWRBcGkpIFxuICAgICAgOiBtb2NrTG9ncztcbiAgICBcbiAgICBjb25zdCBjaGFpbiA9IHsgZGF0YTogZmlsdGVyZWQgfTtcbiAgICBjaGFpbi5zb3J0ID0gKCkgPT4gY2hhaW47XG4gICAgY2hhaW4uc2tpcCA9ICgpID0+IGNoYWluO1xuICAgIGNoYWluLmxpbWl0ID0gKCkgPT4gY2hhaW47XG4gICAgY2hhaW4ubGVhbiA9ICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGBBcGlMb2cuZmluZC5sZWFuIGlzIHJldHVybmluZyAke2NoYWluLmRhdGEubGVuZ3RofSBsb2dzYCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNoYWluLmRhdGEpO1xuICAgIH07XG4gICAgcmV0dXJuIGNoYWluO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBcGlMb2csXG4gIG1vY2tMb2dzXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU07RUFBRUE7QUFBYyxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQzs7QUFFcEQ7QUFDQSxNQUFNQyxRQUFRLEdBQUcsRUFBRTs7QUFFbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsTUFBTSxTQUFTSCxhQUFhLENBQUM7RUFDakNJLFdBQVdBLENBQUNDLElBQUksRUFBRTtJQUNoQixLQUFLLENBQUNBLElBQUksQ0FBQztJQUNYO0lBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQ0MsU0FBUyxFQUFFLElBQUksQ0FBQ0EsU0FBUyxHQUFHLElBQUlDLElBQUksQ0FBQyxDQUFDO0lBQ2hELElBQUksQ0FBQyxJQUFJLENBQUNDLEtBQUssRUFBRSxJQUFJLENBQUNBLEtBQUssR0FBRyxNQUFNO0VBQ3RDOztFQUVBO0VBQ0EsT0FBT0MsYUFBYUEsQ0FBQSxFQUFHO0lBQ3JCLE9BQU9QLFFBQVE7RUFDakI7O0VBRUE7RUFDQSxPQUFPUSxJQUFJQSxDQUFDQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7SUFDdEJDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLCtCQUErQkMsSUFBSSxDQUFDQyxTQUFTLENBQUNKLEtBQUssQ0FBQyxFQUFFLENBQUM7SUFDbkUsTUFBTUssUUFBUSxHQUFHTCxLQUFLLENBQUNNLFVBQVUsR0FDN0JmLFFBQVEsQ0FBQ2dCLE1BQU0sQ0FBQ0MsQ0FBQyxJQUFJQSxDQUFDLENBQUNGLFVBQVUsS0FBS04sS0FBSyxDQUFDTSxVQUFVLENBQUMsR0FDdkRmLFFBQVE7SUFFWixNQUFNa0IsS0FBSyxHQUFHO01BQUVmLElBQUksRUFBRVc7SUFBUyxDQUFDO0lBQ2hDSSxLQUFLLENBQUNDLElBQUksR0FBRyxNQUFNRCxLQUFLO0lBQ3hCQSxLQUFLLENBQUNFLElBQUksR0FBRyxNQUFNRixLQUFLO0lBQ3hCQSxLQUFLLENBQUNHLEtBQUssR0FBRyxNQUFNSCxLQUFLO0lBQ3pCQSxLQUFLLENBQUNJLElBQUksR0FBRyxNQUFNO01BQ2pCWixPQUFPLENBQUNDLEdBQUcsQ0FBQyxpQ0FBaUNPLEtBQUssQ0FBQ2YsSUFBSSxDQUFDb0IsTUFBTSxPQUFPLENBQUM7TUFDdEUsT0FBT0MsT0FBTyxDQUFDQyxPQUFPLENBQUNQLEtBQUssQ0FBQ2YsSUFBSSxDQUFDO0lBQ3BDLENBQUM7SUFDRCxPQUFPZSxLQUFLO0VBQ2Q7QUFDRjtBQUVBUSxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmMUIsTUFBTTtFQUNORDtBQUNGLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=