4a3f61dd45cfde896ad852761003650d
const {
  execFileSync
} = require('child_process'); // spawn child node to avoid jest resolver
const path = require('path'); // path for stub locations

test('require.resolve returns stub files with extension', () => {
  // verify stub path resolution
  console.log(`resolveStubPathTest is running with none`); // start log per guidelines
  const script = `
    require('${path.join(__dirname, '../setup')}');
    const axiosPath = require.resolve('axios');
    const winstonPath = require.resolve('winston');
    console.log(JSON.stringify({ axiosPath, winstonPath }));
  `; // inline script executed with node
  const out = execFileSync(process.execPath, ['-e', script], {
    env: {
      NODE_PATH: ''
    }
  }).toString(); // run child script
  const result = JSON.parse(out.trim().split('\n').pop()); // parse printed JSON
  const expectedAxios = path.join(__dirname, '../stubs/axios.js'); // expected absolute axios stub path
  const expectedWinston = path.join(__dirname, '../stubs/winston.js'); // expected absolute winston stub path
  expect(result.axiosPath).toBe(expectedAxios); // axios should resolve to stub file
  expect(result.winstonPath).toBe(expectedWinston); // winston should resolve to stub file
  console.log(`resolveStubPathTest has run resulting in pass`); // end log per guidelines
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleGVjRmlsZVN5bmMiLCJyZXF1aXJlIiwicGF0aCIsInRlc3QiLCJjb25zb2xlIiwibG9nIiwic2NyaXB0Iiwiam9pbiIsIl9fZGlybmFtZSIsIm91dCIsInByb2Nlc3MiLCJleGVjUGF0aCIsImVudiIsIk5PREVfUEFUSCIsInRvU3RyaW5nIiwicmVzdWx0IiwiSlNPTiIsInBhcnNlIiwidHJpbSIsInNwbGl0IiwicG9wIiwiZXhwZWN0ZWRBeGlvcyIsImV4cGVjdGVkV2luc3RvbiIsImV4cGVjdCIsImF4aW9zUGF0aCIsInRvQmUiLCJ3aW5zdG9uUGF0aCJdLCJzb3VyY2VzIjpbInJlc29sdmVTdHViUGF0aHMudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGV4ZWNGaWxlU3luYyB9ID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpOyAvLyBzcGF3biBjaGlsZCBub2RlIHRvIGF2b2lkIGplc3QgcmVzb2x2ZXJcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7IC8vIHBhdGggZm9yIHN0dWIgbG9jYXRpb25zXG5cbnRlc3QoJ3JlcXVpcmUucmVzb2x2ZSByZXR1cm5zIHN0dWIgZmlsZXMgd2l0aCBleHRlbnNpb24nLCAoKSA9PiB7IC8vIHZlcmlmeSBzdHViIHBhdGggcmVzb2x1dGlvblxuICBjb25zb2xlLmxvZyhgcmVzb2x2ZVN0dWJQYXRoVGVzdCBpcyBydW5uaW5nIHdpdGggbm9uZWApOyAvLyBzdGFydCBsb2cgcGVyIGd1aWRlbGluZXNcbiAgY29uc3Qgc2NyaXB0ID0gYFxuICAgIHJlcXVpcmUoJyR7cGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL3NldHVwJyl9Jyk7XG4gICAgY29uc3QgYXhpb3NQYXRoID0gcmVxdWlyZS5yZXNvbHZlKCdheGlvcycpO1xuICAgIGNvbnN0IHdpbnN0b25QYXRoID0gcmVxdWlyZS5yZXNvbHZlKCd3aW5zdG9uJyk7XG4gICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoeyBheGlvc1BhdGgsIHdpbnN0b25QYXRoIH0pKTtcbiAgYDsgLy8gaW5saW5lIHNjcmlwdCBleGVjdXRlZCB3aXRoIG5vZGVcbiAgY29uc3Qgb3V0ID0gZXhlY0ZpbGVTeW5jKHByb2Nlc3MuZXhlY1BhdGgsIFsnLWUnLCBzY3JpcHRdLCB7IGVudjogeyBOT0RFX1BBVEg6ICcnIH0gfSkudG9TdHJpbmcoKTsgLy8gcnVuIGNoaWxkIHNjcmlwdFxuICBjb25zdCByZXN1bHQgPSBKU09OLnBhcnNlKG91dC50cmltKCkuc3BsaXQoJ1xcbicpLnBvcCgpKTsgLy8gcGFyc2UgcHJpbnRlZCBKU09OXG4gIGNvbnN0IGV4cGVjdGVkQXhpb3MgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vc3R1YnMvYXhpb3MuanMnKTsgLy8gZXhwZWN0ZWQgYWJzb2x1dGUgYXhpb3Mgc3R1YiBwYXRoXG4gIGNvbnN0IGV4cGVjdGVkV2luc3RvbiA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9zdHVicy93aW5zdG9uLmpzJyk7IC8vIGV4cGVjdGVkIGFic29sdXRlIHdpbnN0b24gc3R1YiBwYXRoXG4gIGV4cGVjdChyZXN1bHQuYXhpb3NQYXRoKS50b0JlKGV4cGVjdGVkQXhpb3MpOyAvLyBheGlvcyBzaG91bGQgcmVzb2x2ZSB0byBzdHViIGZpbGVcbiAgZXhwZWN0KHJlc3VsdC53aW5zdG9uUGF0aCkudG9CZShleHBlY3RlZFdpbnN0b24pOyAvLyB3aW5zdG9uIHNob3VsZCByZXNvbHZlIHRvIHN0dWIgZmlsZVxuICBjb25zb2xlLmxvZyhgcmVzb2x2ZVN0dWJQYXRoVGVzdCBoYXMgcnVuIHJlc3VsdGluZyBpbiBwYXNzYCk7IC8vIGVuZCBsb2cgcGVyIGd1aWRlbGluZXNcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0VBQUVBO0FBQWEsQ0FBQyxHQUFHQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztBQUNuRCxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOztBQUU5QkUsSUFBSSxDQUFDLG1EQUFtRCxFQUFFLE1BQU07RUFBRTtFQUNoRUMsT0FBTyxDQUFDQyxHQUFHLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDO0VBQ3pELE1BQU1DLE1BQU0sR0FBRztBQUNqQixlQUFlSixJQUFJLENBQUNLLElBQUksQ0FBQ0MsU0FBUyxFQUFFLFVBQVUsQ0FBQztBQUMvQztBQUNBO0FBQ0E7QUFDQSxHQUFHLENBQUMsQ0FBQztFQUNILE1BQU1DLEdBQUcsR0FBR1QsWUFBWSxDQUFDVSxPQUFPLENBQUNDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRUwsTUFBTSxDQUFDLEVBQUU7SUFBRU0sR0FBRyxFQUFFO01BQUVDLFNBQVMsRUFBRTtJQUFHO0VBQUUsQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNuRyxNQUFNQyxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDUixHQUFHLENBQUNTLElBQUksQ0FBQyxDQUFDLENBQUNDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDekQsTUFBTUMsYUFBYSxHQUFHbkIsSUFBSSxDQUFDSyxJQUFJLENBQUNDLFNBQVMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7RUFDakUsTUFBTWMsZUFBZSxHQUFHcEIsSUFBSSxDQUFDSyxJQUFJLENBQUNDLFNBQVMsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7RUFDckVlLE1BQU0sQ0FBQ1IsTUFBTSxDQUFDUyxTQUFTLENBQUMsQ0FBQ0MsSUFBSSxDQUFDSixhQUFhLENBQUMsQ0FBQyxDQUFDO0VBQzlDRSxNQUFNLENBQUNSLE1BQU0sQ0FBQ1csV0FBVyxDQUFDLENBQUNELElBQUksQ0FBQ0gsZUFBZSxDQUFDLENBQUMsQ0FBQztFQUNsRGxCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLCtDQUErQyxDQUFDLENBQUMsQ0FBQztBQUNoRSxDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=