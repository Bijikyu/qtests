4d90656425315fe16b609290c04ba4ac
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Simplified testEnv tests to prevent hanging in parallel execution
const testEnv_js_1 = require("../utils/testEnv.js");
describe('testEnv utilities', () => {
    test('testEnv utilities exist and are callable', () => {
        expect(typeof testEnv_js_1.setTestEnv).toBe('function');
        expect(typeof testEnv_js_1.createScheduleMock).toBe('function');
        expect(typeof testEnv_js_1.createQerrorsMock).toBe('function');
        expect(typeof testEnv_js_1.createAxiosMock).toBe('function');
    });
    test('schedule mock works', async () => {
        const scheduleMock = (0, testEnv_js_1.createScheduleMock)();
        const fn = jest.fn(() => 'done');
        const result = await scheduleMock(fn);
        expect(result).toBe('done');
        expect(typeof scheduleMock.mockClear).toBe('function');
    });
    test('qerrors mock works', () => {
        const qerrorsMock = (0, testEnv_js_1.createQerrorsMock)();
        const args = qerrorsMock('err', 'ctx');
        expect(args).toEqual(['err', 'ctx']);
        expect(typeof qerrorsMock.mockClear).toBe('function');
    });
    test('axios mock basic functionality', () => {
        const axiosMock = (0, testEnv_js_1.createAxiosMock)();
        axiosMock.onGet('/test').reply(200, { ok: true });
        expect(axiosMock._replies['/test']).toEqual({ status: 200, data: { ok: true } });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9tYW51YWwtdGVzdHMvdGVzdEVudi50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsb0VBQW9FO0FBQ3BFLG9EQUF5RztBQUV6RyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLElBQUksQ0FBQywwQ0FBMEMsRUFBRSxHQUFHLEVBQUU7UUFDcEQsTUFBTSxDQUFDLE9BQU8sdUJBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsT0FBTywrQkFBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuRCxNQUFNLENBQUMsT0FBTyw4QkFBaUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsRCxNQUFNLENBQUMsT0FBTyw0QkFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLHFCQUFxQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3JDLE1BQU0sWUFBWSxHQUFHLElBQUEsK0JBQWtCLEdBQUUsQ0FBQztRQUMxQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUIsTUFBTSxDQUFDLE9BQU8sWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN6RCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7UUFDOUIsTUFBTSxXQUFXLEdBQUcsSUFBQSw4QkFBaUIsR0FBRSxDQUFDO1FBQ3hDLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdkMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxPQUFPLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDeEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsZ0NBQWdDLEVBQUUsR0FBRyxFQUFFO1FBQzFDLE1BQU0sU0FBUyxHQUFHLElBQUEsNEJBQWUsR0FBRSxDQUFDO1FBQ3BDLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ25GLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9tYW51YWwtdGVzdHMvdGVzdEVudi50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNpbXBsaWZpZWQgdGVzdEVudiB0ZXN0cyB0byBwcmV2ZW50IGhhbmdpbmcgaW4gcGFyYWxsZWwgZXhlY3V0aW9uXG5pbXBvcnQgeyBzZXRUZXN0RW52LCBjcmVhdGVTY2hlZHVsZU1vY2ssIGNyZWF0ZVFlcnJvcnNNb2NrLCBjcmVhdGVBeGlvc01vY2sgfSBmcm9tICcuLi91dGlscy90ZXN0RW52LmpzJztcblxuZGVzY3JpYmUoJ3Rlc3RFbnYgdXRpbGl0aWVzJywgKCkgPT4ge1xuICB0ZXN0KCd0ZXN0RW52IHV0aWxpdGllcyBleGlzdCBhbmQgYXJlIGNhbGxhYmxlJywgKCkgPT4ge1xuICAgIGV4cGVjdCh0eXBlb2Ygc2V0VGVzdEVudikudG9CZSgnZnVuY3Rpb24nKTtcbiAgICBleHBlY3QodHlwZW9mIGNyZWF0ZVNjaGVkdWxlTW9jaykudG9CZSgnZnVuY3Rpb24nKTtcbiAgICBleHBlY3QodHlwZW9mIGNyZWF0ZVFlcnJvcnNNb2NrKS50b0JlKCdmdW5jdGlvbicpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3JlYXRlQXhpb3NNb2NrKS50b0JlKCdmdW5jdGlvbicpO1xuICB9KTtcblxuICB0ZXN0KCdzY2hlZHVsZSBtb2NrIHdvcmtzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNjaGVkdWxlTW9jayA9IGNyZWF0ZVNjaGVkdWxlTW9jaygpO1xuICAgIGNvbnN0IGZuID0gamVzdC5mbigoKSA9PiAnZG9uZScpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNjaGVkdWxlTW9jayhmbik7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZSgnZG9uZScpO1xuICAgIGV4cGVjdCh0eXBlb2Ygc2NoZWR1bGVNb2NrLm1vY2tDbGVhcikudG9CZSgnZnVuY3Rpb24nKTtcbiAgfSk7XG5cbiAgdGVzdCgncWVycm9ycyBtb2NrIHdvcmtzJywgKCkgPT4ge1xuICAgIGNvbnN0IHFlcnJvcnNNb2NrID0gY3JlYXRlUWVycm9yc01vY2soKTtcbiAgICBjb25zdCBhcmdzID0gcWVycm9yc01vY2soJ2VycicsICdjdHgnKTtcbiAgICBleHBlY3QoYXJncykudG9FcXVhbChbJ2VycicsICdjdHgnXSk7XG4gICAgZXhwZWN0KHR5cGVvZiBxZXJyb3JzTW9jay5tb2NrQ2xlYXIpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2F4aW9zIG1vY2sgYmFzaWMgZnVuY3Rpb25hbGl0eScsICgpID0+IHtcbiAgICBjb25zdCBheGlvc01vY2sgPSBjcmVhdGVBeGlvc01vY2soKTtcbiAgICBheGlvc01vY2sub25HZXQoJy90ZXN0JykucmVwbHkoMjAwLCB7IG9rOiB0cnVlIH0pO1xuICAgIGV4cGVjdChheGlvc01vY2suX3JlcGxpZXNbJy90ZXN0J10pLnRvRXF1YWwoeyBzdGF0dXM6IDIwMCwgZGF0YTogeyBvazogdHJ1ZSB9IH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==