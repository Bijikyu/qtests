{"file":"/home/runner/workspace/lib/httpUtils.ts","mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;GAuBG;;;;;;AAEH,uEAAuE;AACvE,2EAA2E;AAC3E,kEAAkE;AAClE,yEAA8C;AA6B5C,oBA7BK,sBAAS,CA6BL;AA3BX,gEAAgE;AAChE,+EAA+E;AAC/E,8DAA8D;AAC9D,uEAA4C;AA2B1C,mBA3BK,qBAAQ,CA2BL;AAzBV,sDAAsD;AACtD,2EAA2E;AAC3E,+DAA+D;AAC/D,6EAAkD;AAyBhD,sBAzBK,wBAAW,CAyBL","names":[],"sources":["/home/runner/workspace/lib/httpUtils.ts"],"sourcesContent":["/**\n * HTTP Testing Utilities\n * \n * This module provides utilities for HTTP client mocking, integration testing,\n * and network simulation. These utilities help test applications that make\n * HTTP requests without requiring actual network connectivity.\n * \n * Design philosophy:\n * - Network-free testing for reliable, fast tests\n * - Configurable mock behavior for different scenarios\n * - Integration testing support without external dependencies\n * - Offline mode simulation for robust testing\n * \n * Why HTTP utilities are grouped together:\n * 1. All utilities deal with HTTP/network interactions\n * 2. They share common patterns for request/response mocking\n * 3. Often used together in integration testing scenarios\n * 4. Provide complementary functionality for comprehensive HTTP testing\n * \n * Module organization rationale:\n * These utilities are grouped because they all serve the purpose of\n * testing HTTP-dependent code without actual network calls, providing\n * different levels of abstraction and configuration options.\n */\n\n// Import mockAxios factory for creating configurable HTTP client mocks\n// mockAxios provides enhanced mock HTTP clients with customizable behavior\n// for comprehensive offline testing and HTTP simulation scenarios\nimport mockAxios from '../utils/mockAxios.js';\n\n// Import httpTest utilities for lightweight integration testing\n// httpTest provides supertest-like functionality without external dependencies\n// for testing HTTP endpoints and applications in Node.js core\nimport httpTest from '../utils/httpTest.js';\n\n// Import offlineMode utility for network-free testing\n// offlineMode automatically switches between real and stub implementations\n// based on whether the test should simulate offline conditions\nimport offlineMode from '../utils/offlineMode.js';\n\n/**\n * Export HTTP testing utilities\n * \n * These utilities are exported together because they provide\n * complementary functionality for HTTP testing:\n * \n * - mockAxios: For mocking HTTP client behavior\n * - httpTest: For integration testing of HTTP endpoints\n * - offlineMode: For simulating offline conditions\n * \n * Export strategy:\n * - Named exports for ES module compatibility\n * - Descriptive property names that indicate purpose\n * - Grouped by functionality for developer convenience\n */\nexport {\n  // HTTP client mocking for axios and similar libraries\n  mockAxios,\n  \n  // Lightweight HTTP integration testing utilities\n  httpTest,\n  \n  // Environment-aware offline mode simulation\n  offlineMode\n};"],"version":3}