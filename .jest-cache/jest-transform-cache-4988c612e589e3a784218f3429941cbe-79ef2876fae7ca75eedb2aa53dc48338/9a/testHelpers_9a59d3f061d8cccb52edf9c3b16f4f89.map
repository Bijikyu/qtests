{"version":3,"names":["path","require","moduleReloadLock","Set","mockConsole","stubQerrors","console","log","qerrors","test","mock","method","cache","resolve","err","message","reload","relPath","fullPath","__dirname","has","add","mod","delete","withMockConsole","fn","spy","result","mockRestore","createJsonRes","jsonSpy","jest","calls","args","push","json","createRes","responseMock","status","mockImplementation","code","statusCode","mockReturnThis","send","end","statusCalls","jsonCalls","sendCalls","endCalls","length","generateKey","appOrSuffix","allowedApi","isHttpTesting","supertest","res","post","suffix","generatedKey","Date","now","backupEnvVars","names","isSelectiveBackup","envBackup","forEach","name","process","env","restoreEnvVars","global","qtestsEnvBackup","backupKeys","Object","keys","currentKeys","key","value","entries","undefined","currentKeySet","backupKeySet","withSavedEnv","backup","module","exports"],"sources":["testHelpers.js"],"sourcesContent":["\n\n/**\n * Advanced Testing Helper Utilities\n * \n * This module provides specialized utilities for complex testing scenarios\n * including module reloading, response object mocking, and integration test\n * helpers. These functions handle edge cases and advanced patterns that\n * basic stubbing utilities cannot address.\n * \n * Design philosophy:\n * - Handle complex testing scenarios that require specialized approaches\n * - Provide framework compatibility across different testing environments\n * - Support both Jest and vanilla Node.js testing setups\n * - Enable integration testing patterns with minimal configuration\n * \n * Why these utilities exist:\n * 1. Module cache management: Node.js caches required modules, making it\n *    difficult to test module loading and reloading scenarios\n * 2. Response object mocking: Express-style response objects are complex\n *    and require specific mock implementations for testing\n * 3. Integration testing: Some tests need to verify real module interactions\n *    while still controlling certain dependencies\n * 4. Framework compatibility: Tests should work regardless of Jest availability\n * \n * Target scenarios:\n * - Testing module loading and configuration scenarios\n * - API route testing with Express-style response objects\n * - Integration tests that need partial mocking\n * - Cross-framework test compatibility requirements\n */\n\n// Import path utilities for robust file path resolution\n// Using path.resolve ensures correct path handling across different operating systems\n// and prevents issues with relative path interpretation in test environments\nconst path = require('path');\n\n// Thread-safe module reloading lock to prevent race conditions\n// This prevents concurrent reload operations on the same module\nconst moduleReloadLock = new Set();\nconst { mockConsole } = require('./mockConsole'); // (import console spy utility)\n\n/**\n * Stub qerrors.qerrors method to silence error reporting during tests\n * \n * This function replaces the qerrors.qerrors method with a no-op function\n * to prevent error reporting network calls and log output during testing.\n * It also forces a reload of the offline module to ensure it picks up\n * the stubbed qerrors implementation.\n * \n * Enhanced implementation with Node.js test module integration:\n * 1. Prefer Node.js test module for superior mocking when available\n * 2. Support both test.mock.method and manual stubbing approaches\n * 3. Force module cache clearing to ensure stub is used\n * 4. Handle graceful fallback when qerrors module is missing\n * 5. Provide detailed logging for debugging test setup issues\n * \n * Why stub qerrors specifically:\n * - Error reporting often involves network requests to logging services\n * - Tests should not make real network calls to error reporting systems\n * - Error reporting side effects can cause test failures or pollution\n * - Silencing allows testing of error handling logic without external dependencies\n * \n * Why force offline module reload:\n * - The offline module may have already required qerrors before stubbing\n * - Module cache prevents the stub from taking effect\n * - Forcing reload ensures offline module uses the stubbed version\n * - This enables proper offline mode testing behavior\n * \n * Node.js test module benefits:\n * - Automatic cleanup after test completion\n * - Better integration with Node.js testing infrastructure\n * - Consistent behavior across different test frameworks\n * - Superior spy functionality for call verification\n * \n * @returns {undefined} This is a side-effect function with no return value\n * \n * @example\n * stubQerrors();\n * // Now qerrors.qerrors() calls will be silent\n * // And offline module will use stubbed qerrors\n */\nfunction stubQerrors() {\n  console.log(`stubQerrors is running with none`); //(log start of stubQerrors)\n  \n  try {\n    // Attempt to require qerrors module for stubbing\n    // This may fail if qerrors is not installed, which is handled gracefully\n    const qerrors = require('qerrors'); //(use global stubbed module)\n    \n    // Check if Node.js test module is available for superior mocking\n    // Node.js test module provides automatic cleanup and better spy functionality\n    if (typeof test !== 'undefined' && test.mock && test.mock.method) {\n      // Use Node.js test module's mock.method for automatic cleanup\n      // This approach provides better integration with Node.js testing infrastructure\n      test.mock.method(qerrors, 'qerrors', () => {}); //(spy on qerrors.qerrors)\n    } else {\n      // Fall back to manual stubbing for environments without test module\n      // Store original method for potential future restoration needs\n      qerrors.qerrors = () => {};\n    }\n    \n    // Force offline module to reload and pick up the stubbed qerrors\n    // This must happen after stubbing to ensure the module gets the stub version\n    // Using require.resolve ensures we get the correct path for cache deletion\n    delete require.cache[require.resolve('./offlineMode')]; //(force offline module reload)\n    \n    // Log successful completion for debugging\n    console.log(`stubQerrors is returning undefined`); //(log completion)\n    \n  } catch (err) {\n    // Log error with descriptive context for debugging\n    // qerrors is often optional, so this may be expected in some environments\n    console.log(`stubQerrors error ${err.message}`); //(log error)\n    \n    // Propagate error to caller for handling\n    // Allows calling code to decide how to handle missing qerrors\n    throw err; //(propagate error)\n  }\n}\n\n/**\n * Reload a module from cache for isolated testing\n * \n * This function clears a module from Node.js require cache and reloads it,\n * enabling tests to verify module loading behavior and ensure fresh module\n * state between tests. This is essential for testing module initialization\n * and configuration scenarios.\n * \n * Implementation approach:\n * 1. Resolve relative path to absolute path for reliable cache lookup\n * 2. Clear the module from require cache to force fresh loading\n * 3. Require the module again to get a fresh instance\n * 4. Return the reloaded module for use in tests\n * \n * Why module reloading is necessary:\n * - Node.js caches required modules to improve performance\n * - Cached modules retain state from previous requires\n * - Tests may need to verify module initialization behavior\n * - Some modules behave differently on first load vs subsequent loads\n * - Configuration changes may not take effect without reloading\n * \n * Path resolution strategy:\n * - Use path.resolve to convert relative paths to absolute paths\n * - Resolve relative to the testHelpers module location (__dirname)\n * - This ensures consistent behavior regardless of where tests are run from\n * - Prevents issues with different working directories in test environments\n * \n * @param {string} relPath - Relative path to module that should be reloaded\n * @returns {Object} The freshly loaded module object\n * @throws {Error} If module cannot be found or loaded\n * \n * @example\n * const freshModule = reload('../utils/offlineMode');\n * // freshModule is a newly loaded instance, not cached\n */\nfunction reload(relPath) {\n  console.log(`reload is running with ${relPath}`); // log entry for troubleshooting\n\n  const fullPath = path.resolve(__dirname, relPath); // compute absolute path once for reuse\n\n  if (moduleReloadLock.has(fullPath)) { // avoid race by checking lock\n    console.log(`reload has run resulting in skip`); // log skip event per requirement\n    return require(fullPath); // return cached module when locked\n  }\n\n  try {\n    moduleReloadLock.add(fullPath); // acquire reload lock before cache operations\n    delete require.cache[require.resolve(fullPath)]; // clear cache while locked\n    const mod = require(fullPath); // require fresh module after clearing cache\n    moduleReloadLock.delete(fullPath); // release lock after load completes\n    console.log(`reload is returning module`); // log successful reload\n    return mod; // return newly loaded module to caller\n  } catch (err) {\n    moduleReloadLock.delete(fullPath); // release lock on failure to avoid deadlock\n    console.log(`reload error ${err.message}`); // log error context\n    throw err; // propagate failure for caller handling\n  }\n}\n\n/**\n * Execute a callback with a mocked console method\n *\n * This helper creates a console spy using mockConsole, runs the callback,\n * then restores the original console method. It simplifies tests that need\n * temporary console interception.\n *\n * @param {string} method - Console method name to spy on\n * @param {Function} fn - Callback to execute with the spy\n * @returns {Promise<*>} Result returned by the callback\n *\n * @example\n * await withMockConsole('log', spy => { console.log('hi'); });\n */\nasync function withMockConsole(method, fn) {\n  const spy = mockConsole(method); //(create console spy)\n  console.log(`withMockConsole is running with ${method}`); //(log after spy setup)\n  try {\n    const result = await fn(spy);\n    console.log(`withMockConsole is returning ${result}`); //(log before restore moved to finally)\n    return result;\n  } catch (err) {\n    console.log(`withMockConsole error ${err.message}`);\n    throw err;\n  } finally {\n    if (spy.mockRestore) { spy.mockRestore(); } //(ensure restoration if error)\n  }\n}\n\n/**\n * Create minimal response object with json spy for API testing\n * \n * This function creates a minimal Express-style response object with a\n * spied json method, enabling verification of API response behavior\n * without requiring a full Express application setup.\n * \n * Implementation strategy:\n * 1. Check for Jest availability and use its superior spy functionality\n * 2. Fall back to manual call tracking for non-Jest environments\n * 3. Provide consistent API regardless of underlying implementation\n * 4. Include only essential response methods for API testing\n * \n * Why minimal implementation:\n * - API tests often only need to verify json() method calls\n * - Full Express response objects are complex with many methods\n * - Minimal implementation reduces test complexity and potential conflicts\n * - Easy to understand and debug when tests fail\n * \n * Spy functionality rationale:\n * - Tests need to verify what data was sent in response\n * - Call count verification ensures response methods are called correctly\n * - Argument capture allows assertion on response data structure\n * - Compatible interface works with both Jest and manual testing\n * \n * @returns {Object} Mock response object with spied json method\n * \n * @example\n * const res = createJsonRes();\n * apiHandler(req, res);\n * expect(res.json.mock.calls.length).toBe(1);\n * expect(res.json.mock.calls[0][0]).toEqual({ success: true });\n */\nfunction createJsonRes() {\n  // Log function start for debugging mock creation\n  console.log(`createJsonRes is running with none`);\n  \n  try {\n    let jsonSpy;\n    \n    // Check if Jest is available for superior spy functionality\n    if (typeof jest !== 'undefined' && jest.fn) {\n      // Use Jest's spy functionality for advanced call tracking\n      // Jest spies provide more features like call history, return value control\n      jsonSpy = jest.fn();\n    } else {\n      // Create manual spy implementation for non-Jest environments\n      // This provides basic call tracking compatible with Jest interface\n      const calls = [];\n      \n      // Create function that tracks calls manually\n      jsonSpy = function(...args) {\n        // Store all arguments for later verification\n        calls.push(args);\n      };\n      \n      // Add Jest-compatible mock property for consistent API\n      jsonSpy.mock = { calls: calls };\n    }\n    \n    // Log successful creation for debugging\n    console.log(`createJsonRes is returning response object`);\n    \n    // Return minimal response object with spied json method\n    // Only includes json method as it's the most commonly tested response method\n    return { json: jsonSpy };\n    \n  } catch (err) {\n    // Log error with context for debugging\n    console.log(`createJsonRes error ${err.message}`);\n    \n    // Propagate error to caller\n    throw err;\n  }\n}\n\n/**\n * Create comprehensive Express-style response mock for integration testing\n * \n * This function creates a more complete Express-style response object\n * suitable for comprehensive API testing scenarios. It includes multiple\n * response methods and proper call tracking for complex test scenarios.\n * \n * Implementation philosophy:\n * - Provide enough functionality to handle most Express response patterns\n * - Maintain compatibility with both Jest and non-Jest environments\n * - Include commonly used response methods (status, json, send, etc.)\n * - Enable call verification and argument capture for thorough testing\n * \n * Why comprehensive vs minimal:\n * - Integration tests often use multiple response methods\n * - Some middleware expects specific response methods to exist\n * - Comprehensive mock prevents \"method not found\" errors\n * - Allows testing of complete request/response cycles\n * \n * Method selection rationale:\n * - status(): Essential for HTTP status code testing\n * - json(): Most common data response method\n * - send(): Alternative data response method\n * - end(): Response termination method\n * - These four methods cover 90% of Express response usage patterns\n * \n * @returns {Object} Comprehensive response mock with multiple spied methods\n * \n * @example\n * const res = createRes();\n * expressHandler(req, res);\n * expect(res.status.mock.calls[0][0]).toBe(200);\n * expect(res.json.mock.calls[0][0]).toEqual({ data: 'test' });\n */\nfunction createRes() {\n  // Log function start for debugging mock creation\n  console.log(`createRes is running with none`);\n  \n  try {\n    let responseMock;\n    \n    // Check for Jest availability\n    if (typeof jest !== 'undefined' && jest.fn) {\n      // Create Jest-based response mock with spied methods\n      responseMock = {\n        // HTTP status code setter with chaining support\n        status: jest.fn().mockImplementation(function(code) {\n          this.statusCode = code; // Set statusCode property for Express compatibility\n          return this; // Enable method chaining\n        }),\n        \n        // JSON response method\n        json: jest.fn().mockReturnThis(),\n        \n        // General response method for any data type\n        send: jest.fn().mockReturnThis(),\n        \n        // Response termination method\n        end: jest.fn().mockReturnThis()\n      };\n    } else {\n      // Create manual implementation for non-Jest environments\n      // Each method needs its own call tracking array\n      const statusCalls = [];\n      const jsonCalls = [];\n      const sendCalls = [];\n      const endCalls = [];\n      \n      // Build response object with manual call tracking\n      responseMock = {\n        // Status method with call tracking and chaining\n        status: function(...args) {\n          statusCalls.push(args);\n          if (args.length > 0) {\n            this.statusCode = args[0]; // Set statusCode property for Express compatibility\n          }\n          return this; // Enable method chaining\n        },\n        \n        // JSON method with call tracking and chaining\n        json: function(...args) {\n          jsonCalls.push(args);\n          return this;\n        },\n        \n        // Send method with call tracking and chaining\n        send: function(...args) {\n          sendCalls.push(args);\n          return this;\n        },\n        \n        // End method with call tracking and chaining\n        end: function(...args) {\n          endCalls.push(args);\n          return this;\n        }\n      };\n      \n      // Add Jest-compatible mock properties for consistent API\n      responseMock.status.mock = { calls: statusCalls };\n      responseMock.json.mock = { calls: jsonCalls };\n      responseMock.send.mock = { calls: sendCalls };\n      responseMock.end.mock = { calls: endCalls };\n    }\n    \n    // Log successful creation for debugging\n    console.log(`createRes is returning response object`);\n    \n    return responseMock;\n    \n  } catch (err) {\n    // Log error with context for debugging\n    console.log(`createRes error ${err.message}`);\n    \n    // Propagate error to caller\n    throw err;\n  }\n}\n\n/**\n * Generate API key for /api/generate-key integration tests\n * \n * This function creates a mock API key for testing API key generation\n * endpoints. It provides predictable test data while maintaining\n * realistic API key format for integration test scenarios.\n * \n * Enhanced implementation with HTTP testing support:\n * - Generate consistent test key that looks realistic\n * - Support HTTP app testing with supertest-style calls\n * - Handle both direct key generation and API endpoint testing\n * - Provide different keys for different test scenarios\n * \n * Dual usage patterns:\n * 1. Direct key generation: generateKey('suffix') returns string\n * 2. HTTP endpoint testing: generateKey(app, allowedApi) returns response\n * \n * Why specific format:\n * - 'test-api-key-' prefix clearly identifies test keys\n * - Timestamp component provides uniqueness when needed\n * - Consistent format allows easy test verification\n * - Realistic enough to test key validation logic\n * \n * @param {string|Object} appOrSuffix - Express app for HTTP testing or suffix for direct generation\n * @param {string} allowedApi - API service name for HTTP endpoint testing\n * @returns {string|Promise<Object>} Generated test API key or HTTP response\n * \n * @example\n * // Direct key generation\n * const apiKey = generateKey('user');\n * // Returns 'test-api-key-user'\n * \n * // HTTP endpoint testing\n * const response = await generateKey(app, 'userService');\n * // Returns supertest response object\n */\nasync function generateKey(appOrSuffix = '', allowedApi = null) {\n  // Determine if this is HTTP testing or direct key generation\n  const isHttpTesting = allowedApi !== null && typeof appOrSuffix === 'object';\n  \n  if (isHttpTesting) {\n    // HTTP endpoint testing mode\n    console.log(`generateKey is running with ${allowedApi}`); //(log start of generateKey)\n    \n    try {\n      // Import httpTest for supertest-style testing\n      const { supertest } = require('./httpTest');\n      \n      // Make HTTP request to generate-key endpoint\n      const res = await supertest(appOrSuffix)\n        .post('/api/generate-key')\n        .send({ allowedApi });\n      \n      console.log(`generateKey is returning ${res.statusCode}`); //(log completion)\n      return res; //(return server response)\n    } catch (err) {\n      console.log(`generateKey error ${err.message}`); //(log error)\n      throw err; //(propagate error)\n    }\n  } else {\n    // Direct key generation mode\n    const suffix = appOrSuffix;\n    console.log(`generateKey is running with ${suffix}`);\n    \n    try {\n      let generatedKey;\n      \n      if (suffix) {\n        // Use provided suffix for specific test scenarios\n        generatedKey = `test-api-key-${suffix}`;\n      } else {\n        // Generate timestamp-based key for uniqueness\n        generatedKey = `test-api-key-${Date.now()}`;\n      }\n      \n      console.log(`generateKey is returning ${generatedKey}`);\n      return generatedKey;\n      \n    } catch (err) {\n      console.log(`generateKey error ${err.message}`);\n      throw err;\n    }\n  }\n}\n\n/**\n * Backup current environment variables for restoration\n * \n * This function creates a snapshot of current environment variables\n * that can be restored later, enabling test isolation and cleanup.\n * It's particularly useful when tests need to modify environment\n * variables temporarily.\n * \n * Enhanced implementation with selective backup:\n * - Support both full environment backup and selective variable backup\n * - Store selected env vars for later restoration\n * - Handle edge cases like undefined or null values\n * - Provide clean restoration point for test cleanup\n * \n * Dual usage patterns:\n * 1. Full backup: backupEnvVars() returns complete environment snapshot\n * 2. Selective backup: backupEnvVars('VAR1', 'VAR2') returns specified variables\n * \n * Why selective backup option:\n * - Memory efficiency for tests that only modify specific variables\n * - Clear intent about which variables test will modify\n * - Faster restoration for selective backups\n * - Reduces noise in debugging output\n * \n * Memory considerations:\n * - Environment snapshots are small (typically < 1KB)\n * - Selective backups use even less memory\n * - Temporary storage for duration of test only\n * - Garbage collected after test completion\n * \n * @param {...string} names - Optional variable names for selective backup\n * @returns {Object} Environment backup object\n * \n * @example\n * // Full environment backup\n * const envBackup = backupEnvVars();\n * \n * // Selective variable backup\n * const envBackup = backupEnvVars('NODE_ENV', 'DEBUG');\n */\nfunction backupEnvVars(...names) {\n  // Determine backup mode based on arguments\n  const isSelectiveBackup = names.length > 0;\n  \n  if (isSelectiveBackup) {\n    // Selective backup mode for specific variables\n    console.log(`backupEnvVars is running with ${names}`); //(start log)\n    \n    try {\n      const envBackup = {}; //(init backup container)\n      names.forEach(name => { \n        envBackup[name] = process.env[name]; \n      }); //(store each value)\n      \n      console.log(`backupEnvVars is returning selective backup`); //(end log)\n      return envBackup;\n      \n    } catch (err) {\n      console.log(`backupEnvVars error ${err.message}`); //(log error)\n      throw err; //(propagate)\n    }\n  } else {\n    // Full environment backup mode\n    console.log(`backupEnvVars is running with none`);\n    \n    try {\n      // Create copy of process.env using object spread for simplicity\n      // All env values are strings so shallow copy avoids reference issues\n      const envBackup = { ...process.env }; //(use spread copy to avoid JSON parsing & retain strings)\n      \n      // Log successful backup creation for debugging\n      console.log(`backupEnvVars is returning environment backup`);\n      \n      return envBackup;\n      \n    } catch (err) {\n      // Log error with context for debugging\n      console.log(`backupEnvVars error ${err.message}`);\n      \n      // Propagate error to caller\n      throw err;\n    }\n  }\n}\n\n/**\n * Restore environment variables from backup\n * \n * This function restores the environment to a previous state using\n * a backup created by backupEnvVars. It handles both complete restoration\n * and selective restoration based on the backup contents.\n * \n * Enhanced restoration strategy:\n * 1. Detect if backup is selective or complete based on backup size\n * 2. For selective backups: only restore specified variables\n * 3. For complete backups: full environment restoration\n * 4. Handle edge cases like undefined values consistently\n * \n * Restoration modes:\n * - Selective restoration: Only restores variables present in backup\n * - Complete restoration: Removes added variables and restores all original values\n * \n * Why smart restoration:\n * - Prevents accidental deletion of system variables during selective restore\n * - Maintains full compatibility with existing usage patterns\n * - Provides optimal performance for both use cases\n * - Clear behavior based on backup type\n * \n * Edge case handling:\n * - Variables added during test are removed (complete mode only)\n * - Variables deleted during test are restored (both modes)\n * - Original undefined values are handled correctly\n * - No references to backup object are retained\n * \n * @param {Object} envBackup - Environment backup from backupEnvVars()\n * \n * @example\n * // Selective restoration\n * const backup = backupEnvVars('NODE_ENV', 'DEBUG');\n * process.env.NODE_ENV = 'test';\n * restoreEnvVars(backup);\n * // Only NODE_ENV and DEBUG restored\n * \n * // Complete restoration\n * const backup = backupEnvVars();\n * process.env.NEW_VAR = 'test';\n * restoreEnvVars(backup);\n * // NEW_VAR removed, all original variables restored\n */\nfunction restoreEnvVars(envBackup) {\n  // Handle the new calling pattern without backup parameter\n  if (!envBackup) {\n    console.log(`restoreEnvVars is running with none`); //(start log)\n    \n    try {\n      // Check for stored backup from backupEnvVars (legacy pattern support)\n      if (typeof global !== 'undefined' && global.qtestsEnvBackup) {\n        envBackup = global.qtestsEnvBackup;\n        delete global.qtestsEnvBackup; // Clean up after use\n      } else {\n        console.log(`restoreEnvVars is returning undefined`); //(no backup)\n        return;\n      }\n    } catch (err) {\n      console.log(`restoreEnvVars error ${err.message}`); //(log error)\n      throw err; //(propagate)\n    }\n  } else {\n    // Standard backup restoration\n    console.log(`restoreEnvVars is running with environment backup`);\n  }\n  \n  try {\n    // Validate backup parameter to prevent runtime errors\n    if (!envBackup || typeof envBackup !== 'object') {\n      console.log(`restoreEnvVars: Invalid backup provided, skipping restoration`);\n      return;\n    }\n    \n    // Determine restoration mode based on backup characteristics\n    const backupKeys = Object.keys(envBackup);\n    const currentKeys = Object.keys(process.env);\n    const isSelectiveBackup = backupKeys.length < currentKeys.length / 2; // Heuristic for selective backup\n    \n    if (isSelectiveBackup) {\n      // Selective restoration: only restore variables from backup\n      // This prevents accidental deletion of system variables\n      for (const [key, value] of Object.entries(envBackup)) {\n        if (value === undefined) {\n          delete process.env[key]; // Restore original undefined state\n        } else {\n          process.env[key] = value; // Restore original value\n        }\n      }\n      \n      console.log(`restoreEnvVars completed selective restoration`);\n    } else {\n      // Complete restoration: full environment reset\n      const currentKeySet = new Set(currentKeys);\n      const backupKeySet = new Set(backupKeys);\n      \n      // Remove only variables that were added after backup creation\n      // This preserves system-critical variables like PATH, HOME, NODE_ENV\n      for (const key of currentKeySet) {\n        if (!backupKeySet.has(key)) {\n          delete process.env[key];\n        }\n      }\n      \n      // Restore original values for all backed-up variables\n      // Handle undefined values by deleting the key (restoring original undefined state)\n      for (const [key, value] of Object.entries(envBackup)) {\n        if (value !== undefined) {\n          process.env[key] = value;\n        } else {\n          delete process.env[key];\n        }\n      }\n      \n      console.log(`restoreEnvVars completed full restoration`);\n    }\n    \n    // Log successful restoration for debugging\n    console.log(`restoreEnvVars is returning undefined`);\n    \n  } catch (err) {\n    // Log error with context for debugging\n    console.log(`restoreEnvVars error ${err.message}`);\n    \n    // Propagate error to caller\n    throw err;\n  }\n}\n\n/**\n * Run a callback with environment variables saved and restored\n *\n * This helper captures process.env, executes the callback, then restores\n * the original environment. Useful for tests that temporarily modify env vars.\n *\n * @param {Function} fn - Callback function to run while env is saved\n * @returns {Promise<*>} Result returned by the callback\n */\nasync function withSavedEnv(fn) {\n  console.log(`withSavedEnv is running with none`);\n\n  const backup = backupEnvVars();\n  try {\n    const result = await fn();\n    console.log(`withSavedEnv is returning ${result}`);\n    return result;\n  } catch (err) {\n    console.log(`withSavedEnv error ${err.message}`);\n    throw err;\n  } finally {\n    restoreEnvVars(backup);\n  }\n}\n\n/**\n * Export advanced testing helper utilities\n * \n * These utilities handle specialized testing scenarios that require\n * more sophisticated approaches than basic stubbing. They are grouped\n * together because they all serve advanced testing needs and often\n * work together in complex test setups.\n * \n * Function organization rationale:\n * - stubQerrors and reload: Module and dependency management\n * - createJsonRes and createRes: Response object mocking for API tests\n * - generateKey: Specialized utility for API key testing\n * - backupEnvVars and restoreEnvVars: Environment isolation utilities\n * \n * Usage patterns:\n * - Integration tests: Use createRes, generateKey, environment utilities\n * - Module testing: Use reload, stubQerrors for fresh module states\n * - API testing: Use response creators and environment management\n * - Cross-framework compatibility: All utilities work with or without Jest\n */\n// export all test helper utilities at bottom per requirements\nmodule.exports = {\n  stubQerrors, // error reporting stubbing utility\n  reload, // module cache management utility\n  moduleReloadLock, // expose lock for testing of concurrent reloads\n  withMockConsole, // console mocking helper function\n  createJsonRes, // minimal response mocking utility\n  createRes, // comprehensive response mocking utility\n  generateKey, // test data generation utility\n  backupEnvVars, // environment backup utility\n  restoreEnvVars, // environment restoration utility\n  withSavedEnv // environment save/restore wrapper\n};\n\n"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA;AACA,MAAMC,gBAAgB,GAAG,IAAIC,GAAG,CAAC,CAAC;AAClC,MAAM;EAAEC;AAAY,CAAC,GAAGH,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,WAAWA,CAAA,EAAG;EACrBC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC,CAAC,CAAC;;EAEjD,IAAI;IACF;IACA;IACA,MAAMC,OAAO,GAAGP,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;;IAEpC;IACA;IACA,IAAI,OAAOQ,IAAI,KAAK,WAAW,IAAIA,IAAI,CAACC,IAAI,IAAID,IAAI,CAACC,IAAI,CAACC,MAAM,EAAE;MAChE;MACA;MACAF,IAAI,CAACC,IAAI,CAACC,MAAM,CAACH,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,CAAC,MAAM;MACL;MACA;MACAA,OAAO,CAACA,OAAO,GAAG,MAAM,CAAC,CAAC;IAC5B;;IAEA;IACA;IACA;IACA,OAAOP,OAAO,CAACW,KAAK,CAACX,OAAO,CAACY,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;;IAExD;IACAP,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CAAC,CAAC;EAErD,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZ;IACA;IACAR,OAAO,CAACC,GAAG,CAAC,qBAAqBO,GAAG,CAACC,OAAO,EAAE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","ignoreList":[]}