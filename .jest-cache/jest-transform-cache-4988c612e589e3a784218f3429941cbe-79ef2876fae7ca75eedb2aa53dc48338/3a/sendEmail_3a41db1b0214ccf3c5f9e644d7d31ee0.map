{"version":3,"names":["logStart","logReturn","require","emailHistory","clearEmailHistory","cleared","length","getEmailHistory","history","validateEmail","email","emailRegex","isValid","test","formatEmailContent","subject","body","formatted","toString","trim","sendEmail","recipient","options","error","success","emailData","message","timestamp","Date","push","console","log","to","response","id","now","Math","random","substr","verbose","substring","sendEmailBatch","emails","Array","isArray","results","summary","total","successful","failed","result","errorResult","batchResult","createEmailTemplate","templateName","variables","templates","welcome","notification","reset","template","availableTemplates","Object","keys","key","value","entries","placeholder","replace","RegExp","module","exports"],"sources":["sendEmail.js"],"sourcesContent":["/**\n * Email Mock Utility for Testing and Lightweight Applications\n * \n * This module provides email mocking functionality that returns structured email data\n * instead of actually sending emails. This approach enables testing of email-dependent\n * code without requiring external mail service dependencies or configuration.\n * \n * Design philosophy:\n * - Zero external dependencies for lightweight applications\n * - Returns structured data that calling code can forward to actual mail services\n * - Enables comprehensive testing of email workflows without side effects\n * - Follows qtests framework patterns for consistency and logging\n * \n * Use cases:\n * - Unit testing email notification logic\n * - Development environments without mail service setup\n * - Lightweight deployments where email is handled by external workers\n * - Integration testing of applications that send email\n * \n * Integration approach:\n * - Works seamlessly with qtests framework logging patterns\n * - Provides both simple and advanced usage modes\n * - Supports batch email operations for bulk notifications\n * - Compatible with existing email validation and formatting logic\n */\n\nconst { logStart, logReturn } = require('../lib/logUtils');\n\n// In-memory storage for email history during testing\nconst emailHistory = []; //(track sent emails for test verification)\n\n/**\n * Clear email history for test isolation\n * \n * This function provides a clean slate for each test by removing all previously\n * mocked email records. Essential for test isolation and preventing test\n * interference when running multiple email-related test suites.\n * \n * Why explicit clearing is important:\n * - Tests should not depend on emails from previous tests\n * - Email history can grow large in test suites with many email tests\n * - Provides predictable starting state for each test\n * - Enables testing of email count and order without interference\n * \n * @returns {number} Number of emails cleared from history\n */\nfunction clearEmailHistory() {\n  logStart('clearEmailHistory');\n  const cleared = emailHistory.length;\n  emailHistory.length = 0; //(clear array efficiently)\n  logReturn('clearEmailHistory', cleared);\n  return cleared;\n}\n\n/**\n * Get email history for test verification\n * \n * This function provides access to all emails that have been \"sent\" through\n * the sendEmail function. Essential for testing email workflows and verifying\n * that the correct emails were sent with the expected content.\n * \n * Returns a copy of the email history to prevent accidental modification\n * of the internal state. This maintains test isolation while providing\n * full access to email data for assertions.\n * \n * @returns {Array} Copy of all emails in chronological order\n */\nfunction getEmailHistory() {\n  logStart('getEmailHistory');\n  const history = [...emailHistory]; //(return copy to prevent modification)\n  logReturn('getEmailHistory', `${history.length} emails`);\n  return history;\n}\n\n/**\n * Validate email address format\n * \n * This function provides basic email validation using a simple regex pattern.\n * While not comprehensive for all edge cases, it catches common formatting\n * errors and provides helpful feedback for testing scenarios.\n * \n * Validation approach:\n * - Uses simple regex for basic format checking\n * - Focuses on common patterns rather than RFC compliance\n * - Provides clear error messages for debugging\n * - Lightweight approach suitable for mock implementations\n * \n * @param {string} email - Email address to validate\n * @returns {boolean} True if email format appears valid\n */\nfunction validateEmail(email) {\n  logStart('validateEmail', email);\n  \n  if (!email || typeof email !== 'string') {\n    logReturn('validateEmail', false);\n    return false;\n  }\n  \n  // Simple email regex - sufficient for testing scenarios\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  const isValid = emailRegex.test(email);\n  \n  logReturn('validateEmail', isValid);\n  return isValid;\n}\n\n/**\n * Format email content for consistent output\n * \n * This function ensures email content is properly formatted and handles\n * edge cases like undefined values or non-string content. Essential for\n * reliable email mocking and testing.\n * \n * Formatting approach:\n * - Converts all content to strings for consistency\n * - Handles undefined/null values gracefully\n * - Trims whitespace for clean output\n * - Provides fallback values for missing content\n * \n * @param {string} subject - Email subject line\n * @param {string} body - Email body content\n * @returns {Object} Formatted subject and body\n */\nfunction formatEmailContent(subject, body) {\n  logStart('formatEmailContent', subject, body);\n  \n  const formatted = {\n    subject: (subject || '').toString().trim() || '[No Subject]',\n    body: (body || '').toString().trim() || '[No Body]'\n  };\n  \n  logReturn('formatEmailContent', formatted);\n  return formatted;\n}\n\n/**\n * Core sendEmail Mock Function\n *\n * Purpose: Prepares email data for external delivery without coupling to a mailing service.\n * This lightweight approach avoids additional dependencies while enabling tests that expect\n * email payloads and comprehensive verification of email workflows.\n *\n * Implementation rationale:\n * 1. Returns structured data instead of attempting actual email delivery\n * 2. Logs email details for development debugging and test verification\n * 3. Stores email history for test assertions and workflow verification\n * 4. Validates input parameters to catch common errors early\n * 5. Follows qtests framework patterns for consistency and integration\n *\n * Error handling approach:\n * - Validates email format to catch obvious mistakes\n * - Handles missing or invalid parameters gracefully\n * - Returns success/failure status with clear error messages\n * - Maintains email history even for failed attempts (for testing)\n *\n * Testing integration:\n * - Email history enables verification of email count and content\n * - Clear separation between successful and failed email attempts\n * - Predictable return format for easy test assertions\n * - Compatible with existing qtests mock and stub patterns\n *\n * @param {string} recipient - Email address of destination user\n * @param {string} subject - Subject line for email message\n * @param {string} body - Body content for email message\n * @param {Object} options - Optional configuration for email behavior\n * @returns {{success:boolean,emailData:Object,message:string,timestamp:Date}}\n *          - Provides structured payload for the calling client to forward using its own\n *          mail provider, along with metadata for testing and logging\n * \n * Usage examples:\n * - Basic: sendEmail('user@example.com', 'Welcome', 'Hello user!')\n * - Testing: const result = sendEmail(...); assert(result.success);\n * - Batch: emails.forEach(email => sendEmail(email.to, email.subject, email.body));\n */\nfunction sendEmail(recipient, subject, body, options = {}) {\n  logStart('sendEmail', recipient, subject, body, options);\n  \n  // Validate input parameters\n  if (!validateEmail(recipient)) {\n    const error = {\n      success: false,\n      emailData: null,\n      message: `Invalid email address: ${recipient}`,\n      timestamp: new Date(),\n      error: 'INVALID_RECIPIENT'\n    };\n    \n    // Store failed attempt in history for testing\n    emailHistory.push(error);\n    \n    console.log(`[MOCK EMAIL ERROR] Invalid recipient: ${recipient}`);\n    logReturn('sendEmail', error);\n    return error;\n  }\n  \n  // Format email content\n  const formatted = formatEmailContent(subject, body);\n  \n  // Create email data structure\n  const emailData = {\n    to: recipient,\n    subject: formatted.subject,\n    body: formatted.body,\n    ...options //(allow additional options like cc, bcc, etc.)\n  };\n  \n  // Create response object\n  const response = {\n    success: true,\n    emailData,\n    message: \"Client should send this email using preferred mail service\",\n    timestamp: new Date(),\n    id: `mock-email-${Date.now()}-${Math.random().toString(36).substr(2, 9)}` //(unique identifier for tracking)\n  };\n  \n  // Store in history for test verification\n  emailHistory.push(response);\n  \n  // Log email details for development and debugging\n  console.log(`[MOCK EMAIL] To: ${recipient}, Subject: ${formatted.subject}`);\n  if (options.verbose) {\n    console.log(`[MOCK EMAIL] Body: ${formatted.body.substring(0, 100)}${formatted.body.length > 100 ? '...' : ''}`);\n  }\n  \n  logReturn('sendEmail', response);\n  return response;\n}\n\n/**\n * Send multiple emails in batch\n * \n * This function provides efficient batch email processing for applications\n * that need to send multiple emails. It processes all emails and returns\n * a summary with individual results for comprehensive error handling.\n * \n * Batch processing approach:\n * - Processes all emails even if some fail\n * - Returns detailed results for each email attempt\n * - Provides summary statistics for quick overview\n * - Maintains same return format as single email for consistency\n * \n * @param {Array} emails - Array of email objects with to, subject, body properties\n * @param {Object} options - Optional configuration for batch processing\n * @returns {Object} Batch results with individual email results and summary\n */\nfunction sendEmailBatch(emails, options = {}) {\n  logStart('sendEmailBatch', emails, options);\n  \n  if (!Array.isArray(emails)) {\n    const error = {\n      success: false,\n      message: 'sendEmailBatch requires an array of email objects',\n      results: [],\n      summary: { total: 0, successful: 0, failed: 1 }\n    };\n    logReturn('sendEmailBatch', error);\n    return error;\n  }\n  \n  const results = [];\n  let successful = 0;\n  let failed = 0;\n  \n  // Process each email individually\n  for (const email of emails) {\n    try {\n      const result = sendEmail(\n        email.to || email.recipient,\n        email.subject,\n        email.body,\n        { ...options, ...email.options }\n      );\n      \n      results.push(result);\n      if (result.success) {\n        successful++;\n      } else {\n        failed++;\n      }\n    } catch (error) {\n      const errorResult = {\n        success: false,\n        emailData: null,\n        message: `Error processing email: ${error.message}`,\n        timestamp: new Date(),\n        error: 'PROCESSING_ERROR'\n      };\n      \n      results.push(errorResult);\n      failed++;\n    }\n  }\n  \n  const batchResult = {\n    success: failed === 0, //(batch successful if no individual failures)\n    message: `Processed ${emails.length} emails: ${successful} successful, ${failed} failed`,\n    results,\n    summary: {\n      total: emails.length,\n      successful,\n      failed\n    },\n    timestamp: new Date()\n  };\n  \n  console.log(`[MOCK EMAIL BATCH] Processed ${emails.length} emails: ${successful} successful, ${failed} failed`);\n  \n  logReturn('sendEmailBatch', batchResult);\n  return batchResult;\n}\n\n/**\n * Create email template for consistent formatting\n * \n * This function provides a template system for common email patterns.\n * Useful for applications that send similar emails with variable content\n * and need consistent formatting across different email types.\n * \n * Template approach:\n * - Supports variable substitution using {{variable}} syntax\n * - Provides common email templates (welcome, notification, etc.)\n * - Enables custom template creation for specific use cases\n * - Maintains consistency across email communications\n * \n * @param {string} templateName - Name of the email template to use\n * @param {Object} variables - Variables to substitute in the template\n * @returns {Object} Email template with subject and body\n */\nfunction createEmailTemplate(templateName, variables = {}) {\n  logStart('createEmailTemplate', templateName, variables);\n  \n  const templates = {\n    welcome: {\n      subject: 'Welcome to {{appName}}!',\n      body: 'Hello {{userName}},\\n\\nWelcome to {{appName}}! We\\'re excited to have you on board.\\n\\nBest regards,\\nThe {{appName}} Team'\n    },\n    notification: {\n      subject: '{{appName}} Notification: {{title}}',\n      body: 'Hello {{userName}},\\n\\n{{message}}\\n\\nBest regards,\\nThe {{appName}} Team'\n    },\n    reset: {\n      subject: 'Reset your {{appName}} password',\n      body: 'Hello {{userName}},\\n\\nYou requested to reset your password. Use this link: {{resetLink}}\\n\\nIf you didn\\'t request this, please ignore this email.\\n\\nBest regards,\\nThe {{appName}} Team'\n    }\n  };\n  \n  const template = templates[templateName];\n  if (!template) {\n    const error = {\n      success: false,\n      message: `Unknown email template: ${templateName}`,\n      availableTemplates: Object.keys(templates)\n    };\n    logReturn('createEmailTemplate', error);\n    return error;\n  }\n  \n  // Substitute variables in template\n  let subject = template.subject;\n  let body = template.body;\n  \n  for (const [key, value] of Object.entries(variables)) {\n    const placeholder = `{{${key}}}`;\n    subject = subject.replace(new RegExp(placeholder, 'g'), value || '');\n    body = body.replace(new RegExp(placeholder, 'g'), value || '');\n  }\n  \n  // Replace any remaining placeholders with empty strings\n  subject = subject.replace(/\\{\\{[^}]+\\}\\}/g, '');\n  body = body.replace(/\\{\\{[^}]+\\}\\}/g, '');\n  \n  const result = {\n    success: true,\n    template: {\n      subject,\n      body\n    },\n    templateName,\n    variables\n  };\n  \n  logReturn('createEmailTemplate', result);\n  return result;\n}\n\n// Export all email utilities following qtests framework patterns\nmodule.exports = {\n  sendEmail,\n  sendEmailBatch,\n  createEmailTemplate,\n  clearEmailHistory,\n  getEmailHistory,\n  validateEmail,\n  formatEmailContent,\n  emailHistory // Export for direct access in advanced testing scenarios\n};"],"mappings":"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","ignoreList":[]}