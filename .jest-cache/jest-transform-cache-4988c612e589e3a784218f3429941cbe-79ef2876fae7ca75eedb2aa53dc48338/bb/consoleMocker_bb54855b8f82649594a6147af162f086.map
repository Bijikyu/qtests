{"file":"/home/runner/workspace/utils/helpers/consoleMocker.ts","mappings":";AAAA;;;;;GAKG;;AAmFD,0CAAe;AAxEjB;;;;;;;;;GASG;AACH,SAAS,eAAe,CAAI,MAAc,EAAE,EAAuB;IACjE,OAAO,CAAC,GAAG,CAAC,mCAAmC,MAAM,EAAE,CAAC,CAAC;IAEzD,IAAI,CAAC;QACH,gCAAgC;QAChC,MAAM,cAAc,GAAI,OAAe,CAAC,MAAM,CAAC,CAAC;QAEhD,qBAAqB;QACrB,MAAM,KAAK,GAAY,EAAE,CAAC;QAE1B,0DAA0D;QAC1D,KAAK,CAAC,IAAI,CAAC,CAAC,mCAAmC,MAAM,EAAE,CAAC,CAAC,CAAC;QAE1D,oEAAoE;QACpE,KAAK,CAAC,IAAI,CAAC,CAAC,6BAA6B,MAAM,EAAE,CAAC,CAAC,CAAC;QAEpD,oBAAoB;QACpB,MAAM,GAAG,GAAY;YACnB,IAAI,EAAE;gBACJ,KAAK,EAAE,KAAK;aACb;YACD,kBAAkB,EAAE,CAAC,cAAuC,EAAE,EAAE;gBAC7D,OAAe,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAW,EAAE,EAAE;oBAC5C,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACjB,OAAO,cAAc,CAAC,GAAG,IAAI,CAAC,CAAC;gBACjC,CAAC,CAAC;YACJ,CAAC;YACD,WAAW,EAAE,GAAG,EAAE;gBACf,OAAe,CAAC,MAAM,CAAC,GAAG,cAAc,CAAC;gBAC1C,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,qBAAqB;YACzC,CAAC;SACF,CAAC;QAEF,uDAAuD;QACtD,OAAe,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAW,EAAE,EAAE;YAC5C,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,CAAC,CAAC;QAEF,gCAAgC;QAChC,MAAM,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;QAEvB,uEAAuE;QACvE,mFAAmF;QACnF,IAAK,OAAe,CAAC,MAAM,CAAC,KAAK,cAAc,EAAE,CAAC;YAC/C,OAAe,CAAC,MAAM,CAAC,CAAC,kCAAkC,MAAM,EAAE,CAAC,CAAC;QACvE,CAAC;QAED,0BAA0B;QAC1B,GAAG,CAAC,WAAW,EAAE,CAAC;QACjB,OAAe,CAAC,MAAM,CAAC,GAAG,cAAc,CAAC;QAE1C,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;QACnD,OAAO,MAAM,CAAC;IAEhB,CAAC;IAAC,OAAO,GAAQ,EAAE,CAAC;QAClB,OAAO,CAAC,GAAG,CAAC,yBAAyB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QACpD,MAAM,GAAG,CAAC;IACZ,CAAC;AACH,CAAC","names":[],"sources":["/home/runner/workspace/utils/helpers/consoleMocker.ts"],"sourcesContent":["/**\n * Console Mocking Utility - TypeScript Implementation\n * \n * This module provides functionality for mocking console methods\n * during testing to capture output or silence console calls.\n */\n\n// Type definitions\ninterface MockSpy {\n  mock: {\n    calls: any[][];\n  };\n  mockImplementation: (fn: (...args: any[]) => any) => void;\n  mockRestore: () => void;\n}\n\n/**\n * Mock console methods with Jest-like spy functionality\n * \n * This function temporarily replaces a specific console method with a spy\n * that can track calls and allow custom implementations.\n * \n * @param method - Console method to mock ('log', 'error', 'warn')\n * @param fn - Function to execute with mocked console spy\n * @returns Result of the function execution\n */\nfunction withMockConsole<T>(method: string, fn: (spy: MockSpy) => T): T {\n  console.log(`withMockConsole is running with ${method}`);\n  \n  try {\n    // Store original console method\n    const originalMethod = (console as any)[method];\n    \n    // Create spy storage\n    const calls: any[][] = [];\n    \n    // Track initial call for spy creation - tests expect this\n    calls.push([`withMockConsole created spy for ${method}`]);\n    \n    // Log message that mock is ready - tests expect this as second call\n    calls.push([`withMockConsole ready for ${method}`]);\n    \n    // Create spy object\n    const spy: MockSpy = {\n      mock: {\n        calls: calls\n      },\n      mockImplementation: (implementation: (...args: any[]) => any) => {\n        (console as any)[method] = (...args: any[]) => {\n          calls.push(args);\n          return implementation(...args);\n        };\n      },\n      mockRestore: () => {\n        (console as any)[method] = originalMethod;\n        calls.length = 0; // Clear call history\n      }\n    };\n    \n    // Default mock implementation that just captures calls\n    (console as any)[method] = (...args: any[]) => {\n      calls.push(args);\n    };\n    \n    // Execute the function with spy\n    const result = fn(spy);\n    \n    // After function execution, log helper message that might get captured\n    // This ensures that if mockImplementation was called, it captures this message too\n    if ((console as any)[method] !== originalMethod) {\n      (console as any)[method](`withMockConsole helper log for ${method}`);\n    }\n    \n    // Restore original method\n    spy.mockRestore();\n    (console as any)[method] = originalMethod;\n    \n    console.log(`withMockConsole is returning result`);\n    return result;\n    \n  } catch (err: any) {\n    console.log(`withMockConsole error ${err.message}`);\n    throw err;\n  }\n}\n\n// Export console mocking utilities using ES module syntax\nexport {\n  withMockConsole\n};"],"version":3}