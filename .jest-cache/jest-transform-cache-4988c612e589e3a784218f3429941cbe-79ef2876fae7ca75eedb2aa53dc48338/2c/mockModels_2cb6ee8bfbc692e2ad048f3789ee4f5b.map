{"version":3,"names":["setLogging","require","process","env","NODE_ENV","mockCollections","Map","BaseMockModel","constructor","data","console","log","name","Object","assign","_id","generateId","error","message","save","collection","getCollection","existingIndex","findIndex","doc","push","Promise","resolve","reject","remove","result","findOneAndDelete","modelName","has","set","get","clearCollection","timestamp","Math","floor","Date","now","toString","random","substr","padEnd","findOne","query","JSON","stringify","find","matchesQuery","index","deleted","splice","findOneAndUpdate","update","options","document","upsert","newDoc","filtered","filter","chain","_sortOptions","_skipCount","_limitCount","sort","sortOptions","length","a","b","field","direction","entries","aVal","bVal","modifier","skip","count","limit","lean","slice","exec","deleteMany","initialCount","remaining","deletedCount","acknowledged","updateMany","modifiedCount","forEach","countDocuments","keys","value","mockApiKeys","ApiKey","createdAt","isActive","k","key","idx","mockLogs","ApiLog","level","allowedApi","l","createMockModel","schema","ModelClass","defineProperty","resetAllCollections","clear","module","exports"],"sources":["mockModels.js"],"sourcesContent":["/** //(introduces simple in-memory models for tests)\n * Mimics mongoose models without a database. //(simulate schema behavior)\n * Rationale: unit tests need persistence without Mongo. //(explain reason)\n */ //(close introductory comment)\n\n// Import logging control utility for consistent framework behavior\nconst { setLogging } = require('../lib/logUtils');\nif (process.env.NODE_ENV !== 'test') setLogging(false);\n\n// Global registry for all mock model collections\nconst mockCollections = new Map(); //(store all model collections)\n\n/**\n * Base Mock Model Class\n * \n * This class provides the foundation for creating Mongoose-compatible mock models\n * that store data in memory instead of a database. It implements the most commonly\n * used Mongoose model methods for comprehensive testing scenarios.\n * \n * Design philosophy:\n * - Drop-in replacement for Mongoose models in testing\n * - Maintains Mongoose API compatibility for seamless testing\n * - In-memory storage for fast, isolated test execution\n * - Promise-based interface matching modern Mongoose usage\n * \n * Key benefits:\n * 1. Zero database dependencies for unit testing\n * 2. Fast test execution without database I/O\n * 3. Predictable data state for reliable testing\n * 4. Full control over test data without external setup\n * \n * Use cases:\n * - Unit testing models and business logic\n * - Integration testing without database setup\n * - Testing data validation and transformation\n * - API testing with controlled data scenarios\n */\nclass BaseMockModel {\n  /**\n   * Constructor for mock model instances\n   * \n   * Creates a new model instance with the provided data. This mimics\n   * the behavior of creating a new Mongoose document.\n   * \n   * @param {Object} data - Initial data for the model instance\n   */\n  constructor(data = {}) {\n    console.log(`${this.constructor.name} constructor is running with ${typeof data}`); // log creation\n    \n    try {\n      Object.assign(this, data); // assign provided data to instance\n      \n      // Generate _id if not provided (mimics Mongoose behavior)\n      if (!this._id) {\n        this._id = this.constructor.generateId();\n      }\n      \n      console.log(`${this.constructor.name} constructor is returning instance`); // log completion\n    } catch (error) {\n      console.log(`${this.constructor.name} constructor error ${error.message}`); // log error\n      throw error;\n    }\n  }\n  \n  /**\n   * Save instance to in-memory collection\n   * \n   * This method mimics Mongoose's save() functionality by adding the\n   * instance to the in-memory collection. It handles both new documents\n   * and updates to existing documents.\n   * \n   * @returns {Promise<Object>} Promise resolving to the saved instance\n   */\n  save() {\n    console.log(`${this.constructor.name}.save is running with instance`); // log save operation\n    \n    try {\n      const collection = this.constructor.getCollection();\n      \n      // Check if document already exists (for updates)\n      const existingIndex = collection.findIndex(doc => doc._id === this._id);\n      \n      if (existingIndex >= 0) {\n        // Update existing document\n        collection[existingIndex] = this;\n      } else {\n        // Add new document\n        collection.push(this);\n      }\n      \n      console.log(`${this.constructor.name}.save is returning saved instance`); // log return\n      return Promise.resolve(this); // return saved instance\n    } catch (error) {\n      console.log(`${this.constructor.name}.save error ${error.message}`); // log error\n      return Promise.reject(error);\n    }\n  }\n  \n  /**\n   * Remove instance from collection\n   * \n   * This method removes the current instance from the in-memory collection,\n   * mimicking Mongoose's remove() or deleteOne() functionality.\n   * \n   * @returns {Promise<Object>} Promise resolving to the removed instance\n   */\n  remove() {\n    console.log(`${this.constructor.name}.remove is running with instance`); // log removal\n    \n    try {\n      const result = this.constructor.findOneAndDelete({ _id: this._id });\n      console.log(`${this.constructor.name}.remove is returning removed instance`); // log return\n      return result;\n    } catch (error) {\n      console.log(`${this.constructor.name}.remove error ${error.message}`); // log error\n      return Promise.reject(error);\n    }\n  }\n  \n  /**\n   * Get or initialize collection for this model\n   * \n   * Static method that returns the in-memory collection for this model type.\n   * Creates the collection if it doesn't exist.\n   * \n   * @returns {Array} In-memory collection array\n   */\n  static getCollection() {\n    const modelName = this.name;\n    if (!mockCollections.has(modelName)) {\n      mockCollections.set(modelName, []);\n    }\n    return mockCollections.get(modelName);\n  }\n  \n  /**\n   * Clear all data from collection\n   * \n   * Static method to reset the collection to empty state.\n   * Useful for test cleanup and isolation.\n   * \n   * @returns {void}\n   */\n  static clearCollection() {\n    console.log(`${this.name}.clearCollection is running with none`); // log clearing\n    \n    try {\n      mockCollections.set(this.name, []);\n      console.log(`${this.name}.clearCollection completed`); // log completion\n    } catch (error) {\n      console.log(`${this.name}.clearCollection error ${error.message}`); // log error\n      throw error;\n    }\n  }\n  \n  /**\n   * Generate unique ID for documents\n   * \n   * Creates MongoDB-style ObjectId strings for document identification.\n   * Uses timestamp and random components for uniqueness.\n   * \n   * @returns {string} Generated ObjectId-style string\n   */\n  static generateId() {\n    const timestamp = Math.floor(Date.now() / 1000).toString(16);\n    const random = Math.random().toString(16).substr(2, 16);\n    return timestamp + random.padEnd(16, '0');\n  }\n  \n  /**\n   * Find one document matching query\n   * \n   * Static method that finds the first document matching the provided query.\n   * Supports simple field matching and returns null if no match found.\n   * \n   * @param {Object} query - Query object with field/value pairs\n   * @returns {Promise<Object|null>} Promise resolving to found document or null\n   */\n  static findOne(query = {}) {\n    console.log(`${this.name}.findOne is running with ${JSON.stringify(query)}`); // log query\n    \n    try {\n      const collection = this.getCollection();\n      const result = collection.find(doc => this.matchesQuery(doc, query)) || null;\n      \n      console.log(`${this.name}.findOne is returning ${result ? 'document' : 'null'}`); // log result\n      return Promise.resolve(result);\n    } catch (error) {\n      console.log(`${this.name}.findOne error ${error.message}`); // log error\n      return Promise.reject(error);\n    }\n  }\n  \n  /**\n   * Find one document and delete it\n   * \n   * Static method that finds and removes the first document matching the query.\n   * Returns the deleted document or null if no match found.\n   * \n   * @param {Object} query - Query object with field/value pairs\n   * @returns {Promise<Object|null>} Promise resolving to deleted document or null\n   */\n  static findOneAndDelete(query = {}) {\n    console.log(`${this.name}.findOneAndDelete is running with ${JSON.stringify(query)}`); // log operation\n    \n    try {\n      const collection = this.getCollection();\n      const index = collection.findIndex(doc => this.matchesQuery(doc, query));\n      \n      if (index === -1) {\n        console.log(`${this.name}.findOneAndDelete is returning null`); // log no match\n        return Promise.resolve(null);\n      }\n      \n      const deleted = collection.splice(index, 1)[0]; // remove and return document\n      console.log(`${this.name}.findOneAndDelete is returning deleted document`); // log success\n      return Promise.resolve(deleted);\n    } catch (error) {\n      console.log(`${this.name}.findOneAndDelete error ${error.message}`); // log error\n      return Promise.reject(error);\n    }\n  }\n  \n  /**\n   * Find one document and update it\n   * \n   * Static method that finds and updates the first document matching the query.\n   * Applies the update object to the found document and returns the updated version.\n   * \n   * @param {Object} query - Query object with field/value pairs\n   * @param {Object} update - Update object with new field values\n   * @param {Object} options - Update options (upsert, new, etc.)\n   * @returns {Promise<Object|null>} Promise resolving to updated document or null\n   */\n  static findOneAndUpdate(query = {}, update = {}, options = {}) {\n    console.log(`${this.name}.findOneAndUpdate is running with query and update`); // log operation\n    \n    try {\n      const collection = this.getCollection();\n      const document = collection.find(doc => this.matchesQuery(doc, query));\n      \n      if (!document) {\n        if (options.upsert) {\n          // Create new document if upsert is true\n          const newDoc = new this({ ...query, ...update });\n          return newDoc.save();\n        }\n        console.log(`${this.name}.findOneAndUpdate is returning null`); // log no match\n        return Promise.resolve(null);\n      }\n      \n      // Apply updates to found document\n      Object.assign(document, update);\n      \n      console.log(`${this.name}.findOneAndUpdate is returning updated document`); // log success\n      return Promise.resolve(document);\n    } catch (error) {\n      console.log(`${this.name}.findOneAndUpdate error ${error.message}`); // log error\n      return Promise.reject(error);\n    }\n  }\n  \n  /**\n   * Find multiple documents with query chaining\n   * \n   * Static method that returns a query chain object supporting common\n   * Mongoose query operations like sort, skip, limit, and lean.\n   * \n   * @param {Object} query - Query object with field/value pairs\n   * @returns {Object} Query chain object with chaining methods\n   */\n  static find(query = {}) {\n    console.log(`${this.name}.find is running with ${JSON.stringify(query)}`); // log query\n    \n    try {\n      const collection = this.getCollection();\n      const filtered = collection.filter(doc => this.matchesQuery(doc, query));\n      \n      // Create chainable query object\n      const chain = {\n        data: filtered,\n        _sortOptions: null,\n        _skipCount: 0,\n        _limitCount: null\n      };\n      \n      // Sort method for query chaining\n      chain.sort = (sortOptions) => {\n        console.log(`${this.name}.find.sort is running with options`); // log sort\n        chain._sortOptions = sortOptions;\n        \n        if (sortOptions && chain.data.length > 0) {\n          chain.data.sort((a, b) => {\n            for (const [field, direction] of Object.entries(sortOptions)) {\n              const aVal = a[field];\n              const bVal = b[field];\n              const modifier = direction === -1 || direction === 'desc' ? -1 : 1;\n              \n              if (aVal < bVal) return -1 * modifier;\n              if (aVal > bVal) return 1 * modifier;\n            }\n            return 0;\n          });\n        }\n        \n        return chain; // return chain for continued chaining\n      };\n      \n      // Skip method for pagination\n      chain.skip = (count) => {\n        console.log(`${this.name}.find.skip is running with ${count}`); // log skip\n        chain._skipCount = count;\n        return chain; // return chain for continued chaining\n      };\n      \n      // Limit method for pagination\n      chain.limit = (count) => {\n        console.log(`${this.name}.find.limit is running with ${count}`); // log limit\n        chain._limitCount = count;\n        return chain; // return chain for continued chaining\n      };\n      \n      // Lean method to return plain objects\n      chain.lean = () => {\n        console.log(`${this.name}.find.lean is running with none`); // log lean\n        \n        let result = chain.data;\n        \n        // Apply skip if specified\n        if (chain._skipCount > 0) {\n          result = result.slice(chain._skipCount);\n        }\n        \n        // Apply limit if specified\n        if (chain._limitCount !== null) {\n          result = result.slice(0, chain._limitCount);\n        }\n        \n        console.log(`${this.name}.find.lean is returning ${result.length} documents`); // log result\n        return Promise.resolve(result);\n      };\n      \n      // Exec method to execute query\n      chain.exec = () => {\n        return chain.lean();\n      };\n      \n      console.log(`${this.name}.find is returning query chain`); // log chain creation\n      return chain;\n    } catch (error) {\n      console.log(`${this.name}.find error ${error.message}`); // log error\n      throw error;\n    }\n  }\n  \n  /**\n   * Delete multiple documents matching query\n   * \n   * Static method that removes all documents matching the provided query.\n   * Returns information about the deletion operation.\n   * \n   * @param {Object} query - Query object with field/value pairs\n   * @returns {Promise<Object>} Promise resolving to deletion result\n   */\n  static deleteMany(query = {}) {\n    console.log(`${this.name}.deleteMany is running with ${JSON.stringify(query)}`); // log operation\n    \n    try {\n      const collection = this.getCollection();\n      const initialCount = collection.length;\n      \n      // Filter out matching documents\n      const remaining = collection.filter(doc => !this.matchesQuery(doc, query));\n      const deletedCount = initialCount - remaining.length;\n      \n      // Update collection\n      mockCollections.set(this.name, remaining);\n      \n      const result = { deletedCount, acknowledged: true };\n      console.log(`${this.name}.deleteMany is returning result with ${deletedCount} deleted`); // log result\n      return Promise.resolve(result);\n    } catch (error) {\n      console.log(`${this.name}.deleteMany error ${error.message}`); // log error\n      return Promise.reject(error);\n    }\n  }\n  \n  /**\n   * Update multiple documents matching query\n   * \n   * Static method that updates all documents matching the provided query\n   * with the specified update operations.\n   * \n   * @param {Object} query - Query object with field/value pairs\n   * @param {Object} update - Update object with new field values\n   * @returns {Promise<Object>} Promise resolving to update result\n   */\n  static updateMany(query = {}, update = {}) {\n    console.log(`${this.name}.updateMany is running with query and update`); // log operation\n    \n    try {\n      const collection = this.getCollection();\n      let modifiedCount = 0;\n      \n      collection.forEach(doc => {\n        if (this.matchesQuery(doc, query)) {\n          Object.assign(doc, update);\n          modifiedCount++;\n        }\n      });\n      \n      const result = { modifiedCount, acknowledged: true };\n      console.log(`${this.name}.updateMany is returning result with ${modifiedCount} modified`); // log result\n      return Promise.resolve(result);\n    } catch (error) {\n      console.log(`${this.name}.updateMany error ${error.message}`); // log error\n      return Promise.reject(error);\n    }\n  }\n  \n  /**\n   * Count documents matching query\n   * \n   * Static method that returns the count of documents matching the query.\n   * \n   * @param {Object} query - Query object with field/value pairs\n   * @returns {Promise<number>} Promise resolving to document count\n   */\n  static countDocuments(query = {}) {\n    console.log(`${this.name}.countDocuments is running with ${JSON.stringify(query)}`); // log count\n    \n    try {\n      const collection = this.getCollection();\n      const count = collection.filter(doc => this.matchesQuery(doc, query)).length;\n      \n      console.log(`${this.name}.countDocuments is returning ${count}`); // log result\n      return Promise.resolve(count);\n    } catch (error) {\n      console.log(`${this.name}.countDocuments error ${error.message}`); // log error\n      return Promise.reject(error);\n    }\n  }\n  \n  /**\n   * Check if document matches query\n   * \n   * Helper method that determines if a document matches the provided query.\n   * Supports simple field equality matching.\n   * \n   * @param {Object} doc - Document to test\n   * @param {Object} query - Query object with field/value pairs\n   * @returns {boolean} True if document matches query\n   */\n  static matchesQuery(doc, query) {\n    if (!query || Object.keys(query).length === 0) {\n      return true; // empty query matches all documents\n    }\n    \n    for (const [field, value] of Object.entries(query)) {\n      if (doc[field] !== value) {\n        return false; // field doesn't match\n      }\n    }\n    \n    return true; // all fields match\n  }\n}\n\n// Pre-built model classes for common use cases\n\nconst mockApiKeys = []; //(in-memory apiKey collection)\nclass ApiKey extends BaseMockModel { //(minimal stand-in for mongoose model)\n  constructor(data) {\n    super(data);\n    // Set default values specific to ApiKey\n    if (!this.createdAt) this.createdAt = new Date();\n    if (!this.isActive) this.isActive = true;\n  }\n  \n  // Override getCollection to use legacy array for backwards compatibility\n  static getCollection() {\n    return mockApiKeys;\n  }\n  \n  // Legacy methods for backward compatibility with existing code\n  static findOne(query) {\n    console.log(`ApiKey.findOne is running with ${JSON.stringify(query)}`); // log query\n    const result = mockApiKeys.find(k => k.key === query.key) || null;\n    console.log(`ApiKey.findOne is returning ${result ? 'key' : 'null'}`); // log result\n    return Promise.resolve(result);\n  }\n  \n  static findOneAndDelete(query) { //(remove matching key)\n    console.log(`ApiKey.findOneAndDelete is running with ${JSON.stringify(query)}`); // log operation\n    const idx = mockApiKeys.findIndex(k => k.key === query.key);\n    if (idx === -1) {\n      console.log(`ApiKey.findOneAndDelete is returning null`); // log no match\n      return Promise.resolve(null);\n    }\n    const deleted = mockApiKeys.splice(idx, 1)[0];\n    console.log(`ApiKey.findOneAndDelete is returning deleted key`); // log success\n    return Promise.resolve(deleted);\n  }\n  \n  static findOneAndUpdate(query, update) {\n    console.log(`ApiKey.findOneAndUpdate is running with query and update`); // log operation\n    const key = mockApiKeys.find(k => k.key === query.key);\n    if (!key) {\n      console.log(`ApiKey.findOneAndUpdate is returning null`); // log no match\n      return Promise.resolve(null);\n    }\n    Object.assign(key, update); //(apply updates)\n    console.log(`ApiKey.findOneAndUpdate is returning updated key`); // log success\n    return Promise.resolve(key);\n  }\n  \n  static find() { //(provide find interface for admin tests)\n    console.log(`ApiKey.find is running with none`); // log find\n    const chain = { data: mockApiKeys }; //(return all keys)\n    chain.sort = () => chain; //(noop sort chain)\n    chain.lean = () => {\n      console.log(`ApiKey.find.lean is returning ${chain.data.length} keys`); // log result\n      return Promise.resolve(chain.data);\n    };\n    return chain; //(return chain object)\n  }\n}\n\nconst mockLogs = []; //(array of logged proxy calls)\nclass ApiLog extends BaseMockModel { //(simplified logging model)\n  constructor(data) {\n    super(data);\n    // Set default values specific to ApiLog\n    if (!this.timestamp) this.timestamp = new Date();\n    if (!this.level) this.level = 'info';\n  }\n  \n  // Override getCollection to use legacy array for backwards compatibility\n  static getCollection() {\n    return mockLogs;\n  }\n  \n  // Legacy methods for backward compatibility\n  static find(query = {}) { //(support chained query helpers)\n    console.log(`ApiLog.find is running with ${JSON.stringify(query)}`); // log query\n    const filtered = query.allowedApi \n      ? mockLogs.filter(l => l.allowedApi === query.allowedApi) \n      : mockLogs; //(filter logs by service)\n    \n    const chain = { data: filtered };\n    chain.sort = () => chain; //(noop for sort)\n    chain.skip = () => chain; //(noop for skip)\n    chain.limit = () => chain; //(noop for limit)\n    chain.lean = () => {\n      console.log(`ApiLog.find.lean is returning ${chain.data.length} logs`); // log result\n      return Promise.resolve(chain.data);\n    };\n    return chain; //(return chain object)\n  }\n}\n\n/**\n * Create custom mock model class\n * \n * Factory function that creates a new mock model class with the specified name.\n * The created class extends BaseMockModel and can be used like any Mongoose model.\n * \n * @param {string} modelName - Name for the new model class\n * @param {Object} schema - Optional schema definition for validation\n * @returns {Class} New mock model class\n * \n * @example\n * const User = createMockModel('User');\n * const user = new User({ name: 'John', email: 'john@example.com' });\n * await user.save();\n */\nfunction createMockModel(modelName, schema = {}) {\n  console.log(`createMockModel is running with ${modelName}`); // log creation\n  \n  try {\n    // Create dynamic class with specified name\n    const ModelClass = class extends BaseMockModel {\n      constructor(data) {\n        super(data);\n        this.constructor.modelName = modelName;\n      }\n    };\n    \n    // Set the class name for debugging and logging\n    Object.defineProperty(ModelClass, 'name', { value: modelName });\n    \n    console.log(`createMockModel is returning ${modelName} class`); // log return\n    return ModelClass;\n  } catch (error) {\n    console.log(`createMockModel error ${error.message}`); // log error\n    throw error;\n  }\n}\n\n/**\n * Reset all mock collections\n * \n * Utility function that clears all in-memory collections for clean test state.\n * Useful for test setup and teardown to ensure test isolation.\n * \n * @returns {void}\n */\nfunction resetAllCollections() {\n  console.log(`resetAllCollections is running with none`); // log reset\n  \n  try {\n    // Clear the global collections map\n    mockCollections.clear();\n    \n    // Clear legacy arrays for backward compatibility\n    mockApiKeys.length = 0;\n    mockLogs.length = 0;\n    \n    console.log(`resetAllCollections completed`); // log completion\n  } catch (error) {\n    console.log(`resetAllCollections error ${error.message}`); // log error\n    throw error;\n  }\n}\n\n// Export mock model utilities at bottom per requirements\nmodule.exports = {\n  BaseMockModel, // base class for creating custom mock models\n  ApiKey, // pre-built API key model for common testing scenarios\n  ApiLog, // pre-built API log model for logging tests\n  createMockModel, // factory function for creating custom model classes\n  resetAllCollections, // utility for cleaning up test data\n  mockApiKeys, // direct access to API keys array for legacy compatibility\n  mockLogs // direct access to logs array for legacy compatibility\n};"],"mappings":"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","ignoreList":[]}