9f9a744c03fa2dbecade8a32e4962968
"use strict";
/**
 * Core Test Runner Engine
 *
 * This module orchestrates the execution of test suites, handling timeouts,
 * retries, filtering, and result collection. It's the heart of the qtests
 * runner system that ties together all the other components.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = run;
const context_js_1 = require("./context.js");
const hooks_js_1 = require("./hooks.js");
/**
 * Main test runner function - executes all registered tests
 * Returns comprehensive results including timing and statistics
 */
async function run(opts = {}) {
    const startTime = Date.now();
    // Apply test filtering based on only/skip modes before execution
    const filteredSuite = applyTestFiltering(context_js_1.rootSuite);
    try {
        const result = await runSuite(filteredSuite, opts);
        const durationMs = Date.now() - startTime;
        const counts = countResults(result);
        return {
            root: result,
            durationMs,
            ...counts,
            bailedEarly: false
        };
    }
    catch (error) {
        // If we hit a bail condition or other fatal error
        const durationMs = Date.now() - startTime;
        const counts = { passed: 0, failed: 1, skipped: 0, todo: 0 };
        return {
            root: {
                name: 'root',
                results: [{
                        name: 'Runner Error',
                        status: 'failed',
                        error: error,
                        durationMs: 0
                    }],
                suites: [],
                durationMs
            },
            durationMs,
            ...counts,
            bailedEarly: true
        };
    }
}
/**
 * Execute a single test suite with all its tests and nested suites
 */
async function runSuite(suite, opts, parentSuites = []) {
    const suiteStartTime = Date.now();
    const result = {
        name: suite.name,
        results: [],
        suites: []
    };
    try {
        // Run beforeAll hooks for this suite and all parent suites
        await (0, hooks_js_1.runSuiteHooks)(suite, 'beforeAll', parentSuites);
        // Execute all tests in this suite
        for (const test of suite.tests) {
            const testResult = await runTest(test, suite, opts, parentSuites);
            result.results.push(testResult);
            // Bail early if requested and we hit a failure
            if (opts.bail && testResult.status === 'failed') {
                throw new Error('Bailing due to test failure');
            }
        }
        // Execute all nested suites
        const currentPath = [...parentSuites, suite];
        for (const nestedSuite of suite.suites) {
            const nestedResult = await runSuite(nestedSuite, opts, currentPath);
            result.suites.push(nestedResult);
            // Check for bail condition in nested suites
            if (opts.bail && hasFailures(nestedResult)) {
                throw new Error('Bailing due to nested suite failure');
            }
        }
        // Run afterAll hooks for this suite and all parent suites
        await (0, hooks_js_1.runSuiteHooks)(suite, 'afterAll', parentSuites);
    }
    catch (error) {
        // If suite-level error (hooks, bail, etc.), add it as a test failure
        result.results.push({
            name: `Suite: ${suite.name}`,
            status: 'failed',
            error: error,
            durationMs: 0
        });
        // Re-throw if this is a bail condition
        if (error.message.includes('Bailing')) {
            throw error;
        }
    }
    result.durationMs = Date.now() - suiteStartTime;
    return result;
}
/**
 * Execute a single test with timeout, retries, and hook execution
 */
async function runTest(test, suite, opts, parentSuites = []) {
    // Handle special test modes
    if (test.mode === 'skip') {
        return { name: test.name, status: 'skipped' };
    }
    if (test.mode === 'todo') {
        return { name: test.name, status: 'todo' };
    }
    const startTime = Date.now();
    let lastError;
    const maxRetries = opts.retries || 0;
    // Try the test with retries
    for (let attempt = 0; attempt <= maxRetries; attempt++) {
        try {
            // Run beforeEach hooks from all parent suites
            await (0, hooks_js_1.runBeforeEachHooks)(suite, parentSuites);
            // Execute the actual test with timeout
            const timeout = test.timeoutMs || opts.timeoutMs || 5000;
            await runWithTimeout(test.fn, timeout);
            // Run afterEach hooks from all parent suites
            await (0, hooks_js_1.runAfterEachHooks)(suite, parentSuites);
            // Test passed - return success result
            return {
                name: test.name,
                status: 'passed',
                durationMs: Date.now() - startTime,
                retries: attempt > 0 ? attempt : undefined
            };
        }
        catch (error) {
            lastError = error;
            // Always run afterEach hooks even if test failed
            try {
                await (0, hooks_js_1.runAfterEachHooks)(suite, parentSuites);
            }
            catch (hookError) {
                // If afterEach hooks fail, combine the errors
                lastError = new Error(`Test failed: ${error.message}\nAfterEach hook also failed: ${hookError.message}`);
            }
            // If this wasn't the last retry, continue to next attempt
            if (attempt < maxRetries) {
                continue;
            }
        }
    }
    // All attempts failed
    return {
        name: test.name,
        status: 'failed',
        error: lastError,
        durationMs: Date.now() - startTime,
        retries: maxRetries > 0 ? maxRetries : undefined
    };
}
/**
 * Execute a test function with timeout protection
 * Handles both sync/async functions and optional done callback
 */
function runWithTimeout(fn, timeoutMs) {
    return new Promise((resolve, reject) => {
        let isSettled = false;
        let timeoutHandle;
        // Done callback for tests that use callback-style async
        const done = (error) => {
            if (isSettled)
                return; // Prevent multiple calls
            isSettled = true;
            clearTimeout(timeoutHandle);
            if (error) {
                reject(error instanceof Error ? error : new Error(String(error)));
            }
            else {
                resolve();
            }
        };
        // Set up timeout
        timeoutHandle = setTimeout(() => {
            if (!isSettled) {
                isSettled = true;
                reject(new Error(`Test timeout after ${timeoutMs}ms`));
            }
        }, timeoutMs);
        try {
            // Call the test function, providing done callback if it expects one
            const result = fn.length > 0 ? fn(done) : fn();
            // If test function doesn't use done callback, handle as promise
            if (fn.length === 0) {
                Promise.resolve(result)
                    .then(() => {
                    if (!isSettled) {
                        isSettled = true;
                        clearTimeout(timeoutHandle);
                        resolve();
                    }
                })
                    .catch((error) => {
                    if (!isSettled) {
                        isSettled = true;
                        clearTimeout(timeoutHandle);
                        reject(error);
                    }
                });
            }
        }
        catch (error) {
            // Synchronous test threw an error
            if (!isSettled) {
                isSettled = true;
                clearTimeout(timeoutHandle);
                reject(error);
            }
        }
    });
}
/**
 * Apply test filtering based on .only and .skip modifiers
 * Returns a filtered copy of the test suite
 */
function applyTestFiltering(suite) {
    // Check if any tests are marked as .only
    const hasOnlyTests = hasAnyOnlyTests(suite);
    return filterSuite(suite, hasOnlyTests);
}
/**
 * Recursively check if any tests in the suite tree are marked as .only
 */
function hasAnyOnlyTests(suite) {
    // Check direct tests
    if (suite.tests.some(test => test.mode === 'only')) {
        return true;
    }
    // Check nested suites
    return suite.suites.some(nestedSuite => hasAnyOnlyTests(nestedSuite));
}
/**
 * Filter a suite based on only/skip logic
 */
function filterSuite(suite, hasOnlyInTree) {
    const filteredSuite = {
        ...suite,
        tests: [...suite.tests],
        suites: suite.suites.map(s => filterSuite(s, hasOnlyInTree)),
        hooks: { ...suite.hooks }
    };
    if (hasOnlyInTree) {
        // If there are .only tests anywhere, filter out non-only tests
        filteredSuite.tests = filteredSuite.tests.filter(test => test.mode === 'only');
    }
    return filteredSuite;
}
/**
 * Check if a suite result contains any failures
 */
function hasFailures(result) {
    // Check direct test failures
    if (result.results.some(test => test.status === 'failed')) {
        return true;
    }
    // Check nested suite failures
    return result.suites.some(suite => hasFailures(suite));
}
/**
 * Count test results recursively through the suite hierarchy
 */
function countResults(result) {
    let passed = 0;
    let failed = 0;
    let skipped = 0;
    let todo = 0;
    // Recursive function to traverse the result tree
    function countInSuite(suite) {
        // Count results in current suite
        for (const test of suite.results) {
            switch (test.status) {
                case 'passed':
                    passed++;
                    break;
                case 'failed':
                    failed++;
                    break;
                case 'skipped':
                    skipped++;
                    break;
                case 'todo':
                    todo++;
                    break;
            }
        }
        // Recursively count in nested suites
        for (const nestedSuite of suite.suites) {
            countInSuite(nestedSuite);
        }
    }
    countInSuite(result);
    return { passed, failed, skipped, todo };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,