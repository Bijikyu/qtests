{"file":"/home/runner/workspace/lib/runner/runner.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/lib/runner/runner.ts"],"sourcesContent":["/**\n * Core Test Runner Engine\n * \n * This module orchestrates the execution of test suites, handling timeouts,\n * retries, filtering, and result collection. It's the heart of the qtests\n * runner system that ties together all the other components.\n */\n\nimport {\n  rootSuite,\n  type RunOptions,\n  type RunResult,\n  type SuiteResult,\n  type TestResult,\n  type Suite,\n  type TestCase\n} from './context.js';\nimport {\n  runBeforeEachHooks,\n  runAfterEachHooks,\n  runSuiteHooks\n} from './hooks.js';\n\n/**\n * Main test runner function - executes all registered tests\n * Returns comprehensive results including timing and statistics\n */\nexport async function run(opts: RunOptions = {}): Promise<RunResult> {\n  const startTime = Date.now();\n  \n  // Apply test filtering based on only/skip modes before execution\n  const filteredSuite = applyTestFiltering(rootSuite);\n  \n  try {\n    const result = await runSuite(filteredSuite, opts);\n    const durationMs = Date.now() - startTime;\n    const counts = countResults(result);\n    \n    return {\n      root: result,\n      durationMs,\n      ...counts,\n      bailedEarly: false\n    };\n  } catch (error: any) {\n    // If we hit a bail condition or other fatal error\n    const durationMs = Date.now() - startTime;\n    const counts = { passed: 0, failed: 1, skipped: 0, todo: 0 };\n    \n    return {\n      root: {\n        name: 'root',\n        results: [{\n          name: 'Runner Error',\n          status: 'failed',\n          error: error,\n          durationMs: 0\n        }],\n        suites: [],\n        durationMs\n      },\n      durationMs,\n      ...counts,\n      bailedEarly: true\n    };\n  }\n}\n\n/**\n * Execute a single test suite with all its tests and nested suites\n */\nasync function runSuite(\n  suite: Suite, \n  opts: RunOptions, \n  parentSuites: Suite[] = []\n): Promise<SuiteResult> {\n  const suiteStartTime = Date.now();\n  const result: SuiteResult = {\n    name: suite.name,\n    results: [],\n    suites: []\n  };\n  \n  try {\n    // Run beforeAll hooks for this suite and all parent suites\n    await runSuiteHooks(suite, 'beforeAll', parentSuites);\n    \n    // Execute all tests in this suite\n    for (const test of suite.tests) {\n      const testResult = await runTest(test, suite, opts, parentSuites);\n      result.results.push(testResult);\n      \n      // Bail early if requested and we hit a failure\n      if (opts.bail && testResult.status === 'failed') {\n        throw new Error('Bailing due to test failure');\n      }\n    }\n    \n    // Execute all nested suites\n    const currentPath = [...parentSuites, suite];\n    for (const nestedSuite of suite.suites) {\n      const nestedResult = await runSuite(nestedSuite, opts, currentPath);\n      result.suites.push(nestedResult);\n      \n      // Check for bail condition in nested suites\n      if (opts.bail && hasFailures(nestedResult)) {\n        throw new Error('Bailing due to nested suite failure');\n      }\n    }\n    \n    // Run afterAll hooks for this suite and all parent suites\n    await runSuiteHooks(suite, 'afterAll', parentSuites);\n    \n  } catch (error: any) {\n    // If suite-level error (hooks, bail, etc.), add it as a test failure\n    result.results.push({\n      name: `Suite: ${suite.name}`,\n      status: 'failed',\n      error: error,\n      durationMs: 0\n    });\n    \n    // Re-throw if this is a bail condition\n    if (error.message.includes('Bailing')) {\n      throw error;\n    }\n  }\n  \n  result.durationMs = Date.now() - suiteStartTime;\n  return result;\n}\n\n/**\n * Execute a single test with timeout, retries, and hook execution\n */\nasync function runTest(\n  test: TestCase,\n  suite: Suite,\n  opts: RunOptions,\n  parentSuites: Suite[] = []\n): Promise<TestResult> {\n  // Handle special test modes\n  if (test.mode === 'skip') {\n    return { name: test.name, status: 'skipped' };\n  }\n  \n  if (test.mode === 'todo') {\n    return { name: test.name, status: 'todo' };\n  }\n  \n  const startTime = Date.now();\n  let lastError: Error | undefined;\n  const maxRetries = opts.retries || 0;\n  \n  // Try the test with retries\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      // Run beforeEach hooks from all parent suites\n      await runBeforeEachHooks(suite, parentSuites);\n      \n      // Execute the actual test with timeout\n      const timeout = test.timeoutMs || opts.timeoutMs || 5000;\n      await runWithTimeout(test.fn, timeout);\n      \n      // Run afterEach hooks from all parent suites\n      await runAfterEachHooks(suite, parentSuites);\n      \n      // Test passed - return success result\n      return {\n        name: test.name,\n        status: 'passed',\n        durationMs: Date.now() - startTime,\n        retries: attempt > 0 ? attempt : undefined\n      };\n      \n    } catch (error: any) {\n      lastError = error;\n      \n      // Always run afterEach hooks even if test failed\n      try {\n        await runAfterEachHooks(suite, parentSuites);\n      } catch (hookError: any) {\n        // If afterEach hooks fail, combine the errors\n        lastError = new Error(\n          `Test failed: ${error.message}\\nAfterEach hook also failed: ${hookError.message}`\n        );\n      }\n      \n      // If this wasn't the last retry, continue to next attempt\n      if (attempt < maxRetries) {\n        continue;\n      }\n    }\n  }\n  \n  // All attempts failed\n  return {\n    name: test.name,\n    status: 'failed',\n    error: lastError,\n    durationMs: Date.now() - startTime,\n    retries: maxRetries > 0 ? maxRetries : undefined\n  };\n}\n\n/**\n * Execute a test function with timeout protection\n * Handles both sync/async functions and optional done callback\n */\nfunction runWithTimeout(fn: TestCase['fn'], timeoutMs: number): Promise<void> {\n  return new Promise((resolve, reject) => {\n    let isSettled = false;\n    let timeoutHandle: NodeJS.Timeout;\n    \n    // Done callback for tests that use callback-style async\n    const done = (error?: any) => {\n      if (isSettled) return; // Prevent multiple calls\n      isSettled = true;\n      clearTimeout(timeoutHandle);\n      \n      if (error) {\n        reject(error instanceof Error ? error : new Error(String(error)));\n      } else {\n        resolve();\n      }\n    };\n    \n    // Set up timeout\n    timeoutHandle = setTimeout(() => {\n      if (!isSettled) {\n        isSettled = true;\n        reject(new Error(`Test timeout after ${timeoutMs}ms`));\n      }\n    }, timeoutMs);\n    \n    try {\n      // Call the test function, providing done callback if it expects one\n      const result = fn.length > 0 ? fn(done) : fn();\n      \n      // If test function doesn't use done callback, handle as promise\n      if (fn.length === 0) {\n        Promise.resolve(result)\n          .then(() => {\n            if (!isSettled) {\n              isSettled = true;\n              clearTimeout(timeoutHandle);\n              resolve();\n            }\n          })\n          .catch((error) => {\n            if (!isSettled) {\n              isSettled = true;\n              clearTimeout(timeoutHandle);\n              reject(error);\n            }\n          });\n      }\n    } catch (error) {\n      // Synchronous test threw an error\n      if (!isSettled) {\n        isSettled = true;\n        clearTimeout(timeoutHandle);\n        reject(error);\n      }\n    }\n  });\n}\n\n/**\n * Apply test filtering based on .only and .skip modifiers\n * Returns a filtered copy of the test suite\n */\nfunction applyTestFiltering(suite: Suite): Suite {\n  // Check if any tests are marked as .only\n  const hasOnlyTests = hasAnyOnlyTests(suite);\n  \n  return filterSuite(suite, hasOnlyTests);\n}\n\n/**\n * Recursively check if any tests in the suite tree are marked as .only\n */\nfunction hasAnyOnlyTests(suite: Suite): boolean {\n  // Check direct tests\n  if (suite.tests.some(test => test.mode === 'only')) {\n    return true;\n  }\n  \n  // Check nested suites\n  return suite.suites.some(nestedSuite => hasAnyOnlyTests(nestedSuite));\n}\n\n/**\n * Filter a suite based on only/skip logic\n */\nfunction filterSuite(suite: Suite, hasOnlyInTree: boolean): Suite {\n  const filteredSuite: Suite = {\n    ...suite,\n    tests: [...suite.tests],\n    suites: suite.suites.map(s => filterSuite(s, hasOnlyInTree)),\n    hooks: { ...suite.hooks }\n  };\n  \n  if (hasOnlyInTree) {\n    // If there are .only tests anywhere, filter out non-only tests\n    filteredSuite.tests = filteredSuite.tests.filter(\n      test => test.mode === 'only'\n    );\n  }\n  \n  return filteredSuite;\n}\n\n/**\n * Check if a suite result contains any failures\n */\nfunction hasFailures(result: SuiteResult): boolean {\n  // Check direct test failures\n  if (result.results.some(test => test.status === 'failed')) {\n    return true;\n  }\n  \n  // Check nested suite failures\n  return result.suites.some(suite => hasFailures(suite));\n}\n\n/**\n * Count test results recursively through the suite hierarchy\n */\nfunction countResults(result: SuiteResult): {\n  passed: number;\n  failed: number;\n  skipped: number;\n  todo: number;\n} {\n  let passed = 0;\n  let failed = 0;\n  let skipped = 0;\n  let todo = 0;\n  \n  // Recursive function to traverse the result tree\n  function countInSuite(suite: SuiteResult): void {\n    // Count results in current suite\n    for (const test of suite.results) {\n      switch (test.status) {\n        case 'passed': passed++; break;\n        case 'failed': failed++; break;\n        case 'skipped': skipped++; break;\n        case 'todo': todo++; break;\n      }\n    }\n    \n    // Recursively count in nested suites\n    for (const nestedSuite of suite.suites) {\n      countInSuite(nestedSuite);\n    }\n  }\n  \n  countInSuite(result);\n  return { passed, failed, skipped, todo };\n}"],"version":3}