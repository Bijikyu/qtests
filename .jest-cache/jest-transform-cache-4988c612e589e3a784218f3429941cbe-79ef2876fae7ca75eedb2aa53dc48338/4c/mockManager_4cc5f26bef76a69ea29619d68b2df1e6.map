{"version":3,"names":["logStart","logReturn","require","MockManager","constructor","mocks","Map","restorations","setupApiClientMocks","customResponses","stubMethod","defaultResponses","get","status","data","post","id","put","updated","delete","responses","mockApiClient","Promise","resolve","request","set","global","fetch","originalFetch","url","options","method","toLowerCase","response","ok","json","text","JSON","stringify","error","message","setupConsoleMocks","mockConsole","mockLog","mockError","mockWarn","restore","mockRestore","consoleMocks","log","warn","getMock","mockName","mock","clearAll","forEach","clear","setupEnvironmentMocks","envVars","saveEnv","restoreEnv","savedEnv","Object","assign","process","env","restoreFunction","setupEmailMocks","sendEmail","clearEmailHistory","emailMocks","sendEmailBatch","getHistory","getEmailHistory","clearHistory","name","console","module","exports"],"sources":["mockManager.js"],"sourcesContent":["/**\n * Mock Management System for Consistent API and Service Mocking\n * \n * This class focuses solely on mock management and lifecycle concerns.\n * It provides centralized mock management that eliminates duplicate patterns.\n */\n\nconst { logStart, logReturn } = require('../../lib/logUtils');\n\n/**\n * Mock Management System for Consistent API and Service Mocking\n * \n * This class provides centralized mock management that eliminates duplicate\n * mock patterns across test files. It uses qtests utilities for consistent\n * mocking while providing advanced mock configuration capabilities.\n */\nclass MockManager {\n  constructor() {\n    this.mocks = new Map();\n    this.restorations = new Map();\n  }\n\n  /**\n   * Sets up API client mocks using qtests stubMethod utility\n   * \n   * @param {Object} customResponses - Custom response configurations\n   */\n  setupApiClientMocks(customResponses = {}) {\n    logStart('MockManager.setupApiClientMocks', customResponses);\n    \n    try {\n      const { stubMethod } = require('../../lib/envUtils');\n      \n      // Default API responses\n      const defaultResponses = {\n        get: { status: 200, data: {} },\n        post: { status: 201, data: { id: 1 } },\n        put: { status: 200, data: { updated: true } },\n        delete: { status: 204, data: null }\n      };\n      \n      const responses = { ...defaultResponses, ...customResponses };\n      \n      // Create mock API client object\n      const mockApiClient = {\n        get: () => Promise.resolve(responses.get),\n        post: () => Promise.resolve(responses.post),\n        put: () => Promise.resolve(responses.put),\n        delete: () => Promise.resolve(responses.delete),\n        request: () => Promise.resolve(responses.get)\n      };\n      \n      this.mocks.set('apiClient', mockApiClient);\n      \n      // If we have a global HTTP client to stub, stub it\n      if (typeof global.fetch === 'function') {\n        const originalFetch = global.fetch;\n        global.fetch = (url, options = {}) => {\n          const method = (options.method || 'GET').toLowerCase();\n          const response = responses[method] || responses.get;\n          \n          return Promise.resolve({\n            ok: response.status < 400,\n            status: response.status,\n            json: () => Promise.resolve(response.data),\n            text: () => Promise.resolve(JSON.stringify(response.data))\n          });\n        };\n        \n        this.restorations.set('fetch', () => {\n          global.fetch = originalFetch;\n        });\n      }\n      \n      logReturn('MockManager.setupApiClientMocks', 'completed');\n    } catch (error) {\n      logReturn('MockManager.setupApiClientMocks', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Sets up console and notification mocks using qtests utilities\n   * \n   * @returns {Object} Mock console functions\n   */\n  setupConsoleMocks() {\n    logStart('MockManager.setupConsoleMocks');\n    \n    try {\n      const { mockConsole } = require('../mockConsole');\n      \n      // Use qtests mockConsole utility - mock each console method individually\n      const mockLog = mockConsole('log');\n      const mockError = mockConsole('error');\n      const mockWarn = mockConsole('warn');\n      \n      // Create restore function that restores all console methods\n      const restore = () => {\n        if (mockLog && mockLog.mockRestore) mockLog.mockRestore();\n        if (mockError && mockError.mockRestore) mockError.mockRestore();\n        if (mockWarn && mockWarn.mockRestore) mockWarn.mockRestore();\n      };\n      \n      const consoleMocks = {\n        log: mockLog,\n        error: mockError,\n        warn: mockWarn,\n        restore\n      };\n      \n      this.mocks.set('console', consoleMocks);\n      this.restorations.set('console', restore);\n      \n      logReturn('MockManager.setupConsoleMocks', consoleMocks);\n      return consoleMocks;\n    } catch (error) {\n      logReturn('MockManager.setupConsoleMocks', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Gets a specific mock by name\n   * \n   * @param {string} mockName - Name of the mock to retrieve\n   * @returns {Object|null} Mock object or null if not found\n   */\n  getMock(mockName) {\n    logStart('MockManager.getMock', mockName);\n    \n    const mock = this.mocks.get(mockName);\n    if (mock) {\n      logReturn('MockManager.getMock', 'found');\n      return mock;\n    } else {\n      logReturn('MockManager.getMock', 'not found');\n      return null;\n    }\n  }\n\n  /**\n   * Clears all mocks and restores original functions\n   */\n  clearAll() {\n    logStart('MockManager.clearAll');\n    \n    try {\n      // Restore all mocked functions\n      this.restorations.forEach((restore, mockName) => {\n        try {\n          restore();\n        } catch (error) {\n          // Ignore restoration errors - function may already be restored\n        }\n      });\n      \n      // Clear all stored mocks and restorations\n      this.mocks.clear();\n      this.restorations.clear();\n      \n      logReturn('MockManager.clearAll', 'completed');\n    } catch (error) {\n      logReturn('MockManager.clearAll', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Sets up environment variable mocks using qtests testEnv utility\n   * \n   * @param {Object} envVars - Environment variables to set\n   * @returns {Function} Restoration function\n   */\n  setupEnvironmentMocks(envVars = {}) {\n    logStart('MockManager.setupEnvironmentMocks', envVars);\n    \n    try {\n      const { saveEnv, restoreEnv } = require('../testEnv');\n      \n      // Save current environment and set test values\n      const savedEnv = saveEnv();\n      Object.assign(process.env, envVars);\n      \n      this.mocks.set('environment', envVars);\n      const restoreFunction = () => restoreEnv(savedEnv);\n      this.restorations.set('environment', restoreFunction);\n      \n      logReturn('MockManager.setupEnvironmentMocks', 'completed');\n      return restoreFunction;\n    } catch (error) {\n      logReturn('MockManager.setupEnvironmentMocks', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Sets up email mocking using qtests sendEmail utility\n   * \n   * @returns {Object} Email mock utilities\n   */\n  setupEmailMocks() {\n    logStart('MockManager.setupEmailMocks');\n    \n    try {\n      const { sendEmail } = require('../../lib/envUtils');\n      \n      // Clear previous email history\n      sendEmail.clearEmailHistory();\n      \n      const emailMocks = {\n        sendEmail: sendEmail.sendEmail,\n        sendEmailBatch: sendEmail.sendEmailBatch,\n        getHistory: sendEmail.getEmailHistory,\n        clearHistory: sendEmail.clearEmailHistory\n      };\n      \n      this.mocks.set('email', emailMocks);\n      \n      logReturn('MockManager.setupEmailMocks', emailMocks);\n      return emailMocks;\n    } catch (error) {\n      logReturn('MockManager.setupEmailMocks', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Clears all mocks and restores original functionality\n   */\n  clearAll() {\n    logStart('MockManager.clearAll');\n    \n    try {\n      // Restore all stubbed functions\n      this.restorations.forEach((restore, name) => {\n        try {\n          restore();\n        } catch (error) {\n          console.log(`Failed to restore ${name}: ${error.message}`);\n        }\n      });\n      \n      // Clear mock storage\n      this.mocks.clear();\n      this.restorations.clear();\n      \n      logReturn('MockManager.clearAll', 'completed');\n    } catch (error) {\n      logReturn('MockManager.clearAll', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Gets a specific mock by name for custom assertions\n   * \n   * @param {string} name - Name of the mock to retrieve\n   * @returns {any} Mock object or undefined if not found\n   */\n  getMock(name) {\n    logStart('MockManager.getMock', name);\n    const mock = this.mocks.get(name);\n    logReturn('MockManager.getMock', mock ? 'found' : 'not found');\n    return mock;\n  }\n}\n\nmodule.exports = {\n  MockManager\n};"],"mappings":"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","ignoreList":[]}