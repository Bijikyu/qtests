639c337194ec89a449594ce0b57a25a6
// Simplified testEnv tests to prevent hanging in parallel execution
import { setTestEnv, createScheduleMock, createQerrorsMock, createAxiosMock } from '../utils/testEnv.js';
describe('testEnv utilities', () => {
    test('testEnv utilities exist and are callable', () => {
        expect(typeof setTestEnv).toBe('function');
        expect(typeof createScheduleMock).toBe('function');
        expect(typeof createQerrorsMock).toBe('function');
        expect(typeof createAxiosMock).toBe('function');
    });
    test('schedule mock works', async () => {
        const scheduleMock = createScheduleMock();
        const fn = jest.fn(() => 'done');
        const result = await scheduleMock(fn);
        expect(result).toBe('done');
        expect(typeof scheduleMock.mockClear).toBe('function');
    });
    test('qerrors mock works', () => {
        const qerrorsMock = createQerrorsMock();
        const args = qerrorsMock('err', 'ctx');
        expect(args).toEqual(['err', 'ctx']);
        expect(typeof qerrorsMock.mockClear).toBe('function');
    });
    test('axios mock basic functionality', () => {
        const axiosMock = createAxiosMock();
        axiosMock.onGet('/test').reply(200, { ok: true });
        expect(axiosMock._replies['/test']).toEqual({ status: 200, data: { ok: true } });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9tYW51YWwtdGVzdHMvdGVzdEVudi50ZXN0LnRzIiwibWFwcGluZ3MiOiJBQUFBLG9FQUFvRTtBQUNwRSxPQUFPLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixFQUFFLGlCQUFpQixFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXpHLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7SUFDakMsSUFBSSxDQUFDLDBDQUEwQyxFQUFFLEdBQUcsRUFBRTtRQUNwRCxNQUFNLENBQUMsT0FBTyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLE9BQU8sa0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkQsTUFBTSxDQUFDLE9BQU8saUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEQsTUFBTSxDQUFDLE9BQU8sZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLHFCQUFxQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3JDLE1BQU0sWUFBWSxHQUFHLGtCQUFrQixFQUFFLENBQUM7UUFDMUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxPQUFPLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO1FBQzlCLE1BQU0sV0FBVyxHQUFHLGlCQUFpQixFQUFFLENBQUM7UUFDeEMsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDckMsTUFBTSxDQUFDLE9BQU8sV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4RCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUU7UUFDMUMsTUFBTSxTQUFTLEdBQUcsZUFBZSxFQUFFLENBQUM7UUFDcEMsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDbEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbkYsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL21hbnVhbC10ZXN0cy90ZXN0RW52LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU2ltcGxpZmllZCB0ZXN0RW52IHRlc3RzIHRvIHByZXZlbnQgaGFuZ2luZyBpbiBwYXJhbGxlbCBleGVjdXRpb25cbmltcG9ydCB7IHNldFRlc3RFbnYsIGNyZWF0ZVNjaGVkdWxlTW9jaywgY3JlYXRlUWVycm9yc01vY2ssIGNyZWF0ZUF4aW9zTW9jayB9IGZyb20gJy4uL3V0aWxzL3Rlc3RFbnYuanMnO1xuXG5kZXNjcmliZSgndGVzdEVudiB1dGlsaXRpZXMnLCAoKSA9PiB7XG4gIHRlc3QoJ3Rlc3RFbnYgdXRpbGl0aWVzIGV4aXN0IGFuZCBhcmUgY2FsbGFibGUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHR5cGVvZiBzZXRUZXN0RW52KS50b0JlKCdmdW5jdGlvbicpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3JlYXRlU2NoZWR1bGVNb2NrKS50b0JlKCdmdW5jdGlvbicpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3JlYXRlUWVycm9yc01vY2spLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgZXhwZWN0KHR5cGVvZiBjcmVhdGVBeGlvc01vY2spLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ3NjaGVkdWxlIG1vY2sgd29ya3MnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc2NoZWR1bGVNb2NrID0gY3JlYXRlU2NoZWR1bGVNb2NrKCk7XG4gICAgY29uc3QgZm4gPSBqZXN0LmZuKCgpID0+ICdkb25lJyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2NoZWR1bGVNb2NrKGZuKTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlKCdkb25lJyk7XG4gICAgZXhwZWN0KHR5cGVvZiBzY2hlZHVsZU1vY2subW9ja0NsZWFyKS50b0JlKCdmdW5jdGlvbicpO1xuICB9KTtcblxuICB0ZXN0KCdxZXJyb3JzIG1vY2sgd29ya3MnLCAoKSA9PiB7XG4gICAgY29uc3QgcWVycm9yc01vY2sgPSBjcmVhdGVRZXJyb3JzTW9jaygpO1xuICAgIGNvbnN0IGFyZ3MgPSBxZXJyb3JzTW9jaygnZXJyJywgJ2N0eCcpO1xuICAgIGV4cGVjdChhcmdzKS50b0VxdWFsKFsnZXJyJywgJ2N0eCddKTtcbiAgICBleHBlY3QodHlwZW9mIHFlcnJvcnNNb2NrLm1vY2tDbGVhcikudG9CZSgnZnVuY3Rpb24nKTtcbiAgfSk7XG5cbiAgdGVzdCgnYXhpb3MgbW9jayBiYXNpYyBmdW5jdGlvbmFsaXR5JywgKCkgPT4ge1xuICAgIGNvbnN0IGF4aW9zTW9jayA9IGNyZWF0ZUF4aW9zTW9jaygpO1xuICAgIGF4aW9zTW9jay5vbkdldCgnL3Rlc3QnKS5yZXBseSgyMDAsIHsgb2s6IHRydWUgfSk7XG4gICAgZXhwZWN0KGF4aW9zTW9jay5fcmVwbGllc1snL3Rlc3QnXSkudG9FcXVhbCh7IHN0YXR1czogMjAwLCBkYXRhOiB7IG9rOiB0cnVlIH0gfSk7XG4gIH0pO1xufSk7Il0sInZlcnNpb24iOjN9