2b8f78023b8d9cb19081f70deee093e2
// Auto-generated API test for GET /api/status - optimized for speed
const {
  httpTest
} = require('qtests/lib/envUtils');
describe.concurrent('GET /api/status', () => {
  // Shared app setup for performance
  let sharedApp;
  beforeAll(() => {
    sharedApp = httpTest.createMockApp();
  });
  test.concurrent('should succeed', async () => {
    // Reuse shared app for speed
    const app = httpTest.createMockApp();
    app.get('/api/status', (req, res) => {
      res.statusCode = 200;
      res.setHeader('content-type', 'application/json');
      res.end(JSON.stringify({
        success: true
      }));
    });
    const res = await httpTest.supertest(app).get('/api/status').expect(200).end();
    expect(res.body.success).toBe(true);
  });
  test.concurrent('should handle error responses', async () => {
    const app = httpTest.createMockApp();
    app.get('/api/status', (req, res) => {
      res.statusCode = 400;
      res.setHeader('content-type', 'application/json');
      res.end(JSON.stringify({
        error: 'Bad request'
      }));
    });
    const res = await httpTest.supertest(app).get('/api/status').expect(400).end();
    expect(res.body.error).toBe('Bad request');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJodHRwVGVzdCIsInJlcXVpcmUiLCJkZXNjcmliZSIsImNvbmN1cnJlbnQiLCJzaGFyZWRBcHAiLCJiZWZvcmVBbGwiLCJjcmVhdGVNb2NrQXBwIiwidGVzdCIsImFwcCIsImdldCIsInJlcSIsInJlcyIsInN0YXR1c0NvZGUiLCJzZXRIZWFkZXIiLCJlbmQiLCJKU09OIiwic3RyaW5naWZ5Iiwic3VjY2VzcyIsInN1cGVydGVzdCIsImV4cGVjdCIsImJvZHkiLCJ0b0JlIiwiZXJyb3IiXSwic291cmNlcyI6WyJleGFtcGxlX19nZXQudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBdXRvLWdlbmVyYXRlZCBBUEkgdGVzdCBmb3IgR0VUIC9hcGkvc3RhdHVzIC0gb3B0aW1pemVkIGZvciBzcGVlZFxuY29uc3QgeyBodHRwVGVzdCB9ID0gcmVxdWlyZSgncXRlc3RzL2xpYi9lbnZVdGlscycpO1xuXG5kZXNjcmliZS5jb25jdXJyZW50KCdHRVQgL2FwaS9zdGF0dXMnLCAoKSA9PiB7XG4gIC8vIFNoYXJlZCBhcHAgc2V0dXAgZm9yIHBlcmZvcm1hbmNlXG4gIGxldCBzaGFyZWRBcHA7XG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgc2hhcmVkQXBwID0gaHR0cFRlc3QuY3JlYXRlTW9ja0FwcCgpO1xuICB9KTtcblxuICB0ZXN0LmNvbmN1cnJlbnQoJ3Nob3VsZCBzdWNjZWVkJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIFJldXNlIHNoYXJlZCBhcHAgZm9yIHNwZWVkXG4gICAgY29uc3QgYXBwID0gaHR0cFRlc3QuY3JlYXRlTW9ja0FwcCgpO1xuICAgIGFwcC5nZXQoJy9hcGkvc3RhdHVzJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgICByZXMuc3RhdHVzQ29kZSA9IDIwMDtcbiAgICAgIHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHsgc3VjY2VzczogdHJ1ZSB9KSk7XG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgcmVzID0gYXdhaXQgaHR0cFRlc3Quc3VwZXJ0ZXN0KGFwcClcbiAgICAgIC5nZXQoJy9hcGkvc3RhdHVzJylcbiAgICAgIC5leHBlY3QoMjAwKVxuICAgICAgLmVuZCgpO1xuICAgIFxuICAgIGV4cGVjdChyZXMuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICB9KTtcblxuICB0ZXN0LmNvbmN1cnJlbnQoJ3Nob3VsZCBoYW5kbGUgZXJyb3IgcmVzcG9uc2VzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGFwcCA9IGh0dHBUZXN0LmNyZWF0ZU1vY2tBcHAoKTtcbiAgICBhcHAuZ2V0KCcvYXBpL3N0YXR1cycsIChyZXEsIHJlcykgPT4ge1xuICAgICAgcmVzLnN0YXR1c0NvZGUgPSA0MDA7XG4gICAgICByZXMuc2V0SGVhZGVyKCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeSh7IGVycm9yOiAnQmFkIHJlcXVlc3QnIH0pKTtcbiAgICB9KTtcbiAgICBcbiAgICBjb25zdCByZXMgPSBhd2FpdCBodHRwVGVzdC5zdXBlcnRlc3QoYXBwKVxuICAgICAgLmdldCgnL2FwaS9zdGF0dXMnKVxuICAgICAgLmV4cGVjdCg0MDApXG4gICAgICAuZW5kKCk7XG4gICAgXG4gICAgZXhwZWN0KHJlcy5ib2R5LmVycm9yKS50b0JlKCdCYWQgcmVxdWVzdCcpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLE1BQU07RUFBRUE7QUFBUyxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztBQUVuREMsUUFBUSxDQUFDQyxVQUFVLENBQUMsaUJBQWlCLEVBQUUsTUFBTTtFQUMzQztFQUNBLElBQUlDLFNBQVM7RUFDYkMsU0FBUyxDQUFDLE1BQU07SUFDZEQsU0FBUyxHQUFHSixRQUFRLENBQUNNLGFBQWEsQ0FBQyxDQUFDO0VBQ3RDLENBQUMsQ0FBQztFQUVGQyxJQUFJLENBQUNKLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFZO0lBQzVDO0lBQ0EsTUFBTUssR0FBRyxHQUFHUixRQUFRLENBQUNNLGFBQWEsQ0FBQyxDQUFDO0lBQ3BDRSxHQUFHLENBQUNDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLEtBQUs7TUFDbkNBLEdBQUcsQ0FBQ0MsVUFBVSxHQUFHLEdBQUc7TUFDcEJELEdBQUcsQ0FBQ0UsU0FBUyxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQztNQUNqREYsR0FBRyxDQUFDRyxHQUFHLENBQUNDLElBQUksQ0FBQ0MsU0FBUyxDQUFDO1FBQUVDLE9BQU8sRUFBRTtNQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQztJQUVGLE1BQU1OLEdBQUcsR0FBRyxNQUFNWCxRQUFRLENBQUNrQixTQUFTLENBQUNWLEdBQUcsQ0FBQyxDQUN0Q0MsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUNsQlUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUNYTCxHQUFHLENBQUMsQ0FBQztJQUVSSyxNQUFNLENBQUNSLEdBQUcsQ0FBQ1MsSUFBSSxDQUFDSCxPQUFPLENBQUMsQ0FBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQztFQUNyQyxDQUFDLENBQUM7RUFFRmQsSUFBSSxDQUFDSixVQUFVLENBQUMsK0JBQStCLEVBQUUsWUFBWTtJQUMzRCxNQUFNSyxHQUFHLEdBQUdSLFFBQVEsQ0FBQ00sYUFBYSxDQUFDLENBQUM7SUFDcENFLEdBQUcsQ0FBQ0MsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDQyxHQUFHLEVBQUVDLEdBQUcsS0FBSztNQUNuQ0EsR0FBRyxDQUFDQyxVQUFVLEdBQUcsR0FBRztNQUNwQkQsR0FBRyxDQUFDRSxTQUFTLENBQUMsY0FBYyxFQUFFLGtCQUFrQixDQUFDO01BQ2pERixHQUFHLENBQUNHLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDQyxTQUFTLENBQUM7UUFBRU0sS0FBSyxFQUFFO01BQWMsQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQyxDQUFDO0lBRUYsTUFBTVgsR0FBRyxHQUFHLE1BQU1YLFFBQVEsQ0FBQ2tCLFNBQVMsQ0FBQ1YsR0FBRyxDQUFDLENBQ3RDQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQ2xCVSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQ1hMLEdBQUcsQ0FBQyxDQUFDO0lBRVJLLE1BQU0sQ0FBQ1IsR0FBRyxDQUFDUyxJQUFJLENBQUNFLEtBQUssQ0FBQyxDQUFDRCxJQUFJLENBQUMsYUFBYSxDQUFDO0VBQzVDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==