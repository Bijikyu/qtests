f8bbcfb6b55dde86734db0444f0ebbb3
"use strict";
/**
 * Mock Functions - Call Tracking and Implementation Control
 *
 * This module provides Jest/Sinon-compatible mock function functionality
 * with call tracking, return value control, and implementation replacement.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.fn = fn;
exports.resetGlobalCallOrder = resetGlobalCallOrder;
// Global call order counter for tracking invocation order across all mocks
let globalCallOrder = 0;
/**
 * Create a mock function with call tracking and implementation control
 */
function fn(implementation) {
    // Mock state
    const calls = [];
    const results = [];
    const instances = [];
    const contexts = [];
    const invocationCallOrder = [];
    // Implementation state
    let currentImplementation = implementation;
    let returnValue = undefined;
    let hasReturnValue = false;
    let oneTimeReturnValues = [];
    let oneTimeImplementations = [];
    let resolvedValue = undefined;
    let hasResolvedValue = false;
    let oneTimeResolvedValues = [];
    let rejectedValue = undefined;
    let hasRejectedValue = false;
    let oneTimeRejectedValues = [];
    // The actual mock function
    function mockFunction(...args) {
        // Record the call
        calls.push(args);
        contexts.push(this);
        instances.push(this);
        invocationCallOrder.push(++globalCallOrder);
        let result;
        let resultType = 'return';
        try {
            // Determine what to execute
            let fnToExecute;
            // Check for one-time implementations first
            if (oneTimeImplementations.length > 0) {
                fnToExecute = oneTimeImplementations.shift();
            }
            else if (currentImplementation) {
                fnToExecute = currentImplementation;
            }
            // Execute implementation if available
            if (fnToExecute) {
                result = fnToExecute.apply(this, args);
            }
            else {
                // Handle return values and promises
                if (oneTimeReturnValues.length > 0) {
                    result = oneTimeReturnValues.shift();
                }
                else if (hasReturnValue) {
                    result = returnValue;
                }
                else if (oneTimeResolvedValues.length > 0) {
                    result = Promise.resolve(oneTimeResolvedValues.shift());
                }
                else if (hasResolvedValue) {
                    result = Promise.resolve(resolvedValue);
                }
                else if (oneTimeRejectedValues.length > 0) {
                    result = Promise.reject(oneTimeRejectedValues.shift());
                }
                else if (hasRejectedValue) {
                    result = Promise.reject(rejectedValue);
                }
                else {
                    result = undefined;
                }
            }
            // Handle rejected promises by converting to thrown errors for consistent tracking
            if (result && typeof result.then === 'function') {
                result.catch((error) => {
                    // Update the result type for promise rejections
                    const lastResultIndex = results.length - 1;
                    if (lastResultIndex >= 0) {
                        results[lastResultIndex] = { type: 'throw', value: error };
                    }
                });
            }
        }
        catch (error) {
            result = error;
            resultType = 'throw';
            // Re-throw the error after recording it
            results.push({ type: resultType, value: result });
            throw error;
        }
        // Record the result
        results.push({ type: resultType, value: result });
        return result;
    }
    // Add mock control methods to the function
    const mockAPI = {
        calls,
        results,
        instances,
        contexts,
        invocationCallOrder,
        mockReturnValue(value) {
            returnValue = value;
            hasReturnValue = true;
            return this;
        },
        mockReturnValueOnce(value) {
            oneTimeReturnValues.push(value);
            return this;
        },
        mockResolvedValue(value) {
            resolvedValue = value;
            hasResolvedValue = true;
            return this;
        },
        mockResolvedValueOnce(value) {
            oneTimeResolvedValues.push(value);
            return this;
        },
        mockRejectedValue(value) {
            rejectedValue = value;
            hasRejectedValue = true;
            return this;
        },
        mockRejectedValueOnce(value) {
            oneTimeRejectedValues.push(value);
            return this;
        },
        mockImplementation(fn) {
            currentImplementation = fn;
            return this;
        },
        mockImplementationOnce(fn) {
            oneTimeImplementations.push(fn);
            return this;
        },
        toHaveBeenCalled() {
            return calls.length > 0;
        },
        toHaveBeenCalledWith(...args) {
            return calls.some(call => call.length === args.length &&
                call.every((arg, index) => arg === args[index]));
        },
        toHaveBeenCalledTimes(times) {
            return calls.length === times;
        },
        toHaveBeenLastCalledWith(...args) {
            if (calls.length === 0)
                return false;
            const lastCall = calls[calls.length - 1];
            return lastCall.length === args.length &&
                lastCall.every((arg, index) => arg === args[index]);
        },
        toHaveBeenNthCalledWith(call, ...args) {
            const targetCall = calls[call - 1]; // 1-based indexing
            if (!targetCall)
                return false;
            return targetCall.length === args.length &&
                targetCall.every((arg, index) => arg === args[index]);
        },
        toHaveReturnedWith(value) {
            return results.some(result => result.type === 'return' && result.value === value);
        },
        toHaveLastReturnedWith(value) {
            if (results.length === 0)
                return false;
            const lastResult = results[results.length - 1];
            return lastResult.type === 'return' && lastResult.value === value;
        },
        toHaveNthReturnedWith(call, value) {
            const targetResult = results[call - 1]; // 1-based indexing
            if (!targetResult)
                return false;
            return targetResult.type === 'return' && targetResult.value === value;
        },
        mockClear() {
            calls.length = 0;
            results.length = 0;
            instances.length = 0;
            contexts.length = 0;
            invocationCallOrder.length = 0;
            return this;
        },
        mockReset() {
            this.mockClear();
            currentImplementation = undefined;
            returnValue = undefined;
            hasReturnValue = false;
            oneTimeReturnValues.length = 0;
            oneTimeImplementations.length = 0;
            resolvedValue = undefined;
            hasResolvedValue = false;
            oneTimeResolvedValues.length = 0;
            rejectedValue = undefined;
            hasRejectedValue = false;
            oneTimeRejectedValues.length = 0;
            return this;
        }
    };
    // Merge the function with the mock API
    return Object.assign(mockFunction, mockAPI);
}
/**
 * Reset the global call order counter
 * Useful for test isolation
 */
function resetGlobalCallOrder() {
    globalCallOrder = 0;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,