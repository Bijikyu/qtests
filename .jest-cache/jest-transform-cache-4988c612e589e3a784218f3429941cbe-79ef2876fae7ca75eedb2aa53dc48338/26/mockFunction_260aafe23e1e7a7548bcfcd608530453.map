{"file":"/home/runner/workspace/lib/mocks/mockFunction.ts","mappings":";AAAA;;;;;GAKG;;AAiDH,gBA0NC;AAMD,oDAEC;AAxOD,2EAA2E;AAC3E,IAAI,eAAe,GAAG,CAAC,CAAC;AAExB;;GAEG;AACH,SAAgB,EAAE,CAChB,cAA4C;IAG5C,aAAa;IACb,MAAM,KAAK,GAAY,EAAE,CAAC;IAC1B,MAAM,OAAO,GAAoD,EAAE,CAAC;IACpE,MAAM,SAAS,GAAU,EAAE,CAAC;IAC5B,MAAM,QAAQ,GAAU,EAAE,CAAC;IAC3B,MAAM,mBAAmB,GAAa,EAAE,CAAC;IAEzC,uBAAuB;IACvB,IAAI,qBAAqB,GAAG,cAAc,CAAC;IAC3C,IAAI,WAAW,GAAwB,SAAS,CAAC;IACjD,IAAI,cAAc,GAAG,KAAK,CAAC;IAC3B,IAAI,mBAAmB,GAAc,EAAE,CAAC;IACxC,IAAI,sBAAsB,GAAuC,EAAE,CAAC;IACpE,IAAI,aAAa,GAAQ,SAAS,CAAC;IACnC,IAAI,gBAAgB,GAAG,KAAK,CAAC;IAC7B,IAAI,qBAAqB,GAAU,EAAE,CAAC;IACtC,IAAI,aAAa,GAAQ,SAAS,CAAC;IACnC,IAAI,gBAAgB,GAAG,KAAK,CAAC;IAC7B,IAAI,qBAAqB,GAAU,EAAE,CAAC;IAEtC,2BAA2B;IAC3B,SAAS,YAAY,CAAY,GAAG,IAAW;QAC7C,kBAAkB;QAClB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrB,mBAAmB,CAAC,IAAI,CAAC,EAAE,eAAe,CAAC,CAAC;QAE5C,IAAI,MAAW,CAAC;QAChB,IAAI,UAAU,GAAuB,QAAQ,CAAC;QAE9C,IAAI,CAAC;YACH,4BAA4B;YAC5B,IAAI,WAAsD,CAAC;YAE3D,2CAA2C;YAC3C,IAAI,sBAAsB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACtC,WAAW,GAAG,sBAAsB,CAAC,KAAK,EAAE,CAAC;YAC/C,CAAC;iBAAM,IAAI,qBAAqB,EAAE,CAAC;gBACjC,WAAW,GAAG,qBAAqB,CAAC;YACtC,CAAC;YAED,sCAAsC;YACtC,IAAI,WAAW,EAAE,CAAC;gBAChB,MAAM,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACzC,CAAC;iBAAM,CAAC;gBACN,oCAAoC;gBACpC,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACnC,MAAM,GAAG,mBAAmB,CAAC,KAAK,EAAE,CAAC;gBACvC,CAAC;qBAAM,IAAI,cAAc,EAAE,CAAC;oBAC1B,MAAM,GAAG,WAAW,CAAC;gBACvB,CAAC;qBAAM,IAAI,qBAAqB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAC5C,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC,CAAC;gBAC1D,CAAC;qBAAM,IAAI,gBAAgB,EAAE,CAAC;oBAC5B,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;gBAC1C,CAAC;qBAAM,IAAI,qBAAqB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBAC5C,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC,CAAC;gBACzD,CAAC;qBAAM,IAAI,gBAAgB,EAAE,CAAC;oBAC5B,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;gBACzC,CAAC;qBAAM,CAAC;oBACN,MAAM,GAAG,SAAS,CAAC;gBACrB,CAAC;YACH,CAAC;YAED,kFAAkF;YAClF,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;gBAChD,MAAM,CAAC,KAAK,CAAC,CAAC,KAAU,EAAE,EAAE;oBAC1B,gDAAgD;oBAChD,MAAM,eAAe,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;oBAC3C,IAAI,eAAe,IAAI,CAAC,EAAE,CAAC;wBACzB,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;oBAC7D,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;QAEH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,GAAG,KAAK,CAAC;YACf,UAAU,GAAG,OAAO,CAAC;YACrB,wCAAwC;YACxC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;YAClD,MAAM,KAAK,CAAC;QACd,CAAC;QAED,oBAAoB;QACpB,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;QAClD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,2CAA2C;IAC3C,MAAM,OAAO,GAAyB;QACpC,KAAK;QACL,OAAO;QACP,SAAS;QACT,QAAQ;QACR,mBAAmB;QAEnB,eAAe,CAAC,KAAc;YAC5B,WAAW,GAAG,KAAK,CAAC;YACpB,cAAc,GAAG,IAAI,CAAC;YACtB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,mBAAmB,CAAC,KAAc;YAChC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAChC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,iBAAiB,CAAC,KAAU;YAC1B,aAAa,GAAG,KAAK,CAAC;YACtB,gBAAgB,GAAG,IAAI,CAAC;YACxB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,qBAAqB,CAAC,KAAU;YAC9B,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAClC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,iBAAiB,CAAC,KAAU;YAC1B,aAAa,GAAG,KAAK,CAAC;YACtB,gBAAgB,GAAG,IAAI,CAAC;YACxB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,qBAAqB,CAAC,KAAU;YAC9B,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAClC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,kBAAkB,CAAC,EAA+B;YAChD,qBAAqB,GAAG,EAAE,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC;QAED,sBAAsB,CAAC,EAA+B;YACpD,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAChC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,gBAAgB;YACd,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1B,CAAC;QAED,oBAAoB,CAAC,GAAG,IAAW;YACjC,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CACvB,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM;gBAC3B,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAChD,CAAC;QACJ,CAAC;QAED,qBAAqB,CAAC,KAAa;YACjC,OAAO,KAAK,CAAC,MAAM,KAAK,KAAK,CAAC;QAChC,CAAC;QAED,wBAAwB,CAAC,GAAG,IAAW;YACrC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,KAAK,CAAC;YACrC,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACzC,OAAO,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM;gBAC/B,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7D,CAAC;QAED,uBAAuB,CAAC,IAAY,EAAE,GAAG,IAAW;YAClD,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,mBAAmB;YACvD,IAAI,CAAC,UAAU;gBAAE,OAAO,KAAK,CAAC;YAC9B,OAAO,UAAU,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM;gBACjC,UAAU,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/D,CAAC;QAED,kBAAkB,CAAC,KAAc;YAC/B,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAC3B,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,MAAM,CAAC,KAAK,KAAK,KAAK,CACnD,CAAC;QACJ,CAAC;QAED,sBAAsB,CAAC,KAAc;YACnC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC;gBAAE,OAAO,KAAK,CAAC;YACvC,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC/C,OAAO,UAAU,CAAC,IAAI,KAAK,QAAQ,IAAI,UAAU,CAAC,KAAK,KAAK,KAAK,CAAC;QACpE,CAAC;QAED,qBAAqB,CAAC,IAAY,EAAE,KAAc;YAChD,MAAM,YAAY,GAAG,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,mBAAmB;YAC3D,IAAI,CAAC,YAAY;gBAAE,OAAO,KAAK,CAAC;YAChC,OAAO,YAAY,CAAC,IAAI,KAAK,QAAQ,IAAI,YAAY,CAAC,KAAK,KAAK,KAAK,CAAC;QACxE,CAAC;QAED,SAAS;YACP,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;YACjB,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;YACnB,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;YACrB,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;YACpB,mBAAmB,CAAC,MAAM,GAAG,CAAC,CAAC;YAC/B,OAAO,IAAI,CAAC;QACd,CAAC;QAED,SAAS;YACP,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,qBAAqB,GAAG,SAAS,CAAC;YAClC,WAAW,GAAG,SAAS,CAAC;YACxB,cAAc,GAAG,KAAK,CAAC;YACvB,mBAAmB,CAAC,MAAM,GAAG,CAAC,CAAC;YAC/B,sBAAsB,CAAC,MAAM,GAAG,CAAC,CAAC;YAClC,aAAa,GAAG,SAAS,CAAC;YAC1B,gBAAgB,GAAG,KAAK,CAAC;YACzB,qBAAqB,CAAC,MAAM,GAAG,CAAC,CAAC;YACjC,aAAa,GAAG,SAAS,CAAC;YAC1B,gBAAgB,GAAG,KAAK,CAAC;YACzB,qBAAqB,CAAC,MAAM,GAAG,CAAC,CAAC;YACjC,OAAO,IAAI,CAAC;QACd,CAAC;KACF,CAAC;IAEF,uCAAuC;IACvC,OAAO,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAyD,CAAC;AACtG,CAAC;AAED;;;GAGG;AACH,SAAgB,oBAAoB;IAClC,eAAe,GAAG,CAAC,CAAC;AACtB,CAAC","names":[],"sources":["/home/runner/workspace/lib/mocks/mockFunction.ts"],"sourcesContent":["/**\n * Mock Functions - Call Tracking and Implementation Control\n * \n * This module provides Jest/Sinon-compatible mock function functionality\n * with call tracking, return value control, and implementation replacement.\n */\n\n// Mock function call record\nexport interface MockCall<TArgs extends any[] = any[]> {\n  args: TArgs;\n  result?: { type: 'return' | 'throw'; value: any };\n  timestamp: number;\n}\n\n// Mock function state and control interface\nexport interface Mock<TArgs extends any[] = any[], TReturn = any> {\n  calls: TArgs[];\n  results: Array<{ type: 'return' | 'throw'; value: any }>;\n  instances: any[];\n  contexts: any[];\n  invocationCallOrder: number[];\n  \n  // Control methods\n  mockReturnValue(value: TReturn): this;\n  mockReturnValueOnce(value: TReturn): this;\n  mockResolvedValue(value: any): this;\n  mockResolvedValueOnce(value: any): this;\n  mockRejectedValue(value: any): this;\n  mockRejectedValueOnce(value: any): this;\n  mockImplementation(fn: (...args: TArgs) => TReturn): this;\n  mockImplementationOnce(fn: (...args: TArgs) => TReturn): this;\n  \n  // Inspection methods\n  toHaveBeenCalled(): boolean;\n  toHaveBeenCalledWith(...args: TArgs): boolean;\n  toHaveBeenCalledTimes(times: number): boolean;\n  toHaveBeenLastCalledWith(...args: TArgs): boolean;\n  toHaveBeenNthCalledWith(call: number, ...args: TArgs): boolean;\n  toHaveReturnedWith(value: TReturn): boolean;\n  toHaveLastReturnedWith(value: TReturn): boolean;\n  toHaveNthReturnedWith(call: number, value: TReturn): boolean;\n  \n  // Reset methods\n  mockClear(): this;\n  mockReset(): this;\n  mockRestore?(): void;\n}\n\n// Global call order counter for tracking invocation order across all mocks\nlet globalCallOrder = 0;\n\n/**\n * Create a mock function with call tracking and implementation control\n */\nexport function fn<TArgs extends any[] = any[], TReturn = any>(\n  implementation?: (...args: TArgs) => TReturn\n): Mock<TArgs, TReturn> & ((...args: TArgs) => TReturn) {\n  \n  // Mock state\n  const calls: TArgs[] = [];\n  const results: Array<{ type: 'return' | 'throw'; value: any }> = [];\n  const instances: any[] = [];\n  const contexts: any[] = [];\n  const invocationCallOrder: number[] = [];\n  \n  // Implementation state\n  let currentImplementation = implementation;\n  let returnValue: TReturn | undefined = undefined;\n  let hasReturnValue = false;\n  let oneTimeReturnValues: TReturn[] = [];\n  let oneTimeImplementations: Array<(...args: TArgs) => TReturn> = [];\n  let resolvedValue: any = undefined;\n  let hasResolvedValue = false;\n  let oneTimeResolvedValues: any[] = [];\n  let rejectedValue: any = undefined;\n  let hasRejectedValue = false;\n  let oneTimeRejectedValues: any[] = [];\n  \n  // The actual mock function\n  function mockFunction(this: any, ...args: TArgs): TReturn {\n    // Record the call\n    calls.push(args);\n    contexts.push(this);\n    instances.push(this);\n    invocationCallOrder.push(++globalCallOrder);\n    \n    let result: any;\n    let resultType: 'return' | 'throw' = 'return';\n    \n    try {\n      // Determine what to execute\n      let fnToExecute: ((...args: TArgs) => TReturn) | undefined;\n      \n      // Check for one-time implementations first\n      if (oneTimeImplementations.length > 0) {\n        fnToExecute = oneTimeImplementations.shift();\n      } else if (currentImplementation) {\n        fnToExecute = currentImplementation;\n      }\n      \n      // Execute implementation if available\n      if (fnToExecute) {\n        result = fnToExecute.apply(this, args);\n      } else {\n        // Handle return values and promises\n        if (oneTimeReturnValues.length > 0) {\n          result = oneTimeReturnValues.shift();\n        } else if (hasReturnValue) {\n          result = returnValue;\n        } else if (oneTimeResolvedValues.length > 0) {\n          result = Promise.resolve(oneTimeResolvedValues.shift());\n        } else if (hasResolvedValue) {\n          result = Promise.resolve(resolvedValue);\n        } else if (oneTimeRejectedValues.length > 0) {\n          result = Promise.reject(oneTimeRejectedValues.shift());\n        } else if (hasRejectedValue) {\n          result = Promise.reject(rejectedValue);\n        } else {\n          result = undefined;\n        }\n      }\n      \n      // Handle rejected promises by converting to thrown errors for consistent tracking\n      if (result && typeof result.then === 'function') {\n        result.catch((error: any) => {\n          // Update the result type for promise rejections\n          const lastResultIndex = results.length - 1;\n          if (lastResultIndex >= 0) {\n            results[lastResultIndex] = { type: 'throw', value: error };\n          }\n        });\n      }\n      \n    } catch (error) {\n      result = error;\n      resultType = 'throw';\n      // Re-throw the error after recording it\n      results.push({ type: resultType, value: result });\n      throw error;\n    }\n    \n    // Record the result\n    results.push({ type: resultType, value: result });\n    return result;\n  }\n  \n  // Add mock control methods to the function\n  const mockAPI: Mock<TArgs, TReturn> = {\n    calls,\n    results,\n    instances,\n    contexts,\n    invocationCallOrder,\n    \n    mockReturnValue(value: TReturn) {\n      returnValue = value;\n      hasReturnValue = true;\n      return this;\n    },\n    \n    mockReturnValueOnce(value: TReturn) {\n      oneTimeReturnValues.push(value);\n      return this;\n    },\n    \n    mockResolvedValue(value: any) {\n      resolvedValue = value;\n      hasResolvedValue = true;\n      return this;\n    },\n    \n    mockResolvedValueOnce(value: any) {\n      oneTimeResolvedValues.push(value);\n      return this;\n    },\n    \n    mockRejectedValue(value: any) {\n      rejectedValue = value;\n      hasRejectedValue = true;\n      return this;\n    },\n    \n    mockRejectedValueOnce(value: any) {\n      oneTimeRejectedValues.push(value);\n      return this;\n    },\n    \n    mockImplementation(fn: (...args: TArgs) => TReturn) {\n      currentImplementation = fn;\n      return this;\n    },\n    \n    mockImplementationOnce(fn: (...args: TArgs) => TReturn) {\n      oneTimeImplementations.push(fn);\n      return this;\n    },\n    \n    toHaveBeenCalled() {\n      return calls.length > 0;\n    },\n    \n    toHaveBeenCalledWith(...args: TArgs) {\n      return calls.some(call => \n        call.length === args.length && \n        call.every((arg, index) => arg === args[index])\n      );\n    },\n    \n    toHaveBeenCalledTimes(times: number) {\n      return calls.length === times;\n    },\n    \n    toHaveBeenLastCalledWith(...args: TArgs) {\n      if (calls.length === 0) return false;\n      const lastCall = calls[calls.length - 1];\n      return lastCall.length === args.length && \n             lastCall.every((arg, index) => arg === args[index]);\n    },\n    \n    toHaveBeenNthCalledWith(call: number, ...args: TArgs) {\n      const targetCall = calls[call - 1]; // 1-based indexing\n      if (!targetCall) return false;\n      return targetCall.length === args.length && \n             targetCall.every((arg, index) => arg === args[index]);\n    },\n    \n    toHaveReturnedWith(value: TReturn) {\n      return results.some(result => \n        result.type === 'return' && result.value === value\n      );\n    },\n    \n    toHaveLastReturnedWith(value: TReturn) {\n      if (results.length === 0) return false;\n      const lastResult = results[results.length - 1];\n      return lastResult.type === 'return' && lastResult.value === value;\n    },\n    \n    toHaveNthReturnedWith(call: number, value: TReturn) {\n      const targetResult = results[call - 1]; // 1-based indexing\n      if (!targetResult) return false;\n      return targetResult.type === 'return' && targetResult.value === value;\n    },\n    \n    mockClear() {\n      calls.length = 0;\n      results.length = 0;\n      instances.length = 0;\n      contexts.length = 0;\n      invocationCallOrder.length = 0;\n      return this;\n    },\n    \n    mockReset() {\n      this.mockClear();\n      currentImplementation = undefined;\n      returnValue = undefined;\n      hasReturnValue = false;\n      oneTimeReturnValues.length = 0;\n      oneTimeImplementations.length = 0;\n      resolvedValue = undefined;\n      hasResolvedValue = false;\n      oneTimeResolvedValues.length = 0;\n      rejectedValue = undefined;\n      hasRejectedValue = false;\n      oneTimeRejectedValues.length = 0;\n      return this;\n    }\n  };\n  \n  // Merge the function with the mock API\n  return Object.assign(mockFunction, mockAPI) as Mock<TArgs, TReturn> & ((...args: TArgs) => TReturn);\n}\n\n/**\n * Reset the global call order counter\n * Useful for test isolation\n */\nexport function resetGlobalCallOrder(): void {\n  globalCallOrder = 0;\n}"],"version":3}