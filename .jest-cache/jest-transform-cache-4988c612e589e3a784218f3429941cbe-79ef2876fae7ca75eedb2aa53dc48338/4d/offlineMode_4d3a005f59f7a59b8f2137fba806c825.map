{"file":"/home/runner/workspace/utils/offlineMode.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/offlineMode.ts"],"sourcesContent":["/**\n * Offline Mode Utility - TypeScript Implementation\n */\n\n// Type definitions\ninterface EnvironmentState {\n  codexFlag: boolean;\n  offlineFlagExplicit: boolean;\n  testEnvironment: boolean;\n  isOffline: boolean;\n  environmentDetected: boolean;\n}\n\ninterface EnvironmentAdapters {\n  isOffline: boolean;\n  axios: any;\n  qerrors: any;\n}\n\n// Simple offline state management\nlet isOfflineFlag = false;\nlet cachedAxios: any = null;\nlet cachedQerrors: any = null;\n\n/**\n * Set offline mode\n */\nfunction setOfflineMode(offline: boolean): void {\n  const changed = isOfflineFlag !== offline;\n  isOfflineFlag = offline;\n  \n  // Clear cache when mode changes\n  if (changed) {\n    clearOfflineCache();\n  }\n}\n\n/**\n * Check if offline mode is enabled\n */\nfunction isOfflineMode(): boolean {\n  return isOfflineFlag;\n}\n\n/**\n * Get axios (stub or real)\n */\nasync function getAxios(): Promise<any> {\n  if (!cachedAxios) {\n    if (isOfflineFlag) {\n      // Use stub axios\n      const stubAxios = await import('../stubs/axios.js');\n      cachedAxios = stubAxios.default || stubAxios;\n    } else {\n      // Try real axios, fallback to stub\n      try {\n        const axios = await import('axios');\n        cachedAxios = axios.default || axios;\n      } catch (e) {\n        const stubAxios = await import('../stubs/axios.js');\n        cachedAxios = stubAxios.default || stubAxios;\n      }\n    }\n  }\n  return cachedAxios;\n}\n\n/**\n * Get qerrors (stub or real)\n */\nasync function getQerrors(): Promise<any> {\n  if (!cachedQerrors) {\n    if (isOfflineFlag) {\n      // Use stub qerrors\n      cachedQerrors = { qerrors: () => {} };\n    } else {\n      // Try real qerrors, fallback to stub\n      try {\n        // Note: This would need to be converted to dynamic import for ES modules\n        // For now, using the stub version as qerrors may not be available\n        cachedQerrors = { qerrors: () => {} };\n      } catch (e) {\n        cachedQerrors = { qerrors: () => {} };\n      }\n    }\n  }\n  return cachedQerrors;\n}\n\n/**\n * Get environment state\n */\nfunction getEnvironmentState(): EnvironmentState {\n  const codexFlag = process.env.CODEX?.toLowerCase() === 'true';\n  const offlineFlagExplicit = process.env.OFFLINE_MODE?.toLowerCase() === 'true';\n  const testEnvironment = process.env.NODE_ENV === 'test';\n  \n  return {\n    codexFlag,\n    offlineFlagExplicit,\n    testEnvironment,\n    isOffline: isOfflineFlag,\n    environmentDetected: codexFlag || offlineFlagExplicit\n  };\n}\n\n/**\n * Create environment adapters\n */\nasync function createEnvironmentAdapters(): Promise<EnvironmentAdapters> {\n  return {\n    isOffline: isOfflineFlag,\n    axios: await getAxios(),\n    qerrors: await getQerrors()\n  };\n}\n\n/**\n * Clear offline cache\n */\nfunction clearOfflineCache(): void {\n  cachedAxios = null;\n  cachedQerrors = null;\n}\n\n// Export offline mode utilities using ES module syntax\nexport {\n  setOfflineMode,\n  isOfflineMode,\n  getAxios,\n  getQerrors,\n  getEnvironmentState,\n  createEnvironmentAdapters,\n  clearOfflineCache\n};"],"version":3}