{"file":"/home/runner/workspace/lib/envUtils.ts","mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH,iEAAiE;AACjE,OAAO,EACL,UAAU,EACV,UAAU,EACV,OAAO,EACP,UAAU,EACV,eAAe,EACf,cAAc,EACd,kBAAkB,EAClB,iBAAiB,EACjB,eAAe,EACf,UAAU,EACV,cAAc,EACf,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EACL,cAAc,EACd,aAAa,EACb,QAAQ,EACR,UAAU,EACV,mBAAmB,EACnB,yBAAyB,EACzB,iBAAiB,EAClB,MAAM,yBAAyB,CAAC;AACjC,OAAO,EACL,MAAM,EACN,gBAAgB,EAChB,WAAW,EACX,eAAe,EACf,aAAa,EACb,SAAS,EACT,aAAa,EACb,cAAc,EACd,YAAY,EACZ,WAAW,EACZ,MAAM,yBAAyB,CAAC;AAEjC,kDAAkD;AAClD,MAAM,OAAO,GAAG;IACd,UAAU;IACV,UAAU;IACV,OAAO;IACP,UAAU;IACV,eAAe;IACf,cAAc;IACd,kBAAkB;IAClB,iBAAiB;IACjB,eAAe;IACf,UAAU;IACV,cAAc;CACf,CAAC;AAEF,sDAAsD;AACtD,MAAM,WAAW,GAAG;IAClB,cAAc;IACd,aAAa;IACb,QAAQ;IACR,UAAU;IACV,mBAAmB;IACnB,yBAAyB;IACzB,iBAAiB;CAClB,CAAC;AAEF,sDAAsD;AACtD,MAAM,WAAW,GAAG;IAClB,MAAM;IACN,gBAAgB;IAChB,WAAW;IACX,eAAe;IACf,aAAa;IACb,SAAS;IACT,aAAa;IACb,cAAc;IACd,YAAY;IACZ,WAAW;CACZ,CAAC;AAEF,4DAA4D;AAC5D,OAAO,EACL,OAAO,EAAM,qDAAqD;AAClE,WAAW,EAAE,uDAAuD;AACpE,WAAW,CAAE,8DAA8D;EAC5E,CAAC","names":[],"sources":["/home/runner/workspace/lib/envUtils.ts"],"sourcesContent":["/**\n * Environment Management Utilities - TypeScript ES Module Implementation\n * \n * This module provides utilities specifically for managing test environments,\n * including environment variable manipulation and test isolation. These utilities\n * help create isolated, predictable test environments without side effects.\n * \n * Design philosophy:\n * - Environment isolation to prevent test interference\n * - Predictable test conditions with known values\n * - Easy setup and teardown of test environments\n * - Simple, focused functionality for environment management\n */\n\n// Import environment management utilities using ES module syntax\nimport {\n  defaultEnv,\n  setTestEnv,\n  saveEnv,\n  restoreEnv,\n  attachMockSpies,\n  makeLoggedMock,\n  createScheduleMock,\n  createQerrorsMock,\n  createAxiosMock,\n  resetMocks,\n  initSearchTest\n} from '../utils/testEnv.js';\nimport { \n  setOfflineMode,\n  isOfflineMode,\n  getAxios,\n  getQerrors,\n  getEnvironmentState,\n  createEnvironmentAdapters,\n  clearOfflineCache\n} from '../utils/offlineMode.js';\nimport {\n  reload,\n  moduleReloadLock,\n  stubQerrors,\n  withMockConsole,\n  createJsonRes,\n  createRes,\n  backupEnvVars,\n  restoreEnvVars,\n  withSavedEnv,\n  generateKey\n} from '../utils/testHelpers.js';\n\n// Create testEnv object from individual functions\nconst testEnv = {\n  defaultEnv,\n  setTestEnv,\n  saveEnv,\n  restoreEnv,\n  attachMockSpies,\n  makeLoggedMock,\n  createScheduleMock,\n  createQerrorsMock,\n  createAxiosMock,\n  resetMocks,\n  initSearchTest\n};\n\n// Create offlineMode object from individual functions\nconst offlineMode = {\n  setOfflineMode,\n  isOfflineMode,\n  getAxios,\n  getQerrors,\n  getEnvironmentState,\n  createEnvironmentAdapters,\n  clearOfflineCache\n};\n\n// Create testHelpers object from individual functions\nconst testHelpers = {\n  reload,\n  moduleReloadLock,\n  stubQerrors,\n  withMockConsole,\n  createJsonRes,\n  createRes,\n  backupEnvVars,\n  restoreEnvVars,\n  withSavedEnv,\n  generateKey\n};\n\n// Export the core utilities that our TypeScript index needs\nexport {\n  testEnv,     // environment variable management and test isolation\n  offlineMode, // offline/online mode utility with automatic switching\n  testHelpers  // advanced testing utilities for module reloading and mocking\n};"],"version":3}