07cd6f5bd16cde15fa6d8dea0050f7b9
/**
 * Core Testing Utilities
 *
 * This module provides the fundamental testing utilities that form the backbone
 * of the qtests framework. These utilities are used across different testing
 * scenarios and provide basic functionality for method stubbing and console mocking.
 *
 * Design philosophy:
 * - Simple, focused utilities that do one thing well
 * - Minimal dependencies to avoid circular imports
 * - Framework-agnostic implementations
 * - Consistent API patterns across utilities
 *
 * Architecture rationale:
 * This module serves as the foundation layer because:
 * 1. These utilities have no dependencies on other qtests modules
 * 2. They provide primitive operations that other modules build upon
 * 3. Keeping them separate prevents circular dependency issues
 * 4. They can be used independently without importing the full qtests suite
 */
// Import the core stubMethod utility from utils directory
// Placed in utils/ rather than lib/ because it's a pure utility function
// with zero dependencies on qtests-specific architecture or other modules
// This separation enables independent use and prevents circular dependencies
import stubMethod from '../utils/stubMethod.js';
// Import mockConsole from its dedicated utility module using destructuring
// Destructuring extracts only mockConsole from module exports for clean imports
// This pattern allows the mockConsole module to export additional utilities in future
// while maintaining backward compatibility and explicit import declarations
import { mockConsole } from '../utils/mockConsole.js';
/**
 * Export core testing utilities
 *
 * These are the most commonly used utilities in the qtests framework.
 * They are exported at the top level because:
 * 1. stubMethod and mockConsole are used in 80% of testing scenarios
 * 2. They have simple, predictable APIs that don't require namespacing
 * 3. They form the foundation that other utilities build upon
 * 4. Frequent usage justifies top-level access for developer convenience
 *
 * Export strategy:
 * - Direct object export rather than individual exports for consistency
 * - Descriptive property names that clearly indicate purpose
 * - Comments explain the primary use case for each utility
 */
// Export core testing utilities using ES module syntax
// Named exports pattern chosen for ES module compatibility:
// 1. Provides clear namespace organization for related utilities
// 2. Enables easier destructuring imports in consuming code
// 3. Maintains consistent export pattern across all qtests modules
// 4. Allows for future expansion without breaking existing imports
export { stubMethod, // Method replacement utility for isolating dependencies during testing
mockConsole // Console output capture utility for testing logging behavior without pollution
 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvY29yZVV0aWxzLnRzIiwibWFwcGluZ3MiOiJBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBRUgsMERBQTBEO0FBQzFELHlFQUF5RTtBQUN6RSwwRUFBMEU7QUFDMUUsNkVBQTZFO0FBQzdFLE9BQU8sVUFBVSxNQUFNLHdCQUF3QixDQUFDO0FBRWhELDJFQUEyRTtBQUMzRSxnRkFBZ0Y7QUFDaEYsc0ZBQXNGO0FBQ3RGLDRFQUE0RTtBQUM1RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFdEQ7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFDSCx1REFBdUQ7QUFDdkQsNERBQTREO0FBQzVELGlFQUFpRTtBQUNqRSw0REFBNEQ7QUFDNUQsbUVBQW1FO0FBQ25FLG1FQUFtRTtBQUNuRSxPQUFPLEVBQ0wsVUFBVSxFQUFJLHVFQUF1RTtBQUNyRixXQUFXLENBQUcsZ0ZBQWdGO0VBQy9GLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvY29yZVV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBDb3JlIFRlc3RpbmcgVXRpbGl0aWVzXG4gKiBcbiAqIFRoaXMgbW9kdWxlIHByb3ZpZGVzIHRoZSBmdW5kYW1lbnRhbCB0ZXN0aW5nIHV0aWxpdGllcyB0aGF0IGZvcm0gdGhlIGJhY2tib25lXG4gKiBvZiB0aGUgcXRlc3RzIGZyYW1ld29yay4gVGhlc2UgdXRpbGl0aWVzIGFyZSB1c2VkIGFjcm9zcyBkaWZmZXJlbnQgdGVzdGluZ1xuICogc2NlbmFyaW9zIGFuZCBwcm92aWRlIGJhc2ljIGZ1bmN0aW9uYWxpdHkgZm9yIG1ldGhvZCBzdHViYmluZyBhbmQgY29uc29sZSBtb2NraW5nLlxuICogXG4gKiBEZXNpZ24gcGhpbG9zb3BoeTpcbiAqIC0gU2ltcGxlLCBmb2N1c2VkIHV0aWxpdGllcyB0aGF0IGRvIG9uZSB0aGluZyB3ZWxsXG4gKiAtIE1pbmltYWwgZGVwZW5kZW5jaWVzIHRvIGF2b2lkIGNpcmN1bGFyIGltcG9ydHNcbiAqIC0gRnJhbWV3b3JrLWFnbm9zdGljIGltcGxlbWVudGF0aW9uc1xuICogLSBDb25zaXN0ZW50IEFQSSBwYXR0ZXJucyBhY3Jvc3MgdXRpbGl0aWVzXG4gKiBcbiAqIEFyY2hpdGVjdHVyZSByYXRpb25hbGU6XG4gKiBUaGlzIG1vZHVsZSBzZXJ2ZXMgYXMgdGhlIGZvdW5kYXRpb24gbGF5ZXIgYmVjYXVzZTpcbiAqIDEuIFRoZXNlIHV0aWxpdGllcyBoYXZlIG5vIGRlcGVuZGVuY2llcyBvbiBvdGhlciBxdGVzdHMgbW9kdWxlc1xuICogMi4gVGhleSBwcm92aWRlIHByaW1pdGl2ZSBvcGVyYXRpb25zIHRoYXQgb3RoZXIgbW9kdWxlcyBidWlsZCB1cG9uXG4gKiAzLiBLZWVwaW5nIHRoZW0gc2VwYXJhdGUgcHJldmVudHMgY2lyY3VsYXIgZGVwZW5kZW5jeSBpc3N1ZXNcbiAqIDQuIFRoZXkgY2FuIGJlIHVzZWQgaW5kZXBlbmRlbnRseSB3aXRob3V0IGltcG9ydGluZyB0aGUgZnVsbCBxdGVzdHMgc3VpdGVcbiAqL1xuXG4vLyBJbXBvcnQgdGhlIGNvcmUgc3R1Yk1ldGhvZCB1dGlsaXR5IGZyb20gdXRpbHMgZGlyZWN0b3J5XG4vLyBQbGFjZWQgaW4gdXRpbHMvIHJhdGhlciB0aGFuIGxpYi8gYmVjYXVzZSBpdCdzIGEgcHVyZSB1dGlsaXR5IGZ1bmN0aW9uXG4vLyB3aXRoIHplcm8gZGVwZW5kZW5jaWVzIG9uIHF0ZXN0cy1zcGVjaWZpYyBhcmNoaXRlY3R1cmUgb3Igb3RoZXIgbW9kdWxlc1xuLy8gVGhpcyBzZXBhcmF0aW9uIGVuYWJsZXMgaW5kZXBlbmRlbnQgdXNlIGFuZCBwcmV2ZW50cyBjaXJjdWxhciBkZXBlbmRlbmNpZXNcbmltcG9ydCBzdHViTWV0aG9kIGZyb20gJy4uL3V0aWxzL3N0dWJNZXRob2QuanMnO1xuXG4vLyBJbXBvcnQgbW9ja0NvbnNvbGUgZnJvbSBpdHMgZGVkaWNhdGVkIHV0aWxpdHkgbW9kdWxlIHVzaW5nIGRlc3RydWN0dXJpbmdcbi8vIERlc3RydWN0dXJpbmcgZXh0cmFjdHMgb25seSBtb2NrQ29uc29sZSBmcm9tIG1vZHVsZSBleHBvcnRzIGZvciBjbGVhbiBpbXBvcnRzXG4vLyBUaGlzIHBhdHRlcm4gYWxsb3dzIHRoZSBtb2NrQ29uc29sZSBtb2R1bGUgdG8gZXhwb3J0IGFkZGl0aW9uYWwgdXRpbGl0aWVzIGluIGZ1dHVyZVxuLy8gd2hpbGUgbWFpbnRhaW5pbmcgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhbmQgZXhwbGljaXQgaW1wb3J0IGRlY2xhcmF0aW9uc1xuaW1wb3J0IHsgbW9ja0NvbnNvbGUgfSBmcm9tICcuLi91dGlscy9tb2NrQ29uc29sZS5qcyc7XG5cbi8qKlxuICogRXhwb3J0IGNvcmUgdGVzdGluZyB1dGlsaXRpZXNcbiAqIFxuICogVGhlc2UgYXJlIHRoZSBtb3N0IGNvbW1vbmx5IHVzZWQgdXRpbGl0aWVzIGluIHRoZSBxdGVzdHMgZnJhbWV3b3JrLlxuICogVGhleSBhcmUgZXhwb3J0ZWQgYXQgdGhlIHRvcCBsZXZlbCBiZWNhdXNlOlxuICogMS4gc3R1Yk1ldGhvZCBhbmQgbW9ja0NvbnNvbGUgYXJlIHVzZWQgaW4gODAlIG9mIHRlc3Rpbmcgc2NlbmFyaW9zXG4gKiAyLiBUaGV5IGhhdmUgc2ltcGxlLCBwcmVkaWN0YWJsZSBBUElzIHRoYXQgZG9uJ3QgcmVxdWlyZSBuYW1lc3BhY2luZ1xuICogMy4gVGhleSBmb3JtIHRoZSBmb3VuZGF0aW9uIHRoYXQgb3RoZXIgdXRpbGl0aWVzIGJ1aWxkIHVwb25cbiAqIDQuIEZyZXF1ZW50IHVzYWdlIGp1c3RpZmllcyB0b3AtbGV2ZWwgYWNjZXNzIGZvciBkZXZlbG9wZXIgY29udmVuaWVuY2VcbiAqIFxuICogRXhwb3J0IHN0cmF0ZWd5OlxuICogLSBEaXJlY3Qgb2JqZWN0IGV4cG9ydCByYXRoZXIgdGhhbiBpbmRpdmlkdWFsIGV4cG9ydHMgZm9yIGNvbnNpc3RlbmN5XG4gKiAtIERlc2NyaXB0aXZlIHByb3BlcnR5IG5hbWVzIHRoYXQgY2xlYXJseSBpbmRpY2F0ZSBwdXJwb3NlXG4gKiAtIENvbW1lbnRzIGV4cGxhaW4gdGhlIHByaW1hcnkgdXNlIGNhc2UgZm9yIGVhY2ggdXRpbGl0eVxuICovXG4vLyBFeHBvcnQgY29yZSB0ZXN0aW5nIHV0aWxpdGllcyB1c2luZyBFUyBtb2R1bGUgc3ludGF4XG4vLyBOYW1lZCBleHBvcnRzIHBhdHRlcm4gY2hvc2VuIGZvciBFUyBtb2R1bGUgY29tcGF0aWJpbGl0eTpcbi8vIDEuIFByb3ZpZGVzIGNsZWFyIG5hbWVzcGFjZSBvcmdhbml6YXRpb24gZm9yIHJlbGF0ZWQgdXRpbGl0aWVzXG4vLyAyLiBFbmFibGVzIGVhc2llciBkZXN0cnVjdHVyaW5nIGltcG9ydHMgaW4gY29uc3VtaW5nIGNvZGVcbi8vIDMuIE1haW50YWlucyBjb25zaXN0ZW50IGV4cG9ydCBwYXR0ZXJuIGFjcm9zcyBhbGwgcXRlc3RzIG1vZHVsZXNcbi8vIDQuIEFsbG93cyBmb3IgZnV0dXJlIGV4cGFuc2lvbiB3aXRob3V0IGJyZWFraW5nIGV4aXN0aW5nIGltcG9ydHNcbmV4cG9ydCB7XG4gIHN0dWJNZXRob2QsICAgLy8gTWV0aG9kIHJlcGxhY2VtZW50IHV0aWxpdHkgZm9yIGlzb2xhdGluZyBkZXBlbmRlbmNpZXMgZHVyaW5nIHRlc3RpbmdcbiAgbW9ja0NvbnNvbGUgICAvLyBDb25zb2xlIG91dHB1dCBjYXB0dXJlIHV0aWxpdHkgZm9yIHRlc3RpbmcgbG9nZ2luZyBiZWhhdmlvciB3aXRob3V0IHBvbGx1dGlvblxufTtcbiJdLCJ2ZXJzaW9uIjozfQ==