{"file":"/home/runner/workspace/utils/testing/testDataFactory.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/testing/testDataFactory.ts"],"sourcesContent":["/**\n * Test Data Factory for Creating Realistic Test Entities - TypeScript Implementation\n * \n * This class focuses solely on test data creation and management.\n * It eliminates duplicate test data creation across test files.\n */\n\nimport { logStart, logReturn } from '../../lib/logUtils.js';\n\n// Type definitions\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n  [key: string]: any;\n}\n\ninterface ApiKey {\n  id: string;\n  key: string;\n  name: string;\n  userId: string;\n  isActive: boolean;\n  permissions: string[];\n  createdAt: Date;\n  expiresAt: Date;\n  [key: string]: any;\n}\n\ninterface LogEntry {\n  id: string;\n  level: string;\n  message: string;\n  timestamp: Date;\n  userId?: string;\n  source: string;\n  [key: string]: any;\n}\n\n/**\n * Test Data Factory for Creating Realistic Test Entities\n * \n * This class eliminates duplicate test data creation across test files\n * by providing standardized factory methods for common test entities.\n * \n * PARALLEL TEST SAFETY:\n * - Uses process.hrtime.bigint() for unique IDs to avoid race conditions\n * - No shared static state between parallel test executions\n * - Each test gets unique data that won't conflict with other tests\n */\nclass TestDataFactory {\n  private static counter = 0;\n\n  /**\n   * Gets next unique ID for test data (parallel-safe when needed)\n   */\n  static nextId(): string | number {\n    // Only use complex IDs in very specific parallel execution scenarios\n    const isJestParallel = process.env.JEST_WORKER_ID && process.env.JEST_WORKER_ID !== '1';\n    const isExplicitParallel = process.env.QTESTS_PARALLEL_MODE === 'true';\n    \n    if (!isJestParallel && !isExplicitParallel) {\n      // Normal testing - use simple counter for expected format\n      return ++this.counter;\n    }\n    \n    // Parallel testing - use complex unique identifier\n    const hrTime = process.hrtime.bigint();\n    const random = Math.random().toString(36).substr(2, 9);\n    return `${hrTime}-${random}`;\n  }\n\n  /**\n   * Creates a test user with realistic properties\n   */\n  static createUser(overrides: Partial<User> = {}): User {\n    logStart('TestDataFactory.createUser', overrides);\n    \n    const id = this.nextId();\n    const user: User = {\n      id: `user-${id}`,\n      username: `testuser${id}`,\n      email: `test${id}@example.com`,\n      password: `hashedpassword${id}`,\n      firstName: 'Test',\n      lastName: `User${id}`,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createUser', user);\n    return user;\n  }\n\n  /**\n   * Creates a test API key with realistic properties\n   */\n  static createApiKey(overrides: Partial<ApiKey> = {}): ApiKey {\n    logStart('TestDataFactory.createApiKey', overrides);\n    \n    const id = this.nextId();\n    const apiKey: ApiKey = {\n      id: `key-${id}`,\n      key: `test-api-key-${id}-${Math.random().toString(36).substr(2, 9)}`,\n      name: `Test API Key ${id}`,\n      userId: `user-${id}`,\n      isActive: true,\n      permissions: ['read', 'write'],\n      createdAt: new Date(),\n      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createApiKey', apiKey);\n    return apiKey;\n  }\n\n  /**\n   * Creates a test log entry with realistic properties\n   */\n  static createLogEntry(overrides: Partial<LogEntry> = {}): LogEntry {\n    logStart('TestDataFactory.createLogEntry', overrides);\n    \n    const id = this.nextId();\n    const logEntry: LogEntry = {\n      id: `log-${id}`,\n      level: 'info',\n      message: `Test log message ${id}`,\n      timestamp: new Date(),\n      userId: `user-${id}`,\n      source: 'test-system',\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createLogEntry', logEntry);\n    return logEntry;\n  }\n\n  /**\n   * Creates multiple test users in batch\n   */\n  static createUsers(count: number, baseOverrides: Partial<User> = {}): User[] {\n    logStart('TestDataFactory.createUsers', count, baseOverrides);\n    \n    const users: User[] = [];\n    for (let i = 0; i < count; i++) {\n      const overrides = { ...baseOverrides };\n      if (overrides.username) {\n        overrides.username = `${overrides.username}${i + 1}`;\n      }\n      if (overrides.email) {\n        overrides.email = `test${i + 1}@example.com`;\n      }\n      users.push(this.createUser(overrides));\n    }\n    \n    logReturn('TestDataFactory.createUsers', users);\n    return users;\n  }\n\n  /**\n   * Creates a complete test dataset with related entities\n   */\n  static createTestDataset(): { users: User[]; apiKeys: ApiKey[]; logs: LogEntry[] } {\n    logStart('TestDataFactory.createTestDataset');\n    \n    // Create 3 test users\n    const users = this.createUsers(3);\n    \n    // Create API keys for each user\n    const apiKeys = users.map(user => this.createApiKey({ userId: user.id }));\n    \n    // Create log entries for each user\n    const logs = users.flatMap(user => [\n      this.createLogEntry({ userId: user.id, level: 'info', message: `User ${user.username} logged in` }),\n      this.createLogEntry({ userId: user.id, level: 'debug', message: `User ${user.username} performed action` })\n    ]);\n    \n    const dataset = { users, apiKeys, logs };\n    logReturn('TestDataFactory.createTestDataset', dataset);\n    return dataset;\n  }\n\n  /**\n   * Creates test HTTP request data\n   */\n  static createHttpRequest(overrides: any = {}): any {\n    logStart('TestDataFactory.createHttpRequest', overrides);\n    \n    const id = this.nextId();\n    const request = {\n      method: 'GET',\n      url: `/api/test/${id}`,\n      headers: {\n        'Content-Type': 'application/json',\n        'User-Agent': 'qtests-test-agent'\n      },\n      body: null,\n      timestamp: new Date(),\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createHttpRequest', request);\n    return request;\n  }\n\n  /**\n   * Creates test HTTP response data\n   */\n  static createHttpResponse(overrides: any = {}): any {\n    logStart('TestDataFactory.createHttpResponse', overrides);\n    \n    const response = {\n      status: 200,\n      statusText: 'OK',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Test-Response': 'true'\n      },\n      data: { success: true, message: 'Test response' },\n      timestamp: new Date(),\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createHttpResponse', response);\n    return response;\n  }\n\n  /**\n   * Resets the counter for predictable test IDs\n   */\n  static resetCounter(): void {\n    this.counter = 0;\n  }\n}\n\n// Export TestDataFactory using ES module syntax\nexport { TestDataFactory };"],"version":3}