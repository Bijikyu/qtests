{"file":"/home/runner/workspace/utils/sendEmail.ts","mappings":";AAAA;;GAEG;;AAsFD,8BAAS;AACT,0CAAe;AACf,8CAAiB;AACjB,sCAAa;AAvFf,oDAAqD;AAoBrD,+BAA+B;AAC/B,IAAI,YAAY,GAAmC,EAAE,CAAC;AAEtD;;GAEG;AACH,SAAS,SAAS,CAAC,SAAoB;IACrC,OAAO,IAAA,6BAAe,EAAC,WAAW,EAAE,KAAK,IAAI,EAAE;QAC7C,iCAAiC;QACjC,IAAI,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC/C,CAAC;QAED,qBAAqB;QACrB,MAAM,MAAM,GAAgB;YAC1B,OAAO,EAAE,IAAI;YACb,SAAS,EAAE,QAAQ,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;YAC1E,EAAE,EAAE,SAAS,CAAC,EAAE;YAChB,OAAO,EAAE,SAAS,CAAC,OAAO,IAAI,EAAE;YAChC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;QAEF,mBAAmB;QACnB,YAAY,CAAC,IAAI,CAAC;YAChB,GAAG,SAAS;YACZ,GAAG,MAAM;SACV,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC,EAAE,SAAS,CAAC,CAAC;AAChB,CAAC;AAED;;GAEG;AACH,SAAS,eAAe;IACtB,OAAO,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC,cAAc;AAC1C,CAAC;AAED;;GAEG;AACH,SAAS,iBAAiB;IACxB,OAAO,IAAA,6BAAe,EAAC,mBAAmB,EAAE,GAAG,EAAE;QAC/C,MAAM,OAAO,GAAG,YAAY,CAAC,MAAM,CAAC;QACpC,YAAY,GAAG,EAAE,CAAC;QAClB,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC,CAAC;AACL,CAAC;AAED;;GAEG;AACH,SAAS,aAAa,CAAC,SAAoB;IACzC,OAAO,IAAA,6BAAe,EAAC,eAAe,EAAE,GAAG,EAAE;QAC3C,IAAI,CAAC,SAAS;YAAE,OAAO,KAAK,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,EAAE;YAAE,OAAO,KAAK,CAAC;QAChC,IAAI,OAAO,SAAS,CAAC,EAAE,KAAK,QAAQ;YAAE,OAAO,KAAK,CAAC;QACnD,OAAO,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC,EAAE,SAAS,CAAC,CAAC;AAChB,CAAC;AAUD,wCAAwC;AACxC,MAAM,cAAc,GAAG;IACrB,SAAS;IACT,eAAe;IACf,iBAAiB;IACjB,aAAa;IACb,YAAY,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,mCAAmC;CACrE,CAAC;AAEF,kBAAe,cAAc,CAAC","names":[],"sources":["/home/runner/workspace/utils/sendEmail.ts"],"sourcesContent":["/**\n * Email Mock Utility for Testing - TypeScript Implementation\n */\n\nimport { executeWithLogs } from '../lib/logUtils.js';\n\n// Email data interface\ninterface EmailData {\n  to: string;\n  subject?: string;\n  text?: string;\n  html?: string;\n  from?: string;\n  [key: string]: any;\n}\n\ninterface EmailResult {\n  success: boolean;\n  messageId: string;\n  to: string;\n  subject: string;\n  timestamp: string;\n}\n\n// Simple email history storage\nlet emailHistory: Array<EmailData & EmailResult> = [];\n\n/**\n * Mock email sending function\n */\nfunction sendEmail(emailData: EmailData): Promise<EmailResult> {\n  return executeWithLogs('sendEmail', async () => {\n    // Validate basic email structure\n    if (!emailData || !emailData.to) {\n      throw new Error('Email requires \"to\" field');\n    }\n    \n    // Create mock result\n    const result: EmailResult = {\n      success: true,\n      messageId: `mock-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      to: emailData.to,\n      subject: emailData.subject || '',\n      timestamp: new Date().toISOString()\n    };\n    \n    // Store in history\n    emailHistory.push({\n      ...emailData,\n      ...result\n    });\n    \n    return result;\n  }, emailData);\n}\n\n/**\n * Get email history\n */\nfunction getEmailHistory(): Array<EmailData & EmailResult> {\n  return [...emailHistory]; // Return copy\n}\n\n/**\n * Clear email history\n */\nfunction clearEmailHistory(): number {\n  return executeWithLogs('clearEmailHistory', () => {\n    const cleared = emailHistory.length;\n    emailHistory = [];\n    return cleared;\n  });\n}\n\n/**\n * Validate email data\n */\nfunction validateEmail(emailData: EmailData): boolean {\n  return executeWithLogs('validateEmail', () => {\n    if (!emailData) return false;\n    if (!emailData.to) return false;\n    if (typeof emailData.to !== 'string') return false;\n    return emailData.to.includes('@');\n  }, emailData);\n}\n\n// Export email utilities using ES module syntax\nexport {\n  sendEmail,\n  getEmailHistory,\n  clearEmailHistory,\n  validateEmail\n};\n\n// Default export for main functionality\nconst emailUtilities = {\n  sendEmail,\n  getEmailHistory,\n  clearEmailHistory,\n  validateEmail,\n  emailHistory: () => emailHistory // Function to access for debugging\n};\n\nexport default emailUtilities;"],"version":3}