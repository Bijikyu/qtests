{"file":"/home/runner/workspace/lib/testGenerator.GenerateTest.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/lib/testGenerator.GenerateTest.test.ts"],"sourcesContent":["// Generated unit test for testGenerator.ts - TypeScript ES module\n// ðŸš©AI: ENTRY_POINT_FOR_GENERATED_TEST_IMPORTS\nimport 'qtests/setup';\n\nimport * as testModule from './testGenerator.js';\nimport { TestGenerator } from './testGenerator.js';\nimport fs from 'fs';\nimport path from 'path';\n\n// External dependencies automatically stubbed by qtests/setup:\n// - fs: stubbed by qtests (no jest.mock needed)\n\ndescribe('TestGenerator', () => {\n  let tempDir: string;\n  let generator: TestGenerator;\n\n  beforeEach(() => {\n    // Create temporary directory for tests\n    tempDir = path.join(process.cwd(), 'test-temp');\n    if (!fs.existsSync(tempDir)) {\n      fs.mkdirSync(tempDir, { recursive: true });\n    }\n    \n    generator = new TestGenerator({\n      SRC_DIR: tempDir,\n      TEST_DIR: path.join(tempDir, 'generated-tests')\n    });\n  });\n\n  afterEach(() => {\n    // Clean up temporary files\n    if (fs.existsSync(tempDir)) {\n      fs.rmSync(tempDir, { recursive: true, force: true });\n    }\n  });\n\n  it('should create generator with default config', () => {\n    const gen = new TestGenerator();\n    expect(gen).toBeDefined();\n    expect(gen).toBeInstanceOf(TestGenerator);\n  });\n\n  it('should generate unit test with .GenerateTest.test.ts naming', () => {\n    // Create a test source file\n    const sourceFile = path.join(tempDir, 'example.ts');\n    fs.writeFileSync(sourceFile, 'export function testFunc() { return \"hello\"; }');\n    \n    // Analyze the file\n    generator.analyze(sourceFile);\n    \n    const results = generator.getResults();\n    expect(results).toHaveLength(1);\n    expect(results[0].type).toBe('unit');\n    expect(results[0].file).toMatch(/\\.GenerateTest\\.test\\.ts$/);\n\n    // Verify no placeholder assertions were generated\n    const generatedPath = path.join(tempDir, 'example.GenerateTest.test.ts');\n    const generatedContent = fs.readFileSync(generatedPath, 'utf8');\n    expect(generatedContent).not.toMatch(/expectedOutput|TODO:/);\n  });\n\n  it('should include qtests/setup import in generated tests', () => {\n    // Create a test source file\n    const sourceFile = path.join(tempDir, 'example.ts');\n    fs.writeFileSync(sourceFile, 'export function testFunc() { return \"hello\"; }');\n    \n    // Analyze the file\n    generator.analyze(sourceFile);\n    \n    // Check that the generated test includes qtests/setup\n    const testFile = path.join(tempDir, 'example.GenerateTest.test.ts');\n    expect(fs.existsSync(testFile)).toBe(true);\n    \n    const testContent = fs.readFileSync(testFile, 'utf8');\n    expect(testContent).toMatch(/import 'qtests\\/setup';/);\n  });\n\n  it('should handle dry-run mode without writing files', () => {\n    // Create a test source file\n    const sourceFile = path.join(tempDir, 'example.ts');\n    fs.writeFileSync(sourceFile, 'export function testFunc() { return \"hello\"; }');\n    \n    // Analyze in dry-run mode\n    generator.analyze(sourceFile, true);\n    \n    // Check that no test file was actually written\n    const testFile = path.join(tempDir, 'example.GenerateTest.test.ts');\n    expect(fs.existsSync(testFile)).toBe(false);\n    \n    // But results should still be tracked\n    const results = generator.getResults();\n    expect(results).toHaveLength(1);\n  });\n\n  it('should detect API routes and generate integration tests', () => {\n    // Create a file with API routes\n    const sourceFile = path.join(tempDir, 'routes.ts');\n    fs.writeFileSync(sourceFile, `\n      import express from 'express';\n      const router = express.Router();\n      router.get('/api/users', (req, res) => res.json([]));\n      export default router;\n    `);\n    \n    // Analyze the file\n    generator.analyze(sourceFile);\n    \n    const results = generator.getResults();\n    const apiTests = results.filter(r => r.type === 'api');\n    expect(apiTests).toHaveLength(1);\n    expect(apiTests[0].file).toMatch(/\\.GenerateTest__get\\.test\\.ts$/);\n\n    // Validate that the generated API test imports httpTest without extension\n    const apiTestPath = path.join(\n      tempDir,\n      'generated-tests',\n      path.relative(process.cwd(), sourceFile)\n        .replace(/\\.[tj]sx?$/, '.GenerateTest__get.test.ts')\n        .replace(/[\\\\/]/g, '__')\n    );\n    const apiTestContent = fs.readFileSync(apiTestPath, 'utf8');\n    expect(apiTestContent).toMatch(/from '\\.\\.\\/utils\\/httpTest';/);\n\n    // Ensure local httpTest utils were scaffolded\n    const utilsPath = path.join(tempDir, 'generated-tests', 'utils', 'httpTest.ts');\n    expect(fs.existsSync(utilsPath)).toBe(true);\n  });\n\n  it('should skip generating tests inside __mocks__ directory', async () => {\n    const srcFile = path.join(tempDir, 'real.ts');\n    const mockFile = path.join(tempDir, '__mocks__', 'mocked.ts');\n    fs.mkdirSync(path.dirname(mockFile), { recursive: true });\n    fs.writeFileSync(srcFile, 'export const real = 1;');\n    fs.writeFileSync(mockFile, 'export const fake = 2;');\n\n    await generator.generateTestFiles(true); // dry-run scan of tempDir\n\n    // Only the real file should be considered for generation in results\n    // After dry run, analyze explicitly to populate results for assertions\n    await generator.analyze(srcFile, true);\n    const results = generator.getResults();\n    // Ensure no tests were planned for the __mocks__ file\n    const anyMock = results.some(r => r.file.includes('__mocks__'));\n    expect(anyMock).toBe(false);\n  });\n});\n\ndescribe('testModule exports', () => {\n  it('should export TestGenerator class', () => {\n    expect(testModule.TestGenerator).toBeDefined();\n    expect(typeof testModule.TestGenerator).toBe('function');\n  });\n\n  it('should export default TestGenerator', () => {\n    expect(testModule.default).toBeDefined();\n    expect(testModule.default).toBe(testModule.TestGenerator);\n  });\n});\n"],"version":3}