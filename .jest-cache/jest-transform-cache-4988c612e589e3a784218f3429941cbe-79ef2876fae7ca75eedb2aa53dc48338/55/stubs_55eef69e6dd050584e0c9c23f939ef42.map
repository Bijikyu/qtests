{"file":"/home/runner/workspace/lib/stubs.ts","mappings":";AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;;;;;AAEH;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,6CAA6C;AAC7C,iEAAsC,CAAC,2BAA2B;AAClE,qEAA0C,CAAC,uBAAuB;AAElE,sDAAsD;AACtD,MAAM,KAAK,GAAG;IACZ,KAAK,EAAL,kBAAK,EAAE,2BAA2B;IAClC,OAAO,EADA,2BAA2B;IAClC,oBAAO,CAAC,uBAAuB;CAChC,CAAC;AAEF,kBAAe,KAAK,CAAC","names":[],"sources":["/home/runner/workspace/lib/stubs.ts"],"sourcesContent":["\n/**\n * Stub Library Registry\n * \n * This module provides a centralized registry of all available stubs\n * in the qtests framework. Stubs are organized under a namespace to\n * prevent naming conflicts and make it clear these are replacement modules.\n * \n * Design philosophy:\n * - Centralized registry for easy discovery\n * - Namespace organization to prevent conflicts\n * - Clear separation between real and stub modules\n * - Easy to extend with new stubs\n * \n * Why a centralized registry is important:\n * 1. Provides single source of truth for all available stubs\n * 2. Makes it easy for developers to discover what stubs are available\n * 3. Prevents naming conflicts with real modules in user code\n * 4. Enables consistent patterns for adding new stubs\n * 5. Groups related functionality for better organization\n * \n * Alternative approaches considered:\n * - Individual stub exports at top level: Rejected due to namespace pollution\n * - Automatic stub discovery: Rejected due to complexity and unpredictability\n * - Category-based organization: Current approach is simpler for small stub count\n * \n * Registry pattern benefits:\n * - Clear separation of concerns (registry vs individual stubs)\n * - Easy to understand what stubs are available\n * - Consistent access patterns for all stubs\n * - Simple to extend with new stub categories\n */\n\n/**\n * Export stub library registry\n * \n * All stubs are organized under the stubs namespace to:\n * 1. Group related mock implementations together\n * 2. Prevent naming conflicts with real modules in user code\n * 3. Make it clear these are replacement/mock implementations\n * 4. Provide consistent access patterns: stubs.axios, stubs.winston\n * \n * Namespace design rationale:\n * - Using property names that match the real module names for intuitive access\n * - Each property points to a complete stub module that can replace the real one\n * - Stub modules provide the same API surface as their real counterparts\n * - Registry acts as a discovery mechanism and access point\n * \n * Extension pattern:\n * To add new stubs, simply add them to this registry:\n * - Create the stub module in ../stubs/[module-name]\n * - Add the require statement and property to this exports object\n * - The stub becomes available as stubs.[module-name]\n */\n// Import stub modules using ES module syntax\nimport axios from '../stubs/axios.js'; // http client library stub\nimport winston from '../stubs/winston.js'; // logging library stub\n\n// Export stub library registry using ES module syntax\nconst stubs = {\n  axios, // http client library stub\n  winston // logging library stub\n};\n\nexport default stubs;\n"],"version":3}