{"file":"/home/runner/workspace/lib/testGenerator.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/lib/testGenerator.ts"],"sourcesContent":["/**\n * Test Generator for qtests Framework - TypeScript Implementation\n * \n * Automatically generates unit tests and API tests by scanning source code.\n * Analyzes JavaScript/TypeScript files to detect exports, imports, and API routes,\n * then creates appropriate test files with proper structure and mocking.\n * \n * Features:\n * - Unit test generation for exported functions/classes\n * - API test generation for Express routes\n * - Automatic mock setup for known libraries\n * - Jest configuration scaffolding\n * - Support for qtests framework integration\n * - TypeScript ES module only (no version duplication)\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { getModuleDirname } from '../utils/esm-globals.js';\n\n// ES Module __dirname equivalent\nconst moduleDirname = getModuleDirname(import.meta.url);\n\n// Type definitions\ninterface TestGeneratorConfig {\n  SRC_DIR: string;\n  TEST_DIR: string;\n  KNOWN_MOCKS: string[];\n  VALID_EXTS: string[];\n}\n\ninterface ScannedTest {\n  type: 'unit' | 'api';\n  file: string;\n}\n\ninterface FileCategorization {\n  sourceFiles: string[];\n  existingTests: string[];\n}\n\n// Configuration constants - TypeScript ES module only\nconst DEFAULT_CONFIG: TestGeneratorConfig = {\n  SRC_DIR: '.',\n  TEST_DIR: 'generated-tests',\n  KNOWN_MOCKS: ['axios', 'node-fetch', 'pg', 'mongoose', 'fs', 'redis'],\n  VALID_EXTS: ['.ts', '.js', '.tsx', '.jsx']\n};\n\n// Regex patterns for code analysis - Enhanced for both ES modules and CommonJS\nconst PATTERNS = {\n  qtests: /from ['\"]qtests['\"]|require\\(['\"]qtests['\"]\\)/,\n  api: /\\b(app|router)\\.(get|post|put|delete|patch)\\s*\\(\\s*['\"`]([^'\"`]+)['\"`]/gi,\n  // ES module exports: export const, export function, export class\n  exportsES: /^\\s*export\\s+(?:const|function|class)\\s+([a-zA-Z0-9_]+)/gm,\n  // ES module named exports: export { name1, name2, name3 }\n  exportsNamed: /export\\s*\\{\\s*([^}]+)\\s*\\}/g,\n  // ES module default exports: export default SomeName\n  exportsDefault: /export\\s+default\\s+([a-zA-Z0-9_]+)/g,\n  // CommonJS exports: module.exports = {}, module.exports.name =, exports.name =\n  exportsCommonJS: /(?:module\\.exports\\.([a-zA-Z0-9_]+)\\s*=|exports\\.([a-zA-Z0-9_]+)\\s*=|module\\.exports\\s*=\\s*([a-zA-Z0-9_]+))/gm,\n  // Function declarations that might be exported\n  functionDeclarations: /^\\s*(?:async\\s+)?function\\s+([a-zA-Z0-9_]+)\\s*\\(/gm,\n  // Class declarations that might be exported\n  classDeclarations: /^\\s*class\\s+([a-zA-Z0-9_]+)/gm,\n  imports: /from ['\"]([^'\"]+)['\"]|require\\(['\"]([^'\"]+)['\"]\\)/g\n};\n\nclass TestGenerator {\n  private config: TestGeneratorConfig;\n  private scanned: ScannedTest[];\n  private isESModule: boolean;\n\n  constructor(options: Partial<TestGeneratorConfig> = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...options };\n    this.scanned = [];\n    this.isESModule = this.detectESModule(); // Detect module type once during initialization\n  }\n\n  /**\n   * Detect if the current project uses ES modules or CommonJS\n   * Since we're now \"TypeScript ES module only\", this defaults to true for TypeScript projects\n   */\n  private detectESModule(): boolean {\n    try {\n      // Check package.json for explicit \"type\": \"module\"\n      const packagePath = path.resolve(process.cwd(), 'package.json');\n      if (fs.existsSync(packagePath)) {\n        const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));\n        if (packageJson.type === 'module') {\n          return true;\n        }\n        // For TypeScript ES module only approach, prefer ES modules when TypeScript is detected\n        if (packageJson.devDependencies?.typescript || packageJson.dependencies?.typescript) {\n          return true;\n        }\n      }\n      \n      // Check for ES module patterns in source files (excluding test files and node_modules)\n      const sourceFiles = this.walkProject()\n        .filter(file => {\n          const ext = path.extname(file);\n          const isValidExt = this.config.VALID_EXTS.includes(ext);\n          const isTestFile = this.isTestFile(path.basename(file));\n          const isNodeModules = file.includes('node_modules');\n          return isValidExt && !isTestFile && !isNodeModules;\n        })\n        .slice(0, 10); // Sample first 10 files for performance\n      \n      let esModuleCount = 0;\n      let commonJSCount = 0;\n      \n      for (const file of sourceFiles) {\n        try {\n          const content = fs.readFileSync(file, 'utf8');\n          // Look for ES module patterns (import OR export statements)\n          if (content.includes('import ') || content.includes('export ')) {\n            esModuleCount++;\n          }\n          // Look for CommonJS patterns\n          if (content.includes('require(') || content.includes('module.exports')) {\n            commonJSCount++;\n          }\n        } catch (error) {\n          // Skip files we can't read\n          continue;\n        }\n      }\n      \n      // For TypeScript ES module only approach, prefer ES modules when equal or when TypeScript files are present\n      if (esModuleCount === 0 && commonJSCount === 0) {\n        return true; // Default to ES modules for TypeScript ES module only approach\n      }\n      if (esModuleCount === 0) {\n        return false; // No ES module patterns found, default to CommonJS\n      }\n      return esModuleCount >= commonJSCount; // Changed from > to >= to prefer ES modules\n    } catch (error) {\n      // Default to ES modules for TypeScript ES module only approach\n      return true;\n    }\n  }\n\n  /**\n   * Check if directory should be skipped during discovery\n   */\n  private shouldSkipDirectory(dirName: string): boolean {\n    const skipPatterns = [\n      'node_modules', '.git', '.next', 'dist', 'build', 'coverage',\n      '.vscode', '.idea', 'docs', 'documentation', 'assets', 'public', 'static',\n      '.replit_cache', '.config', '.npm', 'logs'\n    ];\n    return skipPatterns.includes(dirName) || dirName.startsWith('.');\n  }\n\n  /**\n   * Walk entire project directory structure, respecting skip patterns\n   */\n  private walkProject(): string[] {\n    const currentDir = process.cwd();\n    return this.walkRecursive(currentDir);\n  }\n\n  /**\n   * Recursively walk directory and return all file paths, skipping irrelevant directories\n   */\n  private walkRecursive(dir: string): string[] {\n    if (!fs.existsSync(dir)) {\n      return [];\n    }\n    \n    return fs.readdirSync(dir, { withFileTypes: true }).flatMap(entry => {\n      const full = path.resolve(dir, entry.name);\n      \n      if (entry.isDirectory()) {\n        // Skip directories that shouldn't contain tests or source files\n        if (this.shouldSkipDirectory(entry.name)) {\n          return [];\n        }\n        return this.walkRecursive(full);\n      } else {\n        return [full];\n      }\n    });\n  }\n\n  /**\n   * Legacy walk method for backwards compatibility (walks single directory)\n   */\n  private walk(dir: string): string[] {\n    if (!fs.existsSync(dir)) {\n      return [];\n    }\n    \n    return fs.readdirSync(dir, { withFileTypes: true }).flatMap(entry => {\n      const full = path.resolve(dir, entry.name);\n      return entry.isDirectory() ? this.walk(full) : [full];\n    });\n  }\n\n  /**\n   * Categorize discovered files into source files and existing tests\n   */\n  private categorizeFiles(files: string[]): FileCategorization {\n    const sourceFiles: string[] = [];\n    const existingTests: string[] = [];\n    \n    files.forEach(file => {\n      const ext = path.extname(file);\n      const basename = path.basename(file);\n      \n      // Skip files with invalid extensions\n      if (!this.config.VALID_EXTS.includes(ext)) {\n        return;\n      }\n      \n      // Check if this is a test file\n      if (this.isTestFile(basename)) {\n        existingTests.push(file);\n      } else {\n        // Check if this source file already has a corresponding test\n        const hasTest = this.hasCorrespondingTest(file, files);\n        if (!hasTest) {\n          sourceFiles.push(file);\n        }\n      }\n    });\n    \n    return { sourceFiles, existingTests };\n  }\n\n  /**\n   * Check if filename indicates it's a test file\n   */\n  private isTestFile(filename: string): boolean {\n    const testPatterns = [\n      /\\.test\\./,\n      /\\.spec\\./,\n      /_test\\./,\n      /_spec\\./,\n      /\\.e2e\\./,\n      /\\.integration\\./\n    ];\n    \n    return testPatterns.some(pattern => pattern.test(filename));\n  }\n\n  /**\n   * Check if a source file has a corresponding test file\n   */\n  private hasCorrespondingTest(sourceFile: string, allFiles: string[]): boolean {\n    const dir = path.dirname(sourceFile);\n    const basename = path.basename(sourceFile, path.extname(sourceFile));\n    const ext = path.extname(sourceFile);\n    \n    // Common test file patterns to look for - TypeScript ES module only\n    const testPatterns = [\n      `${basename}.test.ts`,\n      `${basename}GeneratedTest.test.ts`,  // Generated unit tests  \n      `${basename}.spec.ts`,\n      `${basename}_test.ts`,\n      `${basename}_spec.ts`,\n      `${basename}.test${ext}`,\n      `${basename}.spec${ext}`\n    ];\n    \n    // Look for test files in the same directory\n    const sameDirectoryTests = testPatterns.map(pattern => \n      path.join(dir, pattern)\n    );\n    \n    // Look for test files in common test directories\n    const testDirectories = ['tests', 'test', '__tests__', 'spec'];\n    const testDirectoryTests = testDirectories.flatMap(testDir => {\n      const testPath = path.join(dir, testDir);\n      return testPatterns.map(pattern => path.join(testPath, pattern));\n    });\n    \n    // Check if any of these test files exist\n    const allTestPaths = [...sameDirectoryTests, ...testDirectoryTests];\n    \n    // Normalize paths for comparison - convert both to absolute paths\n    const normalizedAllFiles = allFiles.map(file => path.resolve(file));\n    const normalizedTestPaths = allTestPaths.map(testPath => path.resolve(testPath));\n    \n    return normalizedTestPaths.some(testPath => \n      normalizedAllFiles.includes(testPath)\n    );\n  }\n\n  /**\n   * Generate test file path based on source file and test type\n   * TypeScript ES module only - always generates .ts test files\n   */\n  private getRelativeTestPath(file: string, type: 'unit' | 'api' = 'unit'): string {\n    const dir = path.dirname(file);\n    const basename = path.basename(file, path.extname(file));\n    \n    if (type === 'unit') {\n      // For unit tests, place them alongside the source file with GeneratedTest naming\n      return path.join(dir, `${basename}GeneratedTest.test.ts`);\n    } else {\n      // For API/integration tests, use the configured test directory with .ts extension\n      const rel = path.relative(process.cwd(), file);\n      return path.join(this.config.TEST_DIR, rel.replace(/\\.[tj]sx?$/, '.test.ts').replace(/[\\\\/]/g, '__'));\n    }\n  }\n\n  /**\n   * Create directory if it doesn't exist\n   */\n  private createDir(p: string): void {\n    const dir = path.dirname(p);\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n  }\n\n  /**\n   * Write file only if it doesn't already exist\n   */\n  private writeIfMissing(p: string, content: string): boolean {\n    if (!fs.existsSync(p)) {\n      this.createDir(p);\n      fs.writeFileSync(p, content, 'utf8');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Extract imported modules from file content - Enhanced for both ES modules and CommonJS\n   */\n  private getUsedModules(content: string): string[] {\n    return [...content.matchAll(PATTERNS.imports)]\n      .map(m => m[1] || m[2]) // m[1] for ES modules, m[2] for CommonJS\n      .filter(x => x && !x.startsWith('.') && !x.startsWith('/'));\n  }\n\n  /**\n   * Generate unit test content for a file - TypeScript ES module only\n   */\n  private createUnitTest(file: string, exports: string[], usesQtests: boolean, mocks: string[]): string {\n    const basename = path.basename(file, path.extname(file));\n    const ext = path.extname(file);\n    \n    const lines = [\n      `// Lightweight unit test for ${path.basename(file)} - TypeScript ES module`,\n      ``\n    ];\n    \n    // TypeScript ES module imports\n    if (usesQtests) {\n      lines.push(`import { test, mockConsole } from 'qtests';`);\n      lines.push(`// NOTE: Use mockConsole directly, avoid complex async patterns`);\n    }\n    \n    // Lightweight mock setup for TypeScript\n    if (mocks.length > 0) {\n      lines.push(`// Lightweight mock setup - TypeScript compatible`);\n      mocks.forEach(lib => {\n        lines.push(`jest.mock('${lib}', () => ({`);\n        lines.push(`  __esModule: true,`);\n        lines.push(`  default: jest.fn(() => 'mock-${lib}'),`);\n        lines.push(`}));`);\n      });\n      lines.push(``);\n    }\n    \n    // TypeScript test suite\n    lines.push(`describe('${path.basename(file)} basic exports', () => {`);\n    \n    // Single lightweight test for TypeScript ES modules\n    lines.push(`  test('module loads without errors', async () => {`);\n    lines.push(`    // TypeScript ES module dynamic import`);\n    lines.push(`    const module = await import('./${basename}${ext}');`);\n    lines.push(`    expect(module).toBeDefined();`);\n    lines.push(`    expect(typeof module).toBe('object');`);\n    if (exports.length > 0) {\n      lines.push(`    // Check for expected exports`);\n      exports.slice(0, 3).forEach(exportName => {\n        lines.push(`    expect(module.${exportName}).toBeDefined();`);\n      });\n    }\n    lines.push(`  });`);\n    lines.push(`});`);\n    lines.push('');\n    \n    return lines.join('\\n');\n  }\n\n  /**\n   * Generate API test content for an endpoint - TypeScript ES module only\n   */\n  private createApiTest(method: string, route: string): string {\n    const lines = [\n      `// Auto-generated API test for ${method.toUpperCase()} ${route} - TypeScript ES module`,\n      `// PARALLEL-SAFE DESIGN: This test avoids race conditions`,\n      ``\n    ];\n    \n    // Generate unique test session for API isolation\n    lines.push(`// Unique API test session for parallel execution safety`);\n    lines.push(`const apiTestSession = \\`\\${process.hrtime.bigint()}-\\${Math.random().toString(36).substr(2, 9)}\\`;`);\n    lines.push(`const uniqueRoute = '${route}' + ('${route}'.includes('?') ? '&' : '?') + 'testSession=' + apiTestSession;`);\n    lines.push(``);\n    \n    // TypeScript ES module import\n    lines.push(`import * as httpTest from '../utils/httpTest.js';`, '');\n    \n    // TypeScript test suite\n    lines.push(`describe(\\`${method.toUpperCase()} ${route} [API-\\${apiTestSession}]\\`, () => {`);\n    lines.push(`  // Test data factory for unique request/response data`);\n    lines.push(`  const createUniqueTestData = () => ({`);\n    lines.push(`    sessionId: apiTestSession,`);\n    lines.push(`    requestId: \\`req-\\${Date.now()}-\\${Math.random().toString(36).substr(2, 6)}\\`,`);\n    lines.push(`    timestamp: new Date().toISOString(),`);\n    lines.push(`  });`);\n    lines.push(``);\n    \n    lines.push(`  test('should succeed with unique test data', async () => {`);\n    lines.push(`    const testData = createUniqueTestData();`);\n    lines.push(`    const app = httpTest.createMockApp();`);\n    lines.push(`    `);\n    lines.push(`    app.${method.toLowerCase()}(uniqueRoute, (req, res) => {`);\n    lines.push(`      res.statusCode = 200;`);\n    lines.push(`      res.setHeader('content-type', 'application/json');`);\n    lines.push(`      res.end(JSON.stringify({ `);\n    lines.push(`        success: true, `);\n    lines.push(`        testSession: apiTestSession,`);\n    lines.push(`        requestId: testData.requestId`);\n    lines.push(`      }));`);\n    lines.push(`    });`);\n    lines.push(`    `);\n    lines.push(`    const res = await httpTest.supertest(app)`);\n    lines.push(`      .${method.toLowerCase()}(uniqueRoute)`);\n    lines.push(`      .send(testData)`);\n    lines.push(`      .expect(200);`);\n    lines.push(`    `);\n    lines.push(`    expect(res.body.success).toBe(true);`);\n    lines.push(`    expect(res.body.testSession).toBe(apiTestSession);`);\n    lines.push('  });');\n    lines.push('});\\n');\n    \n    return lines.join('\\n');\n  }\n\n  /**\n   * Intelligently extract exports from both ES modules and CommonJS\n   */\n  private extractExports(content: string): string[] {\n    const exports = new Set<string>();\n    \n    // Remove comments to avoid false positives\n    const cleanContent = content\n      .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove /* */ comments\n      .replace(/\\/\\/.*$/gm, ''); // Remove // comments\n    \n    // Extract ES module exports (export const/function/class)\n    const esExports = [...cleanContent.matchAll(PATTERNS.exportsES)];\n    esExports.forEach(match => {\n      if (match[1]) exports.add(match[1]);\n    });\n    \n    // Extract ES module named exports: export { name1, name2, name3 }\n    const namedExports = [...cleanContent.matchAll(PATTERNS.exportsNamed)];\n    namedExports.forEach(match => {\n      if (match[1]) {\n        // Parse the named exports list\n        const exportList = match[1].split(',').map(name => name.trim());\n        exportList.forEach(name => {\n          // Handle potential aliases: \"name as alias\" -> use \"name\"\n          const cleanName = name.split(' as ')[0].trim();\n          if (cleanName && /^[a-zA-Z0-9_]+$/.test(cleanName)) {\n            exports.add(cleanName);\n          }\n        });\n      }\n    });\n    \n    // Extract ES module default exports: export default SomeName\n    const defaultExports = [...cleanContent.matchAll(PATTERNS.exportsDefault)];\n    defaultExports.forEach(match => {\n      if (match[1]) exports.add(match[1]);\n    });\n    \n    // Extract CommonJS exports\n    const commonJSExports = [...cleanContent.matchAll(PATTERNS.exportsCommonJS)];\n    commonJSExports.forEach(match => {\n      // match[1] = module.exports.name, match[2] = exports.name, match[3] = single assignment\n      for (let i = 1; i <= 3; i++) {\n        if (match[i]) exports.add(match[i]);\n      }\n    });\n    \n    // Handle module.exports = { name1, name2, ... } pattern\n    const objectExportMatch = cleanContent.match(/module\\.exports\\s*=\\s*\\{([^}]+)\\}/);\n    if (objectExportMatch) {\n      const objectContent = objectExportMatch[1];\n      const propertyMatches = objectContent.matchAll(/\\b(\\w+)(?:\\s*:\\s*\\w+)?\\s*[,}]/g);\n      for (const match of propertyMatches) {\n        if (match[1]) exports.add(match[1]);\n      }\n    }\n    \n    return Array.from(exports).filter(name => name && name.length > 0);\n  }\n\n  /**\n   * Analyze a single file and generate appropriate tests - TypeScript ES module only\n   */\n  analyze(file: string): void {\n    const ext = path.extname(file);\n    if (!this.config.VALID_EXTS.includes(ext)) {\n      return;\n    }\n\n    const content = fs.readFileSync(file, 'utf8');\n    const usesQtests = PATTERNS.qtests.test(content);\n    const imports = this.getUsedModules(content);\n    const mockTargets = imports.filter(i => \n      this.config.KNOWN_MOCKS.includes(i) && i !== 'qtests'\n    );\n\n    // Use intelligent export detection for both ES modules and CommonJS\n    const exports = this.extractExports(content);\n    if (exports.length > 0) {\n      const testPath = this.getRelativeTestPath(file, 'unit');\n      const created = this.writeIfMissing(\n        testPath, \n        this.createUnitTest(file, exports, usesQtests, mockTargets)\n      );\n      if (created) {\n        this.scanned.push({ \n          type: 'unit', \n          file: path.relative('.', testPath) \n        });\n      }\n    }\n\n    // Generate API tests for detected routes - TypeScript only\n    const apis = [...content.matchAll(PATTERNS.api)];\n    for (const [, , method, route] of apis) {\n      const testPath = this.getRelativeTestPath(file, 'api')\n        .replace(/\\.test\\.ts$/, `__${method.toLowerCase()}.test.ts`);\n      const created = this.writeIfMissing(\n        testPath, \n        this.createApiTest(method, route)\n      );\n      if (created) {\n        this.scanned.push({ \n          type: 'api', \n          file: path.relative('.', testPath) \n        });\n      }\n    }\n  }\n\n  /**\n   * Create Jest configuration and setup files - TypeScript ES Module only\n   */\n  scaffoldJestSetup(): void {\n    // Generate Jest config for TypeScript ES modules\n    const config = `\n// jest.config.js - TypeScript ES Module configuration\nexport default {\n  preset: 'ts-jest/presets/default-esm',\n  extensionsToTreatAsEsm: ['.ts'],\n  testEnvironment: 'node',\n  setupFilesAfterEnv: ['<rootDir>/jest-setup.ts'],\n  moduleFileExtensions: ['ts', 'js', 'json'],\n  roots: ['<rootDir>'],\n  testMatch: [\n    '**/*.test.ts',           // Standard tests anywhere\n    '**/*.GeneratedTest.test.ts', // Generated unit tests next to source files  \n    '**/manual-tests/**/*.test.ts',     // Manual framework tests\n    '**/generated-tests/**/*.test.ts'   // Generated integration tests\n  ],\n  transform: {\n    '^.+\\\\.tsx?$': ['ts-jest', {\n      useESM: true,\n      isolatedModules: true\n    }]\n  },\n  moduleNameMapper: {\n    '^(\\\\.{1,2}/.*)\\\\.js$': '$1',\n    '^qtests/(.*)$': '<rootDir>/$1'  // Allow qtests to import from itself during testing\n  }\n};\n`.trim();\n\n    // Generate TypeScript ES module setup\n    const setup = `\n// setup.ts - TypeScript ES Module setup (PARALLEL-SAFE)\nimport 'jest';\n\n// Global test configuration for TypeScript ES modules\nbeforeAll(() => {\n  // Set test environment\n  process.env.NODE_ENV = 'test';\n  \n  // Configure test timeouts\n  jest.setTimeout(10000);\n});\n\n// Cleanup after each test to prevent interference\nafterEach(() => {\n  // Clear all mocks\n  jest.clearAllMocks();\n});\n`.trim();\n\n    this.writeIfMissing('jest.config.js', config);\n    this.writeIfMissing('setup.ts', setup);\n  }\n\n  /**\n   * Generate qtests test runner file - TypeScript ES module compatible\n   */\n  generateQtestsRunner(): void {\n    try {\n      // Read the existing qtests-runner.ts as template\n      const templatePath = path.join(moduleDirname, '..', 'qtests-runner.ts');\n      let template = '';\n      \n      if (fs.existsSync(templatePath)) {\n        template = fs.readFileSync(templatePath, 'utf8');\n      } else {\n        // Fallback template for TypeScript ES modules with correct Jest configuration\n        template = `\n// Generated qtests runner - TypeScript ES module compatible\nimport { spawn } from 'child_process';\nimport path from 'path';\n\n// Run tests with TypeScript support and correct Jest arguments\nconst args = process.argv.slice(2);\nconst testProcess = spawn('jest', args, {\n  stdio: 'inherit',\n  shell: true\n});\n\ntestProcess.on('exit', (code) => {\n  process.exit(code || 0);\n});\n`.trim();\n      }\n\n      // Always overwrite qtests-runner.ts to ensure latest functionality and TypeScript compliance\n      const outputPath = path.join(process.cwd(), 'qtests-runner.ts');\n      fs.writeFileSync(outputPath, template, 'utf8');\n      \n      console.log('✅ Generated qtests-runner.ts for TypeScript ES modules');\n    } catch (error: any) {\n      console.error('Failed to generate qtests-runner.ts:', error.message);\n    }\n  }\n\n  /**\n   * Update package.json test script to use qtests-runner.ts\n   */\n  updatePackageJsonTestScript(): void {\n    try {\n      const packagePath = path.join(process.cwd(), 'package.json');\n      if (!fs.existsSync(packagePath)) {\n        console.log('⚠️  package.json not found, skipping test script update');\n        return;\n      }\n\n      const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));\n      \n      if (!packageJson.scripts) {\n        packageJson.scripts = {};\n      }\n      \n      packageJson.scripts.test = 'npx tsx qtests-runner.ts';\n      \n      fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2), 'utf8');\n      console.log('✅ Updated package.json test script to use qtests-runner.ts');\n    } catch (error: any) {\n      console.log('⚠️  Could not update package.json:', error.message);\n    }\n  }\n\n  /**\n   * Scan for files without tests and generate them - TypeScript ES module only\n   */\n  async generateTestFiles(): Promise<void> {\n    console.log('🔍 Scanning for files that need TypeScript tests...');\n    \n    const allFiles = this.walkProject();\n    const { sourceFiles } = this.categorizeFiles(allFiles);\n    \n    console.log(`📁 Found ${sourceFiles.length} source files without tests`);\n    \n    if (sourceFiles.length === 0) {\n      console.log('✅ All source files already have corresponding tests');\n      return;\n    }\n    \n    // Generate tests for each source file\n    for (const file of sourceFiles) {\n      this.analyze(file);\n    }\n    \n    // Always set up Jest configuration and runner to ensure they're up-to-date\n    this.scaffoldJestSetup();\n    this.generateQtestsRunner();\n    this.updatePackageJsonTestScript();\n    \n    console.log(`📝 Generated ${this.scanned.length} TypeScript test files:`);\n    this.scanned.forEach(test => {\n      console.log(`   ${test.type}: ${test.file}`);\n    });\n  }\n\n  /**\n   * Get scan results\n   */\n  getResults(): ScannedTest[] {\n    return this.scanned;\n  }\n}\n\n// Export the TestGenerator class using ES module syntax\nexport { TestGenerator };\nexport default TestGenerator;"],"version":3}