{"version":3,"names":["stubMethod","testEnv","stubs","require","initSearchTest","resetMocks","withMockConsole","executeWithLogs","searchTask","url","target","axios","winston","logger","createLogger","post","info","test","logSpy","mocks","axiosCalled","restorePost","infoCalled","restoreLogger","result","expect","toBe","mock","scheduleMock","qerrorsMock"],"sources":["integration.test.js"],"sourcesContent":["\nconst { stubMethod, testEnv, stubs } = require('..'); //import qtests utilities minus mockConsole\nconst { initSearchTest, resetMocks } = testEnv; //extract env helpers\n\nconst { withMockConsole } = require('../utils/testHelpers'); //(helper for console spies)\n\nconst { executeWithLogs } = require('../lib/logUtils'); //(import executeWithLogs)\n\n\nasync function searchTask(url){ //test module performing http and logging\n  return executeWithLogs('searchTask', async target => { //(delegate to executeWithLogs)\n    const axios = stubs.axios; //directly use axios stub\n    const winston = stubs.winston; //directly use winston stub\n    const logger = winston.createLogger(); //create stubbed logger\n    await axios.post(target, {}); //perform HTTP request\n    logger.info('request finished'); //log completion\n    return true; //return result\n  }, url);\n}\n\ntest('integration flow using stubs', () => withMockConsole('log', async logSpy => { //jest test executing searchTask with helper\n  const mocks = initSearchTest(); //setup env and create mocks\n  let axiosCalled = false; //track axios usage\n  const restorePost = stubMethod(stubs.axios, 'post', async () => { //stub axios.post\n    axiosCalled = true; //mark call\n    return {}; //fake response\n  });\n  let infoCalled = false; //track logger info\n  const restoreLogger = stubMethod(stubs.winston, 'createLogger', () => ({ //stub winston logger\n    info: () => { //info method\n      infoCalled = true; //mark log call\n    }\n  }));\n\n  const result = await searchTask('https://example.com'); //execute module\n  expect(result).toBe(true); //check result\n  expect(axiosCalled).toBe(true); //verify axios used\n  expect(infoCalled).toBe(true); //verify logger used\n  restorePost(); //restore axios.post\n  restoreLogger(); //restore winston.createLogger\n  resetMocks(mocks.mock, mocks.scheduleMock, mocks.qerrorsMock); //clean mocks\n}));\n\n"],"mappings":"AACA,MAAM;EAAEA,UAAU;EAAEC,OAAO;EAAEC;AAAM,CAAC,GAAGC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AACtD,MAAM;EAAEC,cAAc;EAAEC;AAAW,CAAC,GAAGJ,OAAO,CAAC,CAAC;;AAEhD,MAAM;EAAEK;AAAgB,CAAC,GAAGH,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC;;AAE7D,MAAM;EAAEI;AAAgB,CAAC,GAAGJ,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;;AAGxD,eAAeK,UAAUA,CAACC,GAAG,EAAC;EAAE;EAC9B,OAAOF,eAAe,CAAC,YAAY,EAAE,MAAMG,MAAM,IAAI;IAAE;IACrD,MAAMC,KAAK,GAAGT,KAAK,CAACS,KAAK,CAAC,CAAC;IAC3B,MAAMC,OAAO,GAAGV,KAAK,CAACU,OAAO,CAAC,CAAC;IAC/B,MAAMC,MAAM,GAAGD,OAAO,CAACE,YAAY,CAAC,CAAC,CAAC,CAAC;IACvC,MAAMH,KAAK,CAACI,IAAI,CAACL,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9BG,MAAM,CAACG,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;IACjC,OAAO,IAAI,CAAC,CAAC;EACf,CAAC,EAAEP,GAAG,CAAC;AACT;AAEAQ,IAAI,CAAC,8BAA8B,EAAE,MAAMX,eAAe,CAAC,KAAK,EAAE,MAAMY,MAAM,IAAI;EAAE;EAClF,MAAMC,KAAK,GAAGf,cAAc,CAAC,CAAC,CAAC,CAAC;EAChC,IAAIgB,WAAW,GAAG,KAAK,CAAC,CAAC;EACzB,MAAMC,WAAW,GAAGrB,UAAU,CAACE,KAAK,CAACS,KAAK,EAAE,MAAM,EAAE,YAAY;IAAE;IAChES,WAAW,GAAG,IAAI,CAAC,CAAC;IACpB,OAAO,CAAC,CAAC,CAAC,CAAC;EACb,CAAC,CAAC;EACF,IAAIE,UAAU,GAAG,KAAK,CAAC,CAAC;EACxB,MAAMC,aAAa,GAAGvB,UAAU,CAACE,KAAK,CAACU,OAAO,EAAE,cAAc,EAAE,OAAO;IAAE;IACvEI,IAAI,EAAEA,CAAA,KAAM;MAAE;MACZM,UAAU,GAAG,IAAI,CAAC,CAAC;IACrB;EACF,CAAC,CAAC,CAAC;EAEH,MAAME,MAAM,GAAG,MAAMhB,UAAU,CAAC,qBAAqB,CAAC,CAAC,CAAC;EACxDiB,MAAM,CAACD,MAAM,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EAC3BD,MAAM,CAACL,WAAW,CAAC,CAACM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EAChCD,MAAM,CAACH,UAAU,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EAC/BL,WAAW,CAAC,CAAC,CAAC,CAAC;EACfE,aAAa,CAAC,CAAC,CAAC,CAAC;EACjBlB,UAAU,CAACc,KAAK,CAACQ,IAAI,EAAER,KAAK,CAACS,YAAY,EAAET,KAAK,CAACU,WAAW,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC,CAAC","ignoreList":[]}