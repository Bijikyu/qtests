4a979f9eae56b3d0b55b0f416c2d3f39
const {
  stubMethod,
  testEnv,
  stubs
} = require('..'); //import qtests utilities minus mockConsole
const {
  initSearchTest,
  resetMocks
} = testEnv; //extract env helpers

const {
  withMockConsole
} = require('../utils/testHelpers'); //(helper for console spies)

const {
  executeWithLogs
} = require('../lib/logUtils'); //(import executeWithLogs)

async function searchTask(url) {
  //test module performing http and logging
  return executeWithLogs('searchTask', async target => {
    //(delegate to executeWithLogs)
    const axios = stubs.axios; //directly use axios stub
    const winston = stubs.winston; //directly use winston stub
    const logger = winston.createLogger(); //create stubbed logger
    await axios.post(target, {}); //perform HTTP request
    logger.info('request finished'); //log completion
    return true; //return result
  }, url);
}
test('integration flow using stubs', () => withMockConsole('log', async logSpy => {
  //jest test executing searchTask with helper
  const mocks = initSearchTest(); //setup env and create mocks
  let axiosCalled = false; //track axios usage
  const restorePost = stubMethod(stubs.axios, 'post', async () => {
    //stub axios.post
    axiosCalled = true; //mark call
    return {}; //fake response
  });
  let infoCalled = false; //track logger info
  const restoreLogger = stubMethod(stubs.winston, 'createLogger', () => ({
    //stub winston logger
    info: () => {
      //info method
      infoCalled = true; //mark log call
    }
  }));
  const result = await searchTask('https://example.com'); //execute module
  expect(result).toBe(true); //check result
  expect(axiosCalled).toBe(true); //verify axios used
  expect(infoCalled).toBe(true); //verify logger used
  restorePost(); //restore axios.post
  restoreLogger(); //restore winston.createLogger
  resetMocks(mocks.mock, mocks.scheduleMock, mocks.qerrorsMock); //clean mocks
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdHViTWV0aG9kIiwidGVzdEVudiIsInN0dWJzIiwicmVxdWlyZSIsImluaXRTZWFyY2hUZXN0IiwicmVzZXRNb2NrcyIsIndpdGhNb2NrQ29uc29sZSIsImV4ZWN1dGVXaXRoTG9ncyIsInNlYXJjaFRhc2siLCJ1cmwiLCJ0YXJnZXQiLCJheGlvcyIsIndpbnN0b24iLCJsb2dnZXIiLCJjcmVhdGVMb2dnZXIiLCJwb3N0IiwiaW5mbyIsInRlc3QiLCJsb2dTcHkiLCJtb2NrcyIsImF4aW9zQ2FsbGVkIiwicmVzdG9yZVBvc3QiLCJpbmZvQ2FsbGVkIiwicmVzdG9yZUxvZ2dlciIsInJlc3VsdCIsImV4cGVjdCIsInRvQmUiLCJtb2NrIiwic2NoZWR1bGVNb2NrIiwicWVycm9yc01vY2siXSwic291cmNlcyI6WyJpbnRlZ3JhdGlvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgeyBzdHViTWV0aG9kLCB0ZXN0RW52LCBzdHVicyB9ID0gcmVxdWlyZSgnLi4nKTsgLy9pbXBvcnQgcXRlc3RzIHV0aWxpdGllcyBtaW51cyBtb2NrQ29uc29sZVxuY29uc3QgeyBpbml0U2VhcmNoVGVzdCwgcmVzZXRNb2NrcyB9ID0gdGVzdEVudjsgLy9leHRyYWN0IGVudiBoZWxwZXJzXG5cbmNvbnN0IHsgd2l0aE1vY2tDb25zb2xlIH0gPSByZXF1aXJlKCcuLi91dGlscy90ZXN0SGVscGVycycpOyAvLyhoZWxwZXIgZm9yIGNvbnNvbGUgc3BpZXMpXG5cbmNvbnN0IHsgZXhlY3V0ZVdpdGhMb2dzIH0gPSByZXF1aXJlKCcuLi9saWIvbG9nVXRpbHMnKTsgLy8oaW1wb3J0IGV4ZWN1dGVXaXRoTG9ncylcblxuXG5hc3luYyBmdW5jdGlvbiBzZWFyY2hUYXNrKHVybCl7IC8vdGVzdCBtb2R1bGUgcGVyZm9ybWluZyBodHRwIGFuZCBsb2dnaW5nXG4gIHJldHVybiBleGVjdXRlV2l0aExvZ3MoJ3NlYXJjaFRhc2snLCBhc3luYyB0YXJnZXQgPT4geyAvLyhkZWxlZ2F0ZSB0byBleGVjdXRlV2l0aExvZ3MpXG4gICAgY29uc3QgYXhpb3MgPSBzdHVicy5heGlvczsgLy9kaXJlY3RseSB1c2UgYXhpb3Mgc3R1YlxuICAgIGNvbnN0IHdpbnN0b24gPSBzdHVicy53aW5zdG9uOyAvL2RpcmVjdGx5IHVzZSB3aW5zdG9uIHN0dWJcbiAgICBjb25zdCBsb2dnZXIgPSB3aW5zdG9uLmNyZWF0ZUxvZ2dlcigpOyAvL2NyZWF0ZSBzdHViYmVkIGxvZ2dlclxuICAgIGF3YWl0IGF4aW9zLnBvc3QodGFyZ2V0LCB7fSk7IC8vcGVyZm9ybSBIVFRQIHJlcXVlc3RcbiAgICBsb2dnZXIuaW5mbygncmVxdWVzdCBmaW5pc2hlZCcpOyAvL2xvZyBjb21wbGV0aW9uXG4gICAgcmV0dXJuIHRydWU7IC8vcmV0dXJuIHJlc3VsdFxuICB9LCB1cmwpO1xufVxuXG50ZXN0KCdpbnRlZ3JhdGlvbiBmbG93IHVzaW5nIHN0dWJzJywgKCkgPT4gd2l0aE1vY2tDb25zb2xlKCdsb2cnLCBhc3luYyBsb2dTcHkgPT4geyAvL2plc3QgdGVzdCBleGVjdXRpbmcgc2VhcmNoVGFzayB3aXRoIGhlbHBlclxuICBjb25zdCBtb2NrcyA9IGluaXRTZWFyY2hUZXN0KCk7IC8vc2V0dXAgZW52IGFuZCBjcmVhdGUgbW9ja3NcbiAgbGV0IGF4aW9zQ2FsbGVkID0gZmFsc2U7IC8vdHJhY2sgYXhpb3MgdXNhZ2VcbiAgY29uc3QgcmVzdG9yZVBvc3QgPSBzdHViTWV0aG9kKHN0dWJzLmF4aW9zLCAncG9zdCcsIGFzeW5jICgpID0+IHsgLy9zdHViIGF4aW9zLnBvc3RcbiAgICBheGlvc0NhbGxlZCA9IHRydWU7IC8vbWFyayBjYWxsXG4gICAgcmV0dXJuIHt9OyAvL2Zha2UgcmVzcG9uc2VcbiAgfSk7XG4gIGxldCBpbmZvQ2FsbGVkID0gZmFsc2U7IC8vdHJhY2sgbG9nZ2VyIGluZm9cbiAgY29uc3QgcmVzdG9yZUxvZ2dlciA9IHN0dWJNZXRob2Qoc3R1YnMud2luc3RvbiwgJ2NyZWF0ZUxvZ2dlcicsICgpID0+ICh7IC8vc3R1YiB3aW5zdG9uIGxvZ2dlclxuICAgIGluZm86ICgpID0+IHsgLy9pbmZvIG1ldGhvZFxuICAgICAgaW5mb0NhbGxlZCA9IHRydWU7IC8vbWFyayBsb2cgY2FsbFxuICAgIH1cbiAgfSkpO1xuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlYXJjaFRhc2soJ2h0dHBzOi8vZXhhbXBsZS5jb20nKTsgLy9leGVjdXRlIG1vZHVsZVxuICBleHBlY3QocmVzdWx0KS50b0JlKHRydWUpOyAvL2NoZWNrIHJlc3VsdFxuICBleHBlY3QoYXhpb3NDYWxsZWQpLnRvQmUodHJ1ZSk7IC8vdmVyaWZ5IGF4aW9zIHVzZWRcbiAgZXhwZWN0KGluZm9DYWxsZWQpLnRvQmUodHJ1ZSk7IC8vdmVyaWZ5IGxvZ2dlciB1c2VkXG4gIHJlc3RvcmVQb3N0KCk7IC8vcmVzdG9yZSBheGlvcy5wb3N0XG4gIHJlc3RvcmVMb2dnZXIoKTsgLy9yZXN0b3JlIHdpbnN0b24uY3JlYXRlTG9nZ2VyXG4gIHJlc2V0TW9ja3MobW9ja3MubW9jaywgbW9ja3Muc2NoZWR1bGVNb2NrLCBtb2Nrcy5xZXJyb3JzTW9jayk7IC8vY2xlYW4gbW9ja3Ncbn0pKTtcblxuIl0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNO0VBQUVBLFVBQVU7RUFBRUMsT0FBTztFQUFFQztBQUFNLENBQUMsR0FBR0MsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDdEQsTUFBTTtFQUFFQyxjQUFjO0VBQUVDO0FBQVcsQ0FBQyxHQUFHSixPQUFPLENBQUMsQ0FBQzs7QUFFaEQsTUFBTTtFQUFFSztBQUFnQixDQUFDLEdBQUdILE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7O0FBRTdELE1BQU07RUFBRUk7QUFBZ0IsQ0FBQyxHQUFHSixPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDOztBQUd4RCxlQUFlSyxVQUFVQSxDQUFDQyxHQUFHLEVBQUM7RUFBRTtFQUM5QixPQUFPRixlQUFlLENBQUMsWUFBWSxFQUFFLE1BQU1HLE1BQU0sSUFBSTtJQUFFO0lBQ3JELE1BQU1DLEtBQUssR0FBR1QsS0FBSyxDQUFDUyxLQUFLLENBQUMsQ0FBQztJQUMzQixNQUFNQyxPQUFPLEdBQUdWLEtBQUssQ0FBQ1UsT0FBTyxDQUFDLENBQUM7SUFDL0IsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUNFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QyxNQUFNSCxLQUFLLENBQUNJLElBQUksQ0FBQ0wsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QkcsTUFBTSxDQUFDRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLE9BQU8sSUFBSSxDQUFDLENBQUM7RUFDZixDQUFDLEVBQUVQLEdBQUcsQ0FBQztBQUNUO0FBRUFRLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxNQUFNWCxlQUFlLENBQUMsS0FBSyxFQUFFLE1BQU1ZLE1BQU0sSUFBSTtFQUFFO0VBQ2xGLE1BQU1DLEtBQUssR0FBR2YsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2hDLElBQUlnQixXQUFXLEdBQUcsS0FBSyxDQUFDLENBQUM7RUFDekIsTUFBTUMsV0FBVyxHQUFHckIsVUFBVSxDQUFDRSxLQUFLLENBQUNTLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWTtJQUFFO0lBQ2hFUyxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDcEIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2IsQ0FBQyxDQUFDO0VBQ0YsSUFBSUUsVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDO0VBQ3hCLE1BQU1DLGFBQWEsR0FBR3ZCLFVBQVUsQ0FBQ0UsS0FBSyxDQUFDVSxPQUFPLEVBQUUsY0FBYyxFQUFFLE9BQU87SUFBRTtJQUN2RUksSUFBSSxFQUFFQSxDQUFBLEtBQU07TUFBRTtNQUNaTSxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDckI7RUFDRixDQUFDLENBQUMsQ0FBQztFQUVILE1BQU1FLE1BQU0sR0FBRyxNQUFNaEIsVUFBVSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztFQUN4RGlCLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDLENBQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQzNCRCxNQUFNLENBQUNMLFdBQVcsQ0FBQyxDQUFDTSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUNoQ0QsTUFBTSxDQUFDSCxVQUFVLENBQUMsQ0FBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDL0JMLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNmRSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDakJsQixVQUFVLENBQUNjLEtBQUssQ0FBQ1EsSUFBSSxFQUFFUixLQUFLLENBQUNTLFlBQVksRUFBRVQsS0FBSyxDQUFDVSxXQUFXLENBQUMsQ0FBQyxDQUFDO0FBQ2pFLENBQUMsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119