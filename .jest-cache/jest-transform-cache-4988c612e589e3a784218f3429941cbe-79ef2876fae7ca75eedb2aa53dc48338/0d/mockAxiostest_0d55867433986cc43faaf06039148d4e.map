{"version":3,"names":["createMockAxios","createUserMockAxios","createSimpleMockAxios","require","describe","test","mockAxios","expect","get","toBe","post","put","delete","request","customResponse","users","defaultResponse","defaultStatus","response","data","toEqual","status","statusText","toHaveProperty","testData","name","email","config","updateData","id","method","url","simulateErrors","errorThrown","i","error","message","__set","mock","errorData","fail","version","mockAxios1","mockAxios2","instance","response1","response2","simpleMock","configurableMock","Object","keys","sort","startTime","Date","now","duration","toBeLessThan","requests","Array","fill","map","_","responses","Promise","all","toHaveLength","forEach"],"sources":["mockAxios.test.js"],"sourcesContent":["/**\n * Mock Axios Factory Tests\n * \n * This test suite verifies the behavior of the mock axios factory utilities\n * that provide HTTP client simulation for testing environments. These tests\n * ensure that mock axios instances behave predictably and maintain API\n * compatibility with real axios.\n * \n * Test coverage includes:\n * - Factory function behavior and configuration options\n * - HTTP method implementations (GET, POST, PUT, DELETE)\n * - Response structure compatibility with real axios\n * - Error simulation capabilities\n * - Performance and reliability characteristics\n */\n\nconst { createMockAxios, createUserMockAxios, createSimpleMockAxios } = require('../utils/mockAxios');\n\ndescribe('Mock Axios Factory', () => {\n  \n  describe('createMockAxios', () => {\n    \n    test('creates mock axios with default configuration', async () => {\n      const mockAxios = createMockAxios();\n      \n      // Verify mock axios has expected HTTP methods\n      expect(typeof mockAxios.get).toBe('function');\n      expect(typeof mockAxios.post).toBe('function');\n      expect(typeof mockAxios.put).toBe('function');\n      expect(typeof mockAxios.delete).toBe('function');\n      expect(typeof mockAxios.request).toBe('function');\n    });\n    \n    test('creates mock axios with custom configuration', async () => {\n      const customResponse = { users: ['alice', 'bob'] };\n      const mockAxios = createMockAxios({\n        defaultResponse: customResponse,\n        defaultStatus: 201\n      });\n      \n      const response = await mockAxios.get('/api/users');\n      \n      // Verify custom configuration is applied\n      expect(response.data).toEqual(customResponse);\n      expect(response.status).toBe(201);\n      expect(response.statusText).toBe('Error'); // Non-200 status\n    });\n    \n    test('GET method returns axios-compatible response', async () => {\n      const mockAxios = createMockAxios();\n      const response = await mockAxios.get('/api/test');\n      \n      // Verify response structure matches real axios\n      expect(response).toHaveProperty('data');\n      expect(response).toHaveProperty('status');\n      expect(response).toHaveProperty('statusText');\n      expect(response).toHaveProperty('headers');\n      expect(response).toHaveProperty('config');\n      expect(response).toHaveProperty('request');\n      \n      // Verify default values\n      expect(response.status).toBe(200);\n      expect(response.statusText).toBe('OK');\n      expect(response.data).toEqual({});\n    });\n    \n    test('POST method handles data payload', async () => {\n      const mockAxios = createMockAxios();\n      const testData = { name: 'test user', email: 'test@example.com' };\n      \n      const response = await mockAxios.post('/api/users', testData);\n      \n      // Verify response structure is consistent\n      expect(response.status).toBe(200);\n      expect(response.data).toEqual({});\n      expect(typeof response.config).toBe('object');\n    });\n    \n    test('PUT method maintains API compatibility', async () => {\n      const mockAxios = createMockAxios();\n      const updateData = { id: 1, name: 'updated user' };\n      \n      const response = await mockAxios.put('/api/users/1', updateData);\n      \n      expect(response.status).toBe(200);\n      expect(response.statusText).toBe('OK');\n    });\n    \n    test('DELETE method works without data payload', async () => {\n      const mockAxios = createMockAxios();\n      \n      const response = await mockAxios.delete('/api/users/1');\n      \n      expect(response.status).toBe(200);\n      expect(response.data).toEqual({});\n    });\n    \n    test('request method handles custom configurations', async () => {\n      const mockAxios = createMockAxios();\n      const config = {\n        method: 'PATCH',\n        url: '/api/users/1',\n        data: { status: 'active' }\n      };\n      \n      const response = await mockAxios.request(config);\n      \n      expect(response.status).toBe(200);\n      expect(response.statusText).toBe('OK');\n    });\n    \n    test('simulates network errors when configured', async () => {\n      const mockAxios = createMockAxios({ simulateErrors: true });\n      \n      // Test multiple requests since error simulation is probabilistic\n      let errorThrown = false;\n      for (let i = 0; i < 20; i++) {\n        try {\n          await mockAxios.get('/api/test');\n        } catch (error) {\n          expect(error.message).toBe('Simulated network error');\n          errorThrown = true;\n          break;\n        }\n      }\n      \n      // Note: This test might occasionally pass even with error simulation\n      // due to the random nature of error triggering\n    });\n  });\n  \n  describe('createUserMockAxios', () => {\n    \n    test('creates mock axios with URL-specific response mapping', async () => {\n      const mockAxios = createUserMockAxios();\n      \n      // Verify it's a function with helper methods\n      expect(typeof mockAxios).toBe('function');\n      expect(typeof mockAxios.__set).toBe('function');\n    });\n    \n    test('returns default seeded response for configured URL', async () => {\n      const mockAxios = createUserMockAxios();\n      \n      const response = await mockAxios({ url: 'http://a' });\n      \n      expect(response.status).toBe(200);\n      expect(response.data).toEqual({ mock: true });\n    });\n    \n    test('configures custom responses using __set method', async () => {\n      const mockAxios = createUserMockAxios();\n      const testData = { users: ['alice', 'bob'] };\n      \n      mockAxios.__set('http://api.test.com/users', testData, 201);\n      \n      const response = await mockAxios({ url: 'http://api.test.com/users' });\n      \n      expect(response.status).toBe(201);\n      expect(response.data).toEqual(testData);\n    });\n    \n    test('simulates error responses when reject flag is set', async () => {\n      const mockAxios = createUserMockAxios();\n      const errorData = { error: 'Not found' };\n      \n      mockAxios.__set('http://api.test.com/notfound', errorData, 404, true);\n      \n      try {\n        await mockAxios({ url: 'http://api.test.com/notfound' });\n        fail('Expected promise to reject');\n      } catch (error) {\n        expect(error.response.status).toBe(404);\n        expect(error.response.data).toEqual(errorData);\n      }\n    });\n    \n    test('returns 500 error for unconfigured URLs', async () => {\n      const mockAxios = createUserMockAxios();\n      \n      try {\n        await mockAxios({ url: 'http://unknown.com' });\n        fail('Expected promise to reject');\n      } catch (error) {\n        expect(error.response.status).toBe(500);\n        expect(error.response.data).toBe('error');\n      }\n    });\n    \n    test('handles multiple configurations for same URL', async () => {\n      const mockAxios = createUserMockAxios();\n      \n      // Initial configuration\n      mockAxios.__set('http://api.com', { version: 1 }, 200);\n      let response = await mockAxios({ url: 'http://api.com' });\n      expect(response.data.version).toBe(1);\n      \n      // Override configuration\n      mockAxios.__set('http://api.com', { version: 2 }, 201);\n      response = await mockAxios({ url: 'http://api.com' });\n      expect(response.data.version).toBe(2);\n      expect(response.status).toBe(201);\n    });\n    \n    test('maintains isolation between different mock instances', async () => {\n      const mockAxios1 = createUserMockAxios();\n      const mockAxios2 = createUserMockAxios();\n      \n      mockAxios1.__set('http://shared.com', { instance: 1 });\n      mockAxios2.__set('http://shared.com', { instance: 2 });\n      \n      const response1 = await mockAxios1({ url: 'http://shared.com' });\n      const response2 = await mockAxios2({ url: 'http://shared.com' });\n      \n      expect(response1.data.instance).toBe(1);\n      expect(response2.data.instance).toBe(2);\n    });\n    \n    test('matches exact implementation provided by user', () => {\n      const mockAxios = createUserMockAxios();\n      \n      // Verify it follows the exact pattern from user's code\n      expect(typeof mockAxios).toBe('function');\n      expect(typeof mockAxios.__set).toBe('function');\n      \n      // Test the __set signature matches: (url, data, status = 200, reject = false)\n      mockAxios.__set('http://test.com', { test: true });\n      mockAxios.__set('http://test2.com', { test: true }, 201);\n      mockAxios.__set('http://test3.com', { test: true }, 202, true);\n      \n      // Should not throw errors with these configurations\n      expect(true).toBe(true);\n    });\n  });\n  \n  describe('createSimpleMockAxios', () => {\n    \n    test('creates basic mock axios without configuration', async () => {\n      const mockAxios = createSimpleMockAxios();\n      \n      // Verify basic functionality\n      expect(typeof mockAxios.get).toBe('function');\n      expect(typeof mockAxios.post).toBe('function');\n      \n      const response = await mockAxios.get('/api/simple');\n      expect(response.status).toBe(200);\n      expect(response.data).toEqual({});\n    });\n    \n    test('provides same interface as configurable version', async () => {\n      const simpleMock = createSimpleMockAxios();\n      const configurableMock = createMockAxios();\n      \n      // Both should have the same method signatures\n      expect(Object.keys(simpleMock).sort()).toEqual(Object.keys(configurableMock).sort());\n    });\n  });\n  \n  describe('Performance and Reliability', () => {\n    \n    test('mock responses resolve immediately', async () => {\n      const mockAxios = createMockAxios();\n      const startTime = Date.now();\n      \n      await mockAxios.get('/api/performance-test');\n      \n      const duration = Date.now() - startTime;\n      // Mock requests should complete in well under 100ms\n      expect(duration).toBeLessThan(100);\n    });\n    \n    test('handles concurrent requests correctly', async () => {\n      const mockAxios = createMockAxios();\n      \n      // Create multiple concurrent requests\n      const requests = Array(10).fill().map((_, i) => \n        mockAxios.get(`/api/concurrent/${i}`)\n      );\n      \n      const responses = await Promise.all(requests);\n      \n      // All requests should succeed with consistent responses\n      expect(responses).toHaveLength(10);\n      responses.forEach(response => {\n        expect(response.status).toBe(200);\n        expect(response.data).toEqual({});\n      });\n    });\n    \n    test('maintains state isolation between instances', async () => {\n      const mockAxios1 = createMockAxios({ defaultResponse: { instance: 1 } });\n      const mockAxios2 = createMockAxios({ defaultResponse: { instance: 2 } });\n      \n      const response1 = await mockAxios1.get('/api/test');\n      const response2 = await mockAxios2.get('/api/test');\n      \n      // Each instance should maintain its own configuration\n      expect(response1.data).toEqual({ instance: 1 });\n      expect(response2.data).toEqual({ instance: 2 });\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}