b4dd0c3dc9422a3938086dab00cd2528
/**
 * Environment Management Utilities - TypeScript ES Module Implementation
 *
 * This module provides utilities specifically for managing test environments,
 * including environment variable manipulation and test isolation. These utilities
 * help create isolated, predictable test environments without side effects.
 *
 * Design philosophy:
 * - Environment isolation to prevent test interference
 * - Predictable test conditions with known values
 * - Easy setup and teardown of test environments
 * - Simple, focused functionality for environment management
 */
// Import environment management utilities using ES module syntax
import { defaultEnv, setTestEnv, saveEnv, restoreEnv, attachMockSpies, makeLoggedMock, createScheduleMock, createQerrorsMock, createAxiosMock, resetMocks, initSearchTest } from '../utils/testEnv.js';
import { setOfflineMode, isOfflineMode, getAxios, getQerrors, getEnvironmentState, createEnvironmentAdapters, clearOfflineCache } from '../utils/offlineMode.js';
import { testHelpers } from '../utils/testHelpers.js';
// Create testEnv object from individual functions
const testEnv = {
    defaultEnv,
    setTestEnv,
    saveEnv,
    restoreEnv,
    attachMockSpies,
    makeLoggedMock,
    createScheduleMock,
    createQerrorsMock,
    createAxiosMock,
    resetMocks,
    initSearchTest
};
// Create offlineMode object from individual functions
const offlineMode = {
    setOfflineMode,
    isOfflineMode,
    getAxios,
    getQerrors,
    getEnvironmentState,
    createEnvironmentAdapters,
    clearOfflineCache
};
// Export the core utilities that our TypeScript index needs
export { testEnv, // environment variable management and test isolation
offlineMode, // offline/online mode utility with automatic switching
testHelpers // advanced testing utilities for module reloading and mocking
 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvZW52VXRpbHMudHMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztHQVlHO0FBRUgsaUVBQWlFO0FBQ2pFLE9BQU8sRUFDTCxVQUFVLEVBQ1YsVUFBVSxFQUNWLE9BQU8sRUFDUCxVQUFVLEVBQ1YsZUFBZSxFQUNmLGNBQWMsRUFDZCxrQkFBa0IsRUFDbEIsaUJBQWlCLEVBQ2pCLGVBQWUsRUFDZixVQUFVLEVBQ1YsY0FBYyxFQUNmLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUNMLGNBQWMsRUFDZCxhQUFhLEVBQ2IsUUFBUSxFQUNSLFVBQVUsRUFDVixtQkFBbUIsRUFDbkIseUJBQXlCLEVBQ3pCLGlCQUFpQixFQUNsQixNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUV0RCxrREFBa0Q7QUFDbEQsTUFBTSxPQUFPLEdBQUc7SUFDZCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsZUFBZTtJQUNmLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixVQUFVO0lBQ1YsY0FBYztDQUNmLENBQUM7QUFFRixzREFBc0Q7QUFDdEQsTUFBTSxXQUFXLEdBQUc7SUFDbEIsY0FBYztJQUNkLGFBQWE7SUFDYixRQUFRO0lBQ1IsVUFBVTtJQUNWLG1CQUFtQjtJQUNuQix5QkFBeUI7SUFDekIsaUJBQWlCO0NBQ2xCLENBQUM7QUFFRiw0REFBNEQ7QUFDNUQsT0FBTyxFQUNMLE9BQU8sRUFBTSxxREFBcUQ7QUFDbEUsV0FBVyxFQUFFLHVEQUF1RDtBQUNwRSxXQUFXLENBQUUsOERBQThEO0VBQzVFLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvZW52VXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFbnZpcm9ubWVudCBNYW5hZ2VtZW50IFV0aWxpdGllcyAtIFR5cGVTY3JpcHQgRVMgTW9kdWxlIEltcGxlbWVudGF0aW9uXG4gKiBcbiAqIFRoaXMgbW9kdWxlIHByb3ZpZGVzIHV0aWxpdGllcyBzcGVjaWZpY2FsbHkgZm9yIG1hbmFnaW5nIHRlc3QgZW52aXJvbm1lbnRzLFxuICogaW5jbHVkaW5nIGVudmlyb25tZW50IHZhcmlhYmxlIG1hbmlwdWxhdGlvbiBhbmQgdGVzdCBpc29sYXRpb24uIFRoZXNlIHV0aWxpdGllc1xuICogaGVscCBjcmVhdGUgaXNvbGF0ZWQsIHByZWRpY3RhYmxlIHRlc3QgZW52aXJvbm1lbnRzIHdpdGhvdXQgc2lkZSBlZmZlY3RzLlxuICogXG4gKiBEZXNpZ24gcGhpbG9zb3BoeTpcbiAqIC0gRW52aXJvbm1lbnQgaXNvbGF0aW9uIHRvIHByZXZlbnQgdGVzdCBpbnRlcmZlcmVuY2VcbiAqIC0gUHJlZGljdGFibGUgdGVzdCBjb25kaXRpb25zIHdpdGgga25vd24gdmFsdWVzXG4gKiAtIEVhc3kgc2V0dXAgYW5kIHRlYXJkb3duIG9mIHRlc3QgZW52aXJvbm1lbnRzXG4gKiAtIFNpbXBsZSwgZm9jdXNlZCBmdW5jdGlvbmFsaXR5IGZvciBlbnZpcm9ubWVudCBtYW5hZ2VtZW50XG4gKi9cblxuLy8gSW1wb3J0IGVudmlyb25tZW50IG1hbmFnZW1lbnQgdXRpbGl0aWVzIHVzaW5nIEVTIG1vZHVsZSBzeW50YXhcbmltcG9ydCB7XG4gIGRlZmF1bHRFbnYsXG4gIHNldFRlc3RFbnYsXG4gIHNhdmVFbnYsXG4gIHJlc3RvcmVFbnYsXG4gIGF0dGFjaE1vY2tTcGllcyxcbiAgbWFrZUxvZ2dlZE1vY2ssXG4gIGNyZWF0ZVNjaGVkdWxlTW9jayxcbiAgY3JlYXRlUWVycm9yc01vY2ssXG4gIGNyZWF0ZUF4aW9zTW9jayxcbiAgcmVzZXRNb2NrcyxcbiAgaW5pdFNlYXJjaFRlc3Rcbn0gZnJvbSAnLi4vdXRpbHMvdGVzdEVudi5qcyc7XG5pbXBvcnQgeyBcbiAgc2V0T2ZmbGluZU1vZGUsXG4gIGlzT2ZmbGluZU1vZGUsXG4gIGdldEF4aW9zLFxuICBnZXRRZXJyb3JzLFxuICBnZXRFbnZpcm9ubWVudFN0YXRlLFxuICBjcmVhdGVFbnZpcm9ubWVudEFkYXB0ZXJzLFxuICBjbGVhck9mZmxpbmVDYWNoZVxufSBmcm9tICcuLi91dGlscy9vZmZsaW5lTW9kZS5qcyc7XG5pbXBvcnQgeyB0ZXN0SGVscGVycyB9IGZyb20gJy4uL3V0aWxzL3Rlc3RIZWxwZXJzLmpzJztcblxuLy8gQ3JlYXRlIHRlc3RFbnYgb2JqZWN0IGZyb20gaW5kaXZpZHVhbCBmdW5jdGlvbnNcbmNvbnN0IHRlc3RFbnYgPSB7XG4gIGRlZmF1bHRFbnYsXG4gIHNldFRlc3RFbnYsXG4gIHNhdmVFbnYsXG4gIHJlc3RvcmVFbnYsXG4gIGF0dGFjaE1vY2tTcGllcyxcbiAgbWFrZUxvZ2dlZE1vY2ssXG4gIGNyZWF0ZVNjaGVkdWxlTW9jayxcbiAgY3JlYXRlUWVycm9yc01vY2ssXG4gIGNyZWF0ZUF4aW9zTW9jayxcbiAgcmVzZXRNb2NrcyxcbiAgaW5pdFNlYXJjaFRlc3Rcbn07XG5cbi8vIENyZWF0ZSBvZmZsaW5lTW9kZSBvYmplY3QgZnJvbSBpbmRpdmlkdWFsIGZ1bmN0aW9uc1xuY29uc3Qgb2ZmbGluZU1vZGUgPSB7XG4gIHNldE9mZmxpbmVNb2RlLFxuICBpc09mZmxpbmVNb2RlLFxuICBnZXRBeGlvcyxcbiAgZ2V0UWVycm9ycyxcbiAgZ2V0RW52aXJvbm1lbnRTdGF0ZSxcbiAgY3JlYXRlRW52aXJvbm1lbnRBZGFwdGVycyxcbiAgY2xlYXJPZmZsaW5lQ2FjaGVcbn07XG5cbi8vIEV4cG9ydCB0aGUgY29yZSB1dGlsaXRpZXMgdGhhdCBvdXIgVHlwZVNjcmlwdCBpbmRleCBuZWVkc1xuZXhwb3J0IHtcbiAgdGVzdEVudiwgICAgIC8vIGVudmlyb25tZW50IHZhcmlhYmxlIG1hbmFnZW1lbnQgYW5kIHRlc3QgaXNvbGF0aW9uXG4gIG9mZmxpbmVNb2RlLCAvLyBvZmZsaW5lL29ubGluZSBtb2RlIHV0aWxpdHkgd2l0aCBhdXRvbWF0aWMgc3dpdGNoaW5nXG4gIHRlc3RIZWxwZXJzICAvLyBhZHZhbmNlZCB0ZXN0aW5nIHV0aWxpdGllcyBmb3IgbW9kdWxlIHJlbG9hZGluZyBhbmQgbW9ja2luZ1xufTsiXSwidmVyc2lvbiI6M30=