9c89bce63b5313156b4a4cf27321b71a
"use strict";
/**
 * Spy Functions - Method Replacement and Monitoring
 *
 * This module provides the ability to spy on existing object methods,
 * replacing them temporarily while tracking calls and providing restoration.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.spyOn = spyOn;
exports.restoreAllSpies = restoreAllSpies;
exports.restoreAllSpiesGlobally = restoreAllSpiesGlobally;
exports.spyOnWithGlobalTracking = spyOnWithGlobalTracking;
const mockFunction_js_1 = require("./mockFunction.js");
// Registry to track all active spies for cleanup
const activeSpies = new WeakMap();
/**
 * Create a spy on an object method
 * Replaces the method with a mock while preserving the original for restoration
 */
function spyOn(object, methodName) {
    const originalMethod = object[methodName];
    // Validate that we're spying on a function
    if (typeof originalMethod !== 'function') {
        throw new Error(`Cannot spy on property '${String(methodName)}' because it is not a function; received ${typeof originalMethod}`);
    }
    // Create a mock function that calls the original by default
    const mockFn = (0, mockFunction_js_1.fn)(function (...args) {
        return originalMethod.apply(this, args);
    });
    // Store original method for restoration
    if (!activeSpies.has(object)) {
        activeSpies.set(object, new Map());
    }
    const objectSpies = activeSpies.get(object);
    objectSpies.set(methodName, originalMethod);
    // Replace the method on the object
    object[methodName] = mockFn;
    // Create spy interface with restore capability
    const spy = Object.assign(mockFn, {
        mockRestore() {
            // Restore the original method
            object[methodName] = originalMethod;
            // Remove from active spies registry
            const objectSpies = activeSpies.get(object);
            if (objectSpies) {
                objectSpies.delete(methodName);
                if (objectSpies.size === 0) {
                    activeSpies.delete(object);
                }
            }
        }
    });
    return spy;
}
/**
 * Restore all spies on an object
 * Useful for cleanup in test teardown
 */
function restoreAllSpies(object) {
    const objectSpies = activeSpies.get(object);
    if (!objectSpies)
        return;
    for (const [methodName, originalMethod] of objectSpies.entries()) {
        object[methodName] = originalMethod;
    }
    activeSpies.delete(object);
}
/**
 * Restore all active spies across all objects
 * Useful for global test cleanup
 */
function restoreAllSpiesGlobally() {
    // We need to collect all objects first since restoring will modify the WeakMap
    const objectsToRestore = [];
    // Note: WeakMap doesn't have iteration, so we maintain a separate registry
    // This is a limitation - we'll track objects in a separate Set for cleanup
    globalSpyRegistry.forEach((spyMap, object) => {
        for (const [methodName, originalMethod] of spyMap.entries()) {
            object[methodName] = originalMethod;
        }
    });
    globalSpyRegistry.clear();
}
// Separate global registry for cleanup (since WeakMap isn't iterable)
const globalSpyRegistry = new Map();
/**
 * Enhanced spyOn that also registers in global cleanup registry
 */
function spyOnWithGlobalTracking(object, methodName) {
    const spy = spyOn(object, methodName);
    // Also register in global registry for cleanup
    if (!globalSpyRegistry.has(object)) {
        globalSpyRegistry.set(object, new Map());
    }
    const objectSpies = globalSpyRegistry.get(object);
    objectSpies.set(methodName, object[methodName]);
    // Override restore to also clean up global registry
    const originalRestore = spy.mockRestore;
    spy.mockRestore = function () {
        originalRestore.call(this);
        // Clean up global registry
        const globalObjectSpies = globalSpyRegistry.get(object);
        if (globalObjectSpies) {
            globalObjectSpies.delete(methodName);
            if (globalObjectSpies.size === 0) {
                globalSpyRegistry.delete(object);
            }
        }
    };
    return spy;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,