{"file":"/home/runner/workspace/utils/esm-globals.ts","mappings":";;;;;;AAQA,0CAMC;AAED,wCAEC;AAMD,8CAMC;AAED,4CAWC;AA3CD,6BAAoC;AACpC,+BAA+B;AAC/B,gDAAwB;AAExB,8CAA8C;AAC9C,MAAM,iBAAiB,GAAG,OAAO,IAAI,KAAK,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,CAAC;AAEzF,oFAAoF;AACpF,SAAgB,eAAe;IAC7B,IAAI,iBAAiB,EAAE,CAAC;QACtB,OAAO,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,sBAAsB,CAAC,CAAC;IAC7D,CAAC;IACD,2DAA2D;IAC3D,OAAO,IAAA,mBAAa,EAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;AACrD,CAAC;AAED,SAAgB,cAAc;IAC5B,OAAO,IAAA,cAAO,EAAC,eAAe,EAAE,CAAC,CAAC;AACpC,CAAC;AAED,mCAAmC;AACtB,QAAA,UAAU,GAAG,eAAe,EAAE,CAAC;AAC/B,QAAA,SAAS,GAAG,cAAc,EAAE,CAAC;AAE1C,SAAgB,iBAAiB,CAAC,aAAqB;IACrD,IAAI,iBAAiB,EAAE,CAAC;QACtB,wCAAwC;QACxC,OAAO,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,gBAAgB,CAAC,CAAC;IACvD,CAAC;IACD,OAAO,IAAA,mBAAa,EAAC,aAAa,CAAC,CAAC;AACtC,CAAC;AAED,SAAgB,gBAAgB,CAAC,aAAqB;IACpD,IAAI,iBAAiB,EAAE,CAAC;QACtB,wDAAwD;QACxD,OAAO,OAAO,CAAC,GAAG,EAAE,CAAC;IACvB,CAAC;IACD,IAAI,CAAC;QACH,OAAO,IAAA,cAAO,EAAC,IAAA,mBAAa,EAAC,aAAa,CAAC,CAAC,CAAC;IAC/C,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,6CAA6C;QAC7C,OAAO,OAAO,CAAC,GAAG,EAAE,CAAC;IACvB,CAAC;AACH,CAAC","names":[],"sources":["/home/runner/workspace/utils/esm-globals.ts"],"sourcesContent":["import { fileURLToPath } from 'url';\nimport { dirname } from 'path';\nimport path from 'path';\n\n// Detect if we're running in Jest environment\nconst isJestEnvironment = typeof jest !== 'undefined' || process.env.NODE_ENV === 'test';\n\n// Export functions instead of direct variables to avoid top-level import.meta usage\nexport function getThisFilename() {\n  if (isJestEnvironment) {\n    return path.resolve(process.cwd(), 'utils/esm-globals.ts');\n  }\n  // Use eval to hide import.meta from Jest's static analysis\n  return fileURLToPath((0, eval)('import.meta.url'));\n}\n\nexport function getThisDirname() {\n  return dirname(getThisFilename());\n}\n\n// Legacy exports for compatibility\nexport const __filename = getThisFilename();\nexport const __dirname = getThisDirname();\n\nexport function getModuleFilename(importMetaUrl: string) {\n  if (isJestEnvironment) {\n    // In Jest, return a reasonable fallback\n    return path.resolve(process.cwd(), 'mock-module.ts');\n  }\n  return fileURLToPath(importMetaUrl);\n}\n\nexport function getModuleDirname(importMetaUrl: string) {\n  if (isJestEnvironment) {\n    // In Jest, return current working directory as fallback\n    return process.cwd();\n  }\n  try {\n    return dirname(fileURLToPath(importMetaUrl));\n  } catch (error) {\n    // Fallback if there's any issue with the URL\n    return process.cwd();\n  }\n}"],"version":3}