ec6f77d84a06a9192e22b9cbb906de4f
"use strict";
/**
 * Mock Management System for Consistent API and Service Mocking - TypeScript Implementation
 *
 * This class focuses solely on mock management and lifecycle concerns.
 * It provides centralized mock management that eliminates duplicate patterns.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockManager = void 0;
const logUtils_js_1 = require("../../lib/logUtils.js");
/**
 * Mock Management System for Consistent API and Service Mocking
 *
 * This class provides centralized mock management that eliminates duplicate
 * mock patterns across test files. It uses qtests utilities for consistent
 * mocking while providing advanced mock configuration capabilities.
 */
class MockManager {
    constructor() {
        this.mocks = new Map();
        this.restorations = new Map();
    }
    /**
     * Sets up API client mocks using qtests stubMethod utility
     */
    setupApiClientMocks(customResponses = {}) {
        (0, logUtils_js_1.logStart)('MockManager.setupApiClientMocks', customResponses);
        try {
            // Default API responses
            const defaultResponses = {
                get: { status: 200, data: {} },
                post: { status: 201, data: { id: 1 } },
                put: { status: 200, data: { updated: true } },
                delete: { status: 204, data: null }
            };
            const responses = { ...defaultResponses, ...customResponses };
            // Create mock API client object
            const mockApiClient = {
                get: () => Promise.resolve(responses.get),
                post: () => Promise.resolve(responses.post),
                put: () => Promise.resolve(responses.put),
                delete: () => Promise.resolve(responses.delete),
                request: () => Promise.resolve(responses.get)
            };
            this.mocks.set('apiClient', mockApiClient);
            // If we have a global HTTP client to stub, stub it
            if (typeof globalThis.fetch === 'function') {
                const originalFetch = globalThis.fetch;
                globalThis.fetch = (url, options = {}) => {
                    const method = (options.method || 'GET').toLowerCase();
                    const response = responses[method] || responses.get;
                    return Promise.resolve({
                        ok: response.status < 400,
                        status: response.status,
                        json: () => Promise.resolve(response.data),
                        text: () => Promise.resolve(JSON.stringify(response.data))
                    });
                };
                this.restorations.set('fetch', () => {
                    globalThis.fetch = originalFetch;
                });
            }
            (0, logUtils_js_1.logReturn)('MockManager.setupApiClientMocks', 'completed');
        }
        catch (error) {
            (0, logUtils_js_1.logReturn)('MockManager.setupApiClientMocks', `error: ${error.message}`);
            throw error;
        }
    }
    /**
     * Sets up console and notification mocks using qtests utilities
     */
    setupConsoleMocks() {
        (0, logUtils_js_1.logStart)('MockManager.setupConsoleMocks');
        try {
            // Dynamic import for mockConsole
            const mockConsole = async () => {
                const module = await Promise.resolve().then(() => __importStar(require('../mockConsole.js')));
                return module.mockConsole;
            };
            // Create console mocks - placeholder for now
            const consoleMocks = {
                log: () => { },
                error: () => { },
                warn: () => { },
                restore: () => { }
            };
            this.mocks.set('console', consoleMocks);
            this.restorations.set('console', consoleMocks.restore);
            (0, logUtils_js_1.logReturn)('MockManager.setupConsoleMocks', consoleMocks);
            return consoleMocks;
        }
        catch (error) {
            (0, logUtils_js_1.logReturn)('MockManager.setupConsoleMocks', `error: ${error.message}`);
            throw error;
        }
    }
    /**
     * Gets a specific mock by name
     */
    getMock(mockName) {
        (0, logUtils_js_1.logStart)('MockManager.getMock', mockName);
        const mock = this.mocks.get(mockName);
        if (mock) {
            (0, logUtils_js_1.logReturn)('MockManager.getMock', 'found');
            return mock;
        }
        else {
            (0, logUtils_js_1.logReturn)('MockManager.getMock', 'not found');
            return null;
        }
    }
    /**
     * Clears all mocks and restores original functions
     */
    clearAll() {
        (0, logUtils_js_1.logStart)('MockManager.clearAll');
        try {
            // Restore all mocked functions
            this.restorations.forEach((restore, mockName) => {
                try {
                    restore();
                }
                catch (error) {
                    // Ignore restoration errors - function may already be restored
                }
            });
            // Clear all stored mocks and restorations
            this.mocks.clear();
            this.restorations.clear();
            (0, logUtils_js_1.logReturn)('MockManager.clearAll', 'completed');
        }
        catch (error) {
            (0, logUtils_js_1.logReturn)('MockManager.clearAll', `error: ${error.message}`);
            throw error;
        }
    }
    /**
     * Sets up environment variable mocks
     */
    setupEnvironmentMocks(envVars = {}) {
        (0, logUtils_js_1.logStart)('MockManager.setupEnvironmentMocks', envVars);
        try {
            const originalEnv = {};
            // Backup and set environment variables
            Object.entries(envVars).forEach(([key, value]) => {
                originalEnv[key] = process.env[key];
                process.env[key] = value;
            });
            // Create restoration function
            const restore = () => {
                Object.entries(originalEnv).forEach(([key, value]) => {
                    if (value === undefined) {
                        delete process.env[key];
                    }
                    else {
                        process.env[key] = value;
                    }
                });
            };
            this.mocks.set('environment', envVars);
            this.restorations.set('environment', restore);
            (0, logUtils_js_1.logReturn)('MockManager.setupEnvironmentMocks', restore);
            return restore;
        }
        catch (error) {
            (0, logUtils_js_1.logReturn)('MockManager.setupEnvironmentMocks', `error: ${error.message}`);
            throw error;
        }
    }
    /**
     * Sets up HTTP response mocks
     */
    setupHttpMocks(responses = []) {
        (0, logUtils_js_1.logStart)('MockManager.setupHttpMocks', responses);
        try {
            // Simple HTTP mock setup
            const httpMocks = {
                responses: responses,
                getResponse: (index) => responses[index] || { status: 404, data: null }
            };
            this.mocks.set('http', httpMocks);
            (0, logUtils_js_1.logReturn)('MockManager.setupHttpMocks', 'completed');
        }
        catch (error) {
            (0, logUtils_js_1.logReturn)('MockManager.setupHttpMocks', `error: ${error.message}`);
            throw error;
        }
    }
}
exports.MockManager = MockManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,