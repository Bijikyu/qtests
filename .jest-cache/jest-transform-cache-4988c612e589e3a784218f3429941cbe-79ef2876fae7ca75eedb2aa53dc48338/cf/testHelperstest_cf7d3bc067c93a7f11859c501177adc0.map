{"version":3,"names":["mod","require","describe","test","expect","stubQerrors","toBeDefined","reload","moduleReloadLock","withMockConsole","createJsonRes","createRes","generateKey","backupEnvVars","restoreEnvVars","withSavedEnv"],"sources":["testHelpers.test.js"],"sourcesContent":["// Auto-generated unit test for testHelpers.js - optimized for speed\nconst mod = require('./testHelpers.js');\n\ndescribe('testHelpers.js', () => {\n  test('stubQerrors works', async () => {\n    // Fast assertion - TODO: implement specific test logic\n    expect(typeof mod.stubQerrors).toBeDefined();\n  });\n  test('reload works', async () => {\n    // Fast assertion - TODO: implement specific test logic\n    expect(typeof mod.reload).toBeDefined();\n  });\n  test('moduleReloadLock works', async () => {\n    // Fast assertion - TODO: implement specific test logic\n    expect(typeof mod.moduleReloadLock).toBeDefined();\n  });\n  test('withMockConsole works', async () => {\n    // Fast assertion - TODO: implement specific test logic\n    expect(typeof mod.withMockConsole).toBeDefined();\n  });\n  test('createJsonRes works', async () => {\n    // Fast assertion - TODO: implement specific test logic\n    expect(typeof mod.createJsonRes).toBeDefined();\n  });\n  test('createRes works', async () => {\n    // Fast assertion - TODO: implement specific test logic\n    expect(typeof mod.createRes).toBeDefined();\n  });\n  test('generateKey works', async () => {\n    // Fast assertion - TODO: implement specific test logic\n    expect(typeof mod.generateKey).toBeDefined();\n  });\n  test('backupEnvVars works', async () => {\n    // Fast assertion - TODO: implement specific test logic\n    expect(typeof mod.backupEnvVars).toBeDefined();\n  });\n  test('restoreEnvVars works', async () => {\n    // Fast assertion - TODO: implement specific test logic\n    expect(typeof mod.restoreEnvVars).toBeDefined();\n  });\n  test('withSavedEnv works', async () => {\n    // Fast assertion - TODO: implement specific test logic\n    expect(typeof mod.withSavedEnv).toBeDefined();\n  });\n});\n"],"mappings":"AAAA;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AAEvCC,QAAQ,CAAC,gBAAgB,EAAE,MAAM;EAC/BC,IAAI,CAAC,mBAAmB,EAAE,YAAY;IACpC;IACAC,MAAM,CAAC,OAAOJ,GAAG,CAACK,WAAW,CAAC,CAACC,WAAW,CAAC,CAAC;EAC9C,CAAC,CAAC;EACFH,IAAI,CAAC,cAAc,EAAE,YAAY;IAC/B;IACAC,MAAM,CAAC,OAAOJ,GAAG,CAACO,MAAM,CAAC,CAACD,WAAW,CAAC,CAAC;EACzC,CAAC,CAAC;EACFH,IAAI,CAAC,wBAAwB,EAAE,YAAY;IACzC;IACAC,MAAM,CAAC,OAAOJ,GAAG,CAACQ,gBAAgB,CAAC,CAACF,WAAW,CAAC,CAAC;EACnD,CAAC,CAAC;EACFH,IAAI,CAAC,uBAAuB,EAAE,YAAY;IACxC;IACAC,MAAM,CAAC,OAAOJ,GAAG,CAACS,eAAe,CAAC,CAACH,WAAW,CAAC,CAAC;EAClD,CAAC,CAAC;EACFH,IAAI,CAAC,qBAAqB,EAAE,YAAY;IACtC;IACAC,MAAM,CAAC,OAAOJ,GAAG,CAACU,aAAa,CAAC,CAACJ,WAAW,CAAC,CAAC;EAChD,CAAC,CAAC;EACFH,IAAI,CAAC,iBAAiB,EAAE,YAAY;IAClC;IACAC,MAAM,CAAC,OAAOJ,GAAG,CAACW,SAAS,CAAC,CAACL,WAAW,CAAC,CAAC;EAC5C,CAAC,CAAC;EACFH,IAAI,CAAC,mBAAmB,EAAE,YAAY;IACpC;IACAC,MAAM,CAAC,OAAOJ,GAAG,CAACY,WAAW,CAAC,CAACN,WAAW,CAAC,CAAC;EAC9C,CAAC,CAAC;EACFH,IAAI,CAAC,qBAAqB,EAAE,YAAY;IACtC;IACAC,MAAM,CAAC,OAAOJ,GAAG,CAACa,aAAa,CAAC,CAACP,WAAW,CAAC,CAAC;EAChD,CAAC,CAAC;EACFH,IAAI,CAAC,sBAAsB,EAAE,YAAY;IACvC;IACAC,MAAM,CAAC,OAAOJ,GAAG,CAACc,cAAc,CAAC,CAACR,WAAW,CAAC,CAAC;EACjD,CAAC,CAAC;EACFH,IAAI,CAAC,oBAAoB,EAAE,YAAY;IACrC;IACAC,MAAM,CAAC,OAAOJ,GAAG,CAACe,YAAY,CAAC,CAACT,WAAW,CAAC,CAAC;EAC/C,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}