abf84f04e18cca02525bb5c55de528f3
// Auto-generated unit test for testHelpers.js - optimized for speed
const mod = require('./testHelpers.js');
describe('testHelpers.js', () => {
  test('stubQerrors works', async () => {
    // Fast assertion - TODO: implement specific test logic
    expect(typeof mod.stubQerrors).toBeDefined();
  });
  test('reload works', async () => {
    // Fast assertion - TODO: implement specific test logic
    expect(typeof mod.reload).toBeDefined();
  });
  test('moduleReloadLock works', async () => {
    // Fast assertion - TODO: implement specific test logic
    expect(typeof mod.moduleReloadLock).toBeDefined();
  });
  test('withMockConsole works', async () => {
    // Fast assertion - TODO: implement specific test logic
    expect(typeof mod.withMockConsole).toBeDefined();
  });
  test('createJsonRes works', async () => {
    // Fast assertion - TODO: implement specific test logic
    expect(typeof mod.createJsonRes).toBeDefined();
  });
  test('createRes works', async () => {
    // Fast assertion - TODO: implement specific test logic
    expect(typeof mod.createRes).toBeDefined();
  });
  test('generateKey works', async () => {
    // Fast assertion - TODO: implement specific test logic
    expect(typeof mod.generateKey).toBeDefined();
  });
  test('backupEnvVars works', async () => {
    // Fast assertion - TODO: implement specific test logic
    expect(typeof mod.backupEnvVars).toBeDefined();
  });
  test('restoreEnvVars works', async () => {
    // Fast assertion - TODO: implement specific test logic
    expect(typeof mod.restoreEnvVars).toBeDefined();
  });
  test('withSavedEnv works', async () => {
    // Fast assertion - TODO: implement specific test logic
    expect(typeof mod.withSavedEnv).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2QiLCJyZXF1aXJlIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiZXhwZWN0Iiwic3R1YlFlcnJvcnMiLCJ0b0JlRGVmaW5lZCIsInJlbG9hZCIsIm1vZHVsZVJlbG9hZExvY2siLCJ3aXRoTW9ja0NvbnNvbGUiLCJjcmVhdGVKc29uUmVzIiwiY3JlYXRlUmVzIiwiZ2VuZXJhdGVLZXkiLCJiYWNrdXBFbnZWYXJzIiwicmVzdG9yZUVudlZhcnMiLCJ3aXRoU2F2ZWRFbnYiXSwic291cmNlcyI6WyJ0ZXN0SGVscGVycy50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEF1dG8tZ2VuZXJhdGVkIHVuaXQgdGVzdCBmb3IgdGVzdEhlbHBlcnMuanMgLSBvcHRpbWl6ZWQgZm9yIHNwZWVkXG5jb25zdCBtb2QgPSByZXF1aXJlKCcuL3Rlc3RIZWxwZXJzLmpzJyk7XG5cbmRlc2NyaWJlKCd0ZXN0SGVscGVycy5qcycsICgpID0+IHtcbiAgdGVzdCgnc3R1YlFlcnJvcnMgd29ya3MnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gRmFzdCBhc3NlcnRpb24gLSBUT0RPOiBpbXBsZW1lbnQgc3BlY2lmaWMgdGVzdCBsb2dpY1xuICAgIGV4cGVjdCh0eXBlb2YgbW9kLnN0dWJRZXJyb3JzKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcbiAgdGVzdCgncmVsb2FkIHdvcmtzJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIEZhc3QgYXNzZXJ0aW9uIC0gVE9ETzogaW1wbGVtZW50IHNwZWNpZmljIHRlc3QgbG9naWNcbiAgICBleHBlY3QodHlwZW9mIG1vZC5yZWxvYWQpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuICB0ZXN0KCdtb2R1bGVSZWxvYWRMb2NrIHdvcmtzJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIEZhc3QgYXNzZXJ0aW9uIC0gVE9ETzogaW1wbGVtZW50IHNwZWNpZmljIHRlc3QgbG9naWNcbiAgICBleHBlY3QodHlwZW9mIG1vZC5tb2R1bGVSZWxvYWRMb2NrKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcbiAgdGVzdCgnd2l0aE1vY2tDb25zb2xlIHdvcmtzJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIEZhc3QgYXNzZXJ0aW9uIC0gVE9ETzogaW1wbGVtZW50IHNwZWNpZmljIHRlc3QgbG9naWNcbiAgICBleHBlY3QodHlwZW9mIG1vZC53aXRoTW9ja0NvbnNvbGUpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuICB0ZXN0KCdjcmVhdGVKc29uUmVzIHdvcmtzJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIEZhc3QgYXNzZXJ0aW9uIC0gVE9ETzogaW1wbGVtZW50IHNwZWNpZmljIHRlc3QgbG9naWNcbiAgICBleHBlY3QodHlwZW9mIG1vZC5jcmVhdGVKc29uUmVzKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcbiAgdGVzdCgnY3JlYXRlUmVzIHdvcmtzJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIEZhc3QgYXNzZXJ0aW9uIC0gVE9ETzogaW1wbGVtZW50IHNwZWNpZmljIHRlc3QgbG9naWNcbiAgICBleHBlY3QodHlwZW9mIG1vZC5jcmVhdGVSZXMpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuICB0ZXN0KCdnZW5lcmF0ZUtleSB3b3JrcycsIGFzeW5jICgpID0+IHtcbiAgICAvLyBGYXN0IGFzc2VydGlvbiAtIFRPRE86IGltcGxlbWVudCBzcGVjaWZpYyB0ZXN0IGxvZ2ljXG4gICAgZXhwZWN0KHR5cGVvZiBtb2QuZ2VuZXJhdGVLZXkpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuICB0ZXN0KCdiYWNrdXBFbnZWYXJzIHdvcmtzJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIEZhc3QgYXNzZXJ0aW9uIC0gVE9ETzogaW1wbGVtZW50IHNwZWNpZmljIHRlc3QgbG9naWNcbiAgICBleHBlY3QodHlwZW9mIG1vZC5iYWNrdXBFbnZWYXJzKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcbiAgdGVzdCgncmVzdG9yZUVudlZhcnMgd29ya3MnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gRmFzdCBhc3NlcnRpb24gLSBUT0RPOiBpbXBsZW1lbnQgc3BlY2lmaWMgdGVzdCBsb2dpY1xuICAgIGV4cGVjdCh0eXBlb2YgbW9kLnJlc3RvcmVFbnZWYXJzKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcbiAgdGVzdCgnd2l0aFNhdmVkRW52IHdvcmtzJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIEZhc3QgYXNzZXJ0aW9uIC0gVE9ETzogaW1wbGVtZW50IHNwZWNpZmljIHRlc3QgbG9naWNcbiAgICBleHBlY3QodHlwZW9mIG1vZC53aXRoU2F2ZWRFbnYpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTUEsR0FBRyxHQUFHQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFFdkNDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNO0VBQy9CQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsWUFBWTtJQUNwQztJQUNBQyxNQUFNLENBQUMsT0FBT0osR0FBRyxDQUFDSyxXQUFXLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7RUFDOUMsQ0FBQyxDQUFDO0VBQ0ZILElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBWTtJQUMvQjtJQUNBQyxNQUFNLENBQUMsT0FBT0osR0FBRyxDQUFDTyxNQUFNLENBQUMsQ0FBQ0QsV0FBVyxDQUFDLENBQUM7RUFDekMsQ0FBQyxDQUFDO0VBQ0ZILElBQUksQ0FBQyx3QkFBd0IsRUFBRSxZQUFZO0lBQ3pDO0lBQ0FDLE1BQU0sQ0FBQyxPQUFPSixHQUFHLENBQUNRLGdCQUFnQixDQUFDLENBQUNGLFdBQVcsQ0FBQyxDQUFDO0VBQ25ELENBQUMsQ0FBQztFQUNGSCxJQUFJLENBQUMsdUJBQXVCLEVBQUUsWUFBWTtJQUN4QztJQUNBQyxNQUFNLENBQUMsT0FBT0osR0FBRyxDQUFDUyxlQUFlLENBQUMsQ0FBQ0gsV0FBVyxDQUFDLENBQUM7RUFDbEQsQ0FBQyxDQUFDO0VBQ0ZILElBQUksQ0FBQyxxQkFBcUIsRUFBRSxZQUFZO0lBQ3RDO0lBQ0FDLE1BQU0sQ0FBQyxPQUFPSixHQUFHLENBQUNVLGFBQWEsQ0FBQyxDQUFDSixXQUFXLENBQUMsQ0FBQztFQUNoRCxDQUFDLENBQUM7RUFDRkgsSUFBSSxDQUFDLGlCQUFpQixFQUFFLFlBQVk7SUFDbEM7SUFDQUMsTUFBTSxDQUFDLE9BQU9KLEdBQUcsQ0FBQ1csU0FBUyxDQUFDLENBQUNMLFdBQVcsQ0FBQyxDQUFDO0VBQzVDLENBQUMsQ0FBQztFQUNGSCxJQUFJLENBQUMsbUJBQW1CLEVBQUUsWUFBWTtJQUNwQztJQUNBQyxNQUFNLENBQUMsT0FBT0osR0FBRyxDQUFDWSxXQUFXLENBQUMsQ0FBQ04sV0FBVyxDQUFDLENBQUM7RUFDOUMsQ0FBQyxDQUFDO0VBQ0ZILElBQUksQ0FBQyxxQkFBcUIsRUFBRSxZQUFZO0lBQ3RDO0lBQ0FDLE1BQU0sQ0FBQyxPQUFPSixHQUFHLENBQUNhLGFBQWEsQ0FBQyxDQUFDUCxXQUFXLENBQUMsQ0FBQztFQUNoRCxDQUFDLENBQUM7RUFDRkgsSUFBSSxDQUFDLHNCQUFzQixFQUFFLFlBQVk7SUFDdkM7SUFDQUMsTUFBTSxDQUFDLE9BQU9KLEdBQUcsQ0FBQ2MsY0FBYyxDQUFDLENBQUNSLFdBQVcsQ0FBQyxDQUFDO0VBQ2pELENBQUMsQ0FBQztFQUNGSCxJQUFJLENBQUMsb0JBQW9CLEVBQUUsWUFBWTtJQUNyQztJQUNBQyxNQUFNLENBQUMsT0FBT0osR0FBRyxDQUFDZSxZQUFZLENBQUMsQ0FBQ1QsV0FBVyxDQUFDLENBQUM7RUFDL0MsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119