aeeb63fbab11c3fe2d5a469e782da030
/**
 * API Key Model
 * 
 * This class focuses solely on API key model functionality and behavior.
 * It extends BaseMockModel with API key-specific methods and properties.
 */

const {
  BaseMockModel
} = require('./baseMockModel');

// Legacy array for backwards compatibility
const mockApiKeys = [];

/**
 * API Key Model Class
 * 
 * Provides Mongoose-compatible API key model for testing scenarios.
 * Includes API key-specific validation and methods.
 */
class ApiKey extends BaseMockModel {
  constructor(data) {
    super(data);
    // Set default values specific to ApiKey
    if (!this.createdAt) this.createdAt = new Date();
    if (!this.isActive) this.isActive = true;
  }

  // Override getCollection to use legacy array for backwards compatibility
  static getCollection() {
    return mockApiKeys;
  }

  // Legacy methods for backward compatibility with existing code
  static findOne(query) {
    console.log(`ApiKey.findOne is running with ${JSON.stringify(query)}`);
    const result = mockApiKeys.find(k => k.key === query.key) || null;
    console.log(`ApiKey.findOne is returning ${result ? 'key' : 'null'}`);
    return Promise.resolve(result);
  }
  static findOneAndDelete(query) {
    console.log(`ApiKey.findOneAndDelete is running with ${JSON.stringify(query)}`);
    const idx = mockApiKeys.findIndex(k => k.key === query.key);
    if (idx === -1) {
      console.log(`ApiKey.findOneAndDelete is returning null`);
      return Promise.resolve(null);
    }
    const deleted = mockApiKeys.splice(idx, 1)[0];
    console.log(`ApiKey.findOneAndDelete is returning deleted key`);
    return Promise.resolve(deleted);
  }
  static findOneAndUpdate(query, update) {
    console.log(`ApiKey.findOneAndUpdate is running with query and update`);
    const key = mockApiKeys.find(k => k.key === query.key);
    if (!key) {
      console.log(`ApiKey.findOneAndUpdate is returning null`);
      return Promise.resolve(null);
    }
    Object.assign(key, update);
    console.log(`ApiKey.findOneAndUpdate is returning updated key`);
    return Promise.resolve(key);
  }
  static find() {
    console.log(`ApiKey.find is running with none`);
    const chain = {
      data: mockApiKeys
    };
    chain.sort = () => chain;
    chain.lean = () => {
      console.log(`ApiKey.find.lean is returning ${chain.data.length} keys`);
      return Promise.resolve(chain.data);
    };
    return chain;
  }
}
module.exports = {
  ApiKey,
  mockApiKeys
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCYXNlTW9ja01vZGVsIiwicmVxdWlyZSIsIm1vY2tBcGlLZXlzIiwiQXBpS2V5IiwiY29uc3RydWN0b3IiLCJkYXRhIiwiY3JlYXRlZEF0IiwiRGF0ZSIsImlzQWN0aXZlIiwiZ2V0Q29sbGVjdGlvbiIsImZpbmRPbmUiLCJxdWVyeSIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwicmVzdWx0IiwiZmluZCIsImsiLCJrZXkiLCJQcm9taXNlIiwicmVzb2x2ZSIsImZpbmRPbmVBbmREZWxldGUiLCJpZHgiLCJmaW5kSW5kZXgiLCJkZWxldGVkIiwic3BsaWNlIiwiZmluZE9uZUFuZFVwZGF0ZSIsInVwZGF0ZSIsIk9iamVjdCIsImFzc2lnbiIsImNoYWluIiwic29ydCIsImxlYW4iLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiYXBpS2V5TW9kZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBUEkgS2V5IE1vZGVsXG4gKiBcbiAqIFRoaXMgY2xhc3MgZm9jdXNlcyBzb2xlbHkgb24gQVBJIGtleSBtb2RlbCBmdW5jdGlvbmFsaXR5IGFuZCBiZWhhdmlvci5cbiAqIEl0IGV4dGVuZHMgQmFzZU1vY2tNb2RlbCB3aXRoIEFQSSBrZXktc3BlY2lmaWMgbWV0aG9kcyBhbmQgcHJvcGVydGllcy5cbiAqL1xuXG5jb25zdCB7IEJhc2VNb2NrTW9kZWwgfSA9IHJlcXVpcmUoJy4vYmFzZU1vY2tNb2RlbCcpO1xuXG4vLyBMZWdhY3kgYXJyYXkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5jb25zdCBtb2NrQXBpS2V5cyA9IFtdO1xuXG4vKipcbiAqIEFQSSBLZXkgTW9kZWwgQ2xhc3NcbiAqIFxuICogUHJvdmlkZXMgTW9uZ29vc2UtY29tcGF0aWJsZSBBUEkga2V5IG1vZGVsIGZvciB0ZXN0aW5nIHNjZW5hcmlvcy5cbiAqIEluY2x1ZGVzIEFQSSBrZXktc3BlY2lmaWMgdmFsaWRhdGlvbiBhbmQgbWV0aG9kcy5cbiAqL1xuY2xhc3MgQXBpS2V5IGV4dGVuZHMgQmFzZU1vY2tNb2RlbCB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICBzdXBlcihkYXRhKTtcbiAgICAvLyBTZXQgZGVmYXVsdCB2YWx1ZXMgc3BlY2lmaWMgdG8gQXBpS2V5XG4gICAgaWYgKCF0aGlzLmNyZWF0ZWRBdCkgdGhpcy5jcmVhdGVkQXQgPSBuZXcgRGF0ZSgpO1xuICAgIGlmICghdGhpcy5pc0FjdGl2ZSkgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gIH1cbiAgXG4gIC8vIE92ZXJyaWRlIGdldENvbGxlY3Rpb24gdG8gdXNlIGxlZ2FjeSBhcnJheSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgc3RhdGljIGdldENvbGxlY3Rpb24oKSB7XG4gICAgcmV0dXJuIG1vY2tBcGlLZXlzO1xuICB9XG4gIFxuICAvLyBMZWdhY3kgbWV0aG9kcyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIGV4aXN0aW5nIGNvZGVcbiAgc3RhdGljIGZpbmRPbmUocXVlcnkpIHtcbiAgICBjb25zb2xlLmxvZyhgQXBpS2V5LmZpbmRPbmUgaXMgcnVubmluZyB3aXRoICR7SlNPTi5zdHJpbmdpZnkocXVlcnkpfWApO1xuICAgIGNvbnN0IHJlc3VsdCA9IG1vY2tBcGlLZXlzLmZpbmQoayA9PiBrLmtleSA9PT0gcXVlcnkua2V5KSB8fCBudWxsO1xuICAgIGNvbnNvbGUubG9nKGBBcGlLZXkuZmluZE9uZSBpcyByZXR1cm5pbmcgJHtyZXN1bHQgPyAna2V5JyA6ICdudWxsJ31gKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XG4gIH1cbiAgXG4gIHN0YXRpYyBmaW5kT25lQW5kRGVsZXRlKHF1ZXJ5KSB7XG4gICAgY29uc29sZS5sb2coYEFwaUtleS5maW5kT25lQW5kRGVsZXRlIGlzIHJ1bm5pbmcgd2l0aCAke0pTT04uc3RyaW5naWZ5KHF1ZXJ5KX1gKTtcbiAgICBjb25zdCBpZHggPSBtb2NrQXBpS2V5cy5maW5kSW5kZXgoayA9PiBrLmtleSA9PT0gcXVlcnkua2V5KTtcbiAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgY29uc29sZS5sb2coYEFwaUtleS5maW5kT25lQW5kRGVsZXRlIGlzIHJldHVybmluZyBudWxsYCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICBjb25zdCBkZWxldGVkID0gbW9ja0FwaUtleXMuc3BsaWNlKGlkeCwgMSlbMF07XG4gICAgY29uc29sZS5sb2coYEFwaUtleS5maW5kT25lQW5kRGVsZXRlIGlzIHJldHVybmluZyBkZWxldGVkIGtleWApO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZGVsZXRlZCk7XG4gIH1cbiAgXG4gIHN0YXRpYyBmaW5kT25lQW5kVXBkYXRlKHF1ZXJ5LCB1cGRhdGUpIHtcbiAgICBjb25zb2xlLmxvZyhgQXBpS2V5LmZpbmRPbmVBbmRVcGRhdGUgaXMgcnVubmluZyB3aXRoIHF1ZXJ5IGFuZCB1cGRhdGVgKTtcbiAgICBjb25zdCBrZXkgPSBtb2NrQXBpS2V5cy5maW5kKGsgPT4gay5rZXkgPT09IHF1ZXJ5LmtleSk7XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBBcGlLZXkuZmluZE9uZUFuZFVwZGF0ZSBpcyByZXR1cm5pbmcgbnVsbGApO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihrZXksIHVwZGF0ZSk7XG4gICAgY29uc29sZS5sb2coYEFwaUtleS5maW5kT25lQW5kVXBkYXRlIGlzIHJldHVybmluZyB1cGRhdGVkIGtleWApO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoa2V5KTtcbiAgfVxuICBcbiAgc3RhdGljIGZpbmQoKSB7XG4gICAgY29uc29sZS5sb2coYEFwaUtleS5maW5kIGlzIHJ1bm5pbmcgd2l0aCBub25lYCk7XG4gICAgY29uc3QgY2hhaW4gPSB7IGRhdGE6IG1vY2tBcGlLZXlzIH07XG4gICAgY2hhaW4uc29ydCA9ICgpID0+IGNoYWluO1xuICAgIGNoYWluLmxlYW4gPSAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhgQXBpS2V5LmZpbmQubGVhbiBpcyByZXR1cm5pbmcgJHtjaGFpbi5kYXRhLmxlbmd0aH0ga2V5c2ApO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjaGFpbi5kYXRhKTtcbiAgICB9O1xuICAgIHJldHVybiBjaGFpbjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQXBpS2V5LFxuICBtb2NrQXBpS2V5c1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNO0VBQUVBO0FBQWMsQ0FBQyxHQUFHQyxPQUFPLENBQUMsaUJBQWlCLENBQUM7O0FBRXBEO0FBQ0EsTUFBTUMsV0FBVyxHQUFHLEVBQUU7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLE1BQU0sU0FBU0gsYUFBYSxDQUFDO0VBQ2pDSSxXQUFXQSxDQUFDQyxJQUFJLEVBQUU7SUFDaEIsS0FBSyxDQUFDQSxJQUFJLENBQUM7SUFDWDtJQUNBLElBQUksQ0FBQyxJQUFJLENBQUNDLFNBQVMsRUFBRSxJQUFJLENBQUNBLFNBQVMsR0FBRyxJQUFJQyxJQUFJLENBQUMsQ0FBQztJQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDQyxRQUFRLEVBQUUsSUFBSSxDQUFDQSxRQUFRLEdBQUcsSUFBSTtFQUMxQzs7RUFFQTtFQUNBLE9BQU9DLGFBQWFBLENBQUEsRUFBRztJQUNyQixPQUFPUCxXQUFXO0VBQ3BCOztFQUVBO0VBQ0EsT0FBT1EsT0FBT0EsQ0FBQ0MsS0FBSyxFQUFFO0lBQ3BCQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxrQ0FBa0NDLElBQUksQ0FBQ0MsU0FBUyxDQUFDSixLQUFLLENBQUMsRUFBRSxDQUFDO0lBQ3RFLE1BQU1LLE1BQU0sR0FBR2QsV0FBVyxDQUFDZSxJQUFJLENBQUND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