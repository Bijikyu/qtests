{"version":3,"names":["runTestSuite","createAssertions","require","mockConsole","setTestEnv","saveEnv","restoreEnv","stubMethod","assert","mockConsoleTests","spy","console","log","truthy","mock","calls","length","some","call","arg","String","includes","mockRestore","originalLog","equal","testEnvTests","process","env","TEST_VAR","saved","GOOGLE_API_KEY","OPENAI_TOKEN","stubMethodTests","obj","add","a","b","restore","throws","main","module","repeat","suites","totalPassed","totalFailed","suiteName","tests","results","passed","failed","exit"],"sources":["qtests-dogfood.test.js"],"sourcesContent":["// qtests dogfooding demonstration - using qtests to test qtests utilities\n// This shows qtests can replace Jest for most testing scenarios\n\nconst { runTestSuite, createAssertions } = require('../utils/runTestSuite');\nconst { mockConsole } = require('../utils/mockConsole');\nconst { setTestEnv, saveEnv, restoreEnv } = require('../utils/testEnv');\nconst stubMethod = require('../utils/stubMethod');\n\nconst assert = createAssertions();\n\n// Test qtests mockConsole utility\nconst mockConsoleTests = [\n  ['mockConsole captures calls', () => {\n    const spy = mockConsole('log');\n    console.log('captured message');\n    assert.truthy(spy.mock.calls.length > 0, 'Should capture console calls');\n    assert.truthy(spy.mock.calls.some(call => \n      call.some(arg => String(arg).includes('captured message'))\n    ), 'Should capture message content');\n    spy.mockRestore();\n  }],\n\n  ['mockConsole restores console', () => {\n    const originalLog = console.log;\n    const spy = mockConsole('log');\n    spy.mockRestore();\n    assert.equal(console.log, originalLog, 'Should restore original console.log');\n  }]\n];\n\n// Test qtests testEnv utility  \nconst testEnvTests = [\n  ['testEnv saves and restores environment', () => {\n    process.env.TEST_VAR = 'original';\n    const saved = saveEnv();\n    process.env.TEST_VAR = 'modified';\n    assert.equal(process.env.TEST_VAR, 'modified', 'Should set test environment');\n    restoreEnv(saved);\n    assert.equal(process.env.TEST_VAR, 'original', 'Should restore original environment');\n  }],\n\n  ['testEnv sets standard environment', () => {\n    const saved = saveEnv();\n    setTestEnv();\n    assert.truthy(process.env.GOOGLE_API_KEY, 'Should set GOOGLE_API_KEY');\n    assert.truthy(process.env.OPENAI_TOKEN, 'Should set OPENAI_TOKEN');\n    restoreEnv(saved);\n  }]\n];\n\n// Test qtests stubMethod utility\nconst stubMethodTests = [\n  ['stubMethod creates working stubs', () => {\n    const obj = { add: (a, b) => a + b };\n    const restore = stubMethod(obj, 'add', () => 100);\n    assert.equal(obj.add(2, 3), 100, 'Stubbed method should return stub value');\n    restore();\n    assert.equal(obj.add(2, 3), 5, 'Restored method should work normally');\n  }],\n\n  ['stubMethod error handling', () => {\n    assert.throws(() => stubMethod(null, 'method', () => {}), 'Should throw for null object');\n    assert.throws(() => stubMethod({}, 'missing', () => {}), 'Should throw for missing method');\n  }]\n];\n\n// Run all test suites using qtests\nif (require.main === module) {\n  console.log('🐕 qtests Dogfooding Tests - Using qtests to test itself!');\n  console.log('=' .repeat(60));\n  \n  const suites = [\n    ['mockConsole Tests', mockConsoleTests],\n    ['testEnv Tests', testEnvTests], \n    ['stubMethod Tests', stubMethodTests]\n  ];\n  \n  let totalPassed = 0;\n  let totalFailed = 0;\n  \n  for (const [suiteName, tests] of suites) {\n    const results = runTestSuite(suiteName, tests);\n    totalPassed += results.passed;\n    totalFailed += results.failed;\n  }\n  \n  console.log('\\n' + '='.repeat(60));\n  console.log(`🎯 DOGFOODING SUMMARY: ${totalPassed} passed, ${totalFailed} failed`);\n  console.log('qtests successfully testing itself with qtests utilities!');\n  console.log('='.repeat(60));\n  \n  process.exit(totalFailed > 0 ? 1 : 0);\n}"],"mappings":"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","ignoreList":[]}