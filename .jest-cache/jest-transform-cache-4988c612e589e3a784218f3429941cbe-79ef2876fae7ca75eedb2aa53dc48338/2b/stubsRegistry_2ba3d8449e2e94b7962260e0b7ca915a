8616f2a745fadbd5e405a91259b19fe9
"use strict";
/**
 * Enhanced Stubs Registry - Dynamic Module Mocking
 *
 * This module extends the existing stub system with dynamic runtime mocking
 * capabilities, allowing tests to override built-in stubs or add new ones.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockModule = mockModule;
exports.unmockModule = unmockModule;
exports.clearAllMocks = clearAllMocks;
exports.resolveModule = resolveModule;
exports.isMocked = isMocked;
exports.getMockedModules = getMockedModules;
exports.getMockImplementation = getMockImplementation;
// Registry for runtime module mocks
const moduleRegistry = new Map();
const moduleFactoryRegistry = new Map();
/**
 * Register a module mock at runtime
 * This overrides built-in stubs and real modules
 */
function mockModule(moduleName, implementation) {
    if (typeof implementation === 'function' && implementation.length === 0) {
        // Treat zero-argument functions as factories
        moduleFactoryRegistry.set(moduleName, implementation);
        moduleRegistry.delete(moduleName); // Remove any static mock
    }
    else {
        // Store as static implementation
        moduleRegistry.set(moduleName, implementation);
        moduleFactoryRegistry.delete(moduleName); // Remove any factory
    }
}
/**
 * Remove a module mock, falling back to built-in stubs or real module
 */
function unmockModule(moduleName) {
    moduleRegistry.delete(moduleName);
    moduleFactoryRegistry.delete(moduleName);
}
/**
 * Clear all module mocks
 */
function clearAllMocks() {
    moduleRegistry.clear();
    moduleFactoryRegistry.clear();
}
/**
 * Resolve a module - checks runtime registry, then falls back to built-in stubs
 * This is called by the module resolution system
 */
function resolveModule(moduleName) {
    // Check runtime registry first
    if (moduleRegistry.has(moduleName)) {
        return moduleRegistry.get(moduleName);
    }
    // Check factory registry
    if (moduleFactoryRegistry.has(moduleName)) {
        const factory = moduleFactoryRegistry.get(moduleName);
        return factory();
    }
    // Fall back to built-in stubs (handled by existing setup.js)
    return undefined;
}
/**
 * Check if a module is currently mocked
 */
function isMocked(moduleName) {
    return moduleRegistry.has(moduleName) || moduleFactoryRegistry.has(moduleName);
}
/**
 * Get all currently mocked modules
 */
function getMockedModules() {
    const allMocked = new Set();
    for (const name of moduleRegistry.keys()) {
        allMocked.add(name);
    }
    for (const name of moduleFactoryRegistry.keys()) {
        allMocked.add(name);
    }
    return Array.from(allMocked);
}
/**
 * Get mock implementation for a module (for debugging)
 */
function getMockImplementation(moduleName) {
    if (moduleRegistry.has(moduleName)) {
        return moduleRegistry.get(moduleName);
    }
    if (moduleFactoryRegistry.has(moduleName)) {
        return moduleFactoryRegistry.get(moduleName);
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztRQUNuQyxPQUFPLGNBQWMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELElBQUkscUJBQXFCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7UUFDMUMsT0FBTyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvbW9ja3Mvc3R1YnNSZWdpc3RyeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVuaGFuY2VkIFN0dWJzIFJlZ2lzdHJ5IC0gRHluYW1pYyBNb2R1bGUgTW9ja2luZ1xuICogXG4gKiBUaGlzIG1vZHVsZSBleHRlbmRzIHRoZSBleGlzdGluZyBzdHViIHN5c3RlbSB3aXRoIGR5bmFtaWMgcnVudGltZSBtb2NraW5nXG4gKiBjYXBhYmlsaXRpZXMsIGFsbG93aW5nIHRlc3RzIHRvIG92ZXJyaWRlIGJ1aWx0LWluIHN0dWJzIG9yIGFkZCBuZXcgb25lcy5cbiAqL1xuXG4vLyBSZWdpc3RyeSBmb3IgcnVudGltZSBtb2R1bGUgbW9ja3NcbmNvbnN0IG1vZHVsZVJlZ2lzdHJ5ID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcbmNvbnN0IG1vZHVsZUZhY3RvcnlSZWdpc3RyeSA9IG5ldyBNYXA8c3RyaW5nLCAoKSA9PiBhbnk+KCk7XG5cbi8qKlxuICogUmVnaXN0ZXIgYSBtb2R1bGUgbW9jayBhdCBydW50aW1lXG4gKiBUaGlzIG92ZXJyaWRlcyBidWlsdC1pbiBzdHVicyBhbmQgcmVhbCBtb2R1bGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtb2NrTW9kdWxlKG1vZHVsZU5hbWU6IHN0cmluZywgaW1wbGVtZW50YXRpb246IGFueSB8ICgoKSA9PiBhbnkpKTogdm9pZCB7XG4gIGlmICh0eXBlb2YgaW1wbGVtZW50YXRpb24gPT09ICdmdW5jdGlvbicgJiYgaW1wbGVtZW50YXRpb24ubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gVHJlYXQgemVyby1hcmd1bWVudCBmdW5jdGlvbnMgYXMgZmFjdG9yaWVzXG4gICAgbW9kdWxlRmFjdG9yeVJlZ2lzdHJ5LnNldChtb2R1bGVOYW1lLCBpbXBsZW1lbnRhdGlvbik7XG4gICAgbW9kdWxlUmVnaXN0cnkuZGVsZXRlKG1vZHVsZU5hbWUpOyAvLyBSZW1vdmUgYW55IHN0YXRpYyBtb2NrXG4gIH0gZWxzZSB7XG4gICAgLy8gU3RvcmUgYXMgc3RhdGljIGltcGxlbWVudGF0aW9uXG4gICAgbW9kdWxlUmVnaXN0cnkuc2V0KG1vZHVsZU5hbWUsIGltcGxlbWVudGF0aW9uKTtcbiAgICBtb2R1bGVGYWN0b3J5UmVnaXN0cnkuZGVsZXRlKG1vZHVsZU5hbWUpOyAvLyBSZW1vdmUgYW55IGZhY3RvcnlcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBhIG1vZHVsZSBtb2NrLCBmYWxsaW5nIGJhY2sgdG8gYnVpbHQtaW4gc3R1YnMgb3IgcmVhbCBtb2R1bGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVubW9ja01vZHVsZShtb2R1bGVOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgbW9kdWxlUmVnaXN0cnkuZGVsZXRlKG1vZHVsZU5hbWUpO1xuICBtb2R1bGVGYWN0b3J5UmVnaXN0cnkuZGVsZXRlKG1vZHVsZU5hbWUpO1xufVxuXG4vKipcbiAqIENsZWFyIGFsbCBtb2R1bGUgbW9ja3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyQWxsTW9ja3MoKTogdm9pZCB7XG4gIG1vZHVsZVJlZ2lzdHJ5LmNsZWFyKCk7XG4gIG1vZHVsZUZhY3RvcnlSZWdpc3RyeS5jbGVhcigpO1xufVxuXG4vKipcbiAqIFJlc29sdmUgYSBtb2R1bGUgLSBjaGVja3MgcnVudGltZSByZWdpc3RyeSwgdGhlbiBmYWxscyBiYWNrIHRvIGJ1aWx0LWluIHN0dWJzXG4gKiBUaGlzIGlzIGNhbGxlZCBieSB0aGUgbW9kdWxlIHJlc29sdXRpb24gc3lzdGVtXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlTW9kdWxlKG1vZHVsZU5hbWU6IHN0cmluZyk6IGFueSB8IHVuZGVmaW5lZCB7XG4gIC8vIENoZWNrIHJ1bnRpbWUgcmVnaXN0cnkgZmlyc3RcbiAgaWYgKG1vZHVsZVJlZ2lzdHJ5Lmhhcyhtb2R1bGVOYW1lKSkge1xuICAgIHJldHVybiBtb2R1bGVSZWdpc3RyeS5nZXQobW9kdWxlTmFtZSk7XG4gIH1cbiAgXG4gIC8vIENoZWNrIGZhY3RvcnkgcmVnaXN0cnlcbiAgaWYgKG1vZHVsZUZhY3RvcnlSZWdpc3RyeS5oYXMobW9kdWxlTmFtZSkpIHtcbiAgICBjb25zdCBmYWN0b3J5ID0gbW9kdWxlRmFjdG9yeVJlZ2lzdHJ5LmdldChtb2R1bGVOYW1lKSE7XG4gICAgcmV0dXJuIGZhY3RvcnkoKTtcbiAgfVxuICBcbiAgLy8gRmFsbCBiYWNrIHRvIGJ1aWx0LWluIHN0dWJzIChoYW5kbGVkIGJ5IGV4aXN0aW5nIHNldHVwLmpzKVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgbW9kdWxlIGlzIGN1cnJlbnRseSBtb2NrZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTW9ja2VkKG1vZHVsZU5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gbW9kdWxlUmVnaXN0cnkuaGFzKG1vZHVsZU5hbWUpIHx8IG1vZHVsZUZhY3RvcnlSZWdpc3RyeS5oYXMobW9kdWxlTmFtZSk7XG59XG5cbi8qKlxuICogR2V0IGFsbCBjdXJyZW50bHkgbW9ja2VkIG1vZHVsZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1vY2tlZE1vZHVsZXMoKTogc3RyaW5nW10ge1xuICBjb25zdCBhbGxNb2NrZWQgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgXG4gIGZvciAoY29uc3QgbmFtZSBvZiBtb2R1bGVSZWdpc3RyeS5rZXlzKCkpIHtcbiAgICBhbGxNb2NrZWQuYWRkKG5hbWUpO1xuICB9XG4gIFxuICBmb3IgKGNvbnN0IG5hbWUgb2YgbW9kdWxlRmFjdG9yeVJlZ2lzdHJ5LmtleXMoKSkge1xuICAgIGFsbE1vY2tlZC5hZGQobmFtZSk7XG4gIH1cbiAgXG4gIHJldHVybiBBcnJheS5mcm9tKGFsbE1vY2tlZCk7XG59XG5cbi8qKlxuICogR2V0IG1vY2sgaW1wbGVtZW50YXRpb24gZm9yIGEgbW9kdWxlIChmb3IgZGVidWdnaW5nKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9ja0ltcGxlbWVudGF0aW9uKG1vZHVsZU5hbWU6IHN0cmluZyk6IGFueSB7XG4gIGlmIChtb2R1bGVSZWdpc3RyeS5oYXMobW9kdWxlTmFtZSkpIHtcbiAgICByZXR1cm4gbW9kdWxlUmVnaXN0cnkuZ2V0KG1vZHVsZU5hbWUpO1xuICB9XG4gIFxuICBpZiAobW9kdWxlRmFjdG9yeVJlZ2lzdHJ5Lmhhcyhtb2R1bGVOYW1lKSkge1xuICAgIHJldHVybiBtb2R1bGVGYWN0b3J5UmVnaXN0cnkuZ2V0KG1vZHVsZU5hbWUpO1xuICB9XG4gIFxuICByZXR1cm4gdW5kZWZpbmVkO1xufSJdLCJ2ZXJzaW9uIjozfQ==