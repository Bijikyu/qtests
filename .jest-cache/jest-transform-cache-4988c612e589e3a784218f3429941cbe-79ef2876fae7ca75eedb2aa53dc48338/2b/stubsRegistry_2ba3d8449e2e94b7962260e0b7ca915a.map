{"file":"/home/runner/workspace/lib/mocks/stubsRegistry.ts","mappings":";AAAA;;;;;GAKG;;AAUH,gCAUC;AAKD,oCAGC;AAKD,sCAGC;AAMD,sCAcC;AAKD,4BAEC;AAKD,4CAYC;AAKD,sDAUC;AA7FD,oCAAoC;AACpC,MAAM,cAAc,GAAG,IAAI,GAAG,EAAe,CAAC;AAC9C,MAAM,qBAAqB,GAAG,IAAI,GAAG,EAAqB,CAAC;AAE3D;;;GAGG;AACH,SAAgB,UAAU,CAAC,UAAkB,EAAE,cAAiC;IAC9E,IAAI,OAAO,cAAc,KAAK,UAAU,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACxE,6CAA6C;QAC7C,qBAAqB,CAAC,GAAG,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QACtD,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,yBAAyB;IAC9D,CAAC;SAAM,CAAC;QACN,iCAAiC;QACjC,cAAc,CAAC,GAAG,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QAC/C,qBAAqB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,qBAAqB;IACjE,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,YAAY,CAAC,UAAkB;IAC7C,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAClC,qBAAqB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAC3C,CAAC;AAED;;GAEG;AACH,SAAgB,aAAa;IAC3B,cAAc,CAAC,KAAK,EAAE,CAAC;IACvB,qBAAqB,CAAC,KAAK,EAAE,CAAC;AAChC,CAAC;AAED;;;GAGG;AACH,SAAgB,aAAa,CAAC,UAAkB;IAC9C,+BAA+B;IAC/B,IAAI,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;QACnC,OAAO,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACxC,CAAC;IAED,yBAAyB;IACzB,IAAI,qBAAqB,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;QAC1C,MAAM,OAAO,GAAG,qBAAqB,CAAC,GAAG,CAAC,UAAU,CAAE,CAAC;QACvD,OAAO,OAAO,EAAE,CAAC;IACnB,CAAC;IAED,6DAA6D;IAC7D,OAAO,SAAS,CAAC;AACnB,CAAC;AAED;;GAEG;AACH,SAAgB,QAAQ,CAAC,UAAkB;IACzC,OAAO,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,qBAAqB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AACjF,CAAC;AAED;;GAEG;AACH,SAAgB,gBAAgB;IAC9B,MAAM,SAAS,GAAG,IAAI,GAAG,EAAU,CAAC;IAEpC,KAAK,MAAM,IAAI,IAAI,cAAc,CAAC,IAAI,EAAE,EAAE,CAAC;QACzC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;IAED,KAAK,MAAM,IAAI,IAAI,qBAAqB,CAAC,IAAI,EAAE,EAAE,CAAC;QAChD,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;IAED,OAAO,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC/B,CAAC;AAED;;GAEG;AACH,SAAgB,qBAAqB,CAAC,UAAkB;IACtD,IAAI,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;QACnC,OAAO,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACxC,CAAC;IAED,IAAI,qBAAqB,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;QAC1C,OAAO,qBAAqB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC/C,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC","names":[],"sources":["/home/runner/workspace/lib/mocks/stubsRegistry.ts"],"sourcesContent":["/**\n * Enhanced Stubs Registry - Dynamic Module Mocking\n * \n * This module extends the existing stub system with dynamic runtime mocking\n * capabilities, allowing tests to override built-in stubs or add new ones.\n */\n\n// Registry for runtime module mocks\nconst moduleRegistry = new Map<string, any>();\nconst moduleFactoryRegistry = new Map<string, () => any>();\n\n/**\n * Register a module mock at runtime\n * This overrides built-in stubs and real modules\n */\nexport function mockModule(moduleName: string, implementation: any | (() => any)): void {\n  if (typeof implementation === 'function' && implementation.length === 0) {\n    // Treat zero-argument functions as factories\n    moduleFactoryRegistry.set(moduleName, implementation);\n    moduleRegistry.delete(moduleName); // Remove any static mock\n  } else {\n    // Store as static implementation\n    moduleRegistry.set(moduleName, implementation);\n    moduleFactoryRegistry.delete(moduleName); // Remove any factory\n  }\n}\n\n/**\n * Remove a module mock, falling back to built-in stubs or real module\n */\nexport function unmockModule(moduleName: string): void {\n  moduleRegistry.delete(moduleName);\n  moduleFactoryRegistry.delete(moduleName);\n}\n\n/**\n * Clear all module mocks\n */\nexport function clearAllMocks(): void {\n  moduleRegistry.clear();\n  moduleFactoryRegistry.clear();\n}\n\n/**\n * Resolve a module - checks runtime registry, then falls back to built-in stubs\n * This is called by the module resolution system\n */\nexport function resolveModule(moduleName: string): any | undefined {\n  // Check runtime registry first\n  if (moduleRegistry.has(moduleName)) {\n    return moduleRegistry.get(moduleName);\n  }\n  \n  // Check factory registry\n  if (moduleFactoryRegistry.has(moduleName)) {\n    const factory = moduleFactoryRegistry.get(moduleName)!;\n    return factory();\n  }\n  \n  // Fall back to built-in stubs (handled by existing setup.js)\n  return undefined;\n}\n\n/**\n * Check if a module is currently mocked\n */\nexport function isMocked(moduleName: string): boolean {\n  return moduleRegistry.has(moduleName) || moduleFactoryRegistry.has(moduleName);\n}\n\n/**\n * Get all currently mocked modules\n */\nexport function getMockedModules(): string[] {\n  const allMocked = new Set<string>();\n  \n  for (const name of moduleRegistry.keys()) {\n    allMocked.add(name);\n  }\n  \n  for (const name of moduleFactoryRegistry.keys()) {\n    allMocked.add(name);\n  }\n  \n  return Array.from(allMocked);\n}\n\n/**\n * Get mock implementation for a module (for debugging)\n */\nexport function getMockImplementation(moduleName: string): any {\n  if (moduleRegistry.has(moduleName)) {\n    return moduleRegistry.get(moduleName);\n  }\n  \n  if (moduleFactoryRegistry.has(moduleName)) {\n    return moduleFactoryRegistry.get(moduleName);\n  }\n  \n  return undefined;\n}"],"version":3}