{"file":"/home/runner/workspace/index.ts","mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;AAEH,yDAAyD;AACzD,qDAA6D;AAgD3D,2FAhDO,yBAAU,OAgDP;AACV,4FAjDmB,0BAAW,OAiDnB;AAhDb,mDAAsE;AAiDpE,wFAjDO,qBAAO,OAiDP;AACP,4FAlDgB,yBAAW,OAkDhB;AACX,4FAnD6B,yBAAW,OAmD7B;AAlDb,6CAAuC;AAuDrC,sFAvDO,gBAAK,OAuDP;AAtDP,8DAAmC;AAuDjC,gBAvDK,kBAAK,CAuDL;AAtDP,6DAAuD;AAiDrD,8FAjDO,gCAAa,OAiDP;AAhDf,6DAAwF;AAiDtF,6FAjDO,8BAAY,OAiDP;AACZ,8FAlDqB,+BAAa,OAkDrB;AACb,iGAnDoC,kCAAgB,OAmDpC;AAjDlB,sCAAsC;AACtC,gDAAqG;AAqDnG,yFArDO,iBAAQ,OAqDP;AACR,mFAtDiB,WAAE,OAsDjB;AACF,qFAvDqB,aAAI,OAuDrB;AACJ,0FAxD2B,kBAAS,OAwD3B;AACT,yFAzDsC,iBAAQ,OAyDtC;AACR,2FA1DgD,mBAAU,OA0DhD;AACV,0FA3D4D,kBAAS,OA2D5D;AA1DX,sDAA6C;AA6D3C,oFA7DO,eAAG,OA6DP;AA5DL,8DAAyE;AA0DvE,uFA1DO,iBAAM,OA0DP;AACN,+FA3De,yBAAc,OA2Df;AA1DhB,oEAAwC;AA4DtC,eA5DK,kBAAI,CA4DL;AA1DN,mCAAmC;AACnC,8CAA4C;AA4D5C,4CAA4C;AAC5C,MAAM,MAAM,GAAc;IACxB,aAAa;IACb,UAAU,EAAV,yBAAU;IACV,WAAW,EAAX,0BAAW;IACX,OAAO,EAAP,qBAAO;IACP,WAAW,EAAX,yBAAW;IACX,WAAW,EAAX,yBAAW;IACX,aAAa,EAAb,gCAAa;IACb,YAAY,EAAZ,8BAAY;IACZ,aAAa,EAAb,+BAAa;IACb,gBAAgB,EAAhB,kCAAgB;IAChB,KAAK,EAAL,gBAAK;IACL,KAAK,EAAL,kBAAK;IAEL,iBAAiB;IACjB,QAAQ,EAAR,iBAAQ;IACR,EAAE,EAAF,WAAE;IACF,IAAI,EAAJ,aAAI;IACJ,SAAS,EAAT,kBAAS;IACT,QAAQ,EAAR,iBAAQ;IACR,UAAU,EAAV,mBAAU;IACV,SAAS,EAAT,kBAAS;IACT,MAAM,EAAN,iBAAM;IACN,cAAc,EAAd,yBAAc;IACd,GAAG,EAAH,eAAG;IACH,IAAI,EAAJ,kBAAI;CACL,CAAC;AAEF,kBAAe,MAAM,CAAC","names":[],"sources":["/home/runner/workspace/index.ts"],"sourcesContent":["/**\n * qtests - Main Entry Point\n * \n * This module serves as the unified export point for all qtests functionality.\n * The architecture is designed to provide a clean, intuitive API where users\n * can access all testing utilities through a single import.\n * \n * Design rationale:\n * - Single entry point reduces cognitive load for users\n * - Organized by functionality (core, environment, setup, stubs) for clarity\n * - Each category is kept in separate lib files for maintainability\n * - Maintains backward compatibility with existing API\n */\n\n// Import organized utility categories from lib directory\nimport { stubMethod, mockConsole } from './lib/coreUtils.js';\nimport { testEnv, offlineMode, testHelpers } from './lib/envUtils.js';\nimport { setup } from './lib/setup.js';\nimport stubs from './lib/stubs.js';\nimport { TestGenerator } from './lib/testGenerator.js';\nimport { runTestSuite, runTestSuites, createAssertions } from './utils/runTestSuite.js';\n\n// Import new runner system components\nimport { describe, it, test, beforeAll, afterAll, beforeEach, afterEach } from './lib/runner/dsl.js';\nimport { run } from './lib/runner/runner.js';\nimport { expect, extendMatchers } from './utils/testing/expect/index.js';\nimport mock from './lib/mocks/index.js';\n\n// Import matchers to register them\nimport './utils/testing/expect/matchers.js';\n\n// Type definitions for the main module exports\nexport interface QtestsAPI {\n  // Legacy API - preserved for backward compatibility\n  stubMethod: typeof stubMethod;\n  mockConsole: typeof mockConsole;\n  testEnv: typeof testEnv;\n  offlineMode: typeof offlineMode;\n  testHelpers: typeof testHelpers;\n  TestGenerator: typeof TestGenerator;\n  runTestSuite: typeof runTestSuite;\n  runTestSuites: typeof runTestSuites;\n  createAssertions: typeof createAssertions;\n  setup: typeof setup;\n  stubs: typeof stubs;\n  \n  // New runner API - modern test framework features\n  describe: typeof describe;\n  it: typeof it;\n  test: typeof test;\n  beforeAll: typeof beforeAll;\n  afterAll: typeof afterAll;\n  beforeEach: typeof beforeEach;\n  afterEach: typeof afterEach;\n  expect: typeof expect;\n  extendMatchers: typeof extendMatchers;\n  run: typeof run;\n  mock: typeof mock;\n}\n\n// Named exports for ES module compatibility\nexport {\n  // Legacy API - preserved for backward compatibility\n  stubMethod, // method replacement utility for isolating dependencies\n  mockConsole, // console output capture for testing logging behavior\n  testEnv, // environment and mock management for complex test scenarios\n  offlineMode, // offline/online mode utility with automatic switching\n  testHelpers, // advanced testing utilities for module reloading and mocking\n  TestGenerator, // automatic test generation from source code analysis\n  runTestSuite, // lightweight test runner for simple test scenarios\n  runTestSuites, // run multiple test suites with overall summary\n  createAssertions, // basic assertion helpers for test writing\n  setup, // call this to activate stubs when desired\n  stubs, // stub library organized under namespace\n  \n  // New runner API - modern test framework features\n  describe, // organize tests into suites\n  it, // define individual test cases\n  test, // alias for it()\n  beforeAll, // setup before all tests in suite\n  afterAll, // cleanup after all tests in suite\n  beforeEach, // setup before each test\n  afterEach, // cleanup after each test\n  expect, // modern assertion API\n  extendMatchers, // add custom matchers\n  run, // run all registered tests\n  mock // comprehensive mocking API (functions, spies, timers, modules)\n};\n\n// Default export for backward compatibility\nconst qtests: QtestsAPI = {\n  // Legacy API\n  stubMethod,\n  mockConsole,\n  testEnv,\n  offlineMode,\n  testHelpers,\n  TestGenerator,\n  runTestSuite,\n  runTestSuites,\n  createAssertions,\n  setup,\n  stubs,\n  \n  // New runner API\n  describe,\n  it,\n  test,\n  beforeAll,\n  afterAll,\n  beforeEach,\n  afterEach,\n  expect,\n  extendMatchers,\n  run,\n  mock\n};\n\nexport default qtests;"],"version":3}