fdc4b9012f035889f80788394a0af7f2
"use strict";
/**
 * qtests - Main Entry Point
 *
 * This module serves as the unified export point for all qtests functionality.
 * The architecture is designed to provide a clean, intuitive API where users
 * can access all testing utilities through a single import.
 *
 * Design rationale:
 * - Single entry point reduces cognitive load for users
 * - Organized by functionality (core, environment, setup, stubs) for clarity
 * - Each category is kept in separate lib files for maintainability
 * - Maintains backward compatibility with existing API
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mock = exports.run = exports.extendMatchers = exports.expect = exports.afterEach = exports.beforeEach = exports.afterAll = exports.beforeAll = exports.test = exports.it = exports.describe = exports.stubs = exports.setup = exports.createAssertions = exports.runTestSuites = exports.runTestSuite = exports.TestGenerator = exports.testHelpers = exports.offlineMode = exports.testEnv = exports.mockConsole = exports.stubMethod = void 0;
// Import organized utility categories from lib directory
const coreUtils_js_1 = require("./lib/coreUtils.js");
Object.defineProperty(exports, "stubMethod", { enumerable: true, get: function () { return coreUtils_js_1.stubMethod; } });
Object.defineProperty(exports, "mockConsole", { enumerable: true, get: function () { return coreUtils_js_1.mockConsole; } });
const envUtils_js_1 = require("./lib/envUtils.js");
Object.defineProperty(exports, "testEnv", { enumerable: true, get: function () { return envUtils_js_1.testEnv; } });
Object.defineProperty(exports, "offlineMode", { enumerable: true, get: function () { return envUtils_js_1.offlineMode; } });
Object.defineProperty(exports, "testHelpers", { enumerable: true, get: function () { return envUtils_js_1.testHelpers; } });
const setup_js_1 = require("./lib/setup.js");
Object.defineProperty(exports, "setup", { enumerable: true, get: function () { return setup_js_1.setup; } });
const stubs_js_1 = __importDefault(require("./lib/stubs.js"));
exports.stubs = stubs_js_1.default;
const testGenerator_js_1 = require("./lib/testGenerator.js");
Object.defineProperty(exports, "TestGenerator", { enumerable: true, get: function () { return testGenerator_js_1.TestGenerator; } });
const runTestSuite_js_1 = require("./utils/runTestSuite.js");
Object.defineProperty(exports, "runTestSuite", { enumerable: true, get: function () { return runTestSuite_js_1.runTestSuite; } });
Object.defineProperty(exports, "runTestSuites", { enumerable: true, get: function () { return runTestSuite_js_1.runTestSuites; } });
Object.defineProperty(exports, "createAssertions", { enumerable: true, get: function () { return runTestSuite_js_1.createAssertions; } });
// Import new runner system components
const dsl_js_1 = require("./lib/runner/dsl.js");
Object.defineProperty(exports, "describe", { enumerable: true, get: function () { return dsl_js_1.describe; } });
Object.defineProperty(exports, "it", { enumerable: true, get: function () { return dsl_js_1.it; } });
Object.defineProperty(exports, "test", { enumerable: true, get: function () { return dsl_js_1.test; } });
Object.defineProperty(exports, "beforeAll", { enumerable: true, get: function () { return dsl_js_1.beforeAll; } });
Object.defineProperty(exports, "afterAll", { enumerable: true, get: function () { return dsl_js_1.afterAll; } });
Object.defineProperty(exports, "beforeEach", { enumerable: true, get: function () { return dsl_js_1.beforeEach; } });
Object.defineProperty(exports, "afterEach", { enumerable: true, get: function () { return dsl_js_1.afterEach; } });
const runner_js_1 = require("./lib/runner/runner.js");
Object.defineProperty(exports, "run", { enumerable: true, get: function () { return runner_js_1.run; } });
const index_js_1 = require("./utils/testing/expect/index.js");
Object.defineProperty(exports, "expect", { enumerable: true, get: function () { return index_js_1.expect; } });
Object.defineProperty(exports, "extendMatchers", { enumerable: true, get: function () { return index_js_1.extendMatchers; } });
const index_js_2 = __importDefault(require("./lib/mocks/index.js"));
exports.mock = index_js_2.default;
// Import matchers to register them
require("./utils/testing/expect/matchers.js");
// Default export for backward compatibility
const qtests = {
    // Legacy API
    stubMethod: coreUtils_js_1.stubMethod,
    mockConsole: coreUtils_js_1.mockConsole,
    testEnv: envUtils_js_1.testEnv,
    offlineMode: envUtils_js_1.offlineMode,
    testHelpers: envUtils_js_1.testHelpers,
    TestGenerator: testGenerator_js_1.TestGenerator,
    runTestSuite: runTestSuite_js_1.runTestSuite,
    runTestSuites: runTestSuite_js_1.runTestSuites,
    createAssertions: runTestSuite_js_1.createAssertions,
    setup: setup_js_1.setup,
    stubs: stubs_js_1.default,
    // New runner API
    describe: dsl_js_1.describe,
    it: dsl_js_1.it,
    test: dsl_js_1.test,
    beforeAll: dsl_js_1.beforeAll,
    afterAll: dsl_js_1.afterAll,
    beforeEach: dsl_js_1.beforeEach,
    afterEach: dsl_js_1.afterEach,
    expect: index_js_1.expect,
    extendMatchers: index_js_1.extendMatchers,
    run: runner_js_1.run,
    mock: index_js_2.default
};
exports.default = qtests;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9pbmRleC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7OztHQVlHOzs7Ozs7QUFFSCx5REFBeUQ7QUFDekQscURBQTZEO0FBZ0QzRCwyRkFoRE8seUJBQVUsT0FnRFA7QUFDViw0RkFqRG1CLDBCQUFXLE9BaURuQjtBQWhEYixtREFBc0U7QUFpRHBFLHdGQWpETyxxQkFBTyxPQWlEUDtBQUNQLDRGQWxEZ0IseUJBQVcsT0FrRGhCO0FBQ1gsNEZBbkQ2Qix5QkFBVyxPQW1EN0I7QUFsRGIsNkNBQXVDO0FBdURyQyxzRkF2RE8sZ0JBQUssT0F1RFA7QUF0RFAsOERBQW1DO0FBdURqQyxnQkF2REssa0JBQUssQ0F1REw7QUF0RFAsNkRBQXVEO0FBaURyRCw4RkFqRE8sZ0NBQWEsT0FpRFA7QUFoRGYsNkRBQXdGO0FBaUR0Riw2RkFqRE8sOEJBQVksT0FpRFA7QUFDWiw4RkFsRHFCLCtCQUFhLE9Ba0RyQjtBQUNiLGlHQW5Eb0Msa0NBQWdCLE9BbURwQztBQWpEbEIsc0NBQXNDO0FBQ3RDLGdEQUFxRztBQXFEbkcseUZBckRPLGlCQUFRLE9BcURQO0FBQ1IsbUZBdERpQixXQUFFLE9Bc0RqQjtBQUNGLHFGQXZEcUIsYUFBSSxPQXVEckI7QUFDSiwwRkF4RDJCLGtCQUFTLE9Bd0QzQjtBQUNULHlGQXpEc0MsaUJBQVEsT0F5RHRDO0FBQ1IsMkZBMURnRCxtQkFBVSxPQTBEaEQ7QUFDViwwRkEzRDRELGtCQUFTLE9BMkQ1RDtBQTFEWCxzREFBNkM7QUE2RDNDLG9GQTdETyxlQUFHLE9BNkRQO0FBNURMLDhEQUF5RTtBQTBEdkUsdUZBMURPLGlCQUFNLE9BMERQO0FBQ04sK0ZBM0RlLHlCQUFjLE9BMkRmO0FBMURoQixvRUFBd0M7QUE0RHRDLGVBNURLLGtCQUFJLENBNERMO0FBMUROLG1DQUFtQztBQUNuQyw4Q0FBNEM7QUE0RDVDLDRDQUE0QztBQUM1QyxNQUFNLE1BQU0sR0FBYztJQUN4QixhQUFhO0lBQ2IsVUFBVSxFQUFWLHlCQUFVO0lBQ1YsV0FBVyxFQUFYLDBCQUFXO0lBQ1gsT0FBTyxFQUFQLHFCQUFPO0lBQ1AsV0FBVyxFQUFYLHlCQUFXO0lBQ1gsV0FBVyxFQUFYLHlCQUFXO0lBQ1gsYUFBYSxFQUFiLGdDQUFhO0lBQ2IsWUFBWSxFQUFaLDhCQUFZO0lBQ1osYUFBYSxFQUFiLCtCQUFhO0lBQ2IsZ0JBQWdCLEVBQWhCLGtDQUFnQjtJQUNoQixLQUFLLEVBQUwsZ0JBQUs7SUFDTCxLQUFLLEVBQUwsa0JBQUs7SUFFTCxpQkFBaUI7SUFDakIsUUFBUSxFQUFSLGlCQUFRO0lBQ1IsRUFBRSxFQUFGLFdBQUU7SUFDRixJQUFJLEVBQUosYUFBSTtJQUNKLFNBQVMsRUFBVCxrQkFBUztJQUNULFFBQVEsRUFBUixpQkFBUTtJQUNSLFVBQVUsRUFBVixtQkFBVTtJQUNWLFNBQVMsRUFBVCxrQkFBUztJQUNULE1BQU0sRUFBTixpQkFBTTtJQUNOLGNBQWMsRUFBZCx5QkFBYztJQUNkLEdBQUcsRUFBSCxlQUFHO0lBQ0gsSUFBSSxFQUFKLGtCQUFJO0NBQ0wsQ0FBQztBQUVGLGtCQUFlLE1BQU0sQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogcXRlc3RzIC0gTWFpbiBFbnRyeSBQb2ludFxuICogXG4gKiBUaGlzIG1vZHVsZSBzZXJ2ZXMgYXMgdGhlIHVuaWZpZWQgZXhwb3J0IHBvaW50IGZvciBhbGwgcXRlc3RzIGZ1bmN0aW9uYWxpdHkuXG4gKiBUaGUgYXJjaGl0ZWN0dXJlIGlzIGRlc2lnbmVkIHRvIHByb3ZpZGUgYSBjbGVhbiwgaW50dWl0aXZlIEFQSSB3aGVyZSB1c2Vyc1xuICogY2FuIGFjY2VzcyBhbGwgdGVzdGluZyB1dGlsaXRpZXMgdGhyb3VnaCBhIHNpbmdsZSBpbXBvcnQuXG4gKiBcbiAqIERlc2lnbiByYXRpb25hbGU6XG4gKiAtIFNpbmdsZSBlbnRyeSBwb2ludCByZWR1Y2VzIGNvZ25pdGl2ZSBsb2FkIGZvciB1c2Vyc1xuICogLSBPcmdhbml6ZWQgYnkgZnVuY3Rpb25hbGl0eSAoY29yZSwgZW52aXJvbm1lbnQsIHNldHVwLCBzdHVicykgZm9yIGNsYXJpdHlcbiAqIC0gRWFjaCBjYXRlZ29yeSBpcyBrZXB0IGluIHNlcGFyYXRlIGxpYiBmaWxlcyBmb3IgbWFpbnRhaW5hYmlsaXR5XG4gKiAtIE1haW50YWlucyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggZXhpc3RpbmcgQVBJXG4gKi9cblxuLy8gSW1wb3J0IG9yZ2FuaXplZCB1dGlsaXR5IGNhdGVnb3JpZXMgZnJvbSBsaWIgZGlyZWN0b3J5XG5pbXBvcnQgeyBzdHViTWV0aG9kLCBtb2NrQ29uc29sZSB9IGZyb20gJy4vbGliL2NvcmVVdGlscy5qcyc7XG5pbXBvcnQgeyB0ZXN0RW52LCBvZmZsaW5lTW9kZSwgdGVzdEhlbHBlcnMgfSBmcm9tICcuL2xpYi9lbnZVdGlscy5qcyc7XG5pbXBvcnQgeyBzZXR1cCB9IGZyb20gJy4vbGliL3NldHVwLmpzJztcbmltcG9ydCBzdHVicyBmcm9tICcuL2xpYi9zdHVicy5qcyc7XG5pbXBvcnQgeyBUZXN0R2VuZXJhdG9yIH0gZnJvbSAnLi9saWIvdGVzdEdlbmVyYXRvci5qcyc7XG5pbXBvcnQgeyBydW5UZXN0U3VpdGUsIHJ1blRlc3RTdWl0ZXMsIGNyZWF0ZUFzc2VydGlvbnMgfSBmcm9tICcuL3V0aWxzL3J1blRlc3RTdWl0ZS5qcyc7XG5cbi8vIEltcG9ydCBuZXcgcnVubmVyIHN5c3RlbSBjb21wb25lbnRzXG5pbXBvcnQgeyBkZXNjcmliZSwgaXQsIHRlc3QsIGJlZm9yZUFsbCwgYWZ0ZXJBbGwsIGJlZm9yZUVhY2gsIGFmdGVyRWFjaCB9IGZyb20gJy4vbGliL3J1bm5lci9kc2wuanMnO1xuaW1wb3J0IHsgcnVuIH0gZnJvbSAnLi9saWIvcnVubmVyL3J1bm5lci5qcyc7XG5pbXBvcnQgeyBleHBlY3QsIGV4dGVuZE1hdGNoZXJzIH0gZnJvbSAnLi91dGlscy90ZXN0aW5nL2V4cGVjdC9pbmRleC5qcyc7XG5pbXBvcnQgbW9jayBmcm9tICcuL2xpYi9tb2Nrcy9pbmRleC5qcyc7XG5cbi8vIEltcG9ydCBtYXRjaGVycyB0byByZWdpc3RlciB0aGVtXG5pbXBvcnQgJy4vdXRpbHMvdGVzdGluZy9leHBlY3QvbWF0Y2hlcnMuanMnO1xuXG4vLyBUeXBlIGRlZmluaXRpb25zIGZvciB0aGUgbWFpbiBtb2R1bGUgZXhwb3J0c1xuZXhwb3J0IGludGVyZmFjZSBRdGVzdHNBUEkge1xuICAvLyBMZWdhY3kgQVBJIC0gcHJlc2VydmVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gIHN0dWJNZXRob2Q6IHR5cGVvZiBzdHViTWV0aG9kO1xuICBtb2NrQ29uc29sZTogdHlwZW9mIG1vY2tDb25zb2xlO1xuICB0ZXN0RW52OiB0eXBlb2YgdGVzdEVudjtcbiAgb2ZmbGluZU1vZGU6IHR5cGVvZiBvZmZsaW5lTW9kZTtcbiAgdGVzdEhlbHBlcnM6IHR5cGVvZiB0ZXN0SGVscGVycztcbiAgVGVzdEdlbmVyYXRvcjogdHlwZW9mIFRlc3RHZW5lcmF0b3I7XG4gIHJ1blRlc3RTdWl0ZTogdHlwZW9mIHJ1blRlc3RTdWl0ZTtcbiAgcnVuVGVzdFN1aXRlczogdHlwZW9mIHJ1blRlc3RTdWl0ZXM7XG4gIGNyZWF0ZUFzc2VydGlvbnM6IHR5cGVvZiBjcmVhdGVBc3NlcnRpb25zO1xuICBzZXR1cDogdHlwZW9mIHNldHVwO1xuICBzdHViczogdHlwZW9mIHN0dWJzO1xuICBcbiAgLy8gTmV3IHJ1bm5lciBBUEkgLSBtb2Rlcm4gdGVzdCBmcmFtZXdvcmsgZmVhdHVyZXNcbiAgZGVzY3JpYmU6IHR5cGVvZiBkZXNjcmliZTtcbiAgaXQ6IHR5cGVvZiBpdDtcbiAgdGVzdDogdHlwZW9mIHRlc3Q7XG4gIGJlZm9yZUFsbDogdHlwZW9mIGJlZm9yZUFsbDtcbiAgYWZ0ZXJBbGw6IHR5cGVvZiBhZnRlckFsbDtcbiAgYmVmb3JlRWFjaDogdHlwZW9mIGJlZm9yZUVhY2g7XG4gIGFmdGVyRWFjaDogdHlwZW9mIGFmdGVyRWFjaDtcbiAgZXhwZWN0OiB0eXBlb2YgZXhwZWN0O1xuICBleHRlbmRNYXRjaGVyczogdHlwZW9mIGV4dGVuZE1hdGNoZXJzO1xuICBydW46IHR5cGVvZiBydW47XG4gIG1vY2s6IHR5cGVvZiBtb2NrO1xufVxuXG4vLyBOYW1lZCBleHBvcnRzIGZvciBFUyBtb2R1bGUgY29tcGF0aWJpbGl0eVxuZXhwb3J0IHtcbiAgLy8gTGVnYWN5IEFQSSAtIHByZXNlcnZlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICBzdHViTWV0aG9kLCAvLyBtZXRob2QgcmVwbGFjZW1lbnQgdXRpbGl0eSBmb3IgaXNvbGF0aW5nIGRlcGVuZGVuY2llc1xuICBtb2NrQ29uc29sZSwgLy8gY29uc29sZSBvdXRwdXQgY2FwdHVyZSBmb3IgdGVzdGluZyBsb2dnaW5nIGJlaGF2aW9yXG4gIHRlc3RFbnYsIC8vIGVudmlyb25tZW50IGFuZCBtb2NrIG1hbmFnZW1lbnQgZm9yIGNvbXBsZXggdGVzdCBzY2VuYXJpb3NcbiAgb2ZmbGluZU1vZGUsIC8vIG9mZmxpbmUvb25saW5lIG1vZGUgdXRpbGl0eSB3aXRoIGF1dG9tYXRpYyBzd2l0Y2hpbmdcbiAgdGVzdEhlbHBlcnMsIC8vIGFkdmFuY2VkIHRlc3RpbmcgdXRpbGl0aWVzIGZvciBtb2R1bGUgcmVsb2FkaW5nIGFuZCBtb2NraW5nXG4gIFRlc3RHZW5lcmF0b3IsIC8vIGF1dG9tYXRpYyB0ZXN0IGdlbmVyYXRpb24gZnJvbSBzb3VyY2UgY29kZSBhbmFseXNpc1xuICBydW5UZXN0U3VpdGUsIC8vIGxpZ2h0d2VpZ2h0IHRlc3QgcnVubmVyIGZvciBzaW1wbGUgdGVzdCBzY2VuYXJpb3NcbiAgcnVuVGVzdFN1aXRlcywgLy8gcnVuIG11bHRpcGxlIHRlc3Qgc3VpdGVzIHdpdGggb3ZlcmFsbCBzdW1tYXJ5XG4gIGNyZWF0ZUFzc2VydGlvbnMsIC8vIGJhc2ljIGFzc2VydGlvbiBoZWxwZXJzIGZvciB0ZXN0IHdyaXRpbmdcbiAgc2V0dXAsIC8vIGNhbGwgdGhpcyB0byBhY3RpdmF0ZSBzdHVicyB3aGVuIGRlc2lyZWRcbiAgc3R1YnMsIC8vIHN0dWIgbGlicmFyeSBvcmdhbml6ZWQgdW5kZXIgbmFtZXNwYWNlXG4gIFxuICAvLyBOZXcgcnVubmVyIEFQSSAtIG1vZGVybiB0ZXN0IGZyYW1ld29yayBmZWF0dXJlc1xuICBkZXNjcmliZSwgLy8gb3JnYW5pemUgdGVzdHMgaW50byBzdWl0ZXNcbiAgaXQsIC8vIGRlZmluZSBpbmRpdmlkdWFsIHRlc3QgY2FzZXNcbiAgdGVzdCwgLy8gYWxpYXMgZm9yIGl0KClcbiAgYmVmb3JlQWxsLCAvLyBzZXR1cCBiZWZvcmUgYWxsIHRlc3RzIGluIHN1aXRlXG4gIGFmdGVyQWxsLCAvLyBjbGVhbnVwIGFmdGVyIGFsbCB0ZXN0cyBpbiBzdWl0ZVxuICBiZWZvcmVFYWNoLCAvLyBzZXR1cCBiZWZvcmUgZWFjaCB0ZXN0XG4gIGFmdGVyRWFjaCwgLy8gY2xlYW51cCBhZnRlciBlYWNoIHRlc3RcbiAgZXhwZWN0LCAvLyBtb2Rlcm4gYXNzZXJ0aW9uIEFQSVxuICBleHRlbmRNYXRjaGVycywgLy8gYWRkIGN1c3RvbSBtYXRjaGVyc1xuICBydW4sIC8vIHJ1biBhbGwgcmVnaXN0ZXJlZCB0ZXN0c1xuICBtb2NrIC8vIGNvbXByZWhlbnNpdmUgbW9ja2luZyBBUEkgKGZ1bmN0aW9ucywgc3BpZXMsIHRpbWVycywgbW9kdWxlcylcbn07XG5cbi8vIERlZmF1bHQgZXhwb3J0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5jb25zdCBxdGVzdHM6IFF0ZXN0c0FQSSA9IHtcbiAgLy8gTGVnYWN5IEFQSVxuICBzdHViTWV0aG9kLFxuICBtb2NrQ29uc29sZSxcbiAgdGVzdEVudixcbiAgb2ZmbGluZU1vZGUsXG4gIHRlc3RIZWxwZXJzLFxuICBUZXN0R2VuZXJhdG9yLFxuICBydW5UZXN0U3VpdGUsXG4gIHJ1blRlc3RTdWl0ZXMsXG4gIGNyZWF0ZUFzc2VydGlvbnMsXG4gIHNldHVwLFxuICBzdHVicyxcbiAgXG4gIC8vIE5ldyBydW5uZXIgQVBJXG4gIGRlc2NyaWJlLFxuICBpdCxcbiAgdGVzdCxcbiAgYmVmb3JlQWxsLFxuICBhZnRlckFsbCxcbiAgYmVmb3JlRWFjaCxcbiAgYWZ0ZXJFYWNoLFxuICBleHBlY3QsXG4gIGV4dGVuZE1hdGNoZXJzLFxuICBydW4sXG4gIG1vY2tcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHF0ZXN0czsiXSwidmVyc2lvbiI6M30=