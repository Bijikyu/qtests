{"version":3,"names":["logStart","logReturn","require","TestDataFactory","counter","nextId","isJestParallel","process","env","JEST_WORKER_ID","isExplicitParallel","QTESTS_PARALLEL_MODE","hrTime","hrtime","bigint","random","Math","toString","substr","createUser","overrides","id","user","username","email","password","firstName","lastName","isActive","createdAt","Date","updatedAt","createApiKey","apiKey","key","name","userId","permissions","expiresAt","now","createLogEntry","logEntry","message","level","timestamp","source","metadata","testId","environment","createConfig","config","value","type","settings","debug","maxRetries","timeout","features","enableLogging","enableMetrics","enableAlerts","createMultiple","factoryFn","count","baseOverrides","entities","i","entityOverrides","push","call","length","bind","reset","createRelatedEntities","userCount","apiKeysPerUser","logsPerUser","users","apiKeys","logs","configs","forEach","endpoint","result","relationships","userToApiKeys","reduce","acc","filter","userToLogs","log","error","module","exports"],"sources":["testDataFactory.js"],"sourcesContent":["/**\n * Test Data Factory for Creating Realistic Test Entities\n * \n * This class focuses solely on test data creation and management.\n * It eliminates duplicate test data creation across test files.\n */\n\nconst { logStart, logReturn } = require('../../lib/logUtils');\n\n/**\n * Test Data Factory for Creating Realistic Test Entities\n * \n * This class eliminates duplicate test data creation across test files\n * by providing standardized factory methods for common test entities.\n * \n * PARALLEL TEST SAFETY:\n * - Uses process.hrtime.bigint() for unique IDs to avoid race conditions\n * - No shared static state between parallel test executions\n * - Each test gets unique data that won't conflict with other tests\n */\nclass TestDataFactory {\n  static counter = 0;\n\n  /**\n   * Gets next unique ID for test data (parallel-safe when needed)\n   * \n   * @returns {string|number} Unique identifier - simple counter for normal tests, complex for parallel\n   */\n  static nextId() {\n    // Only use complex IDs in very specific parallel execution scenarios\n    const isJestParallel = process.env.JEST_WORKER_ID && process.env.JEST_WORKER_ID !== '1';\n    const isExplicitParallel = process.env.QTESTS_PARALLEL_MODE === 'true';\n    \n    if (!isJestParallel && !isExplicitParallel) {\n      // Normal testing - use simple counter for expected format\n      return ++this.counter;\n    }\n    \n    // Parallel testing - use complex unique identifier\n    const hrTime = process.hrtime.bigint();\n    const random = Math.random().toString(36).substr(2, 9);\n    return `${hrTime}-${random}`;\n  }\n\n  /**\n   * Creates a test user with realistic properties\n   * \n   * @param {Object} overrides - Properties to override defaults\n   * @returns {Object} Test user object\n   */\n  static createUser(overrides = {}) {\n    logStart('TestDataFactory.createUser', overrides);\n    \n    const id = this.nextId();\n    const user = {\n      id: `user-${id}`,\n      username: `testuser${id}`,\n      email: `test${id}@example.com`,\n      password: `hashedpassword${id}`,\n      firstName: 'Test',\n      lastName: `User${id}`,\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createUser', user);\n    return user;\n  }\n\n  /**\n   * Creates a test API key with realistic properties\n   * \n   * @param {Object} overrides - Properties to override defaults\n   * @returns {Object} Test API key object\n   */\n  static createApiKey(overrides = {}) {\n    logStart('TestDataFactory.createApiKey', overrides);\n    \n    const id = this.nextId();\n    const apiKey = {\n      id: `key-${id}`,\n      key: `test-api-key-${id}-${Math.random().toString(36).substr(2, 9)}`,\n      name: `Test API Key ${id}`,\n      userId: `user-${id}`,\n      isActive: true,\n      permissions: ['read', 'write'],\n      createdAt: new Date(),\n      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createApiKey', apiKey);\n    return apiKey;\n  }\n\n  /**\n   * Creates a test log entry with realistic properties\n   * \n   * @param {Object} overrides - Properties to override defaults\n   * @returns {Object} Test log entry object\n   */\n  static createLogEntry(overrides = {}) {\n    logStart('TestDataFactory.createLogEntry', overrides);\n    \n    const id = this.nextId();\n    const logEntry = {\n      id: `log-${id}`,\n      message: `Test log message ${id}`,\n      level: 'info',\n      timestamp: new Date(),\n      userId: `user-${id}`,\n      source: 'test-application',\n      metadata: {\n        testId: id,\n        environment: 'test'\n      },\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createLogEntry', logEntry);\n    return logEntry;\n  }\n\n  /**\n   * Creates a test configuration object with realistic properties\n   * \n   * @param {Object} overrides - Properties to override defaults\n   * @returns {Object} Test configuration object\n   */\n  static createConfig(overrides = {}) {\n    logStart('TestDataFactory.createConfig', overrides);\n    \n    const id = this.nextId();\n    const config = {\n      id: `config-${id}`,\n      name: `Test Configuration ${id}`,\n      value: `test-value-${id}`,\n      environment: 'test',\n      type: 'string',\n      isActive: true,\n      settings: {\n        debug: true,\n        maxRetries: 3,\n        timeout: 5000\n      },\n      features: {\n        enableLogging: true,\n        enableMetrics: false,\n        enableAlerts: true\n      },\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...overrides\n    };\n    \n    logReturn('TestDataFactory.createConfig', config);\n    return config;\n  }\n\n  /**\n   * Creates multiple test entities using a factory function\n   * \n   * @param {Function} factoryFn - Factory function to create single entities\n   * @param {number} count - Number of entities to create\n   * @param {Object} baseOverrides - Base overrides applied to all entities\n   * @returns {Array} Array of created test entities\n   */\n  static createMultiple(factoryFn, count = 10, baseOverrides = {}) {\n    logStart('TestDataFactory.createMultiple', { count, baseOverrides });\n    \n    const entities = [];\n    for (let i = 0; i < count; i++) {\n      const entityOverrides = { ...baseOverrides };\n      entities.push(factoryFn.call(this, entityOverrides));\n    }\n    \n    logReturn('TestDataFactory.createMultiple', `${entities.length} entities`);\n    return entities;\n  }\n\n  // Instance method wrappers for compatibility with TestSuiteBuilder\n  createUser(overrides) {\n    return TestDataFactory.createUser(overrides);\n  }\n\n  createApiKey(overrides) {\n    return TestDataFactory.createApiKey(overrides);\n  }\n\n  createLogEntry(overrides) {\n    return TestDataFactory.createLogEntry(overrides);\n  }\n\n  createConfig(overrides) {\n    return TestDataFactory.createConfig(overrides);\n  }\n\n  createMultiple(factoryFn, count, baseOverrides) {\n    return TestDataFactory.createMultiple(factoryFn.bind(this), count, baseOverrides);\n  }\n\n  // Static method for resetting counter\n  static reset() {\n    this.counter = 0;\n  }\n\n  /**\n   * Creates related entities with relationships\n   * \n   * @param {Object} config - Configuration for creating related entities\n   * @returns {Object} Object with created entities and relationships\n   */\n  static createRelatedEntities(config) {\n    logStart('TestDataFactory.createRelatedEntities', config);\n    \n    try {\n      const {\n        userCount = 1,\n        apiKeysPerUser = 1,\n        logsPerUser = 1\n      } = config;\n      \n      const users = [];\n      const apiKeys = [];\n      const logs = [];\n      \n      // Create users first\n      for (let i = 0; i < userCount; i++) {\n        users.push(this.createUser());\n      }\n      \n      // Create configs (shared configurations)\n      const configs = [this.createConfig()];\n      \n      // Create API keys for each user\n      users.forEach(user => {\n        for (let i = 0; i < apiKeysPerUser; i++) {\n          apiKeys.push(this.createApiKey({\n            userId: user.id,\n            key: `${user.username}-key-${i + 1}`\n          }));\n        }\n      });\n      \n      // Create logs for each user\n      users.forEach(user => {\n        for (let i = 0; i < logsPerUser; i++) {\n          logs.push(this.createLogEntry({\n            userId: user.id,\n            endpoint: `/api/users/${user.id}/data-${i + 1}`\n          }));\n        }\n      });\n      \n      const result = {\n        users,\n        apiKeys,\n        logs,\n        configs,\n        relationships: {\n          userToApiKeys: users.reduce((acc, user) => {\n            acc[user.id] = apiKeys.filter(key => key.userId === user.id);\n            return acc;\n          }, {}),\n          userToLogs: users.reduce((acc, user) => {\n            acc[user.id] = logs.filter(log => log.userId === user.id);\n            return acc;\n          }, {})\n        }\n      };\n      \n      logReturn('TestDataFactory.createRelatedEntities', `created ${users.length} users, ${apiKeys.length} API keys, ${logs.length} logs`);\n      return result;\n    } catch (error) {\n      logReturn('TestDataFactory.createRelatedEntities', `error: ${error.message}`);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = {\n  TestDataFactory\n};"],"mappings":"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","ignoreList":[]}