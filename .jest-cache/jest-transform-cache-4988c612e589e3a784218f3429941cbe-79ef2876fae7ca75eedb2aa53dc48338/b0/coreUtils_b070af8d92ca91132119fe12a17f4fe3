596fde645a09108a8072eb4895484c79
"use strict";
/**
 * Core Testing Utilities
 *
 * This module provides the fundamental testing utilities that form the backbone
 * of the qtests framework. These utilities are used across different testing
 * scenarios and provide basic functionality for method stubbing and console mocking.
 *
 * Design philosophy:
 * - Simple, focused utilities that do one thing well
 * - Minimal dependencies to avoid circular imports
 * - Framework-agnostic implementations
 * - Consistent API patterns across utilities
 *
 * Architecture rationale:
 * This module serves as the foundation layer because:
 * 1. These utilities have no dependencies on other qtests modules
 * 2. They provide primitive operations that other modules build upon
 * 3. Keeping them separate prevents circular dependency issues
 * 4. They can be used independently without importing the full qtests suite
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockConsole = exports.stubMethod = void 0;
// Import the core stubMethod utility from utils directory
// Placed in utils/ rather than lib/ because it's a pure utility function
// with zero dependencies on qtests-specific architecture or other modules
// This separation enables independent use and prevents circular dependencies
const stubMethod_js_1 = __importDefault(require("../utils/stubMethod.js"));
exports.stubMethod = stubMethod_js_1.default;
// Import mockConsole from its dedicated utility module using destructuring
// Destructuring extracts only mockConsole from module exports for clean imports
// This pattern allows the mockConsole module to export additional utilities in future
// while maintaining backward compatibility and explicit import declarations
const mockConsole_js_1 = require("../utils/mockConsole.js");
Object.defineProperty(exports, "mockConsole", { enumerable: true, get: function () { return mockConsole_js_1.mockConsole; } });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9saWIvY29yZVV0aWxzLnRzIiwibWFwcGluZ3MiOiI7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRzs7Ozs7O0FBRUgsMERBQTBEO0FBQzFELHlFQUF5RTtBQUN6RSwwRUFBMEU7QUFDMUUsNkVBQTZFO0FBQzdFLDJFQUFnRDtBQThCOUMscUJBOUJLLHVCQUFVLENBOEJMO0FBNUJaLDJFQUEyRTtBQUMzRSxnRkFBZ0Y7QUFDaEYsc0ZBQXNGO0FBQ3RGLDRFQUE0RTtBQUM1RSw0REFBc0Q7QUF5QnBELDRGQXpCTyw0QkFBVyxPQXlCUCIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL2xpYi9jb3JlVXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIENvcmUgVGVzdGluZyBVdGlsaXRpZXNcbiAqIFxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgdGhlIGZ1bmRhbWVudGFsIHRlc3RpbmcgdXRpbGl0aWVzIHRoYXQgZm9ybSB0aGUgYmFja2JvbmVcbiAqIG9mIHRoZSBxdGVzdHMgZnJhbWV3b3JrLiBUaGVzZSB1dGlsaXRpZXMgYXJlIHVzZWQgYWNyb3NzIGRpZmZlcmVudCB0ZXN0aW5nXG4gKiBzY2VuYXJpb3MgYW5kIHByb3ZpZGUgYmFzaWMgZnVuY3Rpb25hbGl0eSBmb3IgbWV0aG9kIHN0dWJiaW5nIGFuZCBjb25zb2xlIG1vY2tpbmcuXG4gKiBcbiAqIERlc2lnbiBwaGlsb3NvcGh5OlxuICogLSBTaW1wbGUsIGZvY3VzZWQgdXRpbGl0aWVzIHRoYXQgZG8gb25lIHRoaW5nIHdlbGxcbiAqIC0gTWluaW1hbCBkZXBlbmRlbmNpZXMgdG8gYXZvaWQgY2lyY3VsYXIgaW1wb3J0c1xuICogLSBGcmFtZXdvcmstYWdub3N0aWMgaW1wbGVtZW50YXRpb25zXG4gKiAtIENvbnNpc3RlbnQgQVBJIHBhdHRlcm5zIGFjcm9zcyB1dGlsaXRpZXNcbiAqIFxuICogQXJjaGl0ZWN0dXJlIHJhdGlvbmFsZTpcbiAqIFRoaXMgbW9kdWxlIHNlcnZlcyBhcyB0aGUgZm91bmRhdGlvbiBsYXllciBiZWNhdXNlOlxuICogMS4gVGhlc2UgdXRpbGl0aWVzIGhhdmUgbm8gZGVwZW5kZW5jaWVzIG9uIG90aGVyIHF0ZXN0cyBtb2R1bGVzXG4gKiAyLiBUaGV5IHByb3ZpZGUgcHJpbWl0aXZlIG9wZXJhdGlvbnMgdGhhdCBvdGhlciBtb2R1bGVzIGJ1aWxkIHVwb25cbiAqIDMuIEtlZXBpbmcgdGhlbSBzZXBhcmF0ZSBwcmV2ZW50cyBjaXJjdWxhciBkZXBlbmRlbmN5IGlzc3Vlc1xuICogNC4gVGhleSBjYW4gYmUgdXNlZCBpbmRlcGVuZGVudGx5IHdpdGhvdXQgaW1wb3J0aW5nIHRoZSBmdWxsIHF0ZXN0cyBzdWl0ZVxuICovXG5cbi8vIEltcG9ydCB0aGUgY29yZSBzdHViTWV0aG9kIHV0aWxpdHkgZnJvbSB1dGlscyBkaXJlY3Rvcnlcbi8vIFBsYWNlZCBpbiB1dGlscy8gcmF0aGVyIHRoYW4gbGliLyBiZWNhdXNlIGl0J3MgYSBwdXJlIHV0aWxpdHkgZnVuY3Rpb25cbi8vIHdpdGggemVybyBkZXBlbmRlbmNpZXMgb24gcXRlc3RzLXNwZWNpZmljIGFyY2hpdGVjdHVyZSBvciBvdGhlciBtb2R1bGVzXG4vLyBUaGlzIHNlcGFyYXRpb24gZW5hYmxlcyBpbmRlcGVuZGVudCB1c2UgYW5kIHByZXZlbnRzIGNpcmN1bGFyIGRlcGVuZGVuY2llc1xuaW1wb3J0IHN0dWJNZXRob2QgZnJvbSAnLi4vdXRpbHMvc3R1Yk1ldGhvZC5qcyc7XG5cbi8vIEltcG9ydCBtb2NrQ29uc29sZSBmcm9tIGl0cyBkZWRpY2F0ZWQgdXRpbGl0eSBtb2R1bGUgdXNpbmcgZGVzdHJ1Y3R1cmluZ1xuLy8gRGVzdHJ1Y3R1cmluZyBleHRyYWN0cyBvbmx5IG1vY2tDb25zb2xlIGZyb20gbW9kdWxlIGV4cG9ydHMgZm9yIGNsZWFuIGltcG9ydHNcbi8vIFRoaXMgcGF0dGVybiBhbGxvd3MgdGhlIG1vY2tDb25zb2xlIG1vZHVsZSB0byBleHBvcnQgYWRkaXRpb25hbCB1dGlsaXRpZXMgaW4gZnV0dXJlXG4vLyB3aGlsZSBtYWludGFpbmluZyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IGFuZCBleHBsaWNpdCBpbXBvcnQgZGVjbGFyYXRpb25zXG5pbXBvcnQgeyBtb2NrQ29uc29sZSB9IGZyb20gJy4uL3V0aWxzL21vY2tDb25zb2xlLmpzJztcblxuLyoqXG4gKiBFeHBvcnQgY29yZSB0ZXN0aW5nIHV0aWxpdGllc1xuICogXG4gKiBUaGVzZSBhcmUgdGhlIG1vc3QgY29tbW9ubHkgdXNlZCB1dGlsaXRpZXMgaW4gdGhlIHF0ZXN0cyBmcmFtZXdvcmsuXG4gKiBUaGV5IGFyZSBleHBvcnRlZCBhdCB0aGUgdG9wIGxldmVsIGJlY2F1c2U6XG4gKiAxLiBzdHViTWV0aG9kIGFuZCBtb2NrQ29uc29sZSBhcmUgdXNlZCBpbiA4MCUgb2YgdGVzdGluZyBzY2VuYXJpb3NcbiAqIDIuIFRoZXkgaGF2ZSBzaW1wbGUsIHByZWRpY3RhYmxlIEFQSXMgdGhhdCBkb24ndCByZXF1aXJlIG5hbWVzcGFjaW5nXG4gKiAzLiBUaGV5IGZvcm0gdGhlIGZvdW5kYXRpb24gdGhhdCBvdGhlciB1dGlsaXRpZXMgYnVpbGQgdXBvblxuICogNC4gRnJlcXVlbnQgdXNhZ2UganVzdGlmaWVzIHRvcC1sZXZlbCBhY2Nlc3MgZm9yIGRldmVsb3BlciBjb252ZW5pZW5jZVxuICogXG4gKiBFeHBvcnQgc3RyYXRlZ3k6XG4gKiAtIERpcmVjdCBvYmplY3QgZXhwb3J0IHJhdGhlciB0aGFuIGluZGl2aWR1YWwgZXhwb3J0cyBmb3IgY29uc2lzdGVuY3lcbiAqIC0gRGVzY3JpcHRpdmUgcHJvcGVydHkgbmFtZXMgdGhhdCBjbGVhcmx5IGluZGljYXRlIHB1cnBvc2VcbiAqIC0gQ29tbWVudHMgZXhwbGFpbiB0aGUgcHJpbWFyeSB1c2UgY2FzZSBmb3IgZWFjaCB1dGlsaXR5XG4gKi9cbi8vIEV4cG9ydCBjb3JlIHRlc3RpbmcgdXRpbGl0aWVzIHVzaW5nIEVTIG1vZHVsZSBzeW50YXhcbi8vIE5hbWVkIGV4cG9ydHMgcGF0dGVybiBjaG9zZW4gZm9yIEVTIG1vZHVsZSBjb21wYXRpYmlsaXR5OlxuLy8gMS4gUHJvdmlkZXMgY2xlYXIgbmFtZXNwYWNlIG9yZ2FuaXphdGlvbiBmb3IgcmVsYXRlZCB1dGlsaXRpZXNcbi8vIDIuIEVuYWJsZXMgZWFzaWVyIGRlc3RydWN0dXJpbmcgaW1wb3J0cyBpbiBjb25zdW1pbmcgY29kZVxuLy8gMy4gTWFpbnRhaW5zIGNvbnNpc3RlbnQgZXhwb3J0IHBhdHRlcm4gYWNyb3NzIGFsbCBxdGVzdHMgbW9kdWxlc1xuLy8gNC4gQWxsb3dzIGZvciBmdXR1cmUgZXhwYW5zaW9uIHdpdGhvdXQgYnJlYWtpbmcgZXhpc3RpbmcgaW1wb3J0c1xuZXhwb3J0IHtcbiAgc3R1Yk1ldGhvZCwgICAvLyBNZXRob2QgcmVwbGFjZW1lbnQgdXRpbGl0eSBmb3IgaXNvbGF0aW5nIGRlcGVuZGVuY2llcyBkdXJpbmcgdGVzdGluZ1xuICBtb2NrQ29uc29sZSAgIC8vIENvbnNvbGUgb3V0cHV0IGNhcHR1cmUgdXRpbGl0eSBmb3IgdGVzdGluZyBsb2dnaW5nIGJlaGF2aW9yIHdpdGhvdXQgcG9sbHV0aW9uXG59O1xuIl0sInZlcnNpb24iOjN9