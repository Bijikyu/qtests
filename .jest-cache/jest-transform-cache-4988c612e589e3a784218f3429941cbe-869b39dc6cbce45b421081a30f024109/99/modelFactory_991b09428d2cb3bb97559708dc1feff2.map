{"version":3,"names":["BaseMockModel","mockCollections","require","mockApiKeys","mockLogs","createMockModel","modelName","schema","console","log","ModelClass","constructor","data","Object","defineProperty","value","error","message","resetAllCollections","clear","length","getAllCollections","clearCollection","has","collection","get","module","exports"],"sources":["modelFactory.js"],"sourcesContent":["/**\n * Model Factory and Utilities\n * \n * This module focuses solely on model creation, factory functions, and collection management.\n * It provides utilities for creating custom models and managing collections.\n */\n\nconst { BaseMockModel, mockCollections } = require('./baseMockModel');\nconst { mockApiKeys } = require('./apiKeyModel');\nconst { mockLogs } = require('./apiLogModel');\n\n/**\n * Create custom mock model class\n * \n * Factory function that creates a new mock model class with the specified name.\n * The created class extends BaseMockModel and can be used like any Mongoose model.\n * \n * @param {string} modelName - Name for the new model class\n * @param {Object} schema - Optional schema definition for validation\n * @returns {Class} New mock model class\n * \n * @example\n * const User = createMockModel('User');\n * const user = new User({ name: 'John', email: 'john@example.com' });\n * await user.save();\n */\nfunction createMockModel(modelName, schema = {}) {\n  console.log(`createMockModel is running with ${modelName}`);\n  \n  try {\n    // Create dynamic class with specified name\n    const ModelClass = class extends BaseMockModel {\n      constructor(data) {\n        super(data);\n        this.constructor.modelName = modelName;\n      }\n    };\n    \n    // Set the class name for debugging and logging\n    Object.defineProperty(ModelClass, 'name', { value: modelName });\n    \n    console.log(`createMockModel is returning ${modelName} class`);\n    return ModelClass;\n  } catch (error) {\n    console.log(`createMockModel error ${error.message}`);\n    throw error;\n  }\n}\n\n/**\n * Reset all mock collections\n * \n * Utility function that clears all in-memory collections for clean test state.\n * Useful for test setup and teardown to ensure test isolation.\n * \n * @returns {void}\n */\nfunction resetAllCollections() {\n  console.log(`resetAllCollections is running with none`);\n  \n  try {\n    // Clear the global collections map\n    mockCollections.clear();\n    \n    // Clear legacy arrays for backward compatibility\n    mockApiKeys.length = 0;\n    mockLogs.length = 0;\n    \n    console.log(`resetAllCollections completed`);\n  } catch (error) {\n    console.log(`resetAllCollections error ${error.message}`);\n    throw error;\n  }\n}\n\n/**\n * Get all collections for debugging or testing\n * \n * @returns {Map} Map of all mock collections\n */\nfunction getAllCollections() {\n  return mockCollections;\n}\n\n/**\n * Clear specific collection by model name\n * \n * @param {string} modelName - Name of the model collection to clear\n * @returns {boolean} True if collection was found and cleared\n */\nfunction clearCollection(modelName) {\n  console.log(`clearCollection is running with ${modelName}`);\n  \n  try {\n    if (mockCollections.has(modelName)) {\n      const collection = mockCollections.get(modelName);\n      collection.length = 0;\n      console.log(`clearCollection cleared ${modelName}`);\n      return true;\n    }\n    \n    console.log(`clearCollection ${modelName} not found`);\n    return false;\n  } catch (error) {\n    console.log(`clearCollection error ${error.message}`);\n    throw error;\n  }\n}\n\nmodule.exports = {\n  createMockModel,\n  resetAllCollections,\n  getAllCollections,\n  clearCollection\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA,aAAa;EAAEC;AAAgB,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AACrE,MAAM;EAAEC;AAAY,CAAC,GAAGD,OAAO,CAAC,eAAe,CAAC;AAChD,MAAM;EAAEE;AAAS,CAAC,GAAGF,OAAO,CAAC,eAAe,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,eAAeA,CAACC,SAAS,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;EAC/CC,OAAO,CAACC,GAAG,CAAC,mCAAmCH,SAAS,EAAE,CAAC;EAE3D,IAAI;IACF;IACA,MAAMI,UAAU,GAAG,cAAcV,aAAa,CAAC;MAC7CW,WAAWA,CAACC,IAAI,EAAE;QAChB,KAAK,CAACA,IAAI,CAAC;QACX,IAAI,CAACD,WAAW,CAACL,SAAS,GAAGA,SAAS;MACxC;IACF,CAAC;;IAED;IACAO,MAAM,CAACC,cAAc,CAACJ,UAAU,EAAE,MAAM,EAAE;MAAEK,KAAK,EAAET;IAAU,CAAC,CAAC;IAE/DE,OAAO,CAACC,GAAG,CAAC,gCAAgCH,SAAS,QAAQ,CAAC;IAC9D,OAAOI,UAAU;EACnB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdR,OAAO,CAACC,GAAG,CAAC,yBAAyBO,KAAK,CAACC,OAAO,EAAE,CAAC;IACrD,MAAMD,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,mBAAmBA,CAAA,EAAG;EAC7BV,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;EAEvD,IAAI;IACF;IACAR,eAAe,CAACkB,KAAK,CAAC,CAAC;;IAEvB;IACAhB,WAAW,CAACiB,MAAM,GAAG,CAAC;IACtBhB,QAAQ,CAACgB,MAAM,GAAG,CAAC;IAEnBZ,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC9C,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdR,OAAO,CAACC,GAAG,CAAC,6BAA6BO,KAAK,CAACC,OAAO,EAAE,CAAC;IACzD,MAAMD,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASK,iBAAiBA,CAAA,EAAG;EAC3B,OAAOpB,eAAe;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqB,eAAeA,CAAChB,SAAS,EAAE;EAClCE,OAAO,CAACC,GAAG,CAAC,mCAAmCH,SAAS,EAAE,CAAC;EAE3D,IAAI;IACF,IAAIL,eAAe,CAACsB,GAAG,CAACjB,SAAS,CAAC,EAAE;MAClC,MAAMkB,UAAU,GAAGvB,eAAe,CAACwB,GAAG,CAACnB,SAAS,CAAC;MACjDkB,UAAU,CAACJ,MAAM,GAAG,CAAC;MACrBZ,OAAO,CAACC,GAAG,CAAC,2BAA2BH,SAAS,EAAE,CAAC;MACnD,OAAO,IAAI;IACb;IAEAE,OAAO,CAACC,GAAG,CAAC,mBAAmBH,SAAS,YAAY,CAAC;IACrD,OAAO,KAAK;EACd,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdR,OAAO,CAACC,GAAG,CAAC,yBAAyBO,KAAK,CAACC,OAAO,EAAE,CAAC;IACrD,MAAMD,KAAK;EACb;AACF;AAEAU,MAAM,CAACC,OAAO,GAAG;EACftB,eAAe;EACfa,mBAAmB;EACnBG,iBAAiB;EACjBC;AACF,CAAC","ignoreList":[]}