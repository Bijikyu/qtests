9ddf8e50993767dd425fba526d790c29
/**
 * Model Factory and Utilities
 * 
 * This module focuses solely on model creation, factory functions, and collection management.
 * It provides utilities for creating custom models and managing collections.
 */

const {
  BaseMockModel,
  mockCollections
} = require('./baseMockModel');
const {
  mockApiKeys
} = require('./apiKeyModel');
const {
  mockLogs
} = require('./apiLogModel');

/**
 * Create custom mock model class
 * 
 * Factory function that creates a new mock model class with the specified name.
 * The created class extends BaseMockModel and can be used like any Mongoose model.
 * 
 * @param {string} modelName - Name for the new model class
 * @param {Object} schema - Optional schema definition for validation
 * @returns {Class} New mock model class
 * 
 * @example
 * const User = createMockModel('User');
 * const user = new User({ name: 'John', email: 'john@example.com' });
 * await user.save();
 */
function createMockModel(modelName, schema = {}) {
  console.log(`createMockModel is running with ${modelName}`);
  try {
    // Create dynamic class with specified name
    const ModelClass = class extends BaseMockModel {
      constructor(data) {
        super(data);
        this.constructor.modelName = modelName;
      }
    };

    // Set the class name for debugging and logging
    Object.defineProperty(ModelClass, 'name', {
      value: modelName
    });
    console.log(`createMockModel is returning ${modelName} class`);
    return ModelClass;
  } catch (error) {
    console.log(`createMockModel error ${error.message}`);
    throw error;
  }
}

/**
 * Reset all mock collections
 * 
 * Utility function that clears all in-memory collections for clean test state.
 * Useful for test setup and teardown to ensure test isolation.
 * 
 * @returns {void}
 */
function resetAllCollections() {
  console.log(`resetAllCollections is running with none`);
  try {
    // Clear the global collections map
    mockCollections.clear();

    // Clear legacy arrays for backward compatibility
    mockApiKeys.length = 0;
    mockLogs.length = 0;
    console.log(`resetAllCollections completed`);
  } catch (error) {
    console.log(`resetAllCollections error ${error.message}`);
    throw error;
  }
}

/**
 * Get all collections for debugging or testing
 * 
 * @returns {Map} Map of all mock collections
 */
function getAllCollections() {
  return mockCollections;
}

/**
 * Clear specific collection by model name
 * 
 * @param {string} modelName - Name of the model collection to clear
 * @returns {boolean} True if collection was found and cleared
 */
function clearCollection(modelName) {
  console.log(`clearCollection is running with ${modelName}`);
  try {
    if (mockCollections.has(modelName)) {
      const collection = mockCollections.get(modelName);
      collection.length = 0;
      console.log(`clearCollection cleared ${modelName}`);
      return true;
    }
    console.log(`clearCollection ${modelName} not found`);
    return false;
  } catch (error) {
    console.log(`clearCollection error ${error.message}`);
    throw error;
  }
}
module.exports = {
  createMockModel,
  resetAllCollections,
  getAllCollections,
  clearCollection
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCYXNlTW9ja01vZGVsIiwibW9ja0NvbGxlY3Rpb25zIiwicmVxdWlyZSIsIm1vY2tBcGlLZXlzIiwibW9ja0xvZ3MiLCJjcmVhdGVNb2NrTW9kZWwiLCJtb2RlbE5hbWUiLCJzY2hlbWEiLCJjb25zb2xlIiwibG9nIiwiTW9kZWxDbGFzcyIsImNvbnN0cnVjdG9yIiwiZGF0YSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJlcnJvciIsIm1lc3NhZ2UiLCJyZXNldEFsbENvbGxlY3Rpb25zIiwiY2xlYXIiLCJsZW5ndGgiLCJnZXRBbGxDb2xsZWN0aW9ucyIsImNsZWFyQ29sbGVjdGlvbiIsImhhcyIsImNvbGxlY3Rpb24iLCJnZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsibW9kZWxGYWN0b3J5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9kZWwgRmFjdG9yeSBhbmQgVXRpbGl0aWVzXG4gKiBcbiAqIFRoaXMgbW9kdWxlIGZvY3VzZXMgc29sZWx5IG9uIG1vZGVsIGNyZWF0aW9uLCBmYWN0b3J5IGZ1bmN0aW9ucywgYW5kIGNvbGxlY3Rpb24gbWFuYWdlbWVudC5cbiAqIEl0IHByb3ZpZGVzIHV0aWxpdGllcyBmb3IgY3JlYXRpbmcgY3VzdG9tIG1vZGVscyBhbmQgbWFuYWdpbmcgY29sbGVjdGlvbnMuXG4gKi9cblxuY29uc3QgeyBCYXNlTW9ja01vZGVsLCBtb2NrQ29sbGVjdGlvbnMgfSA9IHJlcXVpcmUoJy4vYmFzZU1vY2tNb2RlbCcpO1xuY29uc3QgeyBtb2NrQXBpS2V5cyB9ID0gcmVxdWlyZSgnLi9hcGlLZXlNb2RlbCcpO1xuY29uc3QgeyBtb2NrTG9ncyB9ID0gcmVxdWlyZSgnLi9hcGlMb2dNb2RlbCcpO1xuXG4vKipcbiAqIENyZWF0ZSBjdXN0b20gbW9jayBtb2RlbCBjbGFzc1xuICogXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhIG5ldyBtb2NrIG1vZGVsIGNsYXNzIHdpdGggdGhlIHNwZWNpZmllZCBuYW1lLlxuICogVGhlIGNyZWF0ZWQgY2xhc3MgZXh0ZW5kcyBCYXNlTW9ja01vZGVsIGFuZCBjYW4gYmUgdXNlZCBsaWtlIGFueSBNb25nb29zZSBtb2RlbC5cbiAqIFxuICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsTmFtZSAtIE5hbWUgZm9yIHRoZSBuZXcgbW9kZWwgY2xhc3NcbiAqIEBwYXJhbSB7T2JqZWN0fSBzY2hlbWEgLSBPcHRpb25hbCBzY2hlbWEgZGVmaW5pdGlvbiBmb3IgdmFsaWRhdGlvblxuICogQHJldHVybnMge0NsYXNzfSBOZXcgbW9jayBtb2RlbCBjbGFzc1xuICogXG4gKiBAZXhhbXBsZVxuICogY29uc3QgVXNlciA9IGNyZWF0ZU1vY2tNb2RlbCgnVXNlcicpO1xuICogY29uc3QgdXNlciA9IG5ldyBVc2VyKHsgbmFtZTogJ0pvaG4nLCBlbWFpbDogJ2pvaG5AZXhhbXBsZS5jb20nIH0pO1xuICogYXdhaXQgdXNlci5zYXZlKCk7XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1vY2tNb2RlbChtb2RlbE5hbWUsIHNjaGVtYSA9IHt9KSB7XG4gIGNvbnNvbGUubG9nKGBjcmVhdGVNb2NrTW9kZWwgaXMgcnVubmluZyB3aXRoICR7bW9kZWxOYW1lfWApO1xuICBcbiAgdHJ5IHtcbiAgICAvLyBDcmVhdGUgZHluYW1pYyBjbGFzcyB3aXRoIHNwZWNpZmllZCBuYW1lXG4gICAgY29uc3QgTW9kZWxDbGFzcyA9IGNsYXNzIGV4dGVuZHMgQmFzZU1vY2tNb2RlbCB7XG4gICAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLm1vZGVsTmFtZSA9IG1vZGVsTmFtZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIC8vIFNldCB0aGUgY2xhc3MgbmFtZSBmb3IgZGVidWdnaW5nIGFuZCBsb2dnaW5nXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZGVsQ2xhc3MsICduYW1lJywgeyB2YWx1ZTogbW9kZWxOYW1lIH0pO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGBjcmVhdGVNb2NrTW9kZWwgaXMgcmV0dXJuaW5nICR7bW9kZWxOYW1lfSBjbGFzc2ApO1xuICAgIHJldHVybiBNb2RlbENsYXNzO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUubG9nKGBjcmVhdGVNb2NrTW9kZWwgZXJyb3IgJHtlcnJvci5tZXNzYWdlfWApO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbi8qKlxuICogUmVzZXQgYWxsIG1vY2sgY29sbGVjdGlvbnNcbiAqIFxuICogVXRpbGl0eSBmdW5jdGlvbiB0aGF0IGNsZWFycyBhbGwgaW4tbWVtb3J5IGNvbGxlY3Rpb25zIGZvciBjbGVhbiB0ZXN0IHN0YXRlLlxuICogVXNlZnVsIGZvciB0ZXN0IHNldHVwIGFuZCB0ZWFyZG93biB0byBlbnN1cmUgdGVzdCBpc29sYXRpb24uXG4gKiBcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiByZXNldEFsbENvbGxlY3Rpb25zKCkge1xuICBjb25zb2xlLmxvZyhgcmVzZXRBbGxDb2xsZWN0aW9ucyBpcyBydW5uaW5nIHdpdGggbm9uZWApO1xuICBcbiAgdHJ5IHtcbiAgICAvLyBDbGVhciB0aGUgZ2xvYmFsIGNvbGxlY3Rpb25zIG1hcFxuICAgIG1vY2tDb2xsZWN0aW9ucy5jbGVhcigpO1xuICAgIFxuICAgIC8vIENsZWFyIGxlZ2FjeSBhcnJheXMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICBtb2NrQXBpS2V5cy5sZW5ndGggPSAwO1xuICAgIG1vY2tMb2dzLmxlbmd0aCA9IDA7XG4gICAgXG4gICAgY29uc29sZS5sb2coYHJlc2V0QWxsQ29sbGVjdGlvbnMgY29tcGxldGVkYCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5sb2coYHJlc2V0QWxsQ29sbGVjdGlvbnMgZXJyb3IgJHtlcnJvci5tZXNzYWdlfWApO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbi8qKlxuICogR2V0IGFsbCBjb2xsZWN0aW9ucyBmb3IgZGVidWdnaW5nIG9yIHRlc3RpbmdcbiAqIFxuICogQHJldHVybnMge01hcH0gTWFwIG9mIGFsbCBtb2NrIGNvbGxlY3Rpb25zXG4gKi9cbmZ1bmN0aW9uIGdldEFsbENvbGxlY3Rpb25zKCkge1xuICByZXR1cm4gbW9ja0NvbGxlY3Rpb25zO1xufVxuXG4vKipcbiAqIENsZWFyIHNwZWNpZmljIGNvbGxlY3Rpb24gYnkgbW9kZWwgbmFtZVxuICogXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9kZWxOYW1lIC0gTmFtZSBvZiB0aGUgbW9kZWwgY29sbGVjdGlvbiB0byBjbGVhclxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgY29sbGVjdGlvbiB3YXMgZm91bmQgYW5kIGNsZWFyZWRcbiAqL1xuZnVuY3Rpb24gY2xlYXJDb2xsZWN0aW9uKG1vZGVsTmFtZSkge1xuICBjb25zb2xlLmxvZyhgY2xlYXJDb2xsZWN0aW9uIGlzIHJ1bm5pbmcgd2l0aCAke21vZGVsTmFtZX1gKTtcbiAgXG4gIHRyeSB7XG4gICAgaWYgKG1vY2tDb2xsZWN0aW9ucy5oYXMobW9kZWxOYW1lKSkge1xuICAgICAgY29uc3QgY29sbGVjdGlvbiA9IG1vY2tDb2xsZWN0aW9ucy5nZXQobW9kZWxOYW1lKTtcbiAgICAgIGNvbGxlY3Rpb24ubGVuZ3RoID0gMDtcbiAgICAgIGNvbnNvbGUubG9nKGBjbGVhckNvbGxlY3Rpb24gY2xlYXJlZCAke21vZGVsTmFtZX1gKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLmxvZyhgY2xlYXJDb2xsZWN0aW9uICR7bW9kZWxOYW1lfSBub3QgZm91bmRgKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5sb2coYGNsZWFyQ29sbGVjdGlvbiBlcnJvciAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZU1vY2tNb2RlbCxcbiAgcmVzZXRBbGxDb2xsZWN0aW9ucyxcbiAgZ2V0QWxsQ29sbGVjdGlvbnMsXG4gIGNsZWFyQ29sbGVjdGlvblxufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNO0VBQUVBLGFBQWE7RUFBRUM7QUFBZ0IsQ0FBQyxHQUFHQyxPQUFPLENBQUMsaUJBQWlCLENBQUM7QUFDckUsTUFBTTtFQUFFQztBQUFZLENBQUMsR0FBR0QsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUNoRCxNQUFNO0VBQUVFO0FBQVMsQ0FBQyxHQUFHRixPQUFPLENBQUMsZUFBZSxDQUFDOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxlQUFlQSxDQUFDQyxTQUFTLEVBQUVDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRTtFQUMvQ0MsT0FBTyxDQUFDQyxHQUFHLENBQUMsbUNBQW1DSCxTQUFTLEVBQUUsQ0FBQztFQUUzRCxJQUFJO0lBQ0Y7SUFDQSxNQUFNSSxVQUFVLEdBQUcsY0FBY1YsYUFBYSxDQUFDO01BQzdDVyxXQUFXQSxDQUFDQyxJQUFJLEVBQUU7UUFDaEIsS0FBSyxDQUFDQSxJQUFJLENBQUM7UUFDWCxJQUFJLENBQUNELFdBQVcsQ0FBQ0wsU0FBUyxHQUFHQSxTQUFTO01BQ3hDO0lBQ0YsQ0FBQzs7SUFFRDtJQUNBTyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0osVUFBVSxFQUFFLE1BQU0sRUFBRTtNQUFFSyxLQUFLLEVBQUVUO0lBQVUsQ0FBQyxDQUFDO0lBRS9ERSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxnQ0FBZ0NILFNBQVMsUUFBUSxDQUFDO0lBQzlELE9BQU9JLFVBQVU7RUFDbkIsQ0FBQyxDQUFDLE9BQU9NLEtBQUssRUFBRTtJQUNkUixPQUFPLENBQUNDLEdBQUcsQ0FBQyx5QkFBeUJPLEtBQUssQ0FBQ0MsT0FBTyxFQUFFLENBQUM7SUFDckQsTUFBTUQsS0FBSztFQUNiO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNFLG1CQUFtQkEsQ0FBQSxFQUFHO0VBQzdCVixPQUFPLENBQUNDLEdBQUcsQ0FBQywwQ0FBMEMsQ0FBQztFQUV2RCxJQUFJO0lBQ0Y7SUFDQVIsZUFBZSxDQUFDa0IsS0FBSyxDQUFDLENBQUM7O0lBRXZCO0lBQ0FoQixXQUFXLENBQUNpQixNQUFNLEdBQUcsQ0FBQztJQUN0QmhCLFFBQVEsQ0FBQ2dCLE1BQU0sR0FBRyxDQUFDO0lBRW5CWixPQUFPLENBQUNDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQztFQUM5QyxDQUFDLENBQUMsT0FBT08sS0FBSyxFQUFFO0lBQ2RSLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDZCQUE2Qk8sS0FBSyxDQUFDQyxPQUFPLEVBQUUsQ0FBQztJQUN6RCxNQUFNRCxLQUFLO0VBQ2I7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0ssaUJBQWlCQSxDQUFBLEVBQUc7RUFDM0IsT0FBT3BCLGVBQWU7QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU3FCLGVBQWVBLENBQUNoQixTQUFTLEVBQUU7RUFDbENFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLG1DQUFtQ0gsU0FBUyxFQUFFLENBQUM7RUFFM0QsSUFBSTtJQUNGLElBQUlMLGVBQWUsQ0FBQ3NCLEdBQUcsQ0FBQ2pCLFNBQVMsQ0FBQyxFQUFFO01BQ2xDLE1BQU1rQixVQUFVLEdBQUd2QixlQUFlLENBQUN3QixHQUFHLENBQUNuQixTQUFTLENBQUM7TUFDakRrQixVQUFVLENBQUNKLE1BQU0sR0FBRyxDQUFDO01BQ3JCWixPQUFPLENBQUNDLEdBQUcsQ0FBQywyQkFBMkJILFNBQVMsRUFBRSxDQUFDO01BQ25ELE9BQU8sSUFBSTtJQUNiO0lBRUFFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLG1CQUFtQkgsU0FBUyxZQUFZLENBQUM7SUFDckQsT0FBTyxLQUFLO0VBQ2QsQ0FBQyxDQUFDLE9BQU9VLEtBQUssRUFBRTtJQUNkUixPQUFPLENBQUNDLEdBQUcsQ0FBQyx5QkFBeUJPLEtBQUssQ0FBQ0MsT0FBTyxFQUFFLENBQUM7SUFDckQsTUFBTUQsS0FBSztFQUNiO0FBQ0Y7QUFFQVUsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZnRCLGVBQWU7RUFDZmEsbUJBQW1CO0VBQ25CRyxpQkFBaUI7RUFDakJDO0FBQ0YsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==