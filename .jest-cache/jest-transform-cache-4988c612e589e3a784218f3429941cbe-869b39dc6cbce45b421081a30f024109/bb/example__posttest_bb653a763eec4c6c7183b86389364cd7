2aa5298fd05ae0ae05f20bd0e2a4e2a2
// Auto-generated API test for POST /api/users - optimized for speed
const {
  httpTest
} = require('qtests/lib/envUtils');
describe('POST /api/users', () => {
  // Shared app setup for performance
  let sharedApp;
  beforeAll(() => {
    sharedApp = httpTest.createMockApp();
  });
  test('should succeed', async () => {
    // Reuse shared app for speed
    const app = httpTest.createMockApp();
    app.post('/api/users', (req, res) => {
      res.statusCode = 200;
      res.setHeader('content-type', 'application/json');
      res.end(JSON.stringify({
        success: true
      }));
    });
    const res = await httpTest.supertest(app).post('/api/users').expect(200).end();
    expect(res.body.success).toBe(true);
  });
  test('should handle error responses', async () => {
    const app = httpTest.createMockApp();
    app.post('/api/users', (req, res) => {
      res.statusCode = 400;
      res.setHeader('content-type', 'application/json');
      res.end(JSON.stringify({
        error: 'Bad request'
      }));
    });
    const res = await httpTest.supertest(app).post('/api/users').expect(400).end();
    expect(res.body.error).toBe('Bad request');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJodHRwVGVzdCIsInJlcXVpcmUiLCJkZXNjcmliZSIsInNoYXJlZEFwcCIsImJlZm9yZUFsbCIsImNyZWF0ZU1vY2tBcHAiLCJ0ZXN0IiwiYXBwIiwicG9zdCIsInJlcSIsInJlcyIsInN0YXR1c0NvZGUiLCJzZXRIZWFkZXIiLCJlbmQiLCJKU09OIiwic3RyaW5naWZ5Iiwic3VjY2VzcyIsInN1cGVydGVzdCIsImV4cGVjdCIsImJvZHkiLCJ0b0JlIiwiZXJyb3IiXSwic291cmNlcyI6WyJleGFtcGxlX19wb3N0LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQXV0by1nZW5lcmF0ZWQgQVBJIHRlc3QgZm9yIFBPU1QgL2FwaS91c2VycyAtIG9wdGltaXplZCBmb3Igc3BlZWRcbmNvbnN0IHsgaHR0cFRlc3QgfSA9IHJlcXVpcmUoJ3F0ZXN0cy9saWIvZW52VXRpbHMnKTtcblxuZGVzY3JpYmUoJ1BPU1QgL2FwaS91c2VycycsICgpID0+IHtcbiAgLy8gU2hhcmVkIGFwcCBzZXR1cCBmb3IgcGVyZm9ybWFuY2VcbiAgbGV0IHNoYXJlZEFwcDtcbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICBzaGFyZWRBcHAgPSBodHRwVGVzdC5jcmVhdGVNb2NrQXBwKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBzdWNjZWVkJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIFJldXNlIHNoYXJlZCBhcHAgZm9yIHNwZWVkXG4gICAgY29uc3QgYXBwID0gaHR0cFRlc3QuY3JlYXRlTW9ja0FwcCgpO1xuICAgIGFwcC5wb3N0KCcvYXBpL3VzZXJzJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgICByZXMuc3RhdHVzQ29kZSA9IDIwMDtcbiAgICAgIHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHsgc3VjY2VzczogdHJ1ZSB9KSk7XG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgcmVzID0gYXdhaXQgaHR0cFRlc3Quc3VwZXJ0ZXN0KGFwcClcbiAgICAgIC5wb3N0KCcvYXBpL3VzZXJzJylcbiAgICAgIC5leHBlY3QoMjAwKVxuICAgICAgLmVuZCgpO1xuICAgIFxuICAgIGV4cGVjdChyZXMuYm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgaGFuZGxlIGVycm9yIHJlc3BvbnNlcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBhcHAgPSBodHRwVGVzdC5jcmVhdGVNb2NrQXBwKCk7XG4gICAgYXBwLnBvc3QoJy9hcGkvdXNlcnMnLCAocmVxLCByZXMpID0+IHtcbiAgICAgIHJlcy5zdGF0dXNDb2RlID0gNDAwO1xuICAgICAgcmVzLnNldEhlYWRlcignY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogJ0JhZCByZXF1ZXN0JyB9KSk7XG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgcmVzID0gYXdhaXQgaHR0cFRlc3Quc3VwZXJ0ZXN0KGFwcClcbiAgICAgIC5wb3N0KCcvYXBpL3VzZXJzJylcbiAgICAgIC5leHBlY3QoNDAwKVxuICAgICAgLmVuZCgpO1xuICAgIFxuICAgIGV4cGVjdChyZXMuYm9keS5lcnJvcikudG9CZSgnQmFkIHJlcXVlc3QnKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNO0VBQUVBO0FBQVMsQ0FBQyxHQUFHQyxPQUFPLENBQUMscUJBQXFCLENBQUM7QUFFbkRDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxNQUFNO0VBQ2hDO0VBQ0EsSUFBSUMsU0FBUztFQUNiQyxTQUFTLENBQUMsTUFBTTtJQUNkRCxTQUFTLEdBQUdILFFBQVEsQ0FBQ0ssYUFBYSxDQUFDLENBQUM7RUFDdEMsQ0FBQyxDQUFDO0VBRUZDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxZQUFZO0lBQ2pDO0lBQ0EsTUFBTUMsR0FBRyxHQUFHUCxRQUFRLENBQUNLLGFBQWEsQ0FBQyxDQUFDO0lBQ3BDRSxHQUFHLENBQUNDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLEtBQUs7TUFDbkNBLEdBQUcsQ0FBQ0MsVUFBVSxHQUFHLEdBQUc7TUFDcEJELEdBQUcsQ0FBQ0UsU0FBUyxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQztNQUNqREYsR0FBRyxDQUFDRyxHQUFHLENBQUNDLElBQUksQ0FBQ0MsU0FBUyxDQUFDO1FBQUVDLE9BQU8sRUFBRTtNQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQztJQUVGLE1BQU1OLEdBQUcsR0FBRyxNQUFNVixRQUFRLENBQUNpQixTQUFTLENBQUNWLEdBQUcsQ0FBQyxDQUN0Q0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUNsQlUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUNYTCxHQUFHLENBQUMsQ0FBQztJQUVSSyxNQUFNLENBQUNSLEdBQUcsQ0FBQ1MsSUFBSSxDQUFDSCxPQUFPLENBQUMsQ0FBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQztFQUNyQyxDQUFDLENBQUM7RUFFRmQsSUFBSSxDQUFDLCtCQUErQixFQUFFLFlBQVk7SUFDaEQsTUFBTUMsR0FBRyxHQUFHUCxRQUFRLENBQUNLLGFBQWEsQ0FBQyxDQUFDO0lBQ3BDRSxHQUFHLENBQUNDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLEtBQUs7TUFDbkNBLEdBQUcsQ0FBQ0MsVUFBVSxHQUFHLEdBQUc7TUFDcEJELEdBQUcsQ0FBQ0UsU0FBUyxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQztNQUNqREYsR0FBRyxDQUFDRyxHQUFHLENBQUNDLElBQUksQ0FBQ0MsU0FBUyxDQUFDO1FBQUVNLEtBQUssRUFBRTtNQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQztJQUVGLE1BQU1YLEdBQUcsR0FBRyxNQUFNVixRQUFRLENBQUNpQixTQUFTLENBQUNWLEdBQUcsQ0FBQyxDQUN0Q0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUNsQlUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUNYTCxHQUFHLENBQUMsQ0FBQztJQUVSSyxNQUFNLENBQUNSLEdBQUcsQ0FBQ1MsSUFBSSxDQUFDRSxLQUFLLENBQUMsQ0FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQztFQUM1QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=