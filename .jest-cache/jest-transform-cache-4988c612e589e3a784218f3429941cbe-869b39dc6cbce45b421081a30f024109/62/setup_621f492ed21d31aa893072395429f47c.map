{"version":3,"names":["setup","console","log","require","error","message","module","exports"],"sources":["setup.js"],"sourcesContent":["\n/**\n * Setup and Initialization Utilities\n * \n * This module provides setup functionality for the qtests framework.\n * The setup function modifies global Node.js behavior to enable automatic\n * stub resolution, which is essential for seamless testing.\n * \n * Design philosophy:\n * - Explicit setup to avoid unintended side effects\n * - Clear separation of setup from other utilities\n * - Comprehensive error handling and logging\n * - Safe to call multiple times\n * \n * Why explicit setup is necessary:\n * 1. Modifying Node.js module resolution is a global side effect\n * 2. Users should explicitly opt-in to this behavior modification\n * 3. Setup timing is critical - must happen before module requires\n * 4. Clear separation makes it obvious when global behavior is being changed\n * \n * Alternative approaches considered:\n * - Automatic setup on require: Rejected due to hidden side effects\n * - Setup in individual utilities: Rejected due to timing complexity\n * - Multiple setup functions: Rejected for simplicity\n * \n * Current approach benefits:\n * - Clear, explicit user intent required\n * - Single point of global behavior modification\n * - Easy to understand and debug\n * - Follows principle of least surprise\n */\n\n/**\n * Initialize qtests framework with automatic stub resolution\n * \n * This function modifies Node.js module resolution to automatically\n * substitute stub implementations for real modules during testing.\n * \n * Implementation rationale:\n * 1. Function wrapper provides explicit call syntax for users\n * 2. Lazy loading of setup module prevents accidental side effects\n * 3. Error handling ensures setup failures are clearly reported\n * 4. Logging provides visibility into setup process for debugging\n * \n * Why a function wrapper instead of direct require:\n * - Makes setup intention explicit in user code\n * - Allows error handling and logging at the API level\n * - Provides a clear point for future enhancement (parameters, options)\n * - Follows common Node.js patterns for initialization functions\n * \n * Critical timing requirement:\n * This function MUST be called before requiring any modules that need stubbing.\n * If axios or winston are required before setup(), they will be the real modules.\n * \n * @returns {undefined} No return value - this is a side-effect function\n * @throws {Error} Propagates any errors from the setup module\n */\nfunction setup() {\n  console.log(`setup is running with none`); // logging function start per requirements\n  \n  try {\n    require(`../setup`); // load setup implementation with backticks\n    console.log(`setup has run resulting in module resolution modification`); // logging completion per requirements\n  } catch (error) {\n    console.log(`setup error: ${error.message}`); // error logging per requirements\n    throw error;\n  }\n}\n\n// export setup utilities at bottom per requirements\nmodule.exports = {\n  setup // call this to activate stubs when desired\n};\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAKA,CAAA,EAAG;EACfC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAAC,CAAC;;EAE3C,IAAI;IACFC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;IACrBF,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC,CAAC,CAAC;EAC5E,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdH,OAAO,CAACC,GAAG,CAAC,gBAAgBE,KAAK,CAACC,OAAO,EAAE,CAAC,CAAC,CAAC;IAC9C,MAAMD,KAAK;EACb;AACF;;AAEA;AACAE,MAAM,CAACC,OAAO,GAAG;EACfP,KAAK,CAAC;AACR,CAAC","ignoreList":[]}