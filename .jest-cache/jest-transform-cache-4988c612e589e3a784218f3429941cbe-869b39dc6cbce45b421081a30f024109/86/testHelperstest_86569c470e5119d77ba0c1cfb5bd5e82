508f9b28dd68bf97d96ed2af61fc532a
// Simplified test helpers tests to prevent hanging in parallel execution
const {
  createJsonRes,
  createRes,
  generateKey
} = require('../utils/testHelpers');
describe('Test Helpers Basic Tests', () => {
  // Simplified response mock tests
  test('createJsonRes works correctly', () => {
    const res = createJsonRes();
    expect(res).toHaveProperty('json');
    expect(typeof res.json).toBe('function');
  });
  test('createRes provides response mock', () => {
    const res = createRes();
    expect(res).toHaveProperty('status');
    expect(res).toHaveProperty('json');
    expect(res).toHaveProperty('send');
    expect(res).toHaveProperty('end');
  });
  test('generateKey works with basic parameters', async () => {
    const key = await generateKey('user');
    expect(key).toBe('test-api-key-user');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVKc29uUmVzIiwiY3JlYXRlUmVzIiwiZ2VuZXJhdGVLZXkiLCJyZXF1aXJlIiwiZGVzY3JpYmUiLCJ0ZXN0IiwicmVzIiwiZXhwZWN0IiwidG9IYXZlUHJvcGVydHkiLCJqc29uIiwidG9CZSIsImtleSJdLCJzb3VyY2VzIjpbInRlc3RIZWxwZXJzLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU2ltcGxpZmllZCB0ZXN0IGhlbHBlcnMgdGVzdHMgdG8gcHJldmVudCBoYW5naW5nIGluIHBhcmFsbGVsIGV4ZWN1dGlvblxuY29uc3QgeyBjcmVhdGVKc29uUmVzLCBjcmVhdGVSZXMsIGdlbmVyYXRlS2V5IH0gPSByZXF1aXJlKCcuLi91dGlscy90ZXN0SGVscGVycycpO1xuXG5kZXNjcmliZSgnVGVzdCBIZWxwZXJzIEJhc2ljIFRlc3RzJywgKCkgPT4ge1xuICAvLyBTaW1wbGlmaWVkIHJlc3BvbnNlIG1vY2sgdGVzdHNcbiAgdGVzdCgnY3JlYXRlSnNvblJlcyB3b3JrcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3QgcmVzID0gY3JlYXRlSnNvblJlcygpO1xuICAgIGV4cGVjdChyZXMpLnRvSGF2ZVByb3BlcnR5KCdqc29uJyk7XG4gICAgZXhwZWN0KHR5cGVvZiByZXMuanNvbikudG9CZSgnZnVuY3Rpb24nKTtcbiAgfSk7XG4gIFxuICB0ZXN0KCdjcmVhdGVSZXMgcHJvdmlkZXMgcmVzcG9uc2UgbW9jaycsICgpID0+IHtcbiAgICBjb25zdCByZXMgPSBjcmVhdGVSZXMoKTtcbiAgICBleHBlY3QocmVzKS50b0hhdmVQcm9wZXJ0eSgnc3RhdHVzJyk7XG4gICAgZXhwZWN0KHJlcykudG9IYXZlUHJvcGVydHkoJ2pzb24nKTtcbiAgICBleHBlY3QocmVzKS50b0hhdmVQcm9wZXJ0eSgnc2VuZCcpO1xuICAgIGV4cGVjdChyZXMpLnRvSGF2ZVByb3BlcnR5KCdlbmQnKTtcbiAgfSk7XG5cbiAgdGVzdCgnZ2VuZXJhdGVLZXkgd29ya3Mgd2l0aCBiYXNpYyBwYXJhbWV0ZXJzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGtleSA9IGF3YWl0IGdlbmVyYXRlS2V5KCd1c2VyJyk7XG4gICAgZXhwZWN0KGtleSkudG9CZSgndGVzdC1hcGkta2V5LXVzZXInKTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTTtFQUFFQSxhQUFhO0VBQUVDLFNBQVM7RUFBRUM7QUFBWSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztBQUVqRkMsUUFBUSxDQUFDLDBCQUEwQixFQUFFLE1BQU07RUFDekM7RUFDQUMsSUFBSSxDQUFDLCtCQUErQixFQUFFLE1BQU07SUFDMUMsTUFBTUMsR0FBRyxHQUFHTixhQUFhLENBQUMsQ0FBQztJQUMzQk8sTUFBTSxDQUFDRCxHQUFHLENBQUMsQ0FBQ0UsY0FBYyxDQUFDLE1BQU0sQ0FBQztJQUNsQ0QsTUFBTSxDQUFDLE9BQU9ELEdBQUcsQ0FBQ0csSUFBSSxDQUFDLENBQUNDLElBQUksQ0FBQyxVQUFVLENBQUM7RUFDMUMsQ0FBQyxDQUFDO0VBRUZMLElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxNQUFNO0lBQzdDLE1BQU1DLEdBQUcsR0FBR0wsU0FBUyxDQUFDLENBQUM7SUFDdkJNLE1BQU0sQ0FBQ0QsR0FBRyxDQUFDLENBQUNFLGNBQWMsQ0FBQyxRQUFRLENBQUM7SUFDcENELE1BQU0sQ0FBQ0QsR0FBRyxDQUFDLENBQUNFLGNBQWMsQ0FBQyxNQUFNLENBQUM7SUFDbENELE1BQU0sQ0FBQ0QsR0FBRyxDQUFDLENBQUNFLGNBQWMsQ0FBQyxNQUFNLENBQUM7SUFDbENELE1BQU0sQ0FBQ0QsR0FBRyxDQUFDLENBQUNFLGNBQWMsQ0FBQyxLQUFLLENBQUM7RUFDbkMsQ0FBQyxDQUFDO0VBRUZILElBQUksQ0FBQyx5Q0FBeUMsRUFBRSxZQUFZO0lBQzFELE1BQU1NLEdBQUcsR0FBRyxNQUFNVCxXQUFXLENBQUMsTUFBTSxDQUFDO0lBQ3JDSyxNQUFNLENBQUNJLEdBQUcsQ0FBQyxDQUFDRCxJQUFJLENBQUMsbUJBQW1CLENBQUM7RUFDdkMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119