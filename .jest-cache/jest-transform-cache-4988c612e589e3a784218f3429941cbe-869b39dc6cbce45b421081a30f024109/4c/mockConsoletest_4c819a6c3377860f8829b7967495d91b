45486a0b060716157c8923a0c6d82a78
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const testHelpers_js_1 = require("../utils/testHelpers.js"); // import helper handling console spies
test('mockConsole captures calls and restores', async () => {
    const recorded = []; // array for captured logs
    await (0, testHelpers_js_1.withMockConsole)('log', spy => {
        spy.mockImplementation((...args) => recorded.push(args)); // capture log calls
        console.log('first'); // invoke mocked console
        expect(spy.mock.calls.length).toBe(3); // spy tracks creation and call
        expect(spy.mock.calls[2][0]).toBe('first'); // argument captured correctly
    });
    console.log('second'); // original console after helper cleanup
    expect(recorded.length).toBe(2); // new expectation includes helper log
});
test('mockConsole mockImplementation works', () => (0, testHelpers_js_1.withMockConsole)('log', spy => {
    const customOut = []; // capture overridden output
    spy.mockImplementation((msg) => customOut.push(msg)); // replace console.log
    console.log('override'); // trigger custom output
    expect(customOut).toEqual(['override']); // custom function captured call
    expect(spy.mock.calls.length).toBe(3); // spy tracked creation and call
    expect(spy.mock.calls[2][0]).toBe('override'); // argument stored correctly
}));
test('mockConsole tracks calls after reimplementation', () => (0, testHelpers_js_1.withMockConsole)('log', spy => {
    const firstOut = []; // capture first custom output
    const secondOut = []; // capture second custom output
    spy.mockImplementation((msg) => firstOut.push(msg)); // initial implementation
    console.log('one'); // call using first implementation
    spy.mockImplementation((msg) => secondOut.push(msg)); // change implementation
    console.log('two'); // call using second implementation
    expect(firstOut).toEqual(['one']); // first output captured
    expect(secondOut).toEqual(['two']); // second output captured
    expect(spy.mock.calls.length).toBe(4); // spy logged creation and two calls
    expect(spy.mock.calls[2][0]).toBe('one'); // first call argument tracked
    expect(spy.mock.calls[3][0]).toBe('two'); // second call argument tracked
}));
test('mockRestore clears calls and resets method', async () => {
    const saved = global.jest; // save jest reference for restoration
    global.jest = undefined; // force fallback path by removing jest
    delete require.cache[require.resolve('../utils/mockConsole.js')]; // ensure fallback load
    const { mockConsole } = await Promise.resolve().then(() => __importStar(require('../utils/mockConsole.js'))); // dynamic import after change
    const orig = console.log; // store original method for comparison
    const spy = mockConsole('log'); // create manual spy using fallback
    console.log('first'); // trigger captured call
    expect(spy.mock.calls.length).toBe(2); // call history includes creation log
    spy.mockRestore(); // run cleanup to restore and clear
    console.log('second'); // ensure restored method runs without capturing
    expect(console.log).toBe(orig); // method restored to original
    const cleared = spy.mock.calls === null || spy.mock.calls.length === 0; // verify cleared history
    expect(cleared).toBe(true); // array cleared or reference removed
    global.jest = saved; // restore jest global for remaining tests
    delete require.cache[require.resolve('../utils/mockConsole.js')]; // clear fallback cache
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,