469a8968589f7442359484432c8755bb
/**
 * Offline Mode Utility - Working Implementation
 */

// Simple offline state management
let isOfflineFlag = false;
let cachedAxios = null;
let cachedQerrors = null;

/**
 * Set offline mode
 */
function setOfflineMode(offline) {
  const changed = isOfflineFlag !== offline;
  isOfflineFlag = offline;

  // Clear cache when mode changes
  if (changed) {
    clearOfflineCache();
  }
}

/**
 * Check if offline mode is enabled
 */
function isOfflineMode() {
  return isOfflineFlag;
}

/**
 * Get axios (stub or real)
 */
function getAxios() {
  if (!cachedAxios) {
    if (isOfflineFlag) {
      // Use stub axios
      cachedAxios = require('../stubs/axios');
    } else {
      // Try real axios, fallback to stub
      try {
        cachedAxios = require('axios');
      } catch (e) {
        cachedAxios = require('../stubs/axios');
      }
    }
  }
  return cachedAxios;
}

/**
 * Get qerrors (stub or real)
 */
function getQerrors() {
  if (!cachedQerrors) {
    if (isOfflineFlag) {
      // Use stub qerrors
      cachedQerrors = {
        qerrors: () => {}
      };
    } else {
      // Try real qerrors, fallback to stub
      try {
        cachedQerrors = require('qerrors');
      } catch (e) {
        cachedQerrors = {
          qerrors: () => {}
        };
      }
    }
  }
  return cachedQerrors;
}

/**
 * Get environment state
 */
function getEnvironmentState() {
  const codexFlag = process.env.CODEX?.toLowerCase() === 'true';
  const offlineFlagExplicit = process.env.OFFLINE_MODE?.toLowerCase() === 'true';
  const testEnvironment = process.env.NODE_ENV === 'test';
  return {
    codexFlag,
    offlineFlagExplicit,
    testEnvironment,
    isOffline: isOfflineFlag,
    environmentDetected: codexFlag || offlineFlagExplicit
  };
}

/**
 * Create environment adapters
 */
function createEnvironmentAdapters() {
  return {
    isOffline: isOfflineFlag,
    axios: getAxios(),
    qerrors: getQerrors()
  };
}

/**
 * Clear offline cache
 */
function clearOfflineCache() {
  cachedAxios = null;
  cachedQerrors = null;
}
module.exports = {
  setOfflineMode,
  isOfflineMode,
  getAxios,
  getQerrors,
  getEnvironmentState,
  createEnvironmentAdapters,
  clearOfflineCache
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc09mZmxpbmVGbGFnIiwiY2FjaGVkQXhpb3MiLCJjYWNoZWRRZXJyb3JzIiwic2V0T2ZmbGluZU1vZGUiLCJvZmZsaW5lIiwiY2hhbmdlZCIsImNsZWFyT2ZmbGluZUNhY2hlIiwiaXNPZmZsaW5lTW9kZSIsImdldEF4aW9zIiwicmVxdWlyZSIsImUiLCJnZXRRZXJyb3JzIiwicWVycm9ycyIsImdldEVudmlyb25tZW50U3RhdGUiLCJjb2RleEZsYWciLCJwcm9jZXNzIiwiZW52IiwiQ09ERVgiLCJ0b0xvd2VyQ2FzZSIsIm9mZmxpbmVGbGFnRXhwbGljaXQiLCJPRkZMSU5FX01PREUiLCJ0ZXN0RW52aXJvbm1lbnQiLCJOT0RFX0VOViIsImlzT2ZmbGluZSIsImVudmlyb25tZW50RGV0ZWN0ZWQiLCJjcmVhdGVFbnZpcm9ubWVudEFkYXB0ZXJzIiwiYXhpb3MiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsib2ZmbGluZU1vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBPZmZsaW5lIE1vZGUgVXRpbGl0eSAtIFdvcmtpbmcgSW1wbGVtZW50YXRpb25cbiAqL1xuXG4vLyBTaW1wbGUgb2ZmbGluZSBzdGF0ZSBtYW5hZ2VtZW50XG5sZXQgaXNPZmZsaW5lRmxhZyA9IGZhbHNlO1xubGV0IGNhY2hlZEF4aW9zID0gbnVsbDtcbmxldCBjYWNoZWRRZXJyb3JzID0gbnVsbDtcblxuLyoqXG4gKiBTZXQgb2ZmbGluZSBtb2RlXG4gKi9cbmZ1bmN0aW9uIHNldE9mZmxpbmVNb2RlKG9mZmxpbmUpIHtcbiAgY29uc3QgY2hhbmdlZCA9IGlzT2ZmbGluZUZsYWcgIT09IG9mZmxpbmU7XG4gIGlzT2ZmbGluZUZsYWcgPSBvZmZsaW5lO1xuICBcbiAgLy8gQ2xlYXIgY2FjaGUgd2hlbiBtb2RlIGNoYW5nZXNcbiAgaWYgKGNoYW5nZWQpIHtcbiAgICBjbGVhck9mZmxpbmVDYWNoZSgpO1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgb2ZmbGluZSBtb2RlIGlzIGVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gaXNPZmZsaW5lTW9kZSgpIHtcbiAgcmV0dXJuIGlzT2ZmbGluZUZsYWc7XG59XG5cbi8qKlxuICogR2V0IGF4aW9zIChzdHViIG9yIHJlYWwpXG4gKi9cbmZ1bmN0aW9uIGdldEF4aW9zKCkge1xuICBpZiAoIWNhY2hlZEF4aW9zKSB7XG4gICAgaWYgKGlzT2ZmbGluZUZsYWcpIHtcbiAgICAgIC8vIFVzZSBzdHViIGF4aW9zXG4gICAgICBjYWNoZWRBeGlvcyA9IHJlcXVpcmUoJy4uL3N0dWJzL2F4aW9zJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRyeSByZWFsIGF4aW9zLCBmYWxsYmFjayB0byBzdHViXG4gICAgICB0cnkge1xuICAgICAgICBjYWNoZWRBeGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZEF4aW9zID0gcmVxdWlyZSgnLi4vc3R1YnMvYXhpb3MnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNhY2hlZEF4aW9zO1xufVxuXG4vKipcbiAqIEdldCBxZXJyb3JzIChzdHViIG9yIHJlYWwpXG4gKi9cbmZ1bmN0aW9uIGdldFFlcnJvcnMoKSB7XG4gIGlmICghY2FjaGVkUWVycm9ycykge1xuICAgIGlmIChpc09mZmxpbmVGbGFnKSB7XG4gICAgICAvLyBVc2Ugc3R1YiBxZXJyb3JzXG4gICAgICBjYWNoZWRRZXJyb3JzID0geyBxZXJyb3JzOiAoKSA9PiB7fSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUcnkgcmVhbCBxZXJyb3JzLCBmYWxsYmFjayB0byBzdHViXG4gICAgICB0cnkge1xuICAgICAgICBjYWNoZWRRZXJyb3JzID0gcmVxdWlyZSgncWVycm9ycycpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRRZXJyb3JzID0geyBxZXJyb3JzOiAoKSA9PiB7fSB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2FjaGVkUWVycm9ycztcbn1cblxuLyoqXG4gKiBHZXQgZW52aXJvbm1lbnQgc3RhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0RW52aXJvbm1lbnRTdGF0ZSgpIHtcbiAgY29uc3QgY29kZXhGbGFnID0gcHJvY2Vzcy5lbnYuQ09ERVg/LnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbiAgY29uc3Qgb2ZmbGluZUZsYWdFeHBsaWNpdCA9IHByb2Nlc3MuZW52Lk9GRkxJTkVfTU9ERT8udG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xuICBjb25zdCB0ZXN0RW52aXJvbm1lbnQgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnO1xuICBcbiAgcmV0dXJuIHtcbiAgICBjb2RleEZsYWcsXG4gICAgb2ZmbGluZUZsYWdFeHBsaWNpdCxcbiAgICB0ZXN0RW52aXJvbm1lbnQsXG4gICAgaXNPZmZsaW5lOiBpc09mZmxpbmVGbGFnLFxuICAgIGVudmlyb25tZW50RGV0ZWN0ZWQ6IGNvZGV4RmxhZyB8fCBvZmZsaW5lRmxhZ0V4cGxpY2l0XG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlIGVudmlyb25tZW50IGFkYXB0ZXJzXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVudmlyb25tZW50QWRhcHRlcnMoKSB7XG4gIHJldHVybiB7XG4gICAgaXNPZmZsaW5lOiBpc09mZmxpbmVGbGFnLFxuICAgIGF4aW9zOiBnZXRBeGlvcygpLFxuICAgIHFlcnJvcnM6IGdldFFlcnJvcnMoKVxuICB9O1xufVxuXG4vKipcbiAqIENsZWFyIG9mZmxpbmUgY2FjaGVcbiAqL1xuZnVuY3Rpb24gY2xlYXJPZmZsaW5lQ2FjaGUoKSB7XG4gIGNhY2hlZEF4aW9zID0gbnVsbDtcbiAgY2FjaGVkUWVycm9ycyA9IG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXRPZmZsaW5lTW9kZSxcbiAgaXNPZmZsaW5lTW9kZSxcbiAgZ2V0QXhpb3MsXG4gIGdldFFlcnJvcnMsXG4gIGdldEVudmlyb25tZW50U3RhdGUsXG4gIGNyZWF0ZUVudmlyb25tZW50QWRhcHRlcnMsXG4gIGNsZWFyT2ZmbGluZUNhY2hlXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSUEsYUFBYSxHQUFHLEtBQUs7QUFDekIsSUFBSUMsV0FBVyxHQUFHLElBQUk7QUFDdEIsSUFBSUMsYUFBYSxHQUFHLElBQUk7O0FBRXhCO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGNBQWNBLENBQUNDLE9BQU8sRUFBRTtFQUMvQixNQUFNQyxPQUFPLEdBQUdMLGFBQWEsS0FBS0ksT0FBTztFQUN6Q0osYUFBYSxHQUFHSSxPQUFPOztFQUV2QjtFQUNBLElBQUlDLE9BQU8sRUFBRTtJQUNYQyxpQkFBaUIsQ0FBQyxDQUFDO0VBQ3JCO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsYUFBYUEsQ0FBQSxFQUFHO0VBQ3ZCLE9BQU9QLGFBQWE7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU1EsUUFBUUEsQ0FBQSxFQUFHO0VBQ2xCLElBQUksQ0FBQ1AsV0FBVyxFQUFFO0lBQ2hCLElBQUlELGFBQWEsRUFBRTtNQUNqQjtNQUNBQyxXQUFXLEdBQUdRLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztJQUN6QyxDQUFDLE1BQU07TUFDTDtNQUNBLElBQUk7UUFDRlIsV0FBVyxHQUFHUSxPQUFPLENBQUMsT0FBTyxDQUFDO01BQ2hDLENBQUMsQ0FBQyxPQUFPQyxDQUFDLEVBQUU7UUFDVlQsV0FBVyxHQUFHUSxPQUFPLENBQUMsZ0JBQWdCLENBQUM7TUFDekM7SUFDRjtFQUNGO0VBQ0EsT0FBT1IsV0FBVztBQUNwQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTVSxVQUFVQSxDQUFBLEVBQUc7RUFDcEIsSUFBSSxDQUFDVCxhQUFhLEVBQUU7SUFDbEIsSUFBSUYsYUFBYSxFQUFFO01BQ2pCO01BQ0FFLGFBQWEsR0FBRztRQUFFVSxPQUFPLEVBQUVBLENBQUEsS0FBTSxDQUFDO01BQUUsQ0FBQztJQUN2QyxDQUFDLE1BQU07TUFDTDtNQUNBLElBQUk7UUFDRlYsYUFBYSxHQUFHTyxPQUFPLENBQUMsU0FBUyxDQUFDO01BQ3BDLENBQUMsQ0FBQyxPQUFPQyxDQUFDLEVBQUU7UUFDVlIsYUFBYSxHQUFHO1VBQUVVLE9BQU8sRUFBRUEsQ0FBQSxLQUFNLENBQUM7UUFBRSxDQUFDO01BQ3ZDO0lBQ0Y7RUFDRjtFQUNBLE9BQU9WLGFBQWE7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU1csbUJBQW1CQSxDQUFBLEVBQUc7RUFDN0IsTUFBTUMsU0FBUyxHQUFHQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsS0FBSyxFQUFFQyxXQUFXLENBQUMsQ0FBQyxLQUFLLE1BQU07RUFDN0QsTUFBTUMsbUJBQW1CLEdBQUdKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSSxZQUFZLEVBQUVGLFdBQVcsQ0FBQyxDQUFDLEtBQUssTUFBTTtFQUM5RSxNQUFNRyxlQUFlLEdBQUdOLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDTSxRQUFRLEtBQUssTUFBTTtFQUV2RCxPQUFPO0lBQ0xSLFNBQVM7SUFDVEssbUJBQW1CO0lBQ25CRSxlQUFlO0lBQ2ZFLFNBQVMsRUFBRXZCLGFBQWE7SUFDeEJ3QixtQkFBbUIsRUFBRVYsU0FBUyxJQUFJSztFQUNwQyxDQUFDO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU00seUJBQXlCQSxDQUFBLEVBQUc7RUFDbkMsT0FBTztJQUNMRixTQUFTLEVBQUV2QixhQUFhO0lBQ3hCMEIsS0FBSyxFQUFFbEIsUUFBUSxDQUFDLENBQUM7SUFDakJJLE9BQU8sRUFBRUQsVUFBVSxDQUFDO0VBQ3RCLENBQUM7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTTCxpQkFBaUJBLENBQUEsRUFBRztFQUMzQkwsV0FBVyxHQUFHLElBQUk7RUFDbEJDLGFBQWEsR0FBRyxJQUFJO0FBQ3RCO0FBRUF5QixNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmekIsY0FBYztFQUNkSSxhQUFhO0VBQ2JDLFFBQVE7RUFDUkcsVUFBVTtFQUNWRSxtQkFBbUI7RUFDbkJZLHlCQUF5QjtFQUN6Qm5CO0FBQ0YsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==