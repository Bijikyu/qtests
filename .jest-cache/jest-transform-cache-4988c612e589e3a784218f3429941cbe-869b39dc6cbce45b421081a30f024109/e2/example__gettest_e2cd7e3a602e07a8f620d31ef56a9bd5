7b71cf8a0ee104d0781b6c0a901219c9
// Auto-generated API test for GET /api/status - optimized for speed
const {
  httpTest
} = require('qtests/lib/envUtils');
describe('GET /api/status', () => {
  // Shared app setup for performance
  let sharedApp;
  beforeAll(() => {
    sharedApp = httpTest.createMockApp();
  });
  test('should succeed', async () => {
    // Reuse shared app for speed
    const app = httpTest.createMockApp();
    app.get('/api/status', (req, res) => {
      res.statusCode = 200;
      res.setHeader('content-type', 'application/json');
      res.end(JSON.stringify({
        success: true
      }));
    });
    const res = await httpTest.supertest(app).get('/api/status').expect(200).end();
    expect(res.body.success).toBe(true);
  });
  test('should handle error responses', async () => {
    const app = httpTest.createMockApp();
    app.get('/api/status', (req, res) => {
      res.statusCode = 400;
      res.setHeader('content-type', 'application/json');
      res.end(JSON.stringify({
        error: 'Bad request'
      }));
    });
    const res = await httpTest.supertest(app).get('/api/status').expect(400).end();
    expect(res.body.error).toBe('Bad request');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJodHRwVGVzdCIsInJlcXVpcmUiLCJkZXNjcmliZSIsInNoYXJlZEFwcCIsImJlZm9yZUFsbCIsImNyZWF0ZU1vY2tBcHAiLCJ0ZXN0IiwiYXBwIiwiZ2V0IiwicmVxIiwicmVzIiwic3RhdHVzQ29kZSIsInNldEhlYWRlciIsImVuZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdWNjZXNzIiwic3VwZXJ0ZXN0IiwiZXhwZWN0IiwiYm9keSIsInRvQmUiLCJlcnJvciJdLCJzb3VyY2VzIjpbImV4YW1wbGVfX2dldC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEF1dG8tZ2VuZXJhdGVkIEFQSSB0ZXN0IGZvciBHRVQgL2FwaS9zdGF0dXMgLSBvcHRpbWl6ZWQgZm9yIHNwZWVkXG5jb25zdCB7IGh0dHBUZXN0IH0gPSByZXF1aXJlKCdxdGVzdHMvbGliL2VudlV0aWxzJyk7XG5cbmRlc2NyaWJlKCdHRVQgL2FwaS9zdGF0dXMnLCAoKSA9PiB7XG4gIC8vIFNoYXJlZCBhcHAgc2V0dXAgZm9yIHBlcmZvcm1hbmNlXG4gIGxldCBzaGFyZWRBcHA7XG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgc2hhcmVkQXBwID0gaHR0cFRlc3QuY3JlYXRlTW9ja0FwcCgpO1xuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgc3VjY2VlZCcsIGFzeW5jICgpID0+IHtcbiAgICAvLyBSZXVzZSBzaGFyZWQgYXBwIGZvciBzcGVlZFxuICAgIGNvbnN0IGFwcCA9IGh0dHBUZXN0LmNyZWF0ZU1vY2tBcHAoKTtcbiAgICBhcHAuZ2V0KCcvYXBpL3N0YXR1cycsIChyZXEsIHJlcykgPT4ge1xuICAgICAgcmVzLnN0YXR1c0NvZGUgPSAyMDA7XG4gICAgICByZXMuc2V0SGVhZGVyKCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeSh7IHN1Y2Nlc3M6IHRydWUgfSkpO1xuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGh0dHBUZXN0LnN1cGVydGVzdChhcHApXG4gICAgICAuZ2V0KCcvYXBpL3N0YXR1cycpXG4gICAgICAuZXhwZWN0KDIwMClcbiAgICAgIC5lbmQoKTtcbiAgICBcbiAgICBleHBlY3QocmVzLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGhhbmRsZSBlcnJvciByZXNwb25zZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgYXBwID0gaHR0cFRlc3QuY3JlYXRlTW9ja0FwcCgpO1xuICAgIGFwcC5nZXQoJy9hcGkvc3RhdHVzJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgICByZXMuc3RhdHVzQ29kZSA9IDQwMDtcbiAgICAgIHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHsgZXJyb3I6ICdCYWQgcmVxdWVzdCcgfSkpO1xuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGh0dHBUZXN0LnN1cGVydGVzdChhcHApXG4gICAgICAuZ2V0KCcvYXBpL3N0YXR1cycpXG4gICAgICAuZXhwZWN0KDQwMClcbiAgICAgIC5lbmQoKTtcbiAgICBcbiAgICBleHBlY3QocmVzLmJvZHkuZXJyb3IpLnRvQmUoJ0JhZCByZXF1ZXN0Jyk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsTUFBTTtFQUFFQTtBQUFTLENBQUMsR0FBR0MsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0FBRW5EQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsTUFBTTtFQUNoQztFQUNBLElBQUlDLFNBQVM7RUFDYkMsU0FBUyxDQUFDLE1BQU07SUFDZEQsU0FBUyxHQUFHSCxRQUFRLENBQUNLLGFBQWEsQ0FBQyxDQUFDO0VBQ3RDLENBQUMsQ0FBQztFQUVGQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsWUFBWTtJQUNqQztJQUNBLE1BQU1DLEdBQUcsR0FBR1AsUUFBUSxDQUFDSyxhQUFhLENBQUMsQ0FBQztJQUNwQ0UsR0FBRyxDQUFDQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUNDLEdBQUcsRUFBRUMsR0FBRyxLQUFLO01BQ25DQSxHQUFHLENBQUNDLFVBQVUsR0FBRyxHQUFHO01BQ3BCRCxHQUFHLENBQUNFLFNBQVMsQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUM7TUFDakRGLEdBQUcsQ0FBQ0csR0FBRyxDQUFDQyxJQUFJLENBQUNDLFNBQVMsQ0FBQztRQUFFQyxPQUFPLEVBQUU7TUFBSyxDQUFDLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUM7SUFFRixNQUFNTixHQUFHLEdBQUcsTUFBTVYsUUFBUSxDQUFDaUIsU0FBUyxDQUFDVixHQUFHLENBQUMsQ0FDdENDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FDbEJVLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FDWEwsR0FBRyxDQUFDLENBQUM7SUFFUkssTUFBTSxDQUFDUixHQUFHLENBQUNTLElBQUksQ0FBQ0gsT0FBTyxDQUFDLENBQUNJLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDckMsQ0FBQyxDQUFDO0VBRUZkLElBQUksQ0FBQywrQkFBK0IsRUFBRSxZQUFZO0lBQ2hELE1BQU1DLEdBQUcsR0FBR1AsUUFBUSxDQUFDSyxhQUFhLENBQUMsQ0FBQztJQUNwQ0UsR0FBRyxDQUFDQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUNDLEdBQUcsRUFBRUMsR0FBRyxLQUFLO01BQ25DQSxHQUFHLENBQUNDLFVBQVUsR0FBRyxHQUFHO01BQ3BCRCxHQUFHLENBQUNFLFNBQVMsQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUM7TUFDakRGLEdBQUcsQ0FBQ0csR0FBRyxDQUFDQyxJQUFJLENBQUNDLFNBQVMsQ0FBQztRQUFFTSxLQUFLLEVBQUU7TUFBYyxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDLENBQUM7SUFFRixNQUFNWCxHQUFHLEdBQUcsTUFBTVYsUUFBUSxDQUFDaUIsU0FBUyxDQUFDVixHQUFHLENBQUMsQ0FDdENDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FDbEJVLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FDWEwsR0FBRyxDQUFDLENBQUM7SUFFUkssTUFBTSxDQUFDUixHQUFHLENBQUNTLElBQUksQ0FBQ0UsS0FBSyxDQUFDLENBQUNELElBQUksQ0FBQyxhQUFhLENBQUM7RUFDNUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119