{"file":"/home/runner/workspace/utils/testing/assertionHelper.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/testing/assertionHelper.ts"],"sourcesContent":["/**\n * Assertion Helper Utilities for Common Testing Patterns - TypeScript Implementation\n * \n * This class focuses solely on assertion logic and testing validation concerns.\n * It centralizes repetitive assertion logic with descriptive helpers.\n */\n\nimport { logStart, logReturn } from '../../lib/logUtils.js';\n\n// Type definitions\ninterface DatabaseEntity {\n  _id?: any;\n  id?: any;\n  createdAt?: Date;\n  updatedAt?: Date;\n  [key: string]: any;\n}\n\ninterface ApiResponse {\n  status: number;\n  body?: any;\n  data?: any;\n  headers?: Record<string, string>;\n}\n\ninterface EmailExpectation {\n  to?: string;\n  subject?: string;\n  body?: string;\n  [key: string]: any;\n}\n\ninterface AssertionOptions {\n  count?: number;\n  index?: number;\n}\n\n/**\n * Assertion Helper Utilities for Common Testing Patterns\n * \n * This class centralizes repetitive assertion logic with descriptive helpers\n * that reduce code duplication across test files while providing clear,\n * readable test assertions.\n */\nclass AssertionHelper {\n  /**\n   * Asserts that an object has standard database entity properties\n   */\n  static assertDatabaseEntity(entity: DatabaseEntity, expectedProperties: Record<string, any> = {}): void {\n    logStart('AssertionHelper.assertDatabaseEntity', entity, expectedProperties);\n    \n    try {\n      if (!entity) {\n        throw new Error('Entity cannot be null or undefined');\n      }\n      \n      // Check for database-specific properties\n      if (entity._id !== undefined) {\n        if (!entity._id) {\n          throw new Error('Entity _id must be defined and truthy');\n        }\n      }\n      \n      if (entity.id !== undefined) {\n        if (!entity.id) {\n          throw new Error('Entity id must be defined and truthy');\n        }\n      }\n      \n      if (entity.createdAt !== undefined) {\n        if (!(entity.createdAt instanceof Date)) {\n          throw new Error('Entity createdAt must be a Date instance');\n        }\n      }\n      \n      // Check expected properties\n      Object.entries(expectedProperties).forEach(([key, value]) => {\n        if (entity[key] !== value) {\n          throw new Error(`Expected entity.${key} to be ${value}, but got ${entity[key]}`);\n        }\n      });\n      \n      logReturn('AssertionHelper.assertDatabaseEntity', 'passed');\n    } catch (error: any) {\n      logReturn('AssertionHelper.assertDatabaseEntity', `failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Asserts API response structure and status\n   */\n  static assertApiResponse(response: ApiResponse, expectedStatus: number, hasData: boolean = true): void {\n    logStart('AssertionHelper.assertApiResponse', response, expectedStatus, hasData);\n    \n    try {\n      if (!response) {\n        throw new Error('Response cannot be null or undefined');\n      }\n      \n      if (response.status !== expectedStatus) {\n        throw new Error(`Expected status ${expectedStatus}, but got ${response.status}`);\n      }\n      \n      if (hasData) {\n        if (!response.body && !response.data) {\n          throw new Error('Response should have body or data property');\n        }\n      }\n      \n      if (expectedStatus >= 400) {\n        const errorData = response.body || response.data || {};\n        if (!errorData.error && !errorData.message) {\n          throw new Error('Error responses should have error or message property');\n        }\n      }\n      \n      logReturn('AssertionHelper.assertApiResponse', 'passed');\n    } catch (error: any) {\n      logReturn('AssertionHelper.assertApiResponse', `failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Asserts email sending behavior\n   */\n  static assertEmailSent(expectedEmail: EmailExpectation = {}, options: AssertionOptions = {}): void {\n    logStart('AssertionHelper.assertEmailSent', expectedEmail, options);\n    \n    try {\n      // This would need to be implemented with actual email history tracking\n      // For now, provide a placeholder implementation\n      const emailHistory: any[] = [];\n      \n      const { count = 1, index = emailHistory.length - 1 } = options;\n      \n      if (emailHistory.length < count) {\n        throw new Error(`Expected at least ${count} emails, but found ${emailHistory.length}`);\n      }\n      \n      if (index >= emailHistory.length || index < 0) {\n        throw new Error(`Email index ${index} is out of range (0-${emailHistory.length - 1})`);\n      }\n      \n      const email = emailHistory[index];\n      \n      // Check expected email properties\n      Object.entries(expectedEmail).forEach(([key, value]) => {\n        if (email[key] !== value) {\n          throw new Error(`Expected email.${key} to be ${value}, but got ${email[key]}`);\n        }\n      });\n      \n      logReturn('AssertionHelper.assertEmailSent', 'passed');\n    } catch (error: any) {\n      logReturn('AssertionHelper.assertEmailSent', `failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Asserts array properties and content\n   */\n  static assertArray(array: any[], expectedLength?: number, itemValidator?: (item: any) => void): void {\n    logStart('AssertionHelper.assertArray', array, expectedLength);\n    \n    try {\n      if (!Array.isArray(array)) {\n        throw new Error('Expected an array but got ' + typeof array);\n      }\n      \n      if (expectedLength !== undefined && array.length !== expectedLength) {\n        throw new Error(`Expected array length ${expectedLength}, but got ${array.length}`);\n      }\n      \n      if (itemValidator) {\n        array.forEach((item, index) => {\n          try {\n            itemValidator(item);\n          } catch (error: any) {\n            throw new Error(`Array item at index ${index} failed validation: ${error.message}`);\n          }\n        });\n      }\n      \n      logReturn('AssertionHelper.assertArray', 'passed');\n    } catch (error: any) {\n      logReturn('AssertionHelper.assertArray', `failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Asserts object has required properties\n   */\n  static assertObjectStructure(obj: any, requiredProps: string[], optionalProps: string[] = []): void {\n    logStart('AssertionHelper.assertObjectStructure', obj, requiredProps, optionalProps);\n    \n    try {\n      if (!obj || typeof obj !== 'object') {\n        throw new Error('Expected an object but got ' + typeof obj);\n      }\n      \n      // Check required properties\n      for (const prop of requiredProps) {\n        if (!(prop in obj)) {\n          throw new Error(`Required property '${prop}' is missing`);\n        }\n      }\n      \n      // Check for unexpected properties\n      const allowedProps = new Set([...requiredProps, ...optionalProps]);\n      for (const prop of Object.keys(obj)) {\n        if (!allowedProps.has(prop)) {\n          throw new Error(`Unexpected property '${prop}' found`);\n        }\n      }\n      \n      logReturn('AssertionHelper.assertObjectStructure', 'passed');\n    } catch (error: any) {\n      logReturn('AssertionHelper.assertObjectStructure', `failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Asserts timing constraints\n   */\n  static assertTimingConstraint(actualDuration: number, maxDuration: number, operation: string = 'operation'): void {\n    logStart('AssertionHelper.assertTimingConstraint', actualDuration, maxDuration, operation);\n    \n    try {\n      if (actualDuration > maxDuration) {\n        throw new Error(\n          `${operation} took ${actualDuration.toFixed(2)}ms, exceeding limit of ${maxDuration}ms`\n        );\n      }\n      \n      logReturn('AssertionHelper.assertTimingConstraint', `passed in ${actualDuration.toFixed(2)}ms`);\n    } catch (error: any) {\n      logReturn('AssertionHelper.assertTimingConstraint', `failed: ${error.message}`);\n      throw error;\n    }\n  }\n}\n\n// Export AssertionHelper using ES module syntax\nexport { AssertionHelper };"],"version":3}