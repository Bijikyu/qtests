{"version":3,"names":["logStart","logReturn","require","validateEmail","formatEmailContent","addToHistory","sendEmail","recipient","subject","body","options","error","success","emailData","message","timestamp","Date","console","log","formatted","to","response","id","now","Math","random","toString","substr","verbose","substring","length","sendEmailBatch","emails","Array","isArray","results","summary","total","successful","failed","email","result","push","errorResult","batchResult","module","exports"],"sources":["emailSender.js"],"sourcesContent":["/**\n * Email Sender Core Utility\n * \n * This module provides the core email sending functionality and batch operations.\n * It coordinates with other email utilities for validation, formatting, and history.\n */\n\nconst { logStart, logReturn } = require('../../lib/logUtils');\nconst { validateEmail } = require('./emailValidator');\nconst { formatEmailContent } = require('./emailFormatter');\nconst { addToHistory } = require('./emailHistory');\n\n/**\n * Core sendEmail Mock Function\n *\n * Purpose: Prepares email data for external delivery without coupling to a mailing service.\n * This lightweight approach avoids additional dependencies while enabling tests that expect\n * email payloads and comprehensive verification of email workflows.\n *\n * @param {string} recipient - Email address of destination user\n * @param {string} subject - Subject line for email message\n * @param {string} body - Body content for email message\n * @param {Object} options - Optional configuration for email behavior\n * @returns {{success:boolean,emailData:Object,message:string,timestamp:Date}}\n */\nfunction sendEmail(recipient, subject, body, options = {}) {\n  logStart('sendEmail', recipient, subject, body, options);\n  \n  // Validate input parameters\n  if (!validateEmail(recipient)) {\n    const error = {\n      success: false,\n      emailData: null,\n      message: `Invalid email address: ${recipient}`,\n      timestamp: new Date(),\n      error: 'INVALID_RECIPIENT'\n    };\n    \n    // Store failed attempt in history for testing\n    addToHistory(error);\n    \n    console.log(`[MOCK EMAIL ERROR] Invalid recipient: ${recipient}`);\n    logReturn('sendEmail', error);\n    return error;\n  }\n  \n  // Format email content\n  const formatted = formatEmailContent(subject, body);\n  \n  // Create email data structure\n  const emailData = {\n    to: recipient,\n    subject: formatted.subject,\n    body: formatted.body,\n    ...options\n  };\n  \n  // Create response object\n  const response = {\n    success: true,\n    emailData,\n    message: \"Client should send this email using preferred mail service\",\n    timestamp: new Date(),\n    id: `mock-email-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  };\n  \n  // Store in history for test verification\n  addToHistory(response);\n  \n  // Log email details for development and debugging\n  console.log(`[MOCK EMAIL] To: ${recipient}, Subject: ${formatted.subject}`);\n  if (options.verbose) {\n    console.log(`[MOCK EMAIL] Body: ${formatted.body.substring(0, 100)}${formatted.body.length > 100 ? '...' : ''}`);\n  }\n  \n  logReturn('sendEmail', response);\n  return response;\n}\n\n/**\n * Send multiple emails in batch\n * \n * This function provides efficient batch email processing for applications\n * that need to send multiple emails. It processes all emails and returns\n * a summary with individual results.\n * \n * @param {Array} emails - Array of email objects with to, subject, body properties\n * @param {Object} options - Optional configuration for batch processing\n * @returns {Object} Batch results with individual email results and summary\n */\nfunction sendEmailBatch(emails, options = {}) {\n  logStart('sendEmailBatch', emails, options);\n  \n  if (!Array.isArray(emails)) {\n    const error = {\n      success: false,\n      message: 'sendEmailBatch requires an array of email objects',\n      results: [],\n      summary: { total: 0, successful: 0, failed: 1 }\n    };\n    logReturn('sendEmailBatch', error);\n    return error;\n  }\n  \n  const results = [];\n  let successful = 0;\n  let failed = 0;\n  \n  // Process each email individually\n  for (const email of emails) {\n    try {\n      const result = sendEmail(\n        email.to || email.recipient,\n        email.subject,\n        email.body,\n        { ...options, ...email.options }\n      );\n      \n      results.push(result);\n      if (result.success) {\n        successful++;\n      } else {\n        failed++;\n      }\n    } catch (error) {\n      const errorResult = {\n        success: false,\n        emailData: null,\n        message: `Error processing email: ${error.message}`,\n        timestamp: new Date(),\n        error: 'PROCESSING_ERROR'\n      };\n      \n      results.push(errorResult);\n      failed++;\n    }\n  }\n  \n  const batchResult = {\n    success: failed === 0,\n    message: `Processed ${emails.length} emails: ${successful} successful, ${failed} failed`,\n    results,\n    summary: {\n      total: emails.length,\n      successful,\n      failed\n    },\n    timestamp: new Date()\n  };\n  \n  console.log(`[MOCK EMAIL BATCH] Processed ${emails.length} emails: ${successful} successful, ${failed} failed`);\n  \n  logReturn('sendEmailBatch', batchResult);\n  return batchResult;\n}\n\nmodule.exports = {\n  sendEmail,\n  sendEmailBatch\n};"],"mappings":"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","ignoreList":[]}