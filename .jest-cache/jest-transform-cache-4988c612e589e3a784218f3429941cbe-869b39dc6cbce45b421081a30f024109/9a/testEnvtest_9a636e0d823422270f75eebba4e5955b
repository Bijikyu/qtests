a5c112897a72bd6f4aba0e46099b749e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Simplified testEnv tests to prevent hanging in parallel execution
const testEnv_js_1 = require("../utils/testEnv.js");
describe('testEnv utilities', () => {
    test('testEnv utilities exist and are callable', () => {
        expect(typeof testEnv_js_1.setTestEnv).toBe('function');
        expect(typeof testEnv_js_1.createScheduleMock).toBe('function');
        expect(typeof testEnv_js_1.createQerrorsMock).toBe('function');
        expect(typeof testEnv_js_1.createAxiosMock).toBe('function');
    });
    test('schedule mock works', async () => {
        const scheduleMock = (0, testEnv_js_1.createScheduleMock)();
        const fn = jest.fn(() => 'done');
        const result = await scheduleMock(fn);
        expect(result).toBe('done');
        expect(typeof scheduleMock.mockClear).toBe('function');
    });
    test('qerrors mock works', () => {
        const qerrorsMock = (0, testEnv_js_1.createQerrorsMock)();
        const args = qerrorsMock('err', 'ctx');
        expect(args).toEqual(['err', 'ctx']);
        expect(typeof qerrorsMock.mockClear).toBe('function');
    });
    test('axios mock basic functionality', () => {
        const axiosMock = (0, testEnv_js_1.createAxiosMock)();
        axiosMock.onGet('/test').reply(200, { ok: true });
        expect(axiosMock._replies['/test']).toEqual({ status: 200, data: { ok: true } });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS90ZXN0L3Rlc3RFbnYudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLG9FQUFvRTtBQUNwRSxvREFBeUc7QUFFekcsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxJQUFJLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1FBQ3BELE1BQU0sQ0FBQyxPQUFPLHVCQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLE9BQU8sK0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkQsTUFBTSxDQUFDLE9BQU8sOEJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEQsTUFBTSxDQUFDLE9BQU8sNEJBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNsRCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxxQkFBcUIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNyQyxNQUFNLFlBQVksR0FBRyxJQUFBLCtCQUFrQixHQUFFLENBQUM7UUFDMUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxPQUFPLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO1FBQzlCLE1BQU0sV0FBVyxHQUFHLElBQUEsOEJBQWlCLEdBQUUsQ0FBQztRQUN4QyxNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNyQyxNQUFNLENBQUMsT0FBTyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hELENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtRQUMxQyxNQUFNLFNBQVMsR0FBRyxJQUFBLDRCQUFlLEdBQUUsQ0FBQztRQUNwQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNsRCxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNuRixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvdGVzdC90ZXN0RW52LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU2ltcGxpZmllZCB0ZXN0RW52IHRlc3RzIHRvIHByZXZlbnQgaGFuZ2luZyBpbiBwYXJhbGxlbCBleGVjdXRpb25cbmltcG9ydCB7IHNldFRlc3RFbnYsIGNyZWF0ZVNjaGVkdWxlTW9jaywgY3JlYXRlUWVycm9yc01vY2ssIGNyZWF0ZUF4aW9zTW9jayB9IGZyb20gJy4uL3V0aWxzL3Rlc3RFbnYuanMnO1xuXG5kZXNjcmliZSgndGVzdEVudiB1dGlsaXRpZXMnLCAoKSA9PiB7XG4gIHRlc3QoJ3Rlc3RFbnYgdXRpbGl0aWVzIGV4aXN0IGFuZCBhcmUgY2FsbGFibGUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHR5cGVvZiBzZXRUZXN0RW52KS50b0JlKCdmdW5jdGlvbicpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3JlYXRlU2NoZWR1bGVNb2NrKS50b0JlKCdmdW5jdGlvbicpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3JlYXRlUWVycm9yc01vY2spLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgZXhwZWN0KHR5cGVvZiBjcmVhdGVBeGlvc01vY2spLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ3NjaGVkdWxlIG1vY2sgd29ya3MnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc2NoZWR1bGVNb2NrID0gY3JlYXRlU2NoZWR1bGVNb2NrKCk7XG4gICAgY29uc3QgZm4gPSBqZXN0LmZuKCgpID0+ICdkb25lJyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2NoZWR1bGVNb2NrKGZuKTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlKCdkb25lJyk7XG4gICAgZXhwZWN0KHR5cGVvZiBzY2hlZHVsZU1vY2subW9ja0NsZWFyKS50b0JlKCdmdW5jdGlvbicpO1xuICB9KTtcblxuICB0ZXN0KCdxZXJyb3JzIG1vY2sgd29ya3MnLCAoKSA9PiB7XG4gICAgY29uc3QgcWVycm9yc01vY2sgPSBjcmVhdGVRZXJyb3JzTW9jaygpO1xuICAgIGNvbnN0IGFyZ3MgPSBxZXJyb3JzTW9jaygnZXJyJywgJ2N0eCcpO1xuICAgIGV4cGVjdChhcmdzKS50b0VxdWFsKFsnZXJyJywgJ2N0eCddKTtcbiAgICBleHBlY3QodHlwZW9mIHFlcnJvcnNNb2NrLm1vY2tDbGVhcikudG9CZSgnZnVuY3Rpb24nKTtcbiAgfSk7XG5cbiAgdGVzdCgnYXhpb3MgbW9jayBiYXNpYyBmdW5jdGlvbmFsaXR5JywgKCkgPT4ge1xuICAgIGNvbnN0IGF4aW9zTW9jayA9IGNyZWF0ZUF4aW9zTW9jaygpO1xuICAgIGF4aW9zTW9jay5vbkdldCgnL3Rlc3QnKS5yZXBseSgyMDAsIHsgb2s6IHRydWUgfSk7XG4gICAgZXhwZWN0KGF4aW9zTW9jay5fcmVwbGllc1snL3Rlc3QnXSkudG9FcXVhbCh7IHN0YXR1czogMjAwLCBkYXRhOiB7IG9rOiB0cnVlIH0gfSk7XG4gIH0pO1xufSk7Il0sInZlcnNpb24iOjN9