{"file":"/home/runner/workspace/utils/mockAxios.ts","mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;;AA+SD,0CAAe;AACf,kDAAmB;AACnB,sDAAqB;AA/SvB,mEAAmE;AACnE,oDAAgD;AAChD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM;IAAE,IAAA,wBAAU,EAAC,KAAK,CAAC,CAAC;AA+BvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,SAAS,eAAe,CAAC,UAA2B,EAAE;IACpD,OAAO,CAAC,GAAG,CAAC,mCAAmC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAE1E,IAAI,CAAC;QACH,uDAAuD;QACvD,MAAM,EACJ,eAAe,GAAG,EAAE,EACpB,aAAa,GAAG,GAAG,EACnB,cAAc,GAAG,KAAK,EACvB,GAAG,OAAO,CAAC;QAEZ;;;;;;;;;;;WAWG;QACH,SAAS,kBAAkB,CAAC,OAAY,eAAe,EAAE,SAAiB,aAAa;YACrF,OAAO;gBACL,IAAI;gBACJ,MAAM;gBACN,UAAU,EAAE,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO;gBAC3C,OAAO,EAAE,EAAE;gBACX,MAAM,EAAE,EAAE;gBACV,OAAO,EAAE,EAAE;aACZ,CAAC;QACJ,CAAC;QAED;;;;;;WAMG;QACH,MAAM,SAAS,GAAc;YAC3B;;;;;;;;;;eAUG;YACH,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,SAAc,EAAE;gBACrC,OAAO,CAAC,GAAG,CAAC,iCAAiC,GAAG,EAAE,CAAC,CAAC;gBACpD,IAAI,cAAc,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC;oBAC1C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;gBAC7C,CAAC;gBACD,MAAM,QAAQ,GAAG,kBAAkB,EAAE,CAAC;gBACtC,OAAO,CAAC,GAAG,CAAC,8BAA8B,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBACtE,OAAO,QAAQ,CAAC;YAClB,CAAC;YAED;;;;;;;;;;;eAWG;YACH,KAAK,CAAC,IAAI,CAAC,GAAW,EAAE,OAAY,EAAE,EAAE,SAAc,EAAE;gBACtD,OAAO,CAAC,GAAG,CAAC,kCAAkC,GAAG,EAAE,CAAC,CAAC;gBACrD,IAAI,cAAc,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC;oBAC1C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;gBAC7C,CAAC;gBACD,MAAM,QAAQ,GAAG,kBAAkB,EAAE,CAAC;gBACtC,OAAO,CAAC,GAAG,CAAC,+BAA+B,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBACvE,OAAO,QAAQ,CAAC;YAClB,CAAC;YAED;;;;;;;;;;eAUG;YACH,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,OAAY,EAAE,EAAE,SAAc,EAAE;gBACrD,OAAO,CAAC,GAAG,CAAC,iCAAiC,GAAG,EAAE,CAAC,CAAC;gBACpD,IAAI,cAAc,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC;oBAC1C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;gBAC7C,CAAC;gBACD,MAAM,QAAQ,GAAG,kBAAkB,EAAE,CAAC;gBACtC,OAAO,CAAC,GAAG,CAAC,8BAA8B,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBACtE,OAAO,QAAQ,CAAC;YAClB,CAAC;YAED;;;;;;;;;eASG;YACH,KAAK,CAAC,MAAM,CAAC,GAAW,EAAE,SAAc,EAAE;gBACxC,OAAO,CAAC,GAAG,CAAC,oCAAoC,GAAG,EAAE,CAAC,CAAC;gBACvD,IAAI,cAAc,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC;oBAC1C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;gBAC7C,CAAC;gBACD,MAAM,QAAQ,GAAG,kBAAkB,EAAE,CAAC;gBACtC,OAAO,CAAC,GAAG,CAAC,iCAAiC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBACzE,OAAO,QAAQ,CAAC;YAClB,CAAC;YAED;;;;;;;;;eASG;YACH,KAAK,CAAC,OAAO,CAAC,SAAc,EAAE;gBAC5B,OAAO,CAAC,GAAG,CAAC,qCAAqC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC3E,IAAI,cAAc,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC;oBAC1C,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;gBAC7C,CAAC;gBACD,MAAM,QAAQ,GAAG,kBAAkB,EAAE,CAAC;gBACtC,OAAO,CAAC,GAAG,CAAC,kCAAkC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBAC1E,OAAO,QAAQ,CAAC;YAClB,CAAC;SACF,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,gCAAgC,SAAS,EAAE,CAAC,CAAC;QACzD,OAAO,SAAS,CAAC;IAEnB,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,0BAA0B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACvD,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH,SAAS,mBAAmB;IACxB,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC,CAAC,uBAAuB;IAC5E,IAAI,CAAC;QACD,MAAM,SAAS,GAAG,IAAI,GAAG,EAA0D,CAAC,CAAC,4BAA4B;QACjH,SAAS,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,oBAAoB;QAErG,SAAS,SAAS,CAAC,MAA2C;YAC1D,OAAO,CAAC,GAAG,CAAC,6BAA6B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY;YAChF,IAAI,CAAC;gBACD,MAAM,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,kBAAkB;gBAC1D,IAAG,IAAI,EAAC,CAAC;oBACL,MAAM,MAAM,GAAsB;wBAC9B,MAAM,EAAE,IAAI,CAAC,MAAM;wBACnB,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,UAAU,EAAE,IAAI,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO;wBAChD,OAAO,EAAE,EAAE;wBACX,MAAM,EAAE,EAAE;wBACV,OAAO,EAAE,EAAE;qBACd,CAAC,CAAC,2BAA2B;oBAC9B,OAAO,CAAC,GAAG,CAAC,0BAA0B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa;oBAC9E,IAAG,IAAI,CAAC,MAAM;wBAAE,OAAO,OAAO,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,sBAAsB;oBACnF,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,uBAAuB;gBAC3D,CAAC;gBACD,MAAM,KAAK,GAAG,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC,iBAAiB;gBAC7E,OAAO,CAAC,GAAG,CAAC,0BAA0B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB;gBACnF,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,qBAAqB;YACvD,CAAC;YAAC,OAAM,KAAU,EAAC,CAAC;gBAChB,OAAO,CAAC,GAAG,CAAC,mBAAmB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,qBAAqB;gBACtE,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY;YAC9C,CAAC;QACL,CAAC;QAED,MAAM,YAAY,GAAG,SAA0B,CAAC;QAChD,YAAY,CAAC,KAAK,GAAG,CAAC,GAAW,EAAE,IAAS,EAAE,SAAiB,GAAG,EAAE,SAAkB,KAAK,EAAE,EAAE;YAC3F,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC,8BAA8B;QAEjC,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC,CAAC,UAAU;QACpE,OAAO,YAAY,CAAC,CAAC,yBAAyB;IAClD,CAAC;IAAC,OAAM,KAAU,EAAC,CAAC;QAChB,OAAO,CAAC,GAAG,CAAC,yBAAyB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,cAAc;QACrE,MAAM,KAAK,CAAC,CAAC,qBAAqB;IACtC,CAAC;AACL,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,SAAS,qBAAqB;IAC5B,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;IAE1D,IAAI,CAAC;QACH,MAAM,SAAS,GAAG,eAAe,EAAE,CAAC;QACpC,OAAO,CAAC,GAAG,CAAC,sCAAsC,SAAS,EAAE,CAAC,CAAC;QAC/D,OAAO,SAAS,CAAC;IACnB,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,gCAAgC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC7D,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC","names":[],"sources":["/home/runner/workspace/utils/mockAxios.ts"],"sourcesContent":["/**\n * Mock Axios Factory for Environment-Aware Testing - TypeScript Implementation\n * \n * This module provides factory functions for creating mock axios implementations\n * that simulate HTTP responses without making actual network requests. This is\n * essential for testing applications in offline environments or when external\n * APIs are unavailable.\n * \n * Design philosophy:\n * - Factory pattern for creating customizable mock instances\n * - Predictable response simulation for consistent testing\n * - No network I/O to ensure fast, isolated test execution\n * - Extensible interface for adding custom response behaviors\n * \n * Key benefits:\n * 1. Environment Isolation - Tests don't depend on external services\n * 2. Predictable Behavior - Same responses every time for reliable tests\n * 3. Fast Execution - No network delays in test suites\n * 4. Flexible Configuration - Can simulate various response scenarios\n * \n * Use cases:\n * - Testing HTTP-dependent code without external API dependencies\n * - Simulating various response scenarios (success, error, timeout)\n * - Development environments where external APIs are unavailable\n * - Integration testing with controlled response data\n */\n\n// Import logging control utility for consistent framework behavior\nimport { setLogging } from '../lib/logUtils.js';\nif (process.env.NODE_ENV !== 'test') setLogging(false);\n\n// Type definitions for axios-compatible mock\ninterface MockAxiosConfig {\n  defaultResponse?: any;\n  defaultStatus?: number;\n  simulateErrors?: boolean;\n}\n\ninterface MockAxiosResponse {\n  data: any;\n  status: number;\n  statusText: string;\n  headers: Record<string, any>;\n  config: Record<string, any>;\n  request: Record<string, any>;\n}\n\ninterface MockAxios {\n  get(url: string, config?: any): Promise<MockAxiosResponse>;\n  post(url: string, data?: any, config?: any): Promise<MockAxiosResponse>;\n  put(url: string, data?: any, config?: any): Promise<MockAxiosResponse>;\n  delete(url: string, config?: any): Promise<MockAxiosResponse>;\n  request(config?: any): Promise<MockAxiosResponse>;\n}\n\ninterface UserMockAxios {\n  (config: { url: string; [key: string]: any }): Promise<MockAxiosResponse>;\n  __set: (url: string, data: any, status?: number, reject?: boolean) => void;\n}\n\n/**\n * Create a mock axios instance with simulated HTTP methods\n * \n * This factory function creates an axios-compatible object that provides\n * the same interface as real axios but returns simulated responses instead\n * of making actual HTTP requests. The mock instance is designed to be a\n * drop-in replacement for axios in testing environments.\n * \n * Implementation strategy:\n * 1. Provide async methods that match axios API signatures\n * 2. Return promises that resolve immediately with predictable data\n * 3. Support both method-specific functions and generic request function\n * 4. Include response structure that matches axios response format\n * \n * Why factory pattern:\n * - Allows customization of mock behavior per test scenario\n * - Enables future enhancement with configurable response data\n * - Provides clean separation between mock creation and usage\n * - Follows established patterns in testing frameworks\n * \n * @param options - Configuration options for mock behavior\n * @returns Mock axios instance with HTTP methods\n * \n * @example\n * const mockAxios = createMockAxios();\n * const response = await mockAxios.get('/api/data');\n * // Returns: { data: {}, status: 200, statusText: 'OK' }\n * \n * @example\n * const customMock = createMockAxios({\n *   defaultResponse: { users: [] },\n *   defaultStatus: 200\n * });\n */\nfunction createMockAxios(options: MockAxiosConfig = {}): MockAxios {\n  console.log(`createMockAxios is running with ${JSON.stringify(options)}`);\n\n  try {\n    // Extract configuration options with sensible defaults\n    const {\n      defaultResponse = {},\n      defaultStatus = 200,\n      simulateErrors = false\n    } = options;\n\n    /**\n     * Create a standardized mock response object\n     * \n     * This helper function creates response objects that match the structure\n     * returned by real axios requests. Maintaining this structure ensures\n     * that application code can work with mock responses identically to\n     * real responses.\n     * \n     * @param data - Response data payload\n     * @param status - HTTP status code\n     * @returns Axios-compatible response object\n     */\n    function createMockResponse(data: any = defaultResponse, status: number = defaultStatus): MockAxiosResponse {\n      return {\n        data,\n        status,\n        statusText: status === 200 ? 'OK' : 'Error',\n        headers: {},\n        config: {},\n        request: {}\n      };\n    }\n\n    /**\n     * Mock axios instance with HTTP method implementations\n     * \n     * This object provides the core axios API methods that applications\n     * commonly use. Each method returns a promise that resolves immediately\n     * with a mock response, allowing tests to proceed without network delays.\n     */\n    const mockAxios: MockAxios = {\n      /**\n       * Mock GET request implementation\n       * \n       * Simulates HTTP GET requests by returning immediate promise resolution\n       * with predictable response data. Accepts the same parameters as real\n       * axios.get() for API compatibility.\n       * \n       * @param url - Request URL (logged but not used)\n       * @param config - Request configuration (logged but not used)\n       * @returns Promise resolving to mock response\n       */\n      async get(url: string, config: any = {}): Promise<MockAxiosResponse> {\n        console.log(`mockAxios.get is running with ${url}`);\n        if (simulateErrors && Math.random() < 0.1) {\n          throw new Error('Simulated network error');\n        }\n        const response = createMockResponse();\n        console.log(`mockAxios.get is returning ${JSON.stringify(response)}`);\n        return response;\n      },\n\n      /**\n       * Mock POST request implementation\n       * \n       * Simulates HTTP POST requests with immediate promise resolution.\n       * Accepts data payload and configuration parameters for API compatibility\n       * with real axios.post() method.\n       * \n       * @param url - Request URL (logged but not used)\n       * @param data - Request payload (logged but not used)\n       * @param config - Request configuration (logged but not used)\n       * @returns Promise resolving to mock response\n       */\n      async post(url: string, data: any = {}, config: any = {}): Promise<MockAxiosResponse> {\n        console.log(`mockAxios.post is running with ${url}`);\n        if (simulateErrors && Math.random() < 0.1) {\n          throw new Error('Simulated network error');\n        }\n        const response = createMockResponse();\n        console.log(`mockAxios.post is returning ${JSON.stringify(response)}`);\n        return response;\n      },\n\n      /**\n       * Mock PUT request implementation\n       * \n       * Simulates HTTP PUT requests for update operations.\n       * Maintains API compatibility with axios.put() method signature.\n       * \n       * @param url - Request URL (logged but not used)\n       * @param data - Request payload (logged but not used)\n       * @param config - Request configuration (logged but not used)\n       * @returns Promise resolving to mock response\n       */\n      async put(url: string, data: any = {}, config: any = {}): Promise<MockAxiosResponse> {\n        console.log(`mockAxios.put is running with ${url}`);\n        if (simulateErrors && Math.random() < 0.1) {\n          throw new Error('Simulated network error');\n        }\n        const response = createMockResponse();\n        console.log(`mockAxios.put is returning ${JSON.stringify(response)}`);\n        return response;\n      },\n\n      /**\n       * Mock DELETE request implementation\n       * \n       * Simulates HTTP DELETE requests for resource removal operations.\n       * Maintains API compatibility with axios.delete() method signature.\n       * \n       * @param url - Request URL (logged but not used)\n       * @param config - Request configuration (logged but not used)\n       * @returns Promise resolving to mock response\n       */\n      async delete(url: string, config: any = {}): Promise<MockAxiosResponse> {\n        console.log(`mockAxios.delete is running with ${url}`);\n        if (simulateErrors && Math.random() < 0.1) {\n          throw new Error('Simulated network error');\n        }\n        const response = createMockResponse();\n        console.log(`mockAxios.delete is returning ${JSON.stringify(response)}`);\n        return response;\n      },\n\n      /**\n       * Generic request method for custom HTTP operations\n       * \n       * Provides the axios.request() interface for custom request configurations.\n       * This method covers any HTTP methods not explicitly implemented above\n       * and allows for more complex request configurations.\n       * \n       * @param config - Complete request configuration object\n       * @returns Promise resolving to mock response\n       */\n      async request(config: any = {}): Promise<MockAxiosResponse> {\n        console.log(`mockAxios.request is running with ${JSON.stringify(config)}`);\n        if (simulateErrors && Math.random() < 0.1) {\n          throw new Error('Simulated network error');\n        }\n        const response = createMockResponse();\n        console.log(`mockAxios.request is returning ${JSON.stringify(response)}`);\n        return response;\n      }\n    };\n\n    console.log(`createMockAxios is returning ${mockAxios}`);\n    return mockAxios;\n\n  } catch (error: any) {\n    console.log(`createMockAxios error: ${error.message}`);\n    throw error;\n  }\n}\n\n/**\n * Generates a mock axios instance returning preset data.\n * It intercepts axios calls to return canned responses, avoiding real HTTP.\n * Rationale: enables offline tests and predictable responses.\n */\nfunction createUserMockAxios(): UserMockAxios {\n    console.log(`createMockAxios is running with none`); // log start of factory\n    try {\n        const responses = new Map<string, { data: any; status: number; reject: boolean }>(); // map to hold url responses\n        responses.set('http://a', { data: { mock: true }, status: 200, reject: false }); // seed default mock\n        \n        function mockAxios(config: { url: string; [key: string]: any }): Promise<MockAxiosResponse> { // simulate axios request/response\n            console.log(`mockAxios is running with ${JSON.stringify(config)}`); // log start\n            try {\n                const mock = responses.get(config.url); // lookup response\n                if(mock){\n                    const result: MockAxiosResponse = { \n                        status: mock.status, \n                        data: mock.data,\n                        statusText: mock.status === 200 ? 'OK' : 'Error',\n                        headers: {},\n                        config: {},\n                        request: {}\n                    }; // build axios style result\n                    console.log(`mockAxios is returning ${JSON.stringify(result)}`); // log return\n                    if(mock.reject) return Promise.reject({ response: result }); // reject when flagged\n                    return Promise.resolve(result); // resolve mock success\n                }\n                const error = { response: { status: 500, data: 'error' } }; // fallback error\n                console.log(`mockAxios is returning ${JSON.stringify(error)}`); // log error return\n                return Promise.reject(error); // reject unknown url\n            } catch(error: any){\n                console.log(`mockAxios error ${error.message}`); // log internal error\n                return Promise.reject(error); // propagate\n            }\n        }\n        \n        const axiosWrapper = mockAxios as UserMockAxios;\n        axiosWrapper.__set = (url: string, data: any, status: number = 200, reject: boolean = false) => { \n            responses.set(url, { data, status, reject }); \n        }; // helper to program responses\n        \n        console.log(`createMockAxios is returning axiosWrapper`); // log end\n        return axiosWrapper; // return configured mock\n    } catch(error: any){\n        console.log(`createMockAxios error ${error.message}`); // log failure\n        throw error; // rethrow for caller\n    }\n}\n\n/**\n * Create a simple mock axios instance with default configuration\n * \n * This convenience function creates a basic mock axios instance without\n * requiring configuration options. It's useful for quick test setup where\n * custom response behavior isn't needed.\n * \n * @returns Basic mock axios instance\n * \n * @example\n * const axios = createSimpleMockAxios();\n * const response = await axios.get('/api/test');\n */\nfunction createSimpleMockAxios(): MockAxios {\n  console.log(`createSimpleMockAxios is running with none`);\n  \n  try {\n    const mockAxios = createMockAxios();\n    console.log(`createSimpleMockAxios is returning ${mockAxios}`);\n    return mockAxios;\n  } catch (error: any) {\n    console.log(`createSimpleMockAxios error: ${error.message}`);\n    throw error;\n  }\n}\n\n// Export mock axios factory utilities using ES module syntax\nexport {\n  createMockAxios, // configurable mock axios factory\n  createUserMockAxios, // user-provided axios mock factory with exact implementation\n  createSimpleMockAxios // simple mock axios for basic usage\n};"],"version":3}