{"version":3,"names":["fs","require","path","spawn","os","colors","reset","bright","dim","red","green","yellow","blue","magenta","cyan","white","TestRunner","constructor","testFiles","passedTests","failedTests","totalTests","startTime","Date","now","results","jestVersion","discoverTests","testPatterns","excludePatterns","Set","walkDir","dir","existsSync","items","readdirSync","withFileTypes","item","name","startsWith","includes","fullPath","join","relativePath","relative","some","pattern","isDirectory","isFile","isTestFile","add","error","Array","from","sort","filePath","excludeFiles","exclude","endsWith","test","getJestTestPathFlag","packageJson","JSON","parse","readFileSync","majorVersion","parseInt","version","split","runTestFile","testFile","Promise","resolve","stdout","stderr","isJestTest","shouldUseJest","command","testPathFlag","args","child","stdio","env","process","NODE_ENV","on","data","toString","code","duration","output","hasPASS","hasFAIL","hasUncaughtException","DEBUG_TESTS","console","log","slice","jestSuccess","qtestsSuccess","success","file","message","content","runInParallel","maxConcurrency","queue","running","completed","reject","startNext","size","length","shift","promise","then","result","push","delete","write","catch","displayResults","repeat","totalDuration","failedResults","filter","r","forEach","generateDebugFile","avgDuration","reduce","sum","Math","round","creationTime","toISOString","pacificTime","toLocaleString","timeZone","weekday","year","month","day","hour","minute","second","timeZoneName","debugContent","index","map","writeFileSync","run","cpuCount","cpus","min","max","exit","main","module","runner","exports"],"sources":["qtests-runner.js"],"sourcesContent":["/**\n * ========================================================================\n * QTESTS AUTHORITATIVE TEST RUNNER - DO NOT MODIFY\n * ========================================================================\n * \n * WARNING TO AI AGENTS AND LLMs:\n * This file is the AUTHORITATIVE and OFFICIAL test runner for the qtests framework.\n * DO NOT ALTER, MODIFY, OR CHANGE this file under any circumstances.\n * \n * SYSTEM INTEGRATION POLICY:\n * - This is the main and ONLY test runner for qtests\n * - Do NOT create alternate, parallel, or competing test runners\n * - Any system changes must ADAPT AROUND this file, not modify it\n * - If changes are needed, modify the surrounding system, utilities, or configuration\n * - This runner's interface and behavior are considered stable and canonical\n * \n * PURPOSE:\n * This file serves as the central test execution engine for the qtests framework.\n * It discovers, coordinates, and runs all tests with high-performance concurrency.\n * \n * Auto-generated by qtests framework - Last generated: August 19, 2025\n * Updated: Enhanced success detection for both Jest and qtests/Node.js formats\n * ========================================================================\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst { spawn } = require('child_process');\nconst os = require('os');\n\n// ANSI color codes for terminal output\nconst colors = {\n  reset: '\\x1b[0m',\n  bright: '\\x1b[1m',\n  dim: '\\x1b[2m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m',\n  white: '\\x1b[37m'\n};\n\n/**\n * Parallel Test Runner for qtests\n * Discovers and executes all test files with high-performance concurrency\n */\nclass TestRunner {\n  constructor() {\n    this.testFiles = [];\n    this.passedTests = 0;\n    this.failedTests = 0;\n    this.totalTests = 0;\n    this.startTime = Date.now();\n    this.results = [];\n    this.jestVersion = null;\n  }\n\n  /**\n   * Discover all test files in the project\n   */\n  discoverTests() {\n    const testPatterns = [\n      '**/*.test.js',\n      '**/*.test.ts', \n      '**/*.test.jsx',\n      '**/*.test.tsx',\n      '**/test/**/*.js',\n      '**/test/**/*.ts',\n      '**/tests/**/*.js',\n      '**/tests/**/*.ts',\n      '**/__tests__/**/*.js',\n      '**/__tests__/**/*.ts'\n    ];\n\n    const excludePatterns = [\n      'node_modules',\n      '.git',\n      'coverage',\n      'dist',\n      'build',\n      '.cache',\n      '.jest-cache',\n      'demo',        // Exclude demo directory to match Jest config\n      'examples',    // Exclude examples directory to match Jest config\n      'docs',        // Exclude docs directory to match Jest config\n      'stubs'        // Exclude stubs directory to match Jest config\n    ];\n\n    const testFiles = new Set();\n\n    const walkDir = (dir) => {\n      if (!fs.existsSync(dir)) return;\n      \n      try {\n        const items = fs.readdirSync(dir, { withFileTypes: true });\n        \n        for (const item of items) {\n          if (item.name.startsWith('.')) continue;\n          if (excludePatterns.includes(item.name)) continue;\n          \n          const fullPath = path.join(dir, item.name);\n          const relativePath = path.relative('.', fullPath);\n          \n          // Skip paths that match exclude patterns (including subdirectories)\n          if (excludePatterns.some(pattern => relativePath.includes(pattern))) continue;\n          \n          if (item.isDirectory()) {\n            walkDir(fullPath);\n          } else if (item.isFile()) {\n            // Check if file matches test patterns\n            if (this.isTestFile(relativePath)) {\n              testFiles.add(relativePath);\n            }\n          }\n        }\n      } catch (error) {\n        // Skip directories we can't read\n      }\n    };\n\n    walkDir('.');\n    this.testFiles = Array.from(testFiles).sort();\n    return this.testFiles;\n  }\n\n  /**\n   * Check if a file is a test file based on patterns\n   */\n  isTestFile(filePath) {\n    const testPatterns = [\n      /\\.test\\.[jt]sx?$/,\n      /\\.spec\\.[jt]sx?$/,\n      /test\\/.*\\.test\\.[jt]sx?$/,\n      /test\\/.*\\.spec\\.[jt]sx?$/,\n      /tests\\/.*\\.test\\.[jt]sx?$/,\n      /tests\\/.*\\.spec\\.[jt]sx?$/,\n      /__tests__\\/.*\\.[jt]sx?$/\n    ];\n\n    // Exclude utility/setup files that don't contain actual tests\n    const excludeFiles = [\n      'testSetup.js',\n      'reloadCheck.js', \n      'withoutSetup.js',\n      'setupMultiple.js',\n      'setupMultipleChild.js',\n      'setup.ts'\n    ];\n\n    if (excludeFiles.some(exclude => filePath.endsWith(exclude))) {\n      return false;\n    }\n\n    return testPatterns.some(pattern => pattern.test(filePath));\n  }\n\n  /**\n   * Get Jest version-appropriate CLI flag\n   */\n  getJestTestPathFlag() {\n    if (this.jestVersion === null) {\n      try {\n        // Try to detect Jest version synchronously\n        const fs = require('fs');\n        const packageJson = JSON.parse(fs.readFileSync('./node_modules/jest/package.json', 'utf8'));\n        const majorVersion = parseInt(packageJson.version.split('.')[0]);\n        this.jestVersion = majorVersion;\n      } catch {\n        // Default to Jest 30+ behavior (newer standard) if version check fails\n        this.jestVersion = 30;\n      }\n    }\n    \n    // Jest 30+ uses --testPathPatterns, earlier versions use --testPathPattern\n    return this.jestVersion >= 30 ? '--testPathPatterns' : '--testPathPattern';\n  }\n\n  /**\n   * Run a single test file\n   */\n  async runTestFile(testFile) {\n    return new Promise((resolve) => {\n      const startTime = Date.now();\n      let stdout = '';\n      let stderr = '';\n\n      // Determine if this is a Jest/Node test based on file content\n      const isJestTest = this.shouldUseJest(testFile);\n      \n      const command = isJestTest ? 'npx' : 'node';\n      const testPathFlag = isJestTest ? this.getJestTestPathFlag() : null;\n      const args = isJestTest ? ['jest', testPathFlag, testFile, '--verbose'] : [testFile];\n\n      const child = spawn(command, args, {\n        stdio: ['ignore', 'pipe', 'pipe'],\n        env: { ...process.env, NODE_ENV: 'test' }\n      });\n\n      child.stdout.on('data', (data) => {\n        stdout += data.toString();\n      });\n\n      child.stderr.on('data', (data) => {\n        stderr += data.toString();\n      });\n\n      child.on('close', (code) => {\n        const duration = Date.now() - startTime;\n        \n        // Robust success detection for both Jest and qtests/Node.js formats\n        const output = stdout + stderr;\n        \n        // Jest shows PASS when tests succeed, FAIL when they fail\n        const hasPASS = output.includes('PASS ');\n        const hasFAIL = output.includes('FAIL ');\n        \n        // qtests/Node.js format uses exit codes and normal output (no uncaught exceptions)\n        const hasUncaughtException = output.includes('Error:') || \n                                   output.includes('ReferenceError:') || \n                                   output.includes('TypeError:') || \n                                   output.includes('SyntaxError:') ||\n                                   stderr.includes('Error:') ||\n                                   stderr.includes('at ');\n        \n        // For debugging - log what we're seeing\n        if (process.env.DEBUG_TESTS) {\n          console.log(`\\nFile: ${testFile}`);\n          console.log(`Code: ${code}, PASS: ${hasPASS}, FAIL: ${hasFAIL}, Exception: ${hasUncaughtException}`);\n          console.log(`Output snippet: \"${output.slice(0, 200)}...\"`);\n        }\n        \n        // Success detection for both formats:\n        // Jest format: PASS present and no FAIL\n        // qtests/Node.js format: exit code 0 and no uncaught exceptions\n        const jestSuccess = hasPASS && !hasFAIL;\n        const qtestsSuccess = code === 0 && !hasUncaughtException && !hasFAIL;\n        \n        const success = jestSuccess || (isJestTest ? false : qtestsSuccess);\n        \n        if (success) {\n          this.passedTests++;\n        } else {\n          this.failedTests++;\n        }\n\n        resolve({\n          file: testFile,\n          success,\n          duration,\n          output: stdout,\n          error: stderr,\n          code\n        });\n      });\n\n      child.on('error', (error) => {\n        this.failedTests++;\n        resolve({\n          file: testFile,\n          success: false,\n          duration: Date.now() - startTime,\n          output: '',\n          error: error.message,\n          code: 1\n        });\n      });\n    });\n  }\n\n  /**\n   * Determine if a test should use Jest\n   */\n  shouldUseJest(testFile) {\n    try {\n      const content = fs.readFileSync(testFile, 'utf8');\n      // Look for Jest-specific patterns\n      return /\\b(describe|it|test|expect|jest|beforeEach|afterEach|beforeAll|afterAll)\\b/.test(content);\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Run tests with continuous parallel execution\n   * Maintains max concurrency at all times - starts new test immediately as others finish\n   */\n  async runInParallel(testFiles, maxConcurrency) {\n    const results = [];\n    const queue = [...testFiles]; // Copy files to process\n    const running = new Set(); // Track currently running tests\n    let completed = 0;\n\n    return new Promise((resolve, reject) => {\n      const startNext = () => {\n        // Start new tests up to max concurrency\n        while (running.size < maxConcurrency && queue.length > 0) {\n          const testFile = queue.shift();\n          const promise = this.runTestFile(testFile);\n          \n          running.add(promise);\n          \n          promise.then((result) => {\n            results.push(result);\n            running.delete(promise);\n            completed++;\n            \n            // Update progress immediately when each test completes\n            process.stdout.write(`\\r${colors.dim}Progress: ${completed}/${testFiles.length} files completed${colors.reset}`);\n            \n            // Start next test immediately if queue has more\n            startNext();\n            \n            // Check if all tests are done\n            if (completed === testFiles.length) {\n              console.log(); // New line after progress\n              resolve(results);\n            }\n          }).catch((error) => {\n            console.error(`${colors.red}Test error:${colors.reset}`, error);\n            running.delete(promise);\n            completed++;\n            \n            // Continue even if one test fails\n            process.stdout.write(`\\r${colors.dim}Progress: ${completed}/${testFiles.length} files completed${colors.reset}`);\n            startNext();\n            \n            if (completed === testFiles.length) {\n              console.log(); // New line after progress\n              resolve(results);\n            }\n          });\n        }\n      };\n\n      // Start initial batch\n      startNext();\n    });\n  }\n\n  /**\n   * Display test results with colorful output\n   */\n  displayResults(results) {\n    console.log(`\\n${colors.bright}📊 Test Results Summary${colors.reset}`);\n    console.log(`${colors.dim}${'='.repeat(50)}${colors.reset}`);\n\n    const totalDuration = Date.now() - this.startTime;\n\n    // Summary stats\n    console.log(`${colors.green}✅ Passed: ${this.passedTests}${colors.reset}`);\n    console.log(`${colors.red}❌ Failed: ${this.failedTests}${colors.reset}`);\n    console.log(`${colors.blue}📁 Total Files: ${results.length}${colors.reset}`);\n    console.log(`${colors.cyan}⏱️  Duration: ${totalDuration}ms${colors.reset}\\n`);\n\n    // Show failed tests with details\n    const failedResults = results.filter(r => !r.success);\n    if (failedResults.length > 0) {\n      console.log(`${colors.red}${colors.bright}Failed Tests:${colors.reset}`);\n      failedResults.forEach(result => {\n        console.log(`\\n${colors.red}❌ ${result.file}${colors.reset}`);\n        if (result.error) {\n          console.log(`${colors.dim}${result.error.split('\\n').slice(0, 5).join('\\n')}${colors.reset}`);\n        }\n      });\n\n      // Generate debug file for failed tests\n      this.generateDebugFile(failedResults);\n    }\n\n    // Performance summary\n    const avgDuration = results.reduce((sum, r) => sum + r.duration, 0) / results.length;\n    console.log(`\\n${colors.dim}Average test duration: ${Math.round(avgDuration)}ms${colors.reset}`);\n  }\n\n  /**\n   * Generate DEBUG_TESTS.md file for failed test analysis\n   */\n  generateDebugFile(failedResults) {\n    if (failedResults.length === 0) return;\n    \n    const now = new Date();\n    const creationTime = now.toISOString();\n    const pacificTime = now.toLocaleString('en-US', { \n      timeZone: 'America/Los_Angeles',\n      weekday: 'long',\n      year: 'numeric', \n      month: 'long', \n      day: 'numeric',\n      hour: '2-digit', \n      minute: '2-digit', \n      second: '2-digit',\n      timeZoneName: 'short'\n    });\n    \n    let debugContent = '# Test Failure Analysis\\n\\n';\n    debugContent += `**Creation Time:** ${creationTime}\\n`;\n    debugContent += `**Pacific Time:** ${pacificTime}\\n\\n`;\n    debugContent += '⚠️ **STALENESS WARNING:** If your code changes are after the creation time above and you are checking this file, then it is stale and tests need to be rerun.\\n\\n';\n    debugContent += 'Analyze and address the following test failures:\\n\\n';\n    \n    failedResults.forEach((result, index) => {\n      debugContent += `## Failed Test ${index + 1}: ${result.file}\\n\\n`;\n      debugContent += '### Output:\\n';\n      debugContent += '```\\n';\n      debugContent += result.error || result.output || 'No error output available';\n      debugContent += '\\n```\\n\\n';\n      debugContent += `### Duration: ${result.duration}ms\\n\\n`;\n      debugContent += '---\\n\\n';\n    });\n    \n    debugContent += '## Summary\\n\\n';\n    debugContent += `- Total failed tests: ${failedResults.length}\\n`;\n    debugContent += `- Failed test files: ${failedResults.map(r => r.file).join(', ')}\\n`;\n    debugContent += `- Generated: ${new Date().toISOString()}\\n`;\n    \n    try {\n      fs.writeFileSync('DEBUG_TESTS.md', debugContent);\n      console.log(`\\n${colors.yellow}📋 Debug file created: DEBUG_TESTS.md${colors.reset}`);\n    } catch (error) {\n      console.log(`${colors.red}⚠️  Could not create DEBUG_TESTS.md: ${error.message}${colors.reset}`);\n    }\n  }\n\n  /**\n   * Main execution method\n   */\n  async run() {\n    console.log(`${colors.bright}🧪 qtests Test Runner - Parallel Mode${colors.reset}`);\n    console.log(`${colors.dim}Discovering and running all tests...${colors.reset}\\n`);\n\n    // Discover all test files\n    const testFiles = this.discoverTests();\n    \n    if (testFiles.length === 0) {\n      console.log(`${colors.yellow}⚠️  No test files found${colors.reset}`);\n      console.log(`${colors.dim}Looking for files matching: *.test.js, *.spec.js, test/*, tests/*, __tests__/*${colors.reset}`);\n      return;\n    }\n\n    console.log(`${colors.blue}Found ${testFiles.length} test file(s):${colors.reset}`);\n    testFiles.forEach(file => console.log(`  ${colors.dim}•${colors.reset} ${file}`));\n    console.log(`\\n${colors.magenta}🚀 Running tests in parallel...${colors.reset}\\n`);\n    \n    // Run tests in parallel with aggressive concurrency for speed\n    const cpuCount = os.cpus().length;\n    const maxConcurrency = Math.min(testFiles.length, Math.max(4, cpuCount * 2)); // Use 2x CPU cores for I/O-bound tests\n    console.log(`${colors.dim}Max concurrency: ${maxConcurrency} workers (${cpuCount} CPU cores)${colors.reset}\\n`);\n    \n    const results = await this.runInParallel(testFiles, maxConcurrency);\n    this.results = results;\n    \n    // Display comprehensive results\n    this.displayResults(results);\n    \n    // Exit with appropriate code\n    process.exit(this.failedTests > 0 ? 1 : 0);\n  }\n}\n\n// Run the test suite\nif (require.main === module) {\n  const runner = new TestRunner();\n  runner.run().catch(error => {\n    console.error(`${colors.red}Test runner error:${colors.reset}`, error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = TestRunner;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEE;AAAM,CAAC,GAAGF,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAMG,EAAE,GAAGH,OAAO,CAAC,IAAI,CAAC;;AAExB;AACA,MAAMI,MAAM,GAAG;EACbC,KAAK,EAAE,SAAS;EAChBC,MAAM,EAAE,SAAS;EACjBC,GAAG,EAAE,SAAS;EACdC,GAAG,EAAE,UAAU;EACfC,KAAK,EAAE,UAAU;EACjBC,MAAM,EAAE,UAAU;EAClBC,IAAI,EAAE,UAAU;EAChBC,OAAO,EAAE,UAAU;EACnBC,IAAI,EAAE,UAAU;EAChBC,KAAK,EAAE;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,WAAW,GAAG,CAAC;IACpB,IAAI,CAACC,WAAW,GAAG,CAAC;IACpB,IAAI,CAACC,UAAU,GAAG,CAAC;IACnB,IAAI,CAACC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAC3B,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,WAAW,GAAG,IAAI;EACzB;;EAEA;AACF;AACA;EACEC,aAAaA,CAAA,EAAG;IACd,MAAMC,YAAY,GAAG,CACnB,cAAc,EACd,cAAc,EACd,eAAe,EACf,eAAe,EACf,iBAAiB,EACjB,iBAAiB,EACjB,kBAAkB,EAClB,kBAAkB,EAClB,sBAAsB,EACtB,sBAAsB,CACvB;IAED,MAAMC,eAAe,GAAG,CACtB,cAAc,EACd,MAAM,EACN,UAAU,EACV,MAAM,EACN,OAAO,EACP,QAAQ,EACR,aAAa,EACb,MAAM;IAAS;IACf,UAAU;IAAK;IACf,MAAM;IAAS;IACf,OAAO,CAAQ;IAAA,CAChB;IAED,MAAMX,SAAS,GAAG,IAAIY,GAAG,CAAC,CAAC;IAE3B,MAAMC,OAAO,GAAIC,GAAG,IAAK;MACvB,IAAI,CAAChC,EAAE,CAACiC,UAAU,CAACD,GAAG,CAAC,EAAE;MAEzB,IAAI;QACF,MAAME,KAAK,GAAGlC,EAAE,CAACmC,WAAW,CAACH,GAAG,EAAE;UAAEI,aAAa,EAAE;QAAK,CAAC,CAAC;QAE1D,KAAK,MAAMC,IAAI,IAAIH,KAAK,EAAE;UACxB,IAAIG,IAAI,CAACC,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;UAC/B,IAAIV,eAAe,CAACW,QAAQ,CAACH,IAAI,CAACC,IAAI,CAAC,EAAE;UAEzC,MAAMG,QAAQ,GAAGvC,IAAI,CAACwC,IAAI,CAACV,GAAG,EAAEK,IAAI,CAACC,IAAI,CAAC;UAC1C,MAAMK,YAAY,GAAGzC,IAAI,CAAC0C,QAAQ,CAAC,GAAG,EAAEH,QAAQ,CAAC;;UAEjD;UACA,IAAIZ,eAAe,CAACgB,IAAI,CAACC,OAAO,IAAIH,YAAY,CAACH,QAAQ,CAACM,OAAO,CAAC,CAAC,EAAE;UAErE,IAAIT,IAAI,CAACU,WAAW,CAAC,CAAC,EAAE;YACtBhB,OAAO,CAACU,QAAQ,CAAC;UACnB,CAAC,MAAM,IAAIJ,IAAI,CAACW,MAAM,CAAC,CAAC,EAAE;YACxB;YACA,IAAI,IAAI,CAACC,UAAU,CAACN,YAAY,CAAC,EAAE;cACjCzB,SAAS,CAACgC,GAAG,CAACP,YAAY,CAAC;YAC7B;UACF;QACF;MACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACd;MAAA;IAEJ,CAAC;IAEDpB,OAAO,CAAC,GAAG,CAAC;IACZ,IAAI,CAACb,SAAS,GAAGkC,KAAK,CAACC,IAAI,CAACnC,SAAS,CAAC,CAACoC,IAAI,CAAC,CAAC;IAC7C,OAAO,IAAI,CAACpC,SAAS;EACvB;;EAEA;AACF;AACA;EACE+B,UAAUA,CAACM,QAAQ,EAAE;IACnB,MAAM3B,YAAY,GAAG,CACnB,kBAAkB,EAClB,kBAAkB,EAClB,0BAA0B,EAC1B,0BAA0B,EAC1B,2BAA2B,EAC3B,2BAA2B,EAC3B,yBAAyB,CAC1B;;IAED;IACA,MAAM4B,YAAY,GAAG,CACnB,cAAc,EACd,gBAAgB,EAChB,iBAAiB,EACjB,kBAAkB,EAClB,uBAAuB,EACvB,UAAU,CACX;IAED,IAAIA,YAAY,CAACX,IAAI,CAACY,OAAO,IAAIF,QAAQ,CAACG,QAAQ,CAACD,OAAO,CAAC,CAAC,EAAE;MAC5D,OAAO,KAAK;IACd;IAEA,OAAO7B,YAAY,CAACiB,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACa,IAAI,CAACJ,QAAQ,CAAC,CAAC;EAC7D;;EAEA;AACF;AACA;EACEK,mBAAmBA,CAAA,EAAG;IACpB,IAAI,IAAI,CAAClC,WAAW,KAAK,IAAI,EAAE;MAC7B,IAAI;QACF;QACA,MAAM1B,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;QACxB,MAAM4D,WAAW,GAAGC,IAAI,CAACC,KAAK,CAAC/D,EAAE,CAACgE,YAAY,CAAC,kCAAkC,EAAE,MAAM,CAAC,CAAC;QAC3F,MAAMC,YAAY,GAAGC,QAAQ,CAACL,WAAW,CAACM,OAAO,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC1C,WAAW,GAAGuC,YAAY;MACjC,CAAC,CAAC,MAAM;QACN;QACA,IAAI,CAACvC,WAAW,GAAG,EAAE;MACvB;IACF;;IAEA;IACA,OAAO,IAAI,CAACA,WAAW,IAAI,EAAE,GAAG,oBAAoB,GAAG,mBAAmB;EAC5E;;EAEA;AACF;AACA;EACE,MAAM2C,WAAWA,CAACC,QAAQ,EAAE;IAC1B,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9B,MAAMlD,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAC5B,IAAIiD,MAAM,GAAG,EAAE;MACf,IAAIC,MAAM,GAAG,EAAE;;MAEf;MACA,MAAMC,UAAU,GAAG,IAAI,CAACC,aAAa,CAACN,QAAQ,CAAC;MAE/C,MAAMO,OAAO,GAAGF,UAAU,GAAG,KAAK,GAAG,MAAM;MAC3C,MAAMG,YAAY,GAAGH,UAAU,GAAG,IAAI,CAACf,mBAAmB,CAAC,CAAC,GAAG,IAAI;MACnE,MAAMmB,IAAI,GAAGJ,UAAU,GAAG,CAAC,MAAM,EAAEG,YAAY,EAAER,QAAQ,EAAE,WAAW,CAAC,GAAG,CAACA,QAAQ,CAAC;MAEpF,MAAMU,KAAK,GAAG7E,KAAK,CAAC0E,OAAO,EAAEE,IAAI,EAAE;QACjCE,KAAK,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC;QACjCC,GAAG,EAAE;UAAE,GAAGC,OAAO,CAACD,GAAG;UAAEE,QAAQ,EAAE;QAAO;MAC1C,CAAC,CAAC;MAEFJ,KAAK,CAACP,MAAM,CAACY,EAAE,CAAC,MAAM,EAAGC,IAAI,IAAK;QAChCb,MAAM,IAAIa,IAAI,CAACC,QAAQ,CAAC,CAAC;MAC3B,CAAC,CAAC;MAEFP,KAAK,CAACN,MAAM,CAACW,EAAE,CAAC,MAAM,EAAGC,IAAI,IAAK;QAChCZ,MAAM,IAAIY,IAAI,CAACC,QAAQ,CAAC,CAAC;MAC3B,CAAC,CAAC;MAEFP,KAAK,CAACK,EAAE,CAAC,OAAO,EAAGG,IAAI,IAAK;QAC1B,MAAMC,QAAQ,GAAGlE,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;;QAEvC;QACA,MAAMoE,MAAM,GAAGjB,MAAM,GAAGC,MAAM;;QAE9B;QACA,MAAMiB,OAAO,GAAGD,MAAM,CAAClD,QAAQ,CAAC,OAAO,CAAC;QACxC,MAAMoD,OAAO,GAAGF,MAAM,CAAClD,QAAQ,CAAC,OAAO,CAAC;;QAExC;QACA,MAAMqD,oBAAoB,GAAGH,MAAM,CAAClD,QAAQ,CAAC,QAAQ,CAAC,IAC3BkD,MAAM,CAAClD,QAAQ,CAAC,iBAAiB,CAAC,IAClCkD,MAAM,CAAClD,QAAQ,CAAC,YAAY,CAAC,IAC7BkD,MAAM,CAAClD,QAAQ,CAAC,cAAc,CAAC,IAC/BkC,MAAM,CAAClC,QAAQ,CAAC,QAAQ,CAAC,IACzBkC,MAAM,CAAClC,QAAQ,CAAC,KAAK,CAAC;;QAEjD;QACA,IAAI2C,OAAO,CAACD,GAAG,CAACY,WAAW,EAAE;UAC3BC,OAAO,CAACC,GAAG,CAAC,WAAW1B,QAAQ,EAAE,CAAC;UAClCyB,OAAO,CAACC,GAAG,CAAC,SAASR,IAAI,WAAWG,OAAO,WAAWC,OAAO,gBAAgBC,oBAAoB,EAAE,CAAC;UACpGE,OAAO,CAACC,GAAG,CAAC,oBAAoBN,MAAM,CAACO,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC;QAC7D;;QAEA;QACA;QACA;QACA,MAAMC,WAAW,GAAGP,OAAO,IAAI,CAACC,OAAO;QACvC,MAAMO,aAAa,GAAGX,IAAI,KAAK,CAAC,IAAI,CAACK,oBAAoB,IAAI,CAACD,OAAO;QAErE,MAAMQ,OAAO,GAAGF,WAAW,KAAKvB,UAAU,GAAG,KAAK,GAAGwB,aAAa,CAAC;QAEnE,IAAIC,OAAO,EAAE;UACX,IAAI,CAACjF,WAAW,EAAE;QACpB,CAAC,MAAM;UACL,IAAI,CAACC,WAAW,EAAE;QACpB;QAEAoD,OAAO,CAAC;UACN6B,IAAI,EAAE/B,QAAQ;UACd8B,OAAO;UACPX,QAAQ;UACRC,MAAM,EAAEjB,MAAM;UACdtB,KAAK,EAAEuB,MAAM;UACbc;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MAEFR,KAAK,CAACK,EAAE,CAAC,OAAO,EAAGlC,KAAK,IAAK;QAC3B,IAAI,CAAC/B,WAAW,EAAE;QAClBoD,OAAO,CAAC;UACN6B,IAAI,EAAE/B,QAAQ;UACd8B,OAAO,EAAE,KAAK;UACdX,QAAQ,EAAElE,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;UAChCoE,MAAM,EAAE,EAAE;UACVvC,KAAK,EAAEA,KAAK,CAACmD,OAAO;UACpBd,IAAI,EAAE;QACR,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACEZ,aAAaA,CAACN,QAAQ,EAAE;IACtB,IAAI;MACF,MAAMiC,OAAO,GAAGvG,EAAE,CAACgE,YAAY,CAACM,QAAQ,EAAE,MAAM,CAAC;MACjD;MACA,OAAO,4EAA4E,CAACX,IAAI,CAAC4C,OAAO,CAAC;IACnG,CAAC,CAAC,MAAM;MACN,OAAO,KAAK;IACd;EACF;;EAEA;AACF;AACA;AACA;EACE,MAAMC,aAAaA,CAACtF,SAAS,EAAEuF,cAAc,EAAE;IAC7C,MAAMhF,OAAO,GAAG,EAAE;IAClB,MAAMiF,KAAK,GAAG,CAAC,GAAGxF,SAAS,CAAC,CAAC,CAAC;IAC9B,MAAMyF,OAAO,GAAG,IAAI7E,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3B,IAAI8E,SAAS,GAAG,CAAC;IAEjB,OAAO,IAAIrC,OAAO,CAAC,CAACC,OAAO,EAAEqC,MAAM,KAAK;MACtC,MAAMC,SAAS,GAAGA,CAAA,KAAM;QACtB;QACA,OAAOH,OAAO,CAACI,IAAI,GAAGN,cAAc,IAAIC,KAAK,CAACM,MAAM,GAAG,CAAC,EAAE;UACxD,MAAM1C,QAAQ,GAAGoC,KAAK,CAACO,KAAK,CAAC,CAAC;UAC9B,MAAMC,OAAO,GAAG,IAAI,CAAC7C,WAAW,CAACC,QAAQ,CAAC;UAE1CqC,OAAO,CAACzD,GAAG,CAACgE,OAAO,CAAC;UAEpBA,OAAO,CAACC,IAAI,CAAEC,MAAM,IAAK;YACvB3F,OAAO,CAAC4F,IAAI,CAACD,MAAM,CAAC;YACpBT,OAAO,CAACW,MAAM,CAACJ,OAAO,CAAC;YACvBN,SAAS,EAAE;;YAEX;YACAzB,OAAO,CAACV,MAAM,CAAC8C,KAAK,CAAC,KAAKlH,MAAM,CAACG,GAAG,aAAaoG,SAAS,IAAI1F,SAAS,CAAC8F,MAAM,mBAAmB3G,MAAM,CAACC,KAAK,EAAE,CAAC;;YAEhH;YACAwG,SAAS,CAAC,CAAC;;YAEX;YACA,IAAIF,SAAS,KAAK1F,SAAS,CAAC8F,MAAM,EAAE;cAClCjB,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC,CAAC;cACfxB,OAAO,CAAC/C,OAAO,CAAC;YAClB;UACF,CAAC,CAAC,CAAC+F,KAAK,CAAErE,KAAK,IAAK;YAClB4C,OAAO,CAAC5C,KAAK,CAAC,GAAG9C,MAAM,CAACI,GAAG,cAAcJ,MAAM,CAACC,KAAK,EAAE,EAAE6C,KAAK,CAAC;YAC/DwD,OAAO,CAACW,MAAM,CAACJ,OAAO,CAAC;YACvBN,SAAS,EAAE;;YAEX;YACAzB,OAAO,CAACV,MAAM,CAAC8C,KAAK,CAAC,KAAKlH,MAAM,CAACG,GAAG,aAAaoG,SAAS,IAAI1F,SAAS,CAAC8F,MAAM,mBAAmB3G,MAAM,CAACC,KAAK,EAAE,CAAC;YAChHwG,SAAS,CAAC,CAAC;YAEX,IAAIF,SAAS,KAAK1F,SAAS,CAAC8F,MAAM,EAAE;cAClCjB,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC,CAAC;cACfxB,OAAO,CAAC/C,OAAO,CAAC;YAClB;UACF,CAAC,CAAC;QACJ;MACF,CAAC;;MAED;MACAqF,SAAS,CAAC,CAAC;IACb,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACEW,cAAcA,CAAChG,OAAO,EAAE;IACtBsE,OAAO,CAACC,GAAG,CAAC,KAAK3F,MAAM,CAACE,MAAM,0BAA0BF,MAAM,CAACC,KAAK,EAAE,CAAC;IACvEyF,OAAO,CAACC,GAAG,CAAC,GAAG3F,MAAM,CAACG,GAAG,GAAG,GAAG,CAACkH,MAAM,CAAC,EAAE,CAAC,GAAGrH,MAAM,CAACC,KAAK,EAAE,CAAC;IAE5D,MAAMqH,aAAa,GAAGpG,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACF,SAAS;;IAEjD;IACAyE,OAAO,CAACC,GAAG,CAAC,GAAG3F,MAAM,CAACK,KAAK,aAAa,IAAI,CAACS,WAAW,GAAGd,MAAM,CAACC,KAAK,EAAE,CAAC;IAC1EyF,OAAO,CAACC,GAAG,CAAC,GAAG3F,MAAM,CAACI,GAAG,aAAa,IAAI,CAACW,WAAW,GAAGf,MAAM,CAACC,KAAK,EAAE,CAAC;IACxEyF,OAAO,CAACC,GAAG,CAAC,GAAG3F,MAAM,CAACO,IAAI,mBAAmBa,OAAO,CAACuF,MAAM,GAAG3G,MAAM,CAACC,KAAK,EAAE,CAAC;IAC7EyF,OAAO,CAACC,GAAG,CAAC,GAAG3F,MAAM,CAACS,IAAI,iBAAiB6G,aAAa,KAAKtH,MAAM,CAACC,KAAK,IAAI,CAAC;;IAE9E;IACA,MAAMsH,aAAa,GAAGnG,OAAO,CAACoG,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAAC1B,OAAO,CAAC;IACrD,IAAIwB,aAAa,CAACZ,MAAM,GAAG,CAAC,EAAE;MAC5BjB,OAAO,CAACC,GAAG,CAAC,GAAG3F,MAAM,CAACI,GAAG,GAAGJ,MAAM,CAACE,MAAM,gBAAgBF,MAAM,CAACC,KAAK,EAAE,CAAC;MACxEsH,aAAa,CAACG,OAAO,CAACX,MAAM,IAAI;QAC9BrB,OAAO,CAACC,GAAG,CAAC,KAAK3F,MAAM,CAACI,GAAG,KAAK2G,MAAM,CAACf,IAAI,GAAGhG,MAAM,CAACC,KAAK,EAAE,CAAC;QAC7D,IAAI8G,MAAM,CAACjE,KAAK,EAAE;UAChB4C,OAAO,CAACC,GAAG,CAAC,GAAG3F,MAAM,CAACG,GAAG,GAAG4G,MAAM,CAACjE,KAAK,CAACiB,KAAK,CAAC,IAAI,CAAC,CAAC6B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACvD,IAAI,CAAC,IAAI,CAAC,GAAGrC,MAAM,CAACC,KAAK,EAAE,CAAC;QAC/F;MACF,CAAC,CAAC;;MAEF;MACA,IAAI,CAAC0H,iBAAiB,CAACJ,aAAa,CAAC;IACvC;;IAEA;IACA,MAAMK,WAAW,GAAGxG,OAAO,CAACyG,MAAM,CAAC,CAACC,GAAG,EAAEL,CAAC,KAAKK,GAAG,GAAGL,CAAC,CAACrC,QAAQ,EAAE,CAAC,CAAC,GAAGhE,OAAO,CAACuF,MAAM;IACpFjB,OAAO,CAACC,GAAG,CAAC,KAAK3F,MAAM,CAACG,GAAG,0BAA0B4H,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC,KAAK5H,MAAM,CAACC,KAAK,EAAE,CAAC;EAClG;;EAEA;AACF;AACA;EACE0H,iBAAiBA,CAACJ,aAAa,EAAE;IAC/B,IAAIA,aAAa,CAACZ,MAAM,KAAK,CAAC,EAAE;IAEhC,MAAMxF,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;IACtB,MAAM+G,YAAY,GAAG9G,GAAG,CAAC+G,WAAW,CAAC,CAAC;IACtC,MAAMC,WAAW,GAAGhH,GAAG,CAACiH,cAAc,CAAC,OAAO,EAAE;MAC9CC,QAAQ,EAAE,qBAAqB;MAC/BC,OAAO,EAAE,MAAM;MACfC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,MAAM;MACbC,GAAG,EAAE,SAAS;MACdC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE,SAAS;MACjBC,YAAY,EAAE;IAChB,CAAC,CAAC;IAEF,IAAIC,YAAY,GAAG,6BAA6B;IAChDA,YAAY,IAAI,sBAAsBb,YAAY,IAAI;IACtDa,YAAY,IAAI,qBAAqBX,WAAW,MAAM;IACtDW,YAAY,IAAI,mKAAmK;IACnLA,YAAY,IAAI,sDAAsD;IAEtEvB,aAAa,CAACG,OAAO,CAAC,CAACX,MAAM,EAAEgC,KAAK,KAAK;MACvCD,YAAY,IAAI,kBAAkBC,KAAK,GAAG,CAAC,KAAKhC,MAAM,CAACf,IAAI,MAAM;MACjE8C,YAAY,IAAI,eAAe;MAC/BA,YAAY,IAAI,OAAO;MACvBA,YAAY,IAAI/B,MAAM,CAACjE,KAAK,IAAIiE,MAAM,CAAC1B,MAAM,IAAI,2BAA2B;MAC5EyD,YAAY,IAAI,WAAW;MAC3BA,YAAY,IAAI,iBAAiB/B,MAAM,CAAC3B,QAAQ,QAAQ;MACxD0D,YAAY,IAAI,SAAS;IAC3B,CAAC,CAAC;IAEFA,YAAY,IAAI,gBAAgB;IAChCA,YAAY,IAAI,yBAAyBvB,aAAa,CAACZ,MAAM,IAAI;IACjEmC,YAAY,IAAI,wBAAwBvB,aAAa,CAACyB,GAAG,CAACvB,CAAC,IAAIA,CAAC,CAACzB,IAAI,CAAC,CAAC3D,IAAI,CAAC,IAAI,CAAC,IAAI;IACrFyG,YAAY,IAAI,gBAAgB,IAAI5H,IAAI,CAAC,CAAC,CAACgH,WAAW,CAAC,CAAC,IAAI;IAE5D,IAAI;MACFvI,EAAE,CAACsJ,aAAa,CAAC,gBAAgB,EAAEH,YAAY,CAAC;MAChDpD,OAAO,CAACC,GAAG,CAAC,KAAK3F,MAAM,CAACM,MAAM,wCAAwCN,MAAM,CAACC,KAAK,EAAE,CAAC;IACvF,CAAC,CAAC,OAAO6C,KAAK,EAAE;MACd4C,OAAO,CAACC,GAAG,CAAC,GAAG3F,MAAM,CAACI,GAAG,wCAAwC0C,KAAK,CAACmD,OAAO,GAAGjG,MAAM,CAACC,KAAK,EAAE,CAAC;IAClG;EACF;;EAEA;AACF;AACA;EACE,MAAMiJ,GAAGA,CAAA,EAAG;IACVxD,OAAO,CAACC,GAAG,CAAC,GAAG3F,MAAM,CAACE,MAAM,wCAAwCF,MAAM,CAACC,KAAK,EAAE,CAAC;IACnFyF,OAAO,CAACC,GAAG,CAAC,GAAG3F,MAAM,CAACG,GAAG,uCAAuCH,MAAM,CAACC,KAAK,IAAI,CAAC;;IAEjF;IACA,MAAMY,SAAS,GAAG,IAAI,CAACS,aAAa,CAAC,CAAC;IAEtC,IAAIT,SAAS,CAAC8F,MAAM,KAAK,CAAC,EAAE;MAC1BjB,OAAO,CAACC,GAAG,CAAC,GAAG3F,MAAM,CAACM,MAAM,0BAA0BN,MAAM,CAACC,KAAK,EAAE,CAAC;MACrEyF,OAAO,CAACC,GAAG,CAAC,GAAG3F,MAAM,CAACG,GAAG,iFAAiFH,MAAM,CAACC,KAAK,EAAE,CAAC;MACzH;IACF;IAEAyF,OAAO,CAACC,GAAG,CAAC,GAAG3F,MAAM,CAACO,IAAI,SAASM,SAAS,CAAC8F,MAAM,iBAAiB3G,MAAM,CAACC,KAAK,EAAE,CAAC;IACnFY,SAAS,CAAC6G,OAAO,CAAC1B,IAAI,IAAIN,OAAO,CAACC,GAAG,CAAC,KAAK3F,MAAM,CAACG,GAAG,IAAIH,MAAM,CAACC,KAAK,IAAI+F,IAAI,EAAE,CAAC,CAAC;IACjFN,OAAO,CAACC,GAAG,CAAC,KAAK3F,MAAM,CAACQ,OAAO,kCAAkCR,MAAM,CAACC,KAAK,IAAI,CAAC;;IAElF;IACA,MAAMkJ,QAAQ,GAAGpJ,EAAE,CAACqJ,IAAI,CAAC,CAAC,CAACzC,MAAM;IACjC,MAAMP,cAAc,GAAG2B,IAAI,CAACsB,GAAG,CAACxI,SAAS,CAAC8F,MAAM,EAAEoB,IAAI,CAACuB,GAAG,CAAC,CAAC,EAAEH,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9EzD,OAAO,CAACC,GAAG,CAAC,GAAG3F,MAAM,CAACG,GAAG,oBAAoBiG,cAAc,aAAa+C,QAAQ,cAAcnJ,MAAM,CAACC,KAAK,IAAI,CAAC;IAE/G,MAAMmB,OAAO,GAAG,MAAM,IAAI,CAAC+E,aAAa,CAACtF,SAAS,EAAEuF,cAAc,CAAC;IACnE,IAAI,CAAChF,OAAO,GAAGA,OAAO;;IAEtB;IACA,IAAI,CAACgG,cAAc,CAAChG,OAAO,CAAC;;IAE5B;IACA0D,OAAO,CAACyE,IAAI,CAAC,IAAI,CAACxI,WAAW,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAC5C;AACF;;AAEA;AACA,IAAInB,OAAO,CAAC4J,IAAI,KAAKC,MAAM,EAAE;EAC3B,MAAMC,MAAM,GAAG,IAAI/I,UAAU,CAAC,CAAC;EAC/B+I,MAAM,CAACR,GAAG,CAAC,CAAC,CAAC/B,KAAK,CAACrE,KAAK,IAAI;IAC1B4C,OAAO,CAAC5C,KAAK,CAAC,GAAG9C,MAAM,CAACI,GAAG,qBAAqBJ,MAAM,CAACC,KAAK,EAAE,EAAE6C,KAAK,CAAC;IACtEgC,OAAO,CAACyE,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC;AACJ;AAEAE,MAAM,CAACE,OAAO,GAAGhJ,UAAU","ignoreList":[]}