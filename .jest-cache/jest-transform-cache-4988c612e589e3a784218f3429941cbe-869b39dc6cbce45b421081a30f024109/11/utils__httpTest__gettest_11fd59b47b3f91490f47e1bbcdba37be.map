{"file":"/home/runner/workspace/generated-tests/integration/utils__httpTest__get.test.ts","mappings":";AAAA,+DAA+D;AAC/D,yDAAyD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEzD,wDAAwD;AACxD,MAAM,cAAc,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;AAC/F,MAAM,WAAW,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,cAAc,GAAG,cAAc,CAAC;AAEpG,+DAAiD;AAEjD,QAAQ,CAAC,kBAAkB,cAAc,GAAG,EAAE,GAAG,EAAE;IACjD,qDAAqD;IACrD,MAAM,oBAAoB,GAAG,GAAG,EAAE,CAAC,CAAC;QAClC,SAAS,EAAE,cAAc;QACzB,SAAS,EAAE,OAAO,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;QACzE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;KACpC,CAAC,CAAC;IAEH,IAAI,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,QAAQ,GAAG,oBAAoB,EAAE,CAAC;QACxC,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,EAAE,CAAC;QAErC,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YAChC,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC;YACrB,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;YAClD,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;gBACrB,OAAO,EAAE,IAAI;gBACb,WAAW,EAAE,cAAc;gBAC3B,SAAS,EAAE,QAAQ,CAAC,SAAS;aAC9B,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,MAAM,GAAG,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC;aACtC,GAAG,CAAC,WAAW,CAAC;aAChB,IAAI,CAAC,QAAQ,CAAC;aACd,MAAM,CAAC,GAAG,CAAC,CAAC;QAEf,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/runner/workspace/generated-tests/integration/utils__httpTest__get.test.ts"],"sourcesContent":["// Auto-generated API test for GET /test - TypeScript ES module\n// PARALLEL-SAFE DESIGN: This test avoids race conditions\n\n// Unique API test session for parallel execution safety\nconst apiTestSession = `${process.hrtime.bigint()}-${Math.random().toString(36).substr(2, 9)}`;\nconst uniqueRoute = '/test' + ('/test'.includes('?') ? '&' : '?') + 'testSession=' + apiTestSession;\n\nimport * as httpTest from '../utils/httpTest.js';\n\ndescribe(`GET /test [API-${apiTestSession}]`, () => {\n  // Test data factory for unique request/response data\n  const createUniqueTestData = () => ({\n    sessionId: apiTestSession,\n    requestId: `req-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`,\n    timestamp: new Date().toISOString(),\n  });\n\n  test('should succeed with unique test data', async () => {\n    const testData = createUniqueTestData();\n    const app = httpTest.createMockApp();\n    \n    app.get(uniqueRoute, (req, res) => {\n      res.statusCode = 200;\n      res.setHeader('content-type', 'application/json');\n      res.end(JSON.stringify({ \n        success: true, \n        testSession: apiTestSession,\n        requestId: testData.requestId\n      }));\n    });\n    \n    const res = await httpTest.supertest(app)\n      .get(uniqueRoute)\n      .send(testData)\n      .expect(200);\n    \n    expect(res.body.success).toBe(true);\n    expect(res.body.testSession).toBe(apiTestSession);\n  });\n});\n"],"version":3}