{"file":"/home/runner/workspace/utils/testEnv.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/testEnv.ts"],"sourcesContent":["/**\n * Test Environment Management Utilities - TypeScript Implementation\n * \n * Provides comprehensive environment variable management and mock creation\n * for complex testing scenarios. This module handles the common pattern of\n * setting up test environments with known values and cleaning up afterward.\n * \n * Design philosophy:\n * - Environment isolation: tests shouldn't affect each other or the host environment\n * - Predictable test data: use known values for consistent test results\n * - Mock management: centralized creation and cleanup of test doubles\n * - Framework agnostic: works with or without Jest\n * \n * Use cases:\n * - API testing with known API keys\n * - Testing code that depends on environment variables\n * - Complex test scenarios requiring multiple mocks\n * - Integration tests that need controlled environments\n */\n\n// Import logging utilities including wrapper for consistent logs\nimport { logStart, logReturn, executeWithLogs, setLogging } from '../lib/logUtils.js';\nif (process.env.NODE_ENV !== 'test') setLogging(false); // mute logs outside tests\n\ninterface DefaultEnv {\n  GOOGLE_API_KEY: string;\n  GOOGLE_CX: string;\n  OPENAI_TOKEN: string;\n}\n\ninterface MockSpy {\n  mockClear?: () => void;\n  mockReset?: () => void;\n}\n\ninterface AxiosMock {\n  onGet: (url: string) => ReplyBinder;\n  onPost: (url: string) => ReplyBinder;\n  reset: () => void;\n  _replies: Record<string, { status: number; data: any }>;\n}\n\ninterface ReplyBinder {\n  reply: (status: number, data: any) => AxiosMock;\n}\n\nconst defaultEnv: DefaultEnv = { // shared env defaults for tests\n  GOOGLE_API_KEY: 'key', // fake google api key\n  GOOGLE_CX: 'cx', // fake search cx\n  OPENAI_TOKEN: 'token' // fake openai token\n};\n\n/**\n * Sets up a standard test environment with common API keys\n * \n * This function establishes a predictable environment for tests by setting\n * commonly used environment variables to known test values. This ensures\n * tests are deterministic and don't depend on the developer's local environment.\n * \n * Why these specific variables:\n * - GOOGLE_API_KEY: Common in search and maps functionality\n * - GOOGLE_CX: Google Custom Search Engine ID\n * - OPENAI_TOKEN: AI/ML functionality testing\n * \n * Values chosen:\n * - Simple strings that are obviously fake ('key', 'cx', 'token')\n * - Short to avoid log pollution\n * - Recognizable as test data\n * \n * @returns Always returns true to confirm environment was set\n */\nfunction setTestEnv(): boolean {\n  console.log(`setTestEnv is running with default values`); // logging function start per requirements\n  \n  try {\n    // Apply default test environment variables using Object.assign for atomic operation\n    // Object.assign chosen over individual assignments for performance and atomicity\n    // All environment variables are set together to prevent partial states\n    // Overwrites existing values to ensure predictable test environment regardless of host setup\n    Object.assign(process.env, defaultEnv);\n    console.log(`setTestEnv is returning true`); // logging return value per requirements\n    return true;\n  } catch (error: any) {\n    // Log error context for debugging environment setup issues\n    // Environment variable assignment rarely fails but can occur with read-only process.env\n    // Error re-throwing maintains contract while providing diagnostic information\n    console.log(`setTestEnv error: ${error.message}`);\n    throw error;\n  }\n}\n\n/**\n * Captures the current process environment for later restoration\n * \n * This function creates a snapshot of the current environment variables\n * so they can be restored after test modifications. Essential for preventing\n * test pollution and ensuring each test starts with a clean environment.\n * \n * Implementation details:\n * - Uses spread operator for shallow copy (sufficient for env vars)\n * - Copies at time of call, not when restore is called\n * - Returns the copy rather than storing internally for thread safety\n * \n * Why shallow copy is sufficient:\n * - Environment variables are always strings (primitives)\n * - No nested objects to worry about\n * - Fast and memory efficient\n * \n * @returns Copy of current environment variables\n */\nfunction saveEnv(): Record<string, string | undefined> {\n  console.log(`saveEnv is running with none`); // logging function start per requirements\n  \n  try {\n    // Create shallow copy of process.env using spread operator\n    // Spread operator chosen over Object.assign for conciseness and readability\n    // Shallow copy is sufficient because environment variables are always string primitives\n    // Snapshot taken immediately to capture current state, not when restore is called\n    // This timing ensures we get the exact environment state at the moment of saving\n    const savedEnv = { ...process.env };\n    console.log(`saveEnv is returning ${savedEnv}`); // logging return value per requirements\n    return savedEnv;\n  } catch (error: any) {\n    // Handle rare cases where process.env access might fail\n    // Possible issues include permission restrictions or corrupted environment\n    // Error logging provides diagnostic context for environment capture failures\n    console.log(`saveEnv error: ${error.message}`);\n    throw error;\n  }\n}\n\n/**\n * Restores environment to a previously saved state\n * \n * This function completely replaces the current environment with a saved copy.\n * It ensures clean restoration by clearing all current variables first,\n * then applying the saved state.\n * \n * Two-step process rationale:\n * 1. Clear current env: removes any variables added during testing\n * 2. Apply saved env: restores exactly the original state\n * \n * Why not just override:\n * - Tests might add new environment variables\n * - Simple assignment wouldn't remove test-added variables\n * - Complete replacement ensures clean state\n * \n * @param savedEnv - Previously saved environment from saveEnv()\n * @returns Always returns true to confirm restoration\n */\nfunction restoreEnv(savedEnv: Record<string, string | undefined>): boolean {\n  console.log(`restoreEnv is running with ${savedEnv}`); // logging function start per requirements\n\n  try {\n    // Validate the saved environment to avoid runtime errors\n    if (!savedEnv || typeof savedEnv !== 'object') {\n      console.log(`restoreEnv: invalid saved environment`); // log invalid input\n      return false; // indicate failure to restore\n    }\n\n    // Determine which variables were added after the backup was taken\n    const currentKeys = new Set(Object.keys(process.env)); // capture current keys\n    const backupKeys = new Set(Object.keys(savedEnv)); // capture backup keys\n\n    // Remove only those keys that did not exist at backup time\n    for (const key of currentKeys) {\n      if (!backupKeys.has(key)) delete process.env[key]; // remove added variables only\n    }\n\n    // Restore backed up variables to their original values without wiping others\n    for (const [key, value] of Object.entries(savedEnv)) {\n      if (value !== undefined) process.env[key] = value; else delete process.env[key]; // reinstate or delete per backup\n    }\n\n    console.log(`restoreEnv is returning true`); // logging return value per requirements\n    return true;\n  } catch (error: any) {\n    console.log(`restoreEnv error: ${error.message}`); // log restoration failure\n    throw error; // propagate error to caller\n  }\n}\n\n/**\n * Attach Jest spy helpers to a mock when available\n *\n * Reduces duplication by centralizing the environment check and method creation\n * for mocks that require mockClear and mockReset methods.\n *\n * @param mock - Mock or spy object to enhance\n * @returns The same mock enhanced with spy methods\n */\nfunction attachMockSpies<T extends MockSpy>(mock: T): T {\n  console.log(`attachMockSpies is running with ${mock}`); // logging function start per requirements\n  \n  try {\n    // Check for Jest availability and enhance mock with Jest-compatible methods\n    // This pattern ensures consistent API across testing environments while leveraging Jest features when available\n    // typeof check prevents ReferenceError in environments where Jest is not loaded\n    if (typeof jest !== `undefined`) {\n      // Add Jest spy methods for enhanced testing capabilities\n      // jest.fn() creates proper Jest mock functions with full spy capabilities\n      // These methods integrate with Jest's assertion and debugging tools\n      // Provides mockClear and mockReset functionality expected by Jest users\n      mock.mockClear = jest.fn();\n      mock.mockReset = jest.fn();\n    } else {\n      // Provide no-op implementations for non-Jest environments\n      // Maintains API compatibility so the same test code works across frameworks\n      // No-op functions prevent errors when tests call these methods\n      // Arrow functions used for minimal overhead and clear intent\n      mock.mockClear = () => {};\n      mock.mockReset = () => {};\n    }\n    console.log(`attachMockSpies is returning ${mock}`); // logging return value per requirements\n    return mock;\n  } catch (error: any) {\n    // Handle cases where Jest enhancement fails or mock modification errors occur\n    // Important for debugging framework integration issues\n    // Error re-throwing maintains proper error handling contract\n    console.log(`attachMockSpies error: ${error.message}`);\n    throw error;\n  }\n}\n\n/**\n * Creates a logged mock and attaches spies\n *\n * Consolidates repetitive mock creation logic by wrapping executeWithLogs\n * with automatic spy attachment. Useful for any mock factory in this file\n * that needs consistent logging behavior.\n *\n * @param name - Identifier used for logging\n * @param creator - Function that returns the raw mock\n * @returns Mock enhanced with spy helpers\n */\nfunction makeLoggedMock<T extends MockSpy>(name: string, creator: () => T): T {\n  console.log(`makeLoggedMock is running with ${name}, ${creator}`); // logging function start per requirements\n  \n  try {\n    const mock = creator(); // create raw mock using provided creator function\n    attachMockSpies(mock); // add jest spies if available\n    console.log(`makeLoggedMock is returning ${mock}`); // logging return value per requirements\n    return mock;\n  } catch (error: any) {\n    console.log(`makeLoggedMock error: ${error.message}`); // error logging per requirements\n    throw error;\n  }\n}\n\n/**\n * Creates a mock for scheduler/throttling libraries like Bottleneck\n * \n * Many applications use scheduling libraries to control rate limiting or\n * async execution. In tests, we want immediate execution without delays.\n * This mock provides that while maintaining a compatible interface.\n * \n * Framework compatibility approach:\n * - Provides Jest methods if Jest is available\n * - Falls back to no-op implementations otherwise\n * - This allows the same test code to work in different environments\n * \n * Why Promise.resolve():\n * - Schedule functions typically return promises\n * - Immediate resolution simulates instant execution\n * - Maintains async interface contract for realistic testing\n * \n * @returns Mock scheduler function with Jest-compatible methods\n */\nfunction createScheduleMock(): Function & MockSpy {\n  console.log(`createScheduleMock is running with none`); // logging function start per requirements\n  \n  try {\n    const scheduleMock = function(fn: Function): Promise<any> { // immediate scheduler mock function\n      return Promise.resolve(fn()); // execute and resolve instantly for fast tests\n    } as Function & MockSpy;\n    attachMockSpies(scheduleMock); // add jest spies if available\n    console.log(`createScheduleMock is returning ${scheduleMock}`); // logging return value per requirements\n    return scheduleMock;\n  } catch (error: any) {\n    console.log(`createScheduleMock error: ${error.message}`); // error logging per requirements\n    throw error;\n  }\n}\n\n/**\n * Creates a mock for error handling utilities\n * \n * Applications often have centralized error handling utilities.\n * In tests, we want to capture error calls without triggering real\n * error handling logic like logging or alerting.\n * \n * Design approach:\n * - Returns arguments passed to it for inspection\n * - Provides Jest methods for compatibility\n * - No-op in terms of side effects\n * \n * Why return arguments:\n * - Allows tests to verify what errors were reported\n * - Simple way to capture call data without complex tracking\n * - Compatible with most error utility interfaces\n * \n * @returns Mock error handler with Jest-compatible methods\n */\nfunction createQerrorsMock(): Function & MockSpy {\n  console.log(`createQerrorsMock is running with none`); // logging function start per requirements\n  \n  try {\n    const qerrorsMock = function(...args: any[]): any[] { // capture arguments for inspection\n      return args; // return arguments for test inspection\n    } as Function & MockSpy;\n    attachMockSpies(qerrorsMock); // add jest spies if available\n    console.log(`createQerrorsMock is returning ${qerrorsMock}`); // logging return value per requirements\n    return qerrorsMock;\n  } catch (error: any) {\n    console.log(`createQerrorsMock error: ${error.message}`); // error logging per requirements\n    throw error;\n  }\n}\n\n/**\n * Creates a mock HTTP adapter for axios testing\n * \n * This provides a simple HTTP mock without external dependencies like\n * axios-mock-adapter. It implements the minimum interface needed for\n * basic HTTP testing scenarios.\n * \n * Design decisions:\n * - Self-contained: no external mocking library dependencies\n * - Simple interface: covers common GET/POST scenarios\n * - Stateful: stores reply configurations for later use\n * - Resettable: can clear state between tests\n * \n * Why not use axios-mock-adapter:\n * - Reduces dependencies for the qtests module\n * - Simpler implementation for basic use cases\n * - More predictable behavior in different environments\n * \n * @returns Mock adapter with onGet, onPost, and reset methods\n */\nfunction createAxiosMock(): AxiosMock & MockSpy {\n  return makeLoggedMock('createAxiosMock', () => { // log and spy helper\n    const mock = { // declare mock before binder so binder can reference it\n      /**\n       * Configure mock response for GET requests to a specific URL\n       * @param url - URL to mock\n       * @returns Reply configuration object\n       */\n      onGet: function(url: string): ReplyBinder {\n        return createReplyBinder(url); // delegate to reply binder\n      },\n      \n      /**\n       * Configure mock response for POST requests to a specific URL\n       * @param url - URL to mock\n       * @returns Reply configuration object\n       */\n      onPost: function(url: string): ReplyBinder {\n        return createReplyBinder(url); // use common binder for post\n      },\n      \n      /**\n       * Reset all configured mocks\n       * Essential for preventing test pollution\n       */\n      reset: function(): void {\n        mock._replies = {}; // clear stored replies on adapter\n      },\n      \n      _replies: {} as Record<string, { status: number; data: any }>\n    } as AxiosMock & MockSpy;\n    \n    function createReplyBinder(url: string): ReplyBinder { // helper after mock exists to avoid reference errors\n      return { // return object with reply method\n        reply: function(status: number, data: any): AxiosMock { // store status and data for url\n          mock._replies[url] = { status, data }; // bind response to url\n          return mock; // allow chaining\n        }\n      }; // close returned object\n    }\n    return mock; // returned to helper for spies\n  });\n}\n\n/**\n * Resets all provided mocks to clean state\n * \n * This utility function provides a centralized way to reset multiple\n * mocks at once. Essential for test cleanup and preventing interference\n * between test cases.\n * \n * Defensive programming approach:\n * - Checks for method existence before calling\n * - Handles different mock types gracefully\n * - Won't throw errors if mocks are undefined or incomplete\n * \n * Why centralized reset:\n * - Reduces boilerplate in test teardown\n * - Ensures consistent cleanup patterns\n * - Easier to maintain when mock interfaces change\n * \n * @param mock - HTTP mock adapter with reset method\n * @param scheduleMock - Scheduler mock with Jest methods\n * @param qerrorsMock - Error handler mock with Jest methods\n * @returns Always returns true to confirm reset completion\n */\nfunction resetMocks(\n  mock?: AxiosMock, \n  scheduleMock?: Function & MockSpy, \n  qerrorsMock?: Function & MockSpy\n): boolean {\n  return executeWithLogs('resetMocks', () => { // wrap mock resets in logger\n    if (mock && mock.reset) {\n      mock.reset();\n    }\n    if (scheduleMock && scheduleMock.mockClear) {\n      scheduleMock.mockClear();\n    }\n    if (qerrorsMock && qerrorsMock.mockClear) {\n      qerrorsMock.mockClear();\n    }\n    return true; // confirm completion\n  }, 'mocks');\n}\n\n/**\n * One-stop initialization for search/API testing scenarios\n * \n * This convenience function sets up a complete test environment for\n * applications that make HTTP requests and use scheduling/error handling.\n * It combines multiple setup steps into a single call.\n * \n * What it provides:\n * - Clean module state (Jest module reset)\n * - Test environment variables\n * - All common mocks configured and ready\n * \n * Use case:\n * - Integration tests for search APIs\n * - Testing applications with multiple external dependencies\n * - Scenarios where you need full environment control\n * \n * Why combine these specific elements:\n * - Common pattern in API testing\n * - Reduces test setup boilerplate\n * - Ensures consistent test environment\n * \n * @returns Object containing all created mocks for individual control\n */\nfunction initSearchTest(): {\n  mock: AxiosMock & MockSpy;\n  scheduleMock: Function & MockSpy;\n  qerrorsMock: Function & MockSpy;\n} {\n  return executeWithLogs('initSearchTest', () => { // wrap full init in logger\n    if (typeof jest !== 'undefined' && jest.resetModules) {\n      jest.resetModules();\n    }\n    setTestEnv();\n    const scheduleMock = createScheduleMock();\n    const qerrorsMock = createQerrorsMock();\n    const mock = createAxiosMock();\n    return { mock, scheduleMock, qerrorsMock }; // provide mocks\n  }, 'none');\n}\n\n// Export all test environment functions using ES module syntax\nexport {\n  defaultEnv, // default test environment values\n  setTestEnv, // set standard test environment variables\n  saveEnv, // capture current environment for restoration\n  restoreEnv, // restore previously saved environment\n  attachMockSpies, // attach jest spy helpers to mocks\n  makeLoggedMock, // factory for creating logged mocks\n  createScheduleMock, // create scheduler/throttling mock\n  createQerrorsMock, // create error handler mock\n  createAxiosMock, // create http client mock adapter\n  resetMocks, // reset multiple mocks at once\n  initSearchTest // complete setup for search/api testing\n};"],"version":3}