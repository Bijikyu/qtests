{"file":"/home/runner/workspace/manual-tests/testEnv.test.ts","mappings":";;AAAA,oEAAoE;AACpE,oDAAyG;AAEzG,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;QACpD,MAAM,CAAC,OAAO,uBAAU,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC3C,MAAM,CAAC,OAAO,+BAAkB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACnD,MAAM,CAAC,OAAO,8BAAiB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAClD,MAAM,CAAC,OAAO,4BAAe,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QACrC,MAAM,YAAY,GAAG,IAAA,+BAAkB,GAAE,CAAC;QAC1C,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC;QACjC,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,EAAE,CAAC,CAAC;QACtC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5B,MAAM,CAAC,OAAO,YAAY,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC9B,MAAM,WAAW,GAAG,IAAA,8BAAiB,GAAE,CAAC;QACxC,MAAM,IAAI,GAAG,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACvC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QACrC,MAAM,CAAC,OAAO,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC1C,MAAM,SAAS,GAAG,IAAA,4BAAe,GAAE,CAAC;QACpC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QAClD,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IACnF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/runner/workspace/manual-tests/testEnv.test.ts"],"sourcesContent":["// Simplified testEnv tests to prevent hanging in parallel execution\nimport { setTestEnv, createScheduleMock, createQerrorsMock, createAxiosMock } from '../utils/testEnv.js';\n\ndescribe('testEnv utilities', () => {\n  test('testEnv utilities exist and are callable', () => {\n    expect(typeof setTestEnv).toBe('function');\n    expect(typeof createScheduleMock).toBe('function');\n    expect(typeof createQerrorsMock).toBe('function');\n    expect(typeof createAxiosMock).toBe('function');\n  });\n\n  test('schedule mock works', async () => {\n    const scheduleMock = createScheduleMock();\n    const fn = jest.fn(() => 'done');\n    const result = await scheduleMock(fn);\n    expect(result).toBe('done');\n    expect(typeof scheduleMock.mockClear).toBe('function');\n  });\n\n  test('qerrors mock works', () => {\n    const qerrorsMock = createQerrorsMock();\n    const args = qerrorsMock('err', 'ctx');\n    expect(args).toEqual(['err', 'ctx']);\n    expect(typeof qerrorsMock.mockClear).toBe('function');\n  });\n\n  test('axios mock basic functionality', () => {\n    const axiosMock = createAxiosMock();\n    axiosMock.onGet('/test').reply(200, { ok: true });\n    expect(axiosMock._replies['/test']).toEqual({ status: 200, data: { ok: true } });\n  });\n});"],"version":3}