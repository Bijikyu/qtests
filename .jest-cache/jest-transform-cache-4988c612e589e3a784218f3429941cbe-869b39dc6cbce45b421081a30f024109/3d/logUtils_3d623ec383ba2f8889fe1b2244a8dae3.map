{"file":"/home/runner/workspace/lib/logUtils.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/lib/logUtils.ts"],"sourcesContent":["/**\n * Logging Utilities for Function Call Tracing\n * \n * Provides standardized logging for function entry and exit points throughout\n * the qtests module. This is essential for debugging test setup issues and\n * understanding the flow of mock creation and cleanup.\n * \n * Design philosophy:\n * - Consistent format: all logs follow the same pattern for easy parsing\n * - Minimal overhead: simple console output without external dependencies\n * - Debugging focus: optimized for troubleshooting rather than production\n * - JSON serialization: handles complex arguments safely\n * \n * Why dedicated logging utilities:\n * - Consistent formatting across all qtests functions\n * - Easy to disable by modifying this single file\n * - Helps users understand what qtests is doing during test setup\n * - Essential for debugging complex test environment issues\n */\n\n// Import util for safe inspection fallback\nimport util from 'util';\n\nlet LOG_ENABLED = true; // global log flag default true\n\nfunction setLogging(enabled: boolean): void {\n  LOG_ENABLED = enabled; // update flag state\n}\n\n/**\n * Safely converts values to strings for logging\n *\n * Attempts JSON serialization first, then falls back to util.inspect.\n * Returns '[unserializable]' if both methods fail.\n *\n * @param value - Value to serialize for log output\n * @returns Serialized representation\n */\nfunction safeSerialize(value: any): string {\n  if (value === undefined) return 'undefined'; // handle undefined explicitly for clarity\n  try {\n    // Attempt JSON serialization as primary strategy for most values\n    // JSON.stringify chosen first because it produces clean, readable output\n    // Handles primitive types, arrays, and plain objects efficiently\n    // Fails gracefully on circular references, functions, symbols\n    const serialized = JSON.stringify(value);\n    if (serialized !== undefined) return serialized; // check for unsupported types\n    const inspected = util.inspect(value, { depth: null }); // fallback for functions or symbols\n    return inspected;\n  } catch (error) {\n    // Handle JSON serialization failures with util.inspect fallback\n    // Common failures: circular references, BigInt\n    try {\n      // Use util.inspect for complex objects that JSON.stringify cannot handle\n      const inspected = util.inspect(value, { \n        depth: null,\n        showHidden: false,\n        colors: false,\n        customInspect: true,\n        showProxy: true,\n        maxArrayLength: 100,\n        maxStringLength: 100,\n        breakLength: 80,\n        compact: true,\n        sorted: false,\n        getters: false \n      });\n      return inspected;\n    } catch (inspectError) {\n      // Final fallback when both JSON and util.inspect fail\n      // This should be extremely rare but provides safety\n      return '[unserializable]';\n    }\n  }\n}\n\n/**\n * Logs function entry with name and arguments\n *\n * @param name - Function name for identification\n * @param args - Function arguments to serialize and log\n */\nfunction logStart(name: string, ...args: any[]): void {\n  if (!LOG_ENABLED) return; // respect global log flag\n  const serializedArgs = args.map(arg => safeSerialize(arg)).join(', ');\n  console.log(`${name}(${serializedArgs})`);\n}\n\n/**\n * Logs function return value\n *\n * @param name - Function name for identification  \n * @param value - Return value to serialize and log\n */\nfunction logReturn(name: string, value: any): void {\n  if (!LOG_ENABLED) return; // respect global log flag\n  const serializedValue = safeSerialize(value);\n  console.log(`${name} -> ${serializedValue}`);\n}\n\n/**\n * Executes a function with entry/exit logging\n *\n * Provides automatic logging wrapper for functions that need\n * detailed execution tracing for debugging purposes.\n *\n * @param name - Function name for log identification\n * @param fn - Function to execute with logging\n * @param args - Arguments to pass to the function\n * @returns The result of the function execution\n */\nfunction executeWithLogs<T>(name: string, fn: (...args: any[]) => T, ...args: any[]): T {\n  try {\n    // Log function entry with arguments for debugging visibility\n    // This helps track the sequence of function calls during test setup\n    logStart(name, ...args);\n    \n    // Execute the wrapped function with provided arguments\n    // Function execution is not modified, only instrumented with logging\n    const result = fn(...args);\n    \n    // Log function exit with return value for completeness\n    // Return value logging helps verify expected function behavior\n    logReturn(name, result);\n    \n    return result;\n  } catch (error: any) {\n    // Log errors for debugging while preserving original error handling\n    // Error message logging helps identify issues in wrapped function execution\n    // Re-throwing maintains original error handling contract while adding diagnostics\n    if (LOG_ENABLED) console.log(`${name} encountered ${error.message}`);\n    console.log(`executeWithLogs error: ${error.message}`);\n    throw error;\n  }\n}\n\n// Export all logging utilities using ES module syntax\nexport { logStart, logReturn, executeWithLogs, safeSerialize, setLogging };"],"version":3}