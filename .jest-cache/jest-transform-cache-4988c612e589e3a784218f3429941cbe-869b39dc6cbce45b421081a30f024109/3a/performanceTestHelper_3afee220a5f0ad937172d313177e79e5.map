{"file":"/home/runner/workspace/utils/testing/performanceTestHelper.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/utils/testing/performanceTestHelper.ts"],"sourcesContent":["/**\n * Performance Testing Helper for Load and Timing Tests - TypeScript Implementation\n * \n * This class focuses solely on performance measurement and testing concerns.\n * It provides standardized performance measurement across test suites.\n */\n\nimport { logStart, logReturn } from '../../lib/logUtils.js';\n\n// Type definitions\ninterface TimingMeasurement {\n  result: any;\n  duration: number;\n  durationNs: number;\n  timestamp: Date;\n}\n\ninterface ConcurrencyResult {\n  index: number;\n  result?: any;\n  error?: string;\n  duration: number;\n  success: boolean;\n}\n\ninterface ConcurrencyTestResult {\n  results: ConcurrencyResult[];\n  totalDuration: number;\n  successCount: number;\n  errorCount: number;\n  averageDuration: number;\n  maxDuration: number;\n  minDuration: number;\n}\n\n/**\n * Performance Testing Helper for Load and Timing Tests\n * \n * This class provides standardized performance measurement across test suites\n * with timing assertions and concurrency testing capabilities.\n */\nclass PerformanceTestHelper {\n  /**\n   * Measures execution time of async operations with high precision\n   */\n  static async measureTime(operation: () => Promise<any>): Promise<TimingMeasurement> {\n    logStart('PerformanceTestHelper.measureTime', operation.name || 'anonymous');\n    \n    try {\n      const start = process.hrtime.bigint();\n      const result = await operation();\n      const end = process.hrtime.bigint();\n      \n      const durationNs = Number(end - start);\n      const durationMs = durationNs / 1000000; // Convert nanoseconds to milliseconds\n      \n      const measurement: TimingMeasurement = {\n        result,\n        duration: durationMs,\n        durationNs,\n        timestamp: new Date()\n      };\n      \n      logReturn('PerformanceTestHelper.measureTime', `${durationMs.toFixed(2)}ms`);\n      return measurement;\n    } catch (error: any) {\n      logReturn('PerformanceTestHelper.measureTime', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Asserts operation completes within time limit\n   */\n  static async assertTimingConstraint(operation: () => Promise<any>, maxDuration: number): Promise<any> {\n    logStart('PerformanceTestHelper.assertTimingConstraint', `${operation.name || 'anonymous'}, ${maxDuration}ms`);\n    \n    try {\n      const { result, duration } = await this.measureTime(operation);\n      \n      if (duration > maxDuration) {\n        throw new Error(\n          `Operation took ${duration.toFixed(2)}ms, exceeding limit of ${maxDuration}ms`\n        );\n      }\n      \n      logReturn('PerformanceTestHelper.assertTimingConstraint', `passed in ${duration.toFixed(2)}ms`);\n      return result;\n    } catch (error: any) {\n      logReturn('PerformanceTestHelper.assertTimingConstraint', `failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Tests concurrent operations for race conditions and performance\n   */\n  static async testConcurrency(operations: Array<() => Promise<any>>): Promise<ConcurrencyTestResult> {\n    logStart('PerformanceTestHelper.testConcurrency', `${operations.length} operations`);\n    \n    try {\n      const start = process.hrtime.bigint();\n      \n      // Run all operations concurrently\n      const promises = operations.map(async (operation, index) => {\n        try {\n          const opStart = process.hrtime.bigint();\n          const result = await operation();\n          const opEnd = process.hrtime.bigint();\n          \n          return {\n            index,\n            result,\n            duration: Number(opEnd - opStart) / 1000000,\n            success: true\n          };\n        } catch (error: any) {\n          return {\n            index,\n            error: error.message,\n            duration: 0,\n            success: false\n          };\n        }\n      });\n      \n      const results = await Promise.all(promises);\n      const end = process.hrtime.bigint();\n      \n      const totalDuration = Number(end - start) / 1000000;\n      const successResults = results.filter(r => r.success);\n      const successCount = successResults.length;\n      const errorCount = results.length - successCount;\n      \n      const durations = successResults.map(r => r.duration);\n      const averageDuration = durations.length > 0 ? durations.reduce((a, b) => a + b, 0) / durations.length : 0;\n      const maxDuration = durations.length > 0 ? Math.max(...durations) : 0;\n      const minDuration = durations.length > 0 ? Math.min(...durations) : 0;\n      \n      const testResult: ConcurrencyTestResult = {\n        results,\n        totalDuration,\n        successCount,\n        errorCount,\n        averageDuration,\n        maxDuration,\n        minDuration\n      };\n      \n      logReturn('PerformanceTestHelper.testConcurrency', testResult);\n      return testResult;\n    } catch (error: any) {\n      logReturn('PerformanceTestHelper.testConcurrency', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Measures memory usage during operation execution\n   */\n  static async measureMemory(operation: () => Promise<any>): Promise<{ result: any; memoryUsage: NodeJS.MemoryUsage }> {\n    logStart('PerformanceTestHelper.measureMemory', operation.name || 'anonymous');\n    \n    try {\n      // Force garbage collection if available\n      if (typeof (global as any).gc === 'function') {\n        (global as any).gc();\n      }\n      \n      const initialMemory = process.memoryUsage();\n      const result = await operation();\n      const finalMemory = process.memoryUsage();\n      \n      const memoryUsage = {\n        rss: finalMemory.rss - initialMemory.rss,\n        heapTotal: finalMemory.heapTotal - initialMemory.heapTotal,\n        heapUsed: finalMemory.heapUsed - initialMemory.heapUsed,\n        external: finalMemory.external - initialMemory.external,\n        arrayBuffers: (finalMemory as any).arrayBuffers - (initialMemory as any).arrayBuffers || 0\n      };\n      \n      const measurement = { result, memoryUsage };\n      logReturn('PerformanceTestHelper.measureMemory', memoryUsage);\n      return measurement;\n    } catch (error: any) {\n      logReturn('PerformanceTestHelper.measureMemory', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Runs load testing with specified concurrent users\n   */\n  static async loadTest(operation: () => Promise<any>, concurrentUsers: number, iterations: number): Promise<any> {\n    logStart('PerformanceTestHelper.loadTest', `${concurrentUsers} users, ${iterations} iterations`);\n    \n    try {\n      const allOperations: Array<() => Promise<any>> = [];\n      \n      // Create operations for each user and iteration\n      for (let user = 0; user < concurrentUsers; user++) {\n        for (let iteration = 0; iteration < iterations; iteration++) {\n          allOperations.push(async () => {\n            const userIteration = { user, iteration };\n            return await operation();\n          });\n        }\n      }\n      \n      const results = await this.testConcurrency(allOperations);\n      \n      const loadTestResults = {\n        ...results,\n        concurrentUsers,\n        iterations,\n        totalOperations: allOperations.length,\n        operationsPerSecond: allOperations.length / (results.totalDuration / 1000),\n        averageResponseTime: results.averageDuration\n      };\n      \n      logReturn('PerformanceTestHelper.loadTest', loadTestResults);\n      return loadTestResults;\n    } catch (error: any) {\n      logReturn('PerformanceTestHelper.loadTest', `error: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Creates a performance benchmark suite\n   */\n  static createBenchmarkSuite(operations: Record<string, () => Promise<any>>): any {\n    logStart('PerformanceTestHelper.createBenchmarkSuite', Object.keys(operations));\n    \n    const suite = {\n      operations,\n      results: {} as Record<string, TimingMeasurement>,\n      \n      async run(): Promise<Record<string, TimingMeasurement>> {\n        for (const [name, operation] of Object.entries(operations)) {\n          this.results[name] = await PerformanceTestHelper.measureTime(operation);\n        }\n        return this.results;\n      },\n      \n      compare(): any {\n        const results = Object.entries(this.results);\n        const sorted = results.sort((a, b) => a[1].duration - b[1].duration);\n        const fastest = sorted[0];\n        \n        return sorted.map(([name, result]) => ({\n          name,\n          duration: result.duration,\n          relative: fastest ? result.duration / fastest[1].duration : 1\n        }));\n      }\n    };\n    \n    logReturn('PerformanceTestHelper.createBenchmarkSuite', suite);\n    return suite;\n  }\n}\n\n// Export PerformanceTestHelper using ES module syntax\nexport { PerformanceTestHelper };"],"version":3}