ca1a5ceba48999d65bf3e939e136061f
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  setupFiles: ['<rootDir>/test/testSetup.js'],
  // (invoke exported setup for jest)

  // Advanced Performance optimizations
  maxWorkers: '100%',
  // Use all available CPU cores for maximum speed
  cache: true,
  cacheDirectory: '<rootDir>/.jest-cache',
  clearMocks: true,
  resetMocks: false,
  restoreMocks: false,
  // Conservative memory optimizations for stability
  workerIdleMemoryLimit: '1GB',
  // Conservative worker memory to prevent hanging
  detectLeaks: false,
  // Skip leak detection for speed
  logHeapUsage: false,
  // Disable heap logging for speed
  forceExit: false,
  // Let Jest handle cleanup properly in parallel mode

  // Fast test execution (balanced for stability)
  verbose: false,
  silent: false,
  // Keep some output for debugging, qtests-runner handles display
  bail: false,
  // Don't stop on first failure for parallel efficiency
  passWithNoTests: true,
  // Don't fail on empty test suites

  testPathIgnorePatterns: ['/node_modules/', '/demo/', '/examples/', '/docs/', '/stubs/', '/utils/axiosStub.js', '/utils/winstonStub.js'],
  testMatch: ['<rootDir>/test/**/*.test.js', '<rootDir>/tests/**/*.test.js', '<rootDir>/tests/**/*.test.ts', '<rootDir>/**/*.test.js', '<rootDir>/**/*.test.ts'],
  transform: {
    '^.+\\.tsx?$': ['ts-jest', {
      // Use tsconfig.json instead of inline config to avoid deprecation warnings
      tsconfig: './tsconfig.json'
    }],
    '^.+\\.jsx?$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
  collectCoverageFrom: ['lib/**/*.js', 'utils/**/*.js', 'index.js', '!lib/stubs.js', '!utils/*Stub.js']
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicHJlc2V0IiwidGVzdEVudmlyb25tZW50Iiwic2V0dXBGaWxlcyIsIm1heFdvcmtlcnMiLCJjYWNoZSIsImNhY2hlRGlyZWN0b3J5IiwiY2xlYXJNb2NrcyIsInJlc2V0TW9ja3MiLCJyZXN0b3JlTW9ja3MiLCJ3b3JrZXJJZGxlTWVtb3J5TGltaXQiLCJkZXRlY3RMZWFrcyIsImxvZ0hlYXBVc2FnZSIsImZvcmNlRXhpdCIsInZlcmJvc2UiLCJzaWxlbnQiLCJiYWlsIiwicGFzc1dpdGhOb1Rlc3RzIiwidGVzdFBhdGhJZ25vcmVQYXR0ZXJucyIsInRlc3RNYXRjaCIsInRyYW5zZm9ybSIsInRzY29uZmlnIiwibW9kdWxlRmlsZUV4dGVuc2lvbnMiLCJjb2xsZWN0Q292ZXJhZ2VGcm9tIl0sInNvdXJjZXMiOlsiamVzdC5jb25maWcuanMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gIHByZXNldDogJ3RzLWplc3QnLFxuICB0ZXN0RW52aXJvbm1lbnQ6ICdub2RlJyxcbiAgc2V0dXBGaWxlczogWyc8cm9vdERpcj4vdGVzdC90ZXN0U2V0dXAuanMnXSwgLy8gKGludm9rZSBleHBvcnRlZCBzZXR1cCBmb3IgamVzdClcbiAgXG4gIC8vIEFkdmFuY2VkIFBlcmZvcm1hbmNlIG9wdGltaXphdGlvbnNcbiAgbWF4V29ya2VyczogJzEwMCUnLCAvLyBVc2UgYWxsIGF2YWlsYWJsZSBDUFUgY29yZXMgZm9yIG1heGltdW0gc3BlZWRcbiAgY2FjaGU6IHRydWUsXG4gIGNhY2hlRGlyZWN0b3J5OiAnPHJvb3REaXI+Ly5qZXN0LWNhY2hlJyxcbiAgY2xlYXJNb2NrczogdHJ1ZSxcbiAgcmVzZXRNb2NrczogZmFsc2UsXG4gIHJlc3RvcmVNb2NrczogZmFsc2UsXG4gIFxuICAvLyBDb25zZXJ2YXRpdmUgbWVtb3J5IG9wdGltaXphdGlvbnMgZm9yIHN0YWJpbGl0eVxuICB3b3JrZXJJZGxlTWVtb3J5TGltaXQ6ICcxR0InLCAvLyBDb25zZXJ2YXRpdmUgd29ya2VyIG1lbW9yeSB0byBwcmV2ZW50IGhhbmdpbmdcbiAgZGV0ZWN0TGVha3M6IGZhbHNlLCAvLyBTa2lwIGxlYWsgZGV0ZWN0aW9uIGZvciBzcGVlZFxuICBsb2dIZWFwVXNhZ2U6IGZhbHNlLCAvLyBEaXNhYmxlIGhlYXAgbG9nZ2luZyBmb3Igc3BlZWRcbiAgZm9yY2VFeGl0OiBmYWxzZSwgLy8gTGV0IEplc3QgaGFuZGxlIGNsZWFudXAgcHJvcGVybHkgaW4gcGFyYWxsZWwgbW9kZVxuICBcbiAgLy8gRmFzdCB0ZXN0IGV4ZWN1dGlvbiAoYmFsYW5jZWQgZm9yIHN0YWJpbGl0eSlcbiAgdmVyYm9zZTogZmFsc2UsXG4gIHNpbGVudDogZmFsc2UsIC8vIEtlZXAgc29tZSBvdXRwdXQgZm9yIGRlYnVnZ2luZywgcXRlc3RzLXJ1bm5lciBoYW5kbGVzIGRpc3BsYXlcbiAgYmFpbDogZmFsc2UsIC8vIERvbid0IHN0b3Agb24gZmlyc3QgZmFpbHVyZSBmb3IgcGFyYWxsZWwgZWZmaWNpZW5jeVxuICBwYXNzV2l0aE5vVGVzdHM6IHRydWUsIC8vIERvbid0IGZhaWwgb24gZW1wdHkgdGVzdCBzdWl0ZXNcbiAgXG4gIHRlc3RQYXRoSWdub3JlUGF0dGVybnM6IFtcbiAgICAnL25vZGVfbW9kdWxlcy8nLFxuICAgICcvZGVtby8nLFxuICAgICcvZXhhbXBsZXMvJyxcbiAgICAnL2RvY3MvJyxcbiAgICAnL3N0dWJzLycsXG4gICAgJy91dGlscy9heGlvc1N0dWIuanMnLFxuICAgICcvdXRpbHMvd2luc3RvblN0dWIuanMnXG4gIF0sXG4gIHRlc3RNYXRjaDogW1xuICAgICc8cm9vdERpcj4vdGVzdC8qKi8qLnRlc3QuanMnLFxuICAgICc8cm9vdERpcj4vdGVzdHMvKiovKi50ZXN0LmpzJyxcbiAgICAnPHJvb3REaXI+L3Rlc3RzLyoqLyoudGVzdC50cycsXG4gICAgJzxyb290RGlyPi8qKi8qLnRlc3QuanMnLFxuICAgICc8cm9vdERpcj4vKiovKi50ZXN0LnRzJ1xuICBdLFxuICB0cmFuc2Zvcm06IHtcbiAgICAnXi4rXFxcXC50c3g/JCc6IFsndHMtamVzdCcsIHtcbiAgICAgIC8vIFVzZSB0c2NvbmZpZy5qc29uIGluc3RlYWQgb2YgaW5saW5lIGNvbmZpZyB0byBhdm9pZCBkZXByZWNhdGlvbiB3YXJuaW5nc1xuICAgICAgdHNjb25maWc6ICcuL3RzY29uZmlnLmpzb24nXG4gICAgfV0sXG4gICAgJ14uK1xcXFwuanN4PyQnOiAnYmFiZWwtamVzdCdcbiAgfSxcbiAgbW9kdWxlRmlsZUV4dGVuc2lvbnM6IFsndHMnLCAndHN4JywgJ2pzJywgJ2pzeCcsICdqc29uJywgJ25vZGUnXSxcbiAgY29sbGVjdENvdmVyYWdlRnJvbTogW1xuICAgICdsaWIvKiovKi5qcycsXG4gICAgJ3V0aWxzLyoqLyouanMnLFxuICAgICdpbmRleC5qcycsXG4gICAgJyFsaWIvc3R1YnMuanMnLFxuICAgICchdXRpbHMvKlN0dWIuanMnXG4gIF1cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmQyxNQUFNLEVBQUUsU0FBUztFQUNqQkMsZUFBZSxFQUFFLE1BQU07RUFDdkJDLFVBQVUsRUFBRSxDQUFDLDZCQUE2QixDQUFDO0VBQUU7O0VBRTdDO0VBQ0FDLFVBQVUsRUFBRSxNQUFNO0VBQUU7RUFDcEJDLEtBQUssRUFBRSxJQUFJO0VBQ1hDLGNBQWMsRUFBRSx1QkFBdUI7RUFDdkNDLFVBQVUsRUFBRSxJQUFJO0VBQ2hCQyxVQUFVLEVBQUUsS0FBSztFQUNqQkMsWUFBWSxFQUFFLEtBQUs7RUFFbkI7RUFDQUMscUJBQXFCLEVBQUUsS0FBSztFQUFFO0VBQzlCQyxXQUFXLEVBQUUsS0FBSztFQUFFO0VBQ3BCQyxZQUFZLEVBQUUsS0FBSztFQUFFO0VBQ3JCQyxTQUFTLEVBQUUsS0FBSztFQUFFOztFQUVsQjtFQUNBQyxPQUFPLEVBQUUsS0FBSztFQUNkQyxNQUFNLEVBQUUsS0FBSztFQUFFO0VBQ2ZDLElBQUksRUFBRSxLQUFLO0VBQUU7RUFDYkMsZUFBZSxFQUFFLElBQUk7RUFBRTs7RUFFdkJDLHNCQUFzQixFQUFFLENBQ3RCLGdCQUFnQixFQUNoQixRQUFRLEVBQ1IsWUFBWSxFQUNaLFFBQVEsRUFDUixTQUFTLEVBQ1QscUJBQXFCLEVBQ3JCLHVCQUF1QixDQUN4QjtFQUNEQyxTQUFTLEVBQUUsQ0FDVCw2QkFBNkIsRUFDN0IsOEJBQThCLEVBQzlCLDhCQUE4QixFQUM5Qix3QkFBd0IsRUFDeEIsd0JBQXdCLENBQ3pCO0VBQ0RDLFNBQVMsRUFBRTtJQUNULGFBQWEsRUFBRSxDQUFDLFNBQVMsRUFBRTtNQUN6QjtNQUNBQyxRQUFRLEVBQUU7SUFDWixDQUFDLENBQUM7SUFDRixhQUFhLEVBQUU7RUFDakIsQ0FBQztFQUNEQyxvQkFBb0IsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO0VBQ2hFQyxtQkFBbUIsRUFBRSxDQUNuQixhQUFhLEVBQ2IsZUFBZSxFQUNmLFVBQVUsRUFDVixlQUFlLEVBQ2YsaUJBQWlCO0FBRXJCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=