0d143f14e419f09fe4f92b89c72d3a05
"use strict";
// Auto-generated API test for GET /test - TypeScript ES module
// PARALLEL-SAFE DESIGN: This test avoids race conditions
Object.defineProperty(exports, "__esModule", { value: true });
// Unique API test session for parallel execution safety
const apiTestSession = `${process.hrtime.bigint()}-${Math.random().toString(36).substr(2, 9)}`;
const uniqueRoute = '/test' + ('/test'.includes('?') ? '&' : '?') + 'testSession=' + apiTestSession;
const httpTest_1 = require("qtests/utils/httpTest");
describe(`GET /test [API-${apiTestSession}]`, () => {
    // Test data factory for unique request/response data
    const createUniqueTestData = () => ({
        sessionId: apiTestSession,
        requestId: `req-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`,
        timestamp: new Date().toISOString(),
    });
    test('should succeed with unique test data', async () => {
        const testData = createUniqueTestData();
        const app = httpTest_1.httpTest.createMockApp();
        app.get(uniqueRoute, (req, res) => {
            res.statusCode = 200;
            res.setHeader('content-type', 'application/json');
            res.end(JSON.stringify({
                success: true,
                testSession: apiTestSession,
                requestId: testData.requestId
            }));
        });
        const res = await httpTest_1.httpTest.supertest(app)
            .get(uniqueRoute)
            .send(testData)
            .expect(200);
        expect(res.body.success).toBe(true);
        expect(res.body.testSession).toBe(apiTestSession);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9nZW5lcmF0ZWQtdGVzdHMvaW50ZWdyYXRpb24vdXRpbHNfX2h0dHBUZXN0X19nZXQudGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQStEO0FBQy9ELHlEQUF5RDs7QUFFekQsd0RBQXdEO0FBQ3hELE1BQU0sY0FBYyxHQUFHLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUMvRixNQUFNLFdBQVcsR0FBRyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLGNBQWMsR0FBRyxjQUFjLENBQUM7QUFFcEcsb0RBQWlEO0FBRWpELFFBQVEsQ0FBQyxrQkFBa0IsY0FBYyxHQUFHLEVBQUUsR0FBRyxFQUFFO0lBQ2pELHFEQUFxRDtJQUNyRCxNQUFNLG9CQUFvQixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDbEMsU0FBUyxFQUFFLGNBQWM7UUFDekIsU0FBUyxFQUFFLE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtRQUN6RSxTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7S0FDcEMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3RELE1BQU0sUUFBUSxHQUFHLG9CQUFvQixFQUFFLENBQUM7UUFDeEMsTUFBTSxHQUFHLEdBQUcsbUJBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUVyQyxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNoQyxHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztZQUNyQixHQUFHLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1lBQ2xELEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDckIsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsV0FBVyxFQUFFLGNBQWM7Z0JBQzNCLFNBQVMsRUFBRSxRQUFRLENBQUMsU0FBUzthQUM5QixDQUFDLENBQUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxHQUFHLEdBQUcsTUFBTSxtQkFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7YUFDdEMsR0FBRyxDQUFDLFdBQVcsQ0FBQzthQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDO2FBQ2QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWYsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNwRCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvZ2VuZXJhdGVkLXRlc3RzL2ludGVncmF0aW9uL3V0aWxzX19odHRwVGVzdF9fZ2V0LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQXV0by1nZW5lcmF0ZWQgQVBJIHRlc3QgZm9yIEdFVCAvdGVzdCAtIFR5cGVTY3JpcHQgRVMgbW9kdWxlXG4vLyBQQVJBTExFTC1TQUZFIERFU0lHTjogVGhpcyB0ZXN0IGF2b2lkcyByYWNlIGNvbmRpdGlvbnNcblxuLy8gVW5pcXVlIEFQSSB0ZXN0IHNlc3Npb24gZm9yIHBhcmFsbGVsIGV4ZWN1dGlvbiBzYWZldHlcbmNvbnN0IGFwaVRlc3RTZXNzaW9uID0gYCR7cHJvY2Vzcy5ocnRpbWUuYmlnaW50KCl9LSR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWA7XG5jb25zdCB1bmlxdWVSb3V0ZSA9ICcvdGVzdCcgKyAoJy90ZXN0Jy5pbmNsdWRlcygnPycpID8gJyYnIDogJz8nKSArICd0ZXN0U2Vzc2lvbj0nICsgYXBpVGVzdFNlc3Npb247XG5cbmltcG9ydCB7IGh0dHBUZXN0IH0gZnJvbSAncXRlc3RzL3V0aWxzL2h0dHBUZXN0JztcblxuZGVzY3JpYmUoYEdFVCAvdGVzdCBbQVBJLSR7YXBpVGVzdFNlc3Npb259XWAsICgpID0+IHtcbiAgLy8gVGVzdCBkYXRhIGZhY3RvcnkgZm9yIHVuaXF1ZSByZXF1ZXN0L3Jlc3BvbnNlIGRhdGFcbiAgY29uc3QgY3JlYXRlVW5pcXVlVGVzdERhdGEgPSAoKSA9PiAoe1xuICAgIHNlc3Npb25JZDogYXBpVGVzdFNlc3Npb24sXG4gICAgcmVxdWVzdElkOiBgcmVxLSR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgNil9YCxcbiAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIHN1Y2NlZWQgd2l0aCB1bmlxdWUgdGVzdCBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHRlc3REYXRhID0gY3JlYXRlVW5pcXVlVGVzdERhdGEoKTtcbiAgICBjb25zdCBhcHAgPSBodHRwVGVzdC5jcmVhdGVNb2NrQXBwKCk7XG4gICAgXG4gICAgYXBwLmdldCh1bmlxdWVSb3V0ZSwgKHJlcSwgcmVzKSA9PiB7XG4gICAgICByZXMuc3RhdHVzQ29kZSA9IDIwMDtcbiAgICAgIHJlcy5zZXRIZWFkZXIoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHsgXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsIFxuICAgICAgICB0ZXN0U2Vzc2lvbjogYXBpVGVzdFNlc3Npb24sXG4gICAgICAgIHJlcXVlc3RJZDogdGVzdERhdGEucmVxdWVzdElkXG4gICAgICB9KSk7XG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgcmVzID0gYXdhaXQgaHR0cFRlc3Quc3VwZXJ0ZXN0KGFwcClcbiAgICAgIC5nZXQodW5pcXVlUm91dGUpXG4gICAgICAuc2VuZCh0ZXN0RGF0YSlcbiAgICAgIC5leHBlY3QoMjAwKTtcbiAgICBcbiAgICBleHBlY3QocmVzLmJvZHkuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICBleHBlY3QocmVzLmJvZHkudGVzdFNlc3Npb24pLnRvQmUoYXBpVGVzdFNlc3Npb24pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9