{"version":3,"names":["logStart","logReturn","executeWithLogs","setLogging","require","process","env","NODE_ENV","defaultEnv","GOOGLE_API_KEY","GOOGLE_CX","OPENAI_TOKEN","setTestEnv","console","log","Object","assign","error","message","saveEnv","savedEnv","restoreEnv","currentKeys","Set","keys","backupKeys","key","has","value","entries","undefined","attachMockSpies","mock","jest","mockClear","fn","mockReset","makeLoggedMock","name","creator","createScheduleMock","scheduleMock","Promise","resolve","createQerrorsMock","qerrorsMock","args","createAxiosMock","onGet","url","createReplyBinder","onPost","reset","_replies","reply","status","data","resetMocks","initSearchTest","resetModules","module","exports"],"sources":["testEnv.js"],"sourcesContent":["\n/**\n * Test Environment Management Utilities\n * \n * Provides comprehensive environment variable management and mock creation\n * for complex testing scenarios. This module handles the common pattern of\n * setting up test environments with known values and cleaning up afterward.\n * \n * Design philosophy:\n * - Environment isolation: tests shouldn't affect each other or the host environment\n * - Predictable test data: use known values for consistent test results\n * - Mock management: centralized creation and cleanup of test doubles\n * - Framework agnostic: works with or without Jest\n * \n * Use cases:\n * - API testing with known API keys\n * - Testing code that depends on environment variables\n * - Complex test scenarios requiring multiple mocks\n * - Integration tests that need controlled environments\n */\n\n// Import logging utilities including wrapper for consistent logs\nconst { logStart, logReturn, executeWithLogs, setLogging } = require('../lib/logUtils'); //(import setLogging for optional disable)\nif (process.env.NODE_ENV !== 'test') setLogging(false); //(mute logs outside tests)\n\nconst defaultEnv = { // (shared env defaults for tests)\n  GOOGLE_API_KEY: 'key', // (fake google api key)\n  GOOGLE_CX: 'cx', // (fake search cx)\n  OPENAI_TOKEN: 'token' // (fake openai token)\n};\n\n/**\n * Sets up a standard test environment with common API keys\n * \n * This function establishes a predictable environment for tests by setting\n * commonly used environment variables to known test values. This ensures\n * tests are deterministic and don't depend on the developer's local environment.\n * \n * Why these specific variables:\n * - GOOGLE_API_KEY: Common in search and maps functionality\n * - GOOGLE_CX: Google Custom Search Engine ID\n * - OPENAI_TOKEN: AI/ML functionality testing\n * \n * Values chosen:\n * - Simple strings that are obviously fake ('key', 'cx', 'token')\n * - Short to avoid log pollution\n * - Recognizable as test data\n * \n * @returns {boolean} Always returns true to confirm environment was set\n */\nfunction setTestEnv() {\n  console.log(`setTestEnv is running with default values`); // logging function start per requirements\n  \n  try {\n    // Apply default test environment variables using Object.assign for atomic operation\n    // Object.assign chosen over individual assignments for performance and atomicity\n    // All environment variables are set together to prevent partial states\n    // Overwrites existing values to ensure predictable test environment regardless of host setup\n    Object.assign(process.env, defaultEnv);\n    console.log(`setTestEnv is returning true`); // logging return value per requirements\n    return true;\n  } catch (error) {\n    // Log error context for debugging environment setup issues\n    // Environment variable assignment rarely fails but can occur with read-only process.env\n    // Error re-throwing maintains contract while providing diagnostic information\n    console.log(`setTestEnv error: ${error.message}`);\n    throw error;\n  }\n}\n\n/**\n * Captures the current process environment for later restoration\n * \n * This function creates a snapshot of the current environment variables\n * so they can be restored after test modifications. Essential for preventing\n * test pollution and ensuring each test starts with a clean environment.\n * \n * Implementation details:\n * - Uses spread operator for shallow copy (sufficient for env vars)\n * - Copies at time of call, not when restore is called\n * - Returns the copy rather than storing internally for thread safety\n * \n * Why shallow copy is sufficient:\n * - Environment variables are always strings (primitives)\n * - No nested objects to worry about\n * - Fast and memory efficient\n * \n * @returns {Object} Copy of current environment variables\n */\nfunction saveEnv() {\n  console.log(`saveEnv is running with none`); // logging function start per requirements\n  \n  try {\n    // Create shallow copy of process.env using spread operator\n    // Spread operator chosen over Object.assign for conciseness and readability\n    // Shallow copy is sufficient because environment variables are always string primitives\n    // Snapshot taken immediately to capture current state, not when restore is called\n    // This timing ensures we get the exact environment state at the moment of saving\n    const savedEnv = { ...process.env };\n    console.log(`saveEnv is returning ${savedEnv}`); // logging return value per requirements\n    return savedEnv;\n  } catch (error) {\n    // Handle rare cases where process.env access might fail\n    // Possible issues include permission restrictions or corrupted environment\n    // Error logging provides diagnostic context for environment capture failures\n    console.log(`saveEnv error: ${error.message}`);\n    throw error;\n  }\n}\n\n/**\n * Restores environment to a previously saved state\n * \n * This function completely replaces the current environment with a saved copy.\n * It ensures clean restoration by clearing all current variables first,\n * then applying the saved state.\n * \n * Two-step process rationale:\n * 1. Clear current env: removes any variables added during testing\n * 2. Apply saved env: restores exactly the original state\n * \n * Why not just override:\n * - Tests might add new environment variables\n * - Simple assignment wouldn't remove test-added variables\n * - Complete replacement ensures clean state\n * \n * @param {Object} savedEnv - Previously saved environment from saveEnv()\n * @returns {boolean} Always returns true to confirm restoration\n */\nfunction restoreEnv(savedEnv) {\n  console.log(`restoreEnv is running with ${savedEnv}`); // logging function start per requirements\n\n  try {\n    // Validate the saved environment to avoid runtime errors\n    if (!savedEnv || typeof savedEnv !== 'object') {\n      console.log(`restoreEnv: invalid saved environment`); // log invalid input\n      return false; // indicate failure to restore\n    }\n\n    // Determine which variables were added after the backup was taken\n    const currentKeys = new Set(Object.keys(process.env)); // capture current keys\n    const backupKeys = new Set(Object.keys(savedEnv)); // capture backup keys\n\n    // Remove only those keys that did not exist at backup time\n    for (const key of currentKeys) {\n      if (!backupKeys.has(key)) delete process.env[key]; // remove added variables only\n    }\n\n    // Restore backed up variables to their original values without wiping others\n    for (const [key, value] of Object.entries(savedEnv)) {\n      if (value !== undefined) process.env[key] = value; else delete process.env[key]; // reinstate or delete per backup\n    }\n\n    console.log(`restoreEnv is returning true`); // logging return value per requirements\n    return true;\n  } catch (error) {\n    console.log(`restoreEnv error: ${error.message}`); // log restoration failure\n    throw error; // propagate error to caller\n  }\n}\n\n/**\n * Attach Jest spy helpers to a mock when available\n *\n * Reduces duplication by centralizing the environment check and method creation\n * for mocks that require mockClear and mockReset methods.\n *\n * @param {Function} mock - Mock or spy object to enhance\n * @returns {Function} The same mock enhanced with spy methods\n */\nfunction attachMockSpies(mock) {\n  console.log(`attachMockSpies is running with ${mock}`); // logging function start per requirements\n  \n  try {\n    // Check for Jest availability and enhance mock with Jest-compatible methods\n    // This pattern ensures consistent API across testing environments while leveraging Jest features when available\n    // typeof check prevents ReferenceError in environments where Jest is not loaded\n    if (typeof jest !== `undefined`) {\n      // Add Jest spy methods for enhanced testing capabilities\n      // jest.fn() creates proper Jest mock functions with full spy capabilities\n      // These methods integrate with Jest's assertion and debugging tools\n      // Provides mockClear and mockReset functionality expected by Jest users\n      mock.mockClear = jest.fn();\n      mock.mockReset = jest.fn();\n    } else {\n      // Provide no-op implementations for non-Jest environments\n      // Maintains API compatibility so the same test code works across frameworks\n      // No-op functions prevent errors when tests call these methods\n      // Arrow functions used for minimal overhead and clear intent\n      mock.mockClear = () => {};\n      mock.mockReset = () => {};\n    }\n    console.log(`attachMockSpies is returning ${mock}`); // logging return value per requirements\n    return mock;\n  } catch (error) {\n    // Handle cases where Jest enhancement fails or mock modification errors occur\n    // Important for debugging framework integration issues\n    // Error re-throwing maintains proper error handling contract\n    console.log(`attachMockSpies error: ${error.message}`);\n    throw error;\n  }\n}\n\n/**\n * Creates a logged mock and attaches spies\n *\n * Consolidates repetitive mock creation logic by wrapping executeWithLogs\n * with automatic spy attachment. Useful for any mock factory in this file\n * that needs consistent logging behavior.\n *\n * @param {string} name - Identifier used for logging\n * @param {Function} creator - Function that returns the raw mock\n * @returns {any} Mock enhanced with spy helpers\n */\nfunction makeLoggedMock(name, creator) {\n  console.log(`makeLoggedMock is running with ${name}, ${creator}`); // logging function start per requirements\n  \n  try {\n    const mock = creator(); // create raw mock using provided creator function\n    attachMockSpies(mock); // add jest spies if available\n    console.log(`makeLoggedMock is returning ${mock}`); // logging return value per requirements\n    return mock;\n  } catch (error) {\n    console.log(`makeLoggedMock error: ${error.message}`); // error logging per requirements\n    throw error;\n  }\n}\n\n/**\n * Creates a mock for scheduler/throttling libraries like Bottleneck\n * \n * Many applications use scheduling libraries to control rate limiting or\n * async execution. In tests, we want immediate execution without delays.\n * This mock provides that while maintaining a compatible interface.\n * \n * Framework compatibility approach:\n * - Provides Jest methods if Jest is available\n * - Falls back to no-op implementations otherwise\n * - This allows the same test code to work in different environments\n * \n * Why Promise.resolve():\n * - Schedule functions typically return promises\n * - Immediate resolution simulates instant execution\n * - Maintains async interface contract for realistic testing\n * \n * @returns {Function} Mock scheduler function with Jest-compatible methods\n */\nfunction createScheduleMock() {\n  console.log(`createScheduleMock is running with none`); // logging function start per requirements\n  \n  try {\n    const scheduleMock = function(fn) { // immediate scheduler mock function\n      return Promise.resolve(fn()); // execute and resolve instantly for fast tests\n    };\n    attachMockSpies(scheduleMock); // add jest spies if available\n    console.log(`createScheduleMock is returning ${scheduleMock}`); // logging return value per requirements\n    return scheduleMock;\n  } catch (error) {\n    console.log(`createScheduleMock error: ${error.message}`); // error logging per requirements\n    throw error;\n  }\n}\n\n/**\n * Creates a mock for error handling utilities\n * \n * Applications often have centralized error handling utilities.\n * In tests, we want to capture error calls without triggering real\n * error handling logic like logging or alerting.\n * \n * Design approach:\n * - Returns arguments passed to it for inspection\n * - Provides Jest methods for compatibility\n * - No-op in terms of side effects\n * \n * Why return arguments:\n * - Allows tests to verify what errors were reported\n * - Simple way to capture call data without complex tracking\n * - Compatible with most error utility interfaces\n * \n * @returns {Function} Mock error handler with Jest-compatible methods\n */\nfunction createQerrorsMock() {\n  console.log(`createQerrorsMock is running with none`); // logging function start per requirements\n  \n  try {\n    const qerrorsMock = function(...args) { // capture arguments for inspection\n      return args; // return arguments for test inspection\n    };\n    attachMockSpies(qerrorsMock); // add jest spies if available\n    console.log(`createQerrorsMock is returning ${qerrorsMock}`); // logging return value per requirements\n    return qerrorsMock;\n  } catch (error) {\n    console.log(`createQerrorsMock error: ${error.message}`); // error logging per requirements\n    throw error;\n  }\n}\n\n/**\n * Creates a mock HTTP adapter for axios testing\n * \n * This provides a simple HTTP mock without external dependencies like\n * axios-mock-adapter. It implements the minimum interface needed for\n * basic HTTP testing scenarios.\n * \n * Design decisions:\n * - Self-contained: no external mocking library dependencies\n * - Simple interface: covers common GET/POST scenarios\n * - Stateful: stores reply configurations for later use\n * - Resettable: can clear state between tests\n * \n * Why not use axios-mock-adapter:\n * - Reduces dependencies for the qtests module\n * - Simpler implementation for basic use cases\n * - More predictable behavior in different environments\n * \n * @returns {Object} Mock adapter with onGet, onPost, and reset methods\n */\nfunction createAxiosMock() {\n  return makeLoggedMock('createAxiosMock', () => { //(log and spy helper)\n    const mock = { //declare mock before binder so binder can reference it\n      /**\n       * Configure mock response for GET requests to a specific URL\n       * @param {string} url - URL to mock\n       * @returns {Object} Reply configuration object\n       */\n    onGet: function(url) {\n      return createReplyBinder(url); //delegate to reply binder\n    },\n    \n    /**\n     * Configure mock response for POST requests to a specific URL\n     * @param {string} url - URL to mock\n     * @returns {Object} Reply configuration object\n     */\n    onPost: function(url) {\n      return createReplyBinder(url); //use common binder for post\n    },\n    \n    /**\n     * Reset all configured mocks\n     * Essential for preventing test pollution\n     */\n    reset: function() {\n      mock._replies = {}; // (clear stored replies on adapter)\n    }\n  };\n    mock._replies = {}; // (initialize reply store for adapter)\n    function createReplyBinder(url){ //helper after mock exists to avoid reference errors\n      return { //return object with reply method\n        reply: function(status, data){ //store status and data for url\n          mock._replies[url] = { status, data }; // (bind response to url)\n          return mock; // (allow chaining)\n        }\n      }; //close returned object\n    }\n    return mock; // (returned to helper for spies)\n  });\n}\n\n/**\n * Resets all provided mocks to clean state\n * \n * This utility function provides a centralized way to reset multiple\n * mocks at once. Essential for test cleanup and preventing interference\n * between test cases.\n * \n * Defensive programming approach:\n * - Checks for method existence before calling\n * - Handles different mock types gracefully\n * - Won't throw errors if mocks are undefined or incomplete\n * \n * Why centralized reset:\n * - Reduces boilerplate in test teardown\n * - Ensures consistent cleanup patterns\n * - Easier to maintain when mock interfaces change\n * \n * @param {Object} mock - HTTP mock adapter with reset method\n * @param {Function} scheduleMock - Scheduler mock with Jest methods\n * @param {Function} qerrorsMock - Error handler mock with Jest methods\n * @returns {boolean} Always returns true to confirm reset completion\n */\nfunction resetMocks(mock, scheduleMock, qerrorsMock) {\n  return executeWithLogs('resetMocks', () => { //(wrap mock resets in logger)\n    if (mock && mock.reset) {\n      mock.reset();\n    }\n    if (scheduleMock && scheduleMock.mockClear) {\n      scheduleMock.mockClear();\n    }\n    if (qerrorsMock && qerrorsMock.mockClear) {\n      qerrorsMock.mockClear();\n    }\n    return true; //(confirm completion)\n  }, 'mocks');\n}\n\n/**\n * One-stop initialization for search/API testing scenarios\n * \n * This convenience function sets up a complete test environment for\n * applications that make HTTP requests and use scheduling/error handling.\n * It combines multiple setup steps into a single call.\n * \n * What it provides:\n * - Clean module state (Jest module reset)\n * - Test environment variables\n * - All common mocks configured and ready\n * \n * Use case:\n * - Integration tests for search APIs\n * - Testing applications with multiple external dependencies\n * - Scenarios where you need full environment control\n * \n * Why combine these specific elements:\n * - Common pattern in API testing\n * - Reduces test setup boilerplate\n * - Ensures consistent test environment\n * \n * @returns {Object} Object containing all created mocks for individual control\n */\nfunction initSearchTest() {\n  return executeWithLogs('initSearchTest', () => { //(wrap full init in logger)\n    if (typeof jest !== 'undefined' && jest.resetModules) {\n      jest.resetModules();\n    }\n    setTestEnv();\n    const scheduleMock = createScheduleMock();\n    const qerrorsMock = createQerrorsMock();\n    const mock = createAxiosMock();\n    return { mock, scheduleMock, qerrorsMock }; // (provide mocks)\n  }, 'none');\n}\n\n// export all test environment functions at bottom per requirements\nmodule.exports = {\n  defaultEnv, // default test environment values\n  setTestEnv, // set standard test environment variables\n  saveEnv, // capture current environment for restoration\n  restoreEnv, // restore previously saved environment\n  attachMockSpies, // attach jest spy helpers to mocks\n  makeLoggedMock, // factory for creating logged mocks\n  createScheduleMock, // create scheduler/throttling mock\n  createQerrorsMock, // create error handler mock\n  createAxiosMock, // create http client mock adapter\n  resetMocks, // reset multiple mocks at once\n  initSearchTest // complete setup for search/api testing\n};\n"],"mappings":"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","ignoreList":[]}