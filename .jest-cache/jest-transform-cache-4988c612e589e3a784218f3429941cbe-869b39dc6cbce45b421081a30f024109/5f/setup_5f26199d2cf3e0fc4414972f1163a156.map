{"file":"/home/runner/workspace/setup.ts","mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;;;;;;AAEH,8EAA8E;AAC9E,4EAA4E;AAC5E,kDAAkD;AAClD,oDAA4B;AAC5B,gDAAwB;AACxB,2DAA0D;AAE1D,uCAAuC;AACvC,MAAM,SAAS,GAAG,IAAA,iCAAgB,EAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACpD,MAAM,SAAS,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AAahD,MAAM,aAAa,GAAiB;IAClC,KAAK,EAAE,UAAU,EAAE,sDAAsD;IACzE,OAAO,EAAE,YAAY,CAAC,kDAAkD;CACzE,CAAC;AAEF,2CAA2C;AAC3C,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,EAAE,CAAC;AAEpD,wDAAwD;AACxD,MAAM,SAAS,GAAG,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;AAE3D,2CAA2C;AAC3C,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,SAAS,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,GAAG,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAEzF,iFAAiF;AAChF,gBAAc,CAAC,UAAU,EAAE,CAAC;AAE7B,iGAAiG;AACjG,MAAM,QAAQ,GAAI,gBAAc,CAAC,KAAK,CAAC;AAEvC;;;;;GAKG;AACF,gBAAc,CAAC,KAAK,GAAG,UAAS,EAAU,EAAE,MAAW,EAAE,MAAgB;IACxE,yCAAyC;IACzC,IAAI,aAAa,CAAC,EAAE,CAAC,EAAE,CAAC;QACtB,MAAM,QAAQ,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC;YACH,+CAA+C;YAC/C,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;QACvD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,SAAS,QAAQ,4BAA4B,CAAC,CAAC;YAChG,qDAAqD;YACrD,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;QACjD,CAAC;IACH,CAAC;IAED,iDAAiD;IACjD,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;AACjD,CAAC,CAAC;AAEF,OAAO,CAAC,GAAG,CAAC,qDAAqD,CAAC,CAAC;AACnE,OAAO,CAAC,GAAG,CAAC,mCAAmC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACxF,OAAO,CAAC,GAAG,CAAC,4BAA4B,SAAS,EAAE,CAAC,CAAC;AAErD,oCAAoC;AACvB,QAAA,aAAa,GAAG,IAAI,CAAC","names":[],"sources":["/home/runner/workspace/setup.ts"],"sourcesContent":["/**\n * qtests Setup Module - Global Node.js Module Resolution Modification - TypeScript Implementation\n * \n * This module modifies Node.js's global module resolution behavior to automatically\n * substitute stub implementations for real modules during testing. It's a critical\n * piece of the qtests framework that enables seamless testing without changing\n * application code.\n * \n * Core functionality:\n * When this module is required, it patches Node.js's Module._resolveFilename method\n * to intercept require() calls and redirect them to stub implementations when\n * appropriate. This allows test code to use the same require() statements as\n * production code while getting test-appropriate implementations.\n * \n * Design philosophy:\n * - Transparent operation: Application code doesn't need to change\n * - Automatic stub resolution: No manual require() path changes needed\n * - Safe operation: Only affects specific modules, others work normally\n * - Performance conscious: Minimal overhead on module resolution\n * \n * Security and safety considerations:\n * - Only affects modules in the predefined stub registry\n * - Original Node.js behavior preserved for unlisted modules\n * - Changes are temporary and isolated to test execution\n * - No permanent modifications to Node.js installation\n * - Easy to disable by not requiring this module\n */\n\n// Import Node.js Module constructor for accessing module resolution internals\n// This gives us access to the private _resolveFilename method that controls\n// how Node.js resolves module names to file paths\nimport Module from 'module';\nimport path from 'path';\nimport { getModuleDirname } from './utils/esm-globals.js';\n\n// Get current directory for ES modules\nconst __dirname = getModuleDirname(import.meta.url);\nconst stubsPath = path.join(__dirname, 'stubs');\n\n/**\n * Module stub registry - defines which modules should be replaced with stubs\n * \n * This object maps real module names to their stub implementation paths.\n * When Node.js attempts to resolve a module listed in this registry,\n * the stub path will be returned instead of the real module path.\n */\ninterface StubRegistry {\n  [moduleName: string]: string;\n}\n\nconst STUB_REGISTRY: StubRegistry = {\n  axios: 'axios.js', // HTTP client library stub file name for quick lookup\n  winston: 'winston.js' // logging library stub file name for quick lookup\n};\n\n// Preserve existing NODE_PATH if it exists\nconst currentNodePath = process.env.NODE_PATH || '';\n\n// Determine correct path separator for current platform\nconst separator = process.platform === 'win32' ? ';' : ':';\n\n// Prepend our stubs directory to NODE_PATH\nprocess.env.NODE_PATH = stubsPath + (currentNodePath ? separator + currentNodePath : '');\n\n// Force Node.js to recognize the updated NODE_PATH for dynamic module resolution\n(Module as any)._initPaths();\n\n// Store original Module._load function for delegation to maintain normal module loading behavior\nconst origLoad = (Module as any)._load;\n\n/**\n * Enhanced Module._load replacement that handles stub substitution\n * \n * This function intercepts all module loading requests and redirects known\n * modules to their stub implementations when appropriate.\n */\n(Module as any)._load = function(id: string, parent: any, isMain?: boolean): any {\n  // Check if this module should be stubbed\n  if (STUB_REGISTRY[id]) {\n    const stubPath = path.join(stubsPath, STUB_REGISTRY[id]);\n    try {\n      // Load the stub module instead of the real one\n      return origLoad.call(this, stubPath, parent, isMain);\n    } catch (error) {\n      console.log(`qtests: Failed to load stub for ${id} from ${stubPath}, falling back to original`);\n      // Fall back to original module if stub loading fails\n      return origLoad.call(this, id, parent, isMain);\n    }\n  }\n  \n  // For non-stubbed modules, use original behavior\n  return origLoad.call(this, id, parent, isMain);\n};\n\nconsole.log('qtests: Global module resolution patching activated');\nconsole.log(`qtests: Stub registry contains: ${Object.keys(STUB_REGISTRY).join(', ')}`);\nconsole.log(`qtests: Stubs directory: ${stubsPath}`);\n\n// Export setup completion indicator\nexport const setupComplete = true;"],"version":3}