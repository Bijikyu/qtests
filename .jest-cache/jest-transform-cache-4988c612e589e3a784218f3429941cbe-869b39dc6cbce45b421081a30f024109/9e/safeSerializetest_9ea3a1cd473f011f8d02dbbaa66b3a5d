715c6ae70d5f2b2ae3d012b9242e29b0
const {
  safeSerialize
} = require('../lib/logUtils'); //import serializer under test
const util = require('util'); //node util for expected output

test('serializes primitives and objects', () => {
  //verify JSON path
  expect(safeSerialize(5)).toBe('5'); //number serialization
  expect(safeSerialize('hi')).toBe('"hi"'); //string serialization
  const obj = {
    a: 1
  }; //simple object
  expect(safeSerialize(obj)).toBe(JSON.stringify(obj)); //object serialization output
});
test('handles undefined value', () => {
  //new test for explicit undefined handling
  expect(safeSerialize(undefined)).toBe('undefined'); //should return string literal
});
test('falls back to util.inspect for circular references', () => {
  //verify fallback
  const circ = {}; //create base object
  circ.self = circ; //circular reference
  const expected = util.inspect(circ, {
    depth: null
  }); //expected inspect
  expect(safeSerialize(circ)).toBe(expected); //uses inspect output
});
test('returns "[unserializable]" on inspect failure', () => {
  //verify final fallback
  const bad = {}; //object that forces errors
  bad.toJSON = () => {
    throw new Error('json fail');
  }; //stringify will throw
  bad[util.inspect.custom] = () => {
    throw new Error('inspect fail');
  }; //inspect will throw
  expect(safeSerialize(bad)).toBe('[unserializable]'); //fallback result string
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzYWZlU2VyaWFsaXplIiwicmVxdWlyZSIsInV0aWwiLCJ0ZXN0IiwiZXhwZWN0IiwidG9CZSIsIm9iaiIsImEiLCJKU09OIiwic3RyaW5naWZ5IiwidW5kZWZpbmVkIiwiY2lyYyIsInNlbGYiLCJleHBlY3RlZCIsImluc3BlY3QiLCJkZXB0aCIsImJhZCIsInRvSlNPTiIsIkVycm9yIiwiY3VzdG9tIl0sInNvdXJjZXMiOlsic2FmZVNlcmlhbGl6ZS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgc2FmZVNlcmlhbGl6ZSB9ID0gcmVxdWlyZSgnLi4vbGliL2xvZ1V0aWxzJyk7IC8vaW1wb3J0IHNlcmlhbGl6ZXIgdW5kZXIgdGVzdFxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTsgLy9ub2RlIHV0aWwgZm9yIGV4cGVjdGVkIG91dHB1dFxuXG50ZXN0KCdzZXJpYWxpemVzIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMnLCAoKSA9PiB7IC8vdmVyaWZ5IEpTT04gcGF0aFxuICBleHBlY3Qoc2FmZVNlcmlhbGl6ZSg1KSkudG9CZSgnNScpOyAvL251bWJlciBzZXJpYWxpemF0aW9uXG4gIGV4cGVjdChzYWZlU2VyaWFsaXplKCdoaScpKS50b0JlKCdcImhpXCInKTsgLy9zdHJpbmcgc2VyaWFsaXphdGlvblxuICBjb25zdCBvYmogPSB7IGE6IDEgfTsgLy9zaW1wbGUgb2JqZWN0XG4gIGV4cGVjdChzYWZlU2VyaWFsaXplKG9iaikpLnRvQmUoSlNPTi5zdHJpbmdpZnkob2JqKSk7IC8vb2JqZWN0IHNlcmlhbGl6YXRpb24gb3V0cHV0XG59KTtcblxudGVzdCgnaGFuZGxlcyB1bmRlZmluZWQgdmFsdWUnLCAoKSA9PiB7IC8vbmV3IHRlc3QgZm9yIGV4cGxpY2l0IHVuZGVmaW5lZCBoYW5kbGluZ1xuICBleHBlY3Qoc2FmZVNlcmlhbGl6ZSh1bmRlZmluZWQpKS50b0JlKCd1bmRlZmluZWQnKTsgLy9zaG91bGQgcmV0dXJuIHN0cmluZyBsaXRlcmFsXG59KTtcblxudGVzdCgnZmFsbHMgYmFjayB0byB1dGlsLmluc3BlY3QgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMnLCAoKSA9PiB7IC8vdmVyaWZ5IGZhbGxiYWNrXG4gIGNvbnN0IGNpcmMgPSB7fTsgLy9jcmVhdGUgYmFzZSBvYmplY3RcbiAgY2lyYy5zZWxmID0gY2lyYzsgLy9jaXJjdWxhciByZWZlcmVuY2VcbiAgY29uc3QgZXhwZWN0ZWQgPSB1dGlsLmluc3BlY3QoY2lyYywgeyBkZXB0aDogbnVsbCB9KTsgLy9leHBlY3RlZCBpbnNwZWN0XG4gIGV4cGVjdChzYWZlU2VyaWFsaXplKGNpcmMpKS50b0JlKGV4cGVjdGVkKTsgLy91c2VzIGluc3BlY3Qgb3V0cHV0XG59KTtcblxudGVzdCgncmV0dXJucyBcIlt1bnNlcmlhbGl6YWJsZV1cIiBvbiBpbnNwZWN0IGZhaWx1cmUnLCAoKSA9PiB7IC8vdmVyaWZ5IGZpbmFsIGZhbGxiYWNrXG4gIGNvbnN0IGJhZCA9IHt9OyAvL29iamVjdCB0aGF0IGZvcmNlcyBlcnJvcnNcbiAgYmFkLnRvSlNPTiA9ICgpID0+IHsgdGhyb3cgbmV3IEVycm9yKCdqc29uIGZhaWwnKTsgfTsgLy9zdHJpbmdpZnkgd2lsbCB0aHJvd1xuICBiYWRbdXRpbC5pbnNwZWN0LmN1c3RvbV0gPSAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignaW5zcGVjdCBmYWlsJyk7IH07IC8vaW5zcGVjdCB3aWxsIHRocm93XG4gIGV4cGVjdChzYWZlU2VyaWFsaXplKGJhZCkpLnRvQmUoJ1t1bnNlcmlhbGl6YWJsZV0nKTsgLy9mYWxsYmFjayByZXN1bHQgc3RyaW5nXG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTTtFQUFFQTtBQUFjLENBQUMsR0FBR0MsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztBQUN0RCxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOztBQUU5QkUsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLE1BQU07RUFBRTtFQUNoREMsTUFBTSxDQUFDSixhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ0ssSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDcENELE1BQU0sQ0FBQ0osYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUNLLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQzFDLE1BQU1DLEdBQUcsR0FBRztJQUFFQyxDQUFDLEVBQUU7RUFBRSxDQUFDLENBQUMsQ0FBQztFQUN0QkgsTUFBTSxDQUFDSixhQUFhLENBQUNNLEdBQUcsQ0FBQyxDQUFDLENBQUNELElBQUksQ0FBQ0csSUFBSSxDQUFDQyxTQUFTLENBQUNILEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4RCxDQUFDLENBQUM7QUFFRkgsSUFBSSxDQUFDLHlCQUF5QixFQUFFLE1BQU07RUFBRTtFQUN0Q0MsTUFBTSxDQUFDSixhQUFhLENBQUNVLFNBQVMsQ0FBQyxDQUFDLENBQUNMLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMsQ0FBQztBQUVGRixJQUFJLENBQUMsb0RBQW9ELEVBQUUsTUFBTTtFQUFFO0VBQ2pFLE1BQU1RLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2pCQSxJQUFJLENBQUNDLElBQUksR0FBR0QsSUFBSSxDQUFDLENBQUM7RUFDbEIsTUFBTUUsUUFBUSxHQUFHWCxJQUFJLENBQUNZLE9BQU8sQ0FBQ0gsSUFBSSxFQUFFO0lBQUVJLEtBQUssRUFBRTtFQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdERYLE1BQU0sQ0FBQ0osYUFBYSxDQUFDVyxJQUFJLENBQUMsQ0FBQyxDQUFDTixJQUFJLENBQUNRLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDOUMsQ0FBQyxDQUFDO0FBRUZWLElBQUksQ0FBQywrQ0FBK0MsRUFBRSxNQUFNO0VBQUU7RUFDNUQsTUFBTWEsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDaEJBLEdBQUcsQ0FBQ0MsTUFBTSxHQUFHLE1BQU07SUFBRSxNQUFNLElBQUlDLEtBQUssQ0FBQyxXQUFXLENBQUM7RUFBRSxDQUFDLENBQUMsQ0FBQztFQUN0REYsR0FBRyxDQUFDZCxJQUFJLENBQUNZLE9BQU8sQ0FBQ0ssTUFBTSxDQUFDLEdBQUcsTUFBTTtJQUFFLE1BQU0sSUFBSUQsS0FBSyxDQUFDLGNBQWMsQ0FBQztFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ3ZFZCxNQUFNLENBQUNKLGFBQWEsQ0FBQ2dCLEdBQUcsQ0FBQyxDQUFDLENBQUNYLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7QUFDdkQsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119