{"version":3,"names":["setTestEnv","saveEnv","restoreEnv","createScheduleMock","createQerrorsMock","createAxiosMock","resetMocks","initSearchTest","defaultEnv","require","withSavedEnv","test","process","env","GOOGLE_API_KEY","GOOGLE_CX","OPENAI_TOKEN","expect","toBe","TEST_ENV_TEMP","saved","EXTRA_ENV_TEMP","oldPath","PATH","toBeUndefined","scheduleMock","fn","jest","result","mockClear","mockReset","qerrorsMock","args","toEqual","axiosMock","onGet","reply","ok","_replies","status","data","reset","onPost","foo","mock","calls","length","Object","keys","toBeDefined"],"sources":["testEnv.test.js"],"sourcesContent":["\nconst { setTestEnv, saveEnv, restoreEnv, createScheduleMock, createQerrorsMock, createAxiosMock, resetMocks, initSearchTest, defaultEnv } = require('../utils/testEnv'); // (import utilities under test including defaults)\nconst { withSavedEnv } = require(\"../utils/testHelpers\"); //(import env helper)\n\ntest('setTestEnv sets variables', () => withSavedEnv(() => { // (use helper to restore env)\n  delete process.env.GOOGLE_API_KEY; // (remove old key)\n  delete process.env.GOOGLE_CX; // (remove old cx)\n  delete process.env.OPENAI_TOKEN; // (remove old token)\n  setTestEnv(); // (apply standard test env)\n  expect(process.env.GOOGLE_API_KEY).toBe(defaultEnv.GOOGLE_API_KEY); // (check key value)\n  expect(process.env.GOOGLE_CX).toBe(defaultEnv.GOOGLE_CX); // (check cx value)\n  expect(process.env.OPENAI_TOKEN).toBe(defaultEnv.OPENAI_TOKEN); // (check token value)\n}));\n\ntest('saveEnv and restoreEnv capture state', () => withSavedEnv(() => { // (verify env round trip)\n  process.env.TEST_ENV_TEMP = 'a'; // (set test variable)\n  const saved = saveEnv(); // (capture environment)\n  process.env.TEST_ENV_TEMP = 'b'; // (modify variable)\n  process.env.EXTRA_ENV_TEMP = 'c'; // (add new variable)\n  const oldPath = process.env.PATH; // (record critical variable)\n  restoreEnv(saved); // (restore environment)\n  expect(process.env.TEST_ENV_TEMP).toBe('a'); // (verify value restored)\n  expect(process.env.EXTRA_ENV_TEMP).toBeUndefined(); // (added variable removed)\n  expect(process.env.PATH).toBe(oldPath); // (critical variable preserved)\n  delete process.env.TEST_ENV_TEMP; // (cleanup variable)\n}));\n\n\ntest('createScheduleMock executes function immediately', async () => { // (verify scheduler mock)\n  const scheduleMock = createScheduleMock(); // (create schedule mock)\n  const fn = jest.fn(() => 'done'); // (spy function)\n  const result = await scheduleMock(fn); // (run scheduled function)\n  expect(result).toBe('done'); // (ensure result)\n  expect(typeof scheduleMock.mockClear).toBe('function'); // (has mockClear)\n  expect(typeof scheduleMock.mockReset).toBe('function'); // (has mockReset)\n});\n\n\ntest('createQerrorsMock captures arguments', () => { // (verify error mock)\n  const qerrorsMock = createQerrorsMock(); // (create qerrors mock)\n  const args = qerrorsMock('err', 'ctx'); // (invoke with sample data)\n  expect(args).toEqual(['err', 'ctx']); // (returned arguments)\n  expect(typeof qerrorsMock.mockClear).toBe('function'); // (has mockClear)\n  expect(typeof qerrorsMock.mockReset).toBe('function'); // (has mockReset)\n});\n\n\ntest('createAxiosMock stores replies and resets', () => { // (verify axios mock)\n  const axiosMock = createAxiosMock(); // (create axios adapter)\n  axiosMock.onGet('/test').reply(200, { ok: true }); // (configure get reply)\n  expect(axiosMock._replies['/test']).toEqual({ status: 200, data: { ok: true } }); // (reply stored on adapter)\n  axiosMock.reset(); // (reset replies on adapter)\n  axiosMock.onGet('/again').reply(200, { ok: false }); // (configure after reset)\n  expect(axiosMock._replies).toEqual({ '/again': { status: 200, data: { ok: false } } }); // (old replies cleared)\n});\n\ntest('createAxiosMock stores post replies', () => { // (verify axios post mock)\n  const axiosMock = createAxiosMock(); // (create adapter for post)\n  axiosMock.onPost('/url').reply(200, { foo: 'bar' }); // (configure post reply)\n  expect(axiosMock._replies['/url']).toEqual({ status: 200, data: { foo: 'bar' } }); // (post reply stored)\n});\n\n\ntest('resetMocks clears history on mocks', () => { // (verify centralized reset)\n  const scheduleMock = createScheduleMock(); // (create schedule mock)\n  const qerrorsMock = createQerrorsMock(); // (create error mock)\n  const axiosMock = createAxiosMock(); // (create axios adapter)\n\n  scheduleMock(() => {}); // (use schedule mock)\n  qerrorsMock('err'); // (use error mock)\n  axiosMock.onPost('/a').reply(201, {}); // (add post reply)\n\n  resetMocks(axiosMock, scheduleMock, qerrorsMock); // (reset all mocks)\n\n  expect(scheduleMock.mockClear.mock.calls.length).toBe(1); // (schedule cleared)\n  expect(qerrorsMock.mockClear.mock.calls.length).toBe(1); // (qerrors cleared)\n  expect(Object.keys(axiosMock._replies).length).toBe(0); // (axios replies cleared)\n});\n\n\ntest('initSearchTest sets env and returns mocks', () => withSavedEnv(() => { // (wrap env lifecycle)\n  const { mock, scheduleMock, qerrorsMock } = initSearchTest(); // (initialize search test)\n  expect(process.env.GOOGLE_API_KEY).toBe(defaultEnv.GOOGLE_API_KEY); // (env key set)\n  expect(mock).toBeDefined(); // (axios mock present)\n  expect(scheduleMock).toBeDefined(); // (schedule mock present)\n  expect(qerrorsMock).toBeDefined(); // (qerrors mock present)\n  resetMocks(mock, scheduleMock, qerrorsMock); // (reset mocks)\n}));\n\n"],"mappings":"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","ignoreList":[]}