{"version":3,"names":["execFileSync","require","path","executeWithLogs","runChild","includeSetup","script","join","__dirname","args","out","process","execPath","env","NODE_PATH","toString","res","JSON","parse","runWithoutSetup","runWithSetup","test","console","log","withSetup","withoutSetup","expect","axiosStub","toBe","winstonStub"],"sources":["setupResolution.test.js"],"sourcesContent":["\nconst { execFileSync } = require('child_process'); //(utility to run child scripts)\nconst path = require('path'); //(resolve helper script path)\nconst { executeWithLogs } = require('../lib/logUtils'); //(import executeWithLogs)\n\nfunction runChild(includeSetup){ //(execute child script with or without setup)\n return executeWithLogs('runChild', () => { //(delegate to executeWithLogs)\n  const script = path.join(__dirname, 'withoutSetup.js'); //(child script path)\n  const args = includeSetup ? ['-r', path.join(__dirname, '../setup'), script] : [script]; //(create arg list)\n  const out = execFileSync(process.execPath, args, { env: { NODE_PATH: '' } }).toString(); //(spawn child)\n  const res = JSON.parse(out); //(parse child output)\n  return res; //(forward result)\n }, includeSetup);\n} //(end runChild)\n\nfunction runWithoutSetup(){ //(spawn child process without setup)\n return runChild(false); //(directly return child result without extra logs)\n} //(end runWithoutSetup)\n\nfunction runWithSetup(){ //(spawn child process with setup)\n return runChild(true); //(directly return child result without extra logs)\n} //(end runWithSetup)\n\ntest('child process uses stubs when setup is required', () => { //(jest test case)\n console.log(`setupResolutionTest is running with none`); //(start log)\n const withSetup = runWithSetup(); //(result when setup loaded)\n const withoutSetup = runWithoutSetup(); //(result when setup absent)\n expect(withSetup.axiosStub).toBe(true); //(axios should be stubbed)\n expect(withSetup.winstonStub).toBe(true); //(winston should be stubbed)\n expect(withoutSetup.axiosStub).toBe(false); //(axios should be real)\n expect(withoutSetup.winstonStub).toBe(false); //(winston should be real)\n console.log(`setupResolutionTest has run resulting in pass`); //(end log)\n});\n"],"mappings":"AACA,MAAM;EAAEA;AAAa,CAAC,GAAGC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;AACnD,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AAC9B,MAAM;EAAEE;AAAgB,CAAC,GAAGF,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;;AAExD,SAASG,QAAQA,CAACC,YAAY,EAAC;EAAE;EAChC,OAAOF,eAAe,CAAC,UAAU,EAAE,MAAM;IAAE;IAC1C,MAAMG,MAAM,GAAGJ,IAAI,CAACK,IAAI,CAACC,SAAS,EAAE,iBAAiB,CAAC,CAAC,CAAC;IACxD,MAAMC,IAAI,GAAGJ,YAAY,GAAG,CAAC,IAAI,EAAEH,IAAI,CAACK,IAAI,CAACC,SAAS,EAAE,UAAU,CAAC,EAAEF,MAAM,CAAC,GAAG,CAACA,MAAM,CAAC,CAAC,CAAC;IACzF,MAAMI,GAAG,GAAGV,YAAY,CAACW,OAAO,CAACC,QAAQ,EAAEH,IAAI,EAAE;MAAEI,GAAG,EAAE;QAAEC,SAAS,EAAE;MAAG;IAAE,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACzF,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACR,GAAG,CAAC,CAAC,CAAC;IAC7B,OAAOM,GAAG,CAAC,CAAC;EACb,CAAC,EAAEX,YAAY,CAAC;AACjB,CAAC,CAAC;;AAEF,SAASc,eAAeA,CAAA,EAAE;EAAE;EAC3B,OAAOf,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC;;AAEF,SAASgB,YAAYA,CAAA,EAAE;EAAE;EACxB,OAAOhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC;;AAEFiB,IAAI,CAAC,iDAAiD,EAAE,MAAM;EAAE;EAC/DC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC,CAAC,CAAC;EACzD,MAAMC,SAAS,GAAGJ,YAAY,CAAC,CAAC,CAAC,CAAC;EAClC,MAAMK,YAAY,GAAGN,eAAe,CAAC,CAAC,CAAC,CAAC;EACxCO,MAAM,CAACF,SAAS,CAACG,SAAS,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EACxCF,MAAM,CAACF,SAAS,CAACK,WAAW,CAAC,CAACD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1CF,MAAM,CAACD,YAAY,CAACE,SAAS,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EAC5CF,MAAM,CAACD,YAAY,CAACI,WAAW,CAAC,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EAC9CN,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC,CAAC,CAAC;AAC/D,CAAC,CAAC","ignoreList":[]}