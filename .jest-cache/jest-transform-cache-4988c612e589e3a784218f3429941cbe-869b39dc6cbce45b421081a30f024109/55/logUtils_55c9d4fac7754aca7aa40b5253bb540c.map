{"version":3,"names":["util","require","LOG_ENABLED","setLogging","enabled","safeSerialize","value","undefined","serialized","JSON","stringify","inspected","inspect","depth","error","innerErr","logStart","functionName","args","argsString","map","arg","join","console","log","logReturn","returnValue","valueString","executeWithLogs","name","fn","argString","length","a","result","then","res","catch","err","message","module","exports"],"sources":["logUtils.js"],"sourcesContent":["\n/**\n * Logging Utilities for Function Call Tracing\n * \n * Provides standardized logging for function entry and exit points throughout\n * the qtests module. This is essential for debugging test setup issues and\n * understanding the flow of mock creation and cleanup.\n * \n * Design philosophy:\n * - Consistent format: all logs follow the same pattern for easy parsing\n * - Minimal overhead: simple console output without external dependencies\n * - Debugging focus: optimized for troubleshooting rather than production\n * - JSON serialization: handles complex arguments safely\n * \n * Why dedicated logging utilities:\n * - Consistent formatting across all qtests functions\n * - Easy to disable by modifying this single file\n * - Helps users understand what qtests is doing during test setup\n * - Essential for debugging complex test environment issues\n*/\n\n// Import util for safe inspection fallback //(new dependency)\nconst util = require('util'); //(require util module)\n\nlet LOG_ENABLED = true; //(global log flag default true)\n\nfunction setLogging(enabled){ //(setter to toggle global logs)\n  LOG_ENABLED = enabled; //(update flag state)\n}\n\n/**\n * Safely converts values to strings for logging\n *\n * Attempts JSON serialization first, then falls back to util.inspect.\n * Returns '[unserializable]' if both methods fail.\n *\n * @param {any} value - Value to serialize for log output\n * @returns {string} Serialized representation\n */\nfunction safeSerialize(value) {\n  if (value === undefined) return 'undefined'; // handle undefined explicitly for clarity\n  try {\n    // Attempt JSON serialization as primary strategy for most values\n    // JSON.stringify chosen first because it produces clean, readable output\n    // Handles primitive types, arrays, and plain objects efficiently\n    // Fails gracefully on circular references, functions, symbols\n    const serialized = JSON.stringify(value);\n    if (serialized !== undefined) return serialized; // check for unsupported types\n    const inspected = util.inspect(value, { depth: null }); // fallback for functions or symbols\n    return inspected;\n  } catch (error) {\n    // Handle JSON serialization failures with util.inspect fallback\n    // Common failures: circular references, BigInt\n    try {\n      // Use util.inspect for complex objects that JSON.stringify cannot handle\n      // depth: null ensures complete object traversal without truncation\n      // util.inspect handles circular references, functions, and Node.js-specific objects\n      // Produces more verbose but complete representation of complex values\n      const inspected = util.inspect(value, { depth: null });\n      return inspected;\n    } catch (innerErr) {\n      // Final fallback for truly unserializable values\n      // Rare cases where both JSON.stringify and util.inspect fail\n      // Provides consistent placeholder rather than throwing error\n      // Ensures logging never fails due to argument serialization issues\n      return '[unserializable]';\n    }\n  }\n}\n\n/**\n * Logs function entry with arguments\n * \n * This function provides standardized logging for when functions start executing.\n * It's particularly useful for debugging test setup sequences and understanding\n * the order of operations in complex test environments.\n * \n * Technical implementation:\n * - Uses console.log for immediate output (no buffering)\n * - safeSerialize handles objects, arrays, and primitive values safely //(update comment)\n * - Spread operator accepts variable number of arguments\n * - [START] prefix makes entry points easy to identify in logs\n * \n * Argument serialization approach:\n * - safeSerialize converts any value to readable string //(update comment)\n * - Handles undefined, null, objects, arrays consistently\n * - Truncates long values naturally (JSON has reasonable limits)\n * - Avoids issues with toString() on complex objects\n * \n * @param {string} functionName - Name of the function being entered\n * @param {...any} args - All arguments passed to the function\n */\nfunction logStart(functionName, ...args) {\n  // Convert all arguments to serialized strings for readable logging output\n  // map() with safeSerialize ensures each argument is safely converted to string\n  // join() with comma-space creates function call signature appearance\n  // This format matches typical function call syntax for easy debugging\n  const argsString = args.map(arg => safeSerialize(arg)).join(`, `);\n  \n  // Conditional logging based on global LOG_ENABLED flag for performance\n  // Only perform string interpolation and console.log when logging is enabled\n  // [START] prefix makes function entry points easy to identify in log streams\n  // Template literal provides clean, readable output format\n  if (LOG_ENABLED) console.log(`[START] ${functionName}(${argsString})`);\n}\n\n/**\n * Logs function exit with return value\n * \n * This function provides standardized logging for when functions complete.\n * It shows the return value and matches with the corresponding START log\n * to help trace execution flow.\n * \n * Why log return values:\n * - Helps verify functions are returning expected values\n * - Essential for debugging mock creation and setup\n * - Shows the flow of data through test setup functions\n * - Matches with START logs to show complete function execution\n * \n * Return value serialization:\n * - Same safeSerialize approach as logStart for consistency //(update comment)\n * - Shows actual return values for verification\n * - Handles complex objects and primitives uniformly\n * \n * @param {string} functionName - Name of the function being exited (should match logStart)\n * @param {any} returnValue - The value being returned by the function\n */\nfunction logReturn(functionName, returnValue) {\n  // Serialize return value using same safe approach as function arguments\n  // Consistent serialization strategy ensures uniform log formatting across entry/exit\n  // Safe serialization prevents logging failures from complex return values\n  const valueString = safeSerialize(returnValue);\n  \n  // Conditional logging with [RETURN] prefix for easy correlation with [START] logs\n  // Arrow notation (->) clearly indicates data flow from function to return value\n  // Template literal maintains consistent formatting with logStart function\n  // Only log when enabled to avoid performance overhead in production\n  if (LOG_ENABLED) console.log(`[RETURN] ${functionName} -> ${valueString}`);\n}\n\n// Export both functions for use throughout the qtests module\n// These provide the foundation for all function call tracing\n/**\n * Executes a callback with standardized logging\n *\n * Outputs `${name} is running with` before execution, `${name} is returning`\n * when the callback succeeds, and `${name} encountered` if it throws. Works\n * with synchronous or asynchronous callbacks.\n *\n * @param {string} name - Identifier used in log messages\n * @param {Function} fn - Callback to execute\n * @param {...any} args - Arguments to pass to the callback\n * @returns {any|Promise} Result of the callback\n */\nfunction executeWithLogs(name, fn, ...args) {\n  console.log(`executeWithLogs is running with ${name}, ${fn}`); // logging function start per requirements\n  \n  try {\n    // Serialize arguments for readable logging, handling empty argument lists gracefully\n    // Conditional logic provides 'none' placeholder when no arguments passed\n    // Consistent with other logging functions' argument serialization approach\n    const argString = args.length ? args.map(a => safeSerialize(a)).join(`, `) : `none`;\n    if (LOG_ENABLED) console.log(`${name} is running with ${argString}`);\n    \n    // Execute callback function with spread arguments to maintain original call signature\n    // Spread operator ensures function receives arguments in expected format\n    const result = fn(...args);\n    \n    // Detect Promise return values to handle async functions appropriately\n    // Duck typing check using typeof result.then for Promise detection\n    // This approach works with all Promise-like objects (thenables)\n    if (result && typeof result.then === `function`) {\n      // Handle async execution path with Promise chaining\n      return result.then(res => {\n        // Log successful async completion with serialized result\n        if (LOG_ENABLED) console.log(`${name} is returning ${safeSerialize(res)}`);\n        console.log(`executeWithLogs is returning ${res}`);\n        return res;\n      }).catch(err => {\n        // Handle async errors with descriptive logging\n        if (LOG_ENABLED) console.log(`${name} encountered ${err.message}`);\n        console.log(`executeWithLogs error: ${err.message}`);\n        throw err;\n      });\n    }\n    \n    // Handle synchronous execution path when function returns non-Promise value\n    // Log successful synchronous completion with serialized result for debugging\n    // Same logging format as async path maintains consistency across execution modes\n    if (LOG_ENABLED) console.log(`${name} is returning ${safeSerialize(result)}`);\n    console.log(`executeWithLogs is returning ${result}`);\n    return result;\n  } catch (error) {\n    // Handle synchronous errors with descriptive logging for debugging\n    // Error message logging helps identify issues in wrapped function execution\n    // Re-throwing maintains original error handling contract while adding diagnostics\n    if (LOG_ENABLED) console.log(`${name} encountered ${error.message}`);\n    console.log(`executeWithLogs error: ${error.message}`);\n    throw error;\n  }\n}\n\n// export all logging utilities at bottom per requirements\nmodule.exports = { logStart, logReturn, executeWithLogs, safeSerialize, setLogging };\n"],"mappings":"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","ignoreList":[]}