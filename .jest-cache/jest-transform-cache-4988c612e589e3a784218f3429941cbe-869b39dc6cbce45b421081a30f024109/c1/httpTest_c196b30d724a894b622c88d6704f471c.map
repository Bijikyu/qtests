{"version":3,"names":["setLogging","require","process","env","NODE_ENV","http","supertest","app","console","log","error","Error","message","client","Super","constructor","get","path","Test","post","put","delete","patch","head","options","all","method","toUpperCase","headers","body","undefined","expectedStatus","server","set","name","value","send","expect","status","end","createServer","Promise","resolve","listen","port","address","opts","hostname","response","makeRequest","close","cleanupError","reject","req","request","res","data","on","chunk","contentType","includes","JSON","parse","parseError","statusCode","text","bodyData","stringify","write","createMockApp","routes","url","route","find","r","methodMatch","pathMatch","RegExp","test","regexPath","replace","regex","handler","setHeader","push","module","exports"],"sources":["httpTest.js"],"sourcesContent":["/** //(introduces internal supertest alternative)\n * Provides tiny HTTP client for integration tests. //(creates minimal API)\n * Rationale: avoids external supertest dependency and works in Node core. //(reason)\n */ //(close introductory comment)\n\n// Import logging control utility for consistent framework behavior\nconst { setLogging } = require('../lib/logUtils');\nif (process.env.NODE_ENV !== 'test') setLogging(false);\n\nconst http = require('http'); //(use node http to avoid external deps)\n\n/** //(introduces http test factory function)\n * Creates HTTP test client for integration testing. //(describe main function)\n * Returns builder object for chaining request configuration. //(explain return)\n * Rationale: provides supertest-like API without external dependencies. //(why)\n */ //(close factory comment)\nfunction supertest(app) { //(lightweight supertest-like client)\n  console.log(`supertest is running with app`); // log factory creation\n  \n  // Validate app early to provide immediate feedback\n  if (!app || typeof app !== 'function') {\n    const error = new Error('Invalid app provided to supertest');\n    console.log(`supertest error ${error.message}`); // log failure  \n    throw error;\n  }\n  \n  try {\n    const client = new Super(app); // create builder instance\n    console.log(`supertest is returning Super instance`); // log return\n    return client; // return configured builder\n  } catch (error) {\n    console.log(`supertest error ${error.message}`); // log failure\n    throw error; // rethrow for caller\n  }\n}\n\nclass Super { //(builder for request objects)\n  constructor(app) {\n    this.app = app; // store app reference for server creation\n  }\n  \n  get(path) { return new Test(this.app, 'get', path); } //(start GET request)\n  post(path) { return new Test(this.app, 'post', path); } //(start POST request)\n  put(path) { return new Test(this.app, 'put', path); } //(start PUT request)\n  delete(path) { return new Test(this.app, 'delete', path); } //(start DELETE request)\n  patch(path) { return new Test(this.app, 'patch', path); } //(start PATCH request)\n  head(path) { return new Test(this.app, 'head', path); } //(start HEAD request)\n  options(path) { return new Test(this.app, 'options', path); } //(start OPTIONS request)\n  all(path) { return new Test(this.app, 'all', path); } //(start request with any method)\n}\n\nclass Test { //(represents a single http call)\n  constructor(app, method, path) {\n    console.log(`Test is running with ${method} ${path}`); // log test creation\n    \n    this.app = app; // application instance\n    this.method = method.toUpperCase(); // normalize method to uppercase\n    this.path = path; // request path\n    this.headers = {}; // request headers storage\n    this.body = undefined; // request body storage\n    this.expectedStatus = null; // expected status for assertions\n    this.server = null; // server instance reference for cleanup\n  }\n  \n  set(name, value) { //(set request header)\n    console.log(`Test.set is running with ${name}: ${value}`); // log header setting\n    \n    try {\n      this.headers[name] = value; // store header\n      console.log(`Test.set is returning this`); // log chaining\n      return this; // enable method chaining\n    } catch (error) {\n      console.log(`Test.set error ${error.message}`); // log error\n      throw error; // propagate error\n    }\n  }\n  \n  send(body) { //(attach json body)\n    console.log(`Test.send is running with ${typeof body}`); // log body attachment\n    \n    try {\n      this.body = body; // store request body\n      \n      // Auto-set content-type for JSON bodies\n      if (typeof body === 'object' && body !== null && !this.headers['Content-Type']) {\n        this.headers['Content-Type'] = 'application/json';\n      }\n      \n      console.log(`Test.send is returning this`); // log chaining\n      return this; // enable method chaining\n    } catch (error) {\n      console.log(`Test.send error ${error.message}`); // log error\n      throw error; // propagate error\n    }\n  }\n  \n  expect(status) { //(set expected status code)\n    console.log(`Test.expect is running with ${status}`); // log expectation setting\n    \n    try {\n      this.expectedStatus = status; // store expected status\n      console.log(`Test.expect is returning this`); // log chaining\n      return this; // enable method chaining\n    } catch (error) {\n      console.log(`Test.expect error ${error.message}`); // log error\n      throw error; // propagate error\n    }\n  }\n  \n  async end() { //(perform the request)\n    console.log(`Test.end is running with ${this.method} ${this.path}`); // log request execution\n    \n    try {\n      const server = http.createServer(this.app); //(spin up ephemeral server)\n      this.server = server; // store reference for cleanup\n      \n      // Start server on random available port\n      await new Promise(resolve => server.listen(0, resolve));\n      const port = server.address().port;\n      \n      // Configure request options\n      const opts = {\n        method: this.method,\n        hostname: '127.0.0.1',\n        port,\n        path: this.path,\n        headers: this.headers\n      };\n      \n      // Execute HTTP request and collect response\n      const response = await this.makeRequest(opts);\n      \n      // Clean up server\n      await new Promise(resolve => server.close(resolve));\n      this.server = null;\n      \n      // Validate expected status if specified\n      if (this.expectedStatus !== null && response.status !== this.expectedStatus) {\n        throw new Error(`Expected status ${this.expectedStatus}, got ${response.status}`);\n      }\n      \n      console.log(`Test.end is returning response with status ${response.status}`); // log completion\n      return response; // return response object\n      \n    } catch (error) {\n      console.log(`Test.end error ${error.message}`); // log error\n      \n      // Ensure server cleanup on error\n      if (this.server) {\n        try {\n          await new Promise(resolve => this.server.close(resolve));\n        } catch (cleanupError) {\n          console.log(`Server cleanup error: ${cleanupError.message}`);\n        }\n        this.server = null;\n      }\n      \n      throw error; // propagate error\n    }\n  }\n  \n  /**\n   * Execute HTTP request and parse response\n   * \n   * This method handles the low-level HTTP request execution and response\n   * parsing. It creates a promise-based wrapper around Node.js http.request\n   * and automatically parses JSON responses.\n   * \n   * @param {Object} opts - HTTP request options\n   * @returns {Promise<Object>} Response object with status, headers, and body\n   */\n  makeRequest(opts) {\n    return new Promise((resolve, reject) => {\n      console.log(`makeRequest is running with ${opts.method} ${opts.path}`); // log request start\n      \n      const req = http.request(opts, (res) => {\n        let data = '';\n        \n        // Collect response data\n        res.on('data', chunk => {\n          data += chunk;\n        });\n        \n        // Parse and resolve response\n        res.on('end', () => {\n          try {\n            let body = data;\n            \n            // Auto-parse JSON responses\n            const contentType = res.headers['content-type'] || '';\n            if (contentType.includes('application/json') && data) {\n              try {\n                body = JSON.parse(data);\n              } catch (parseError) {\n                // Keep raw data if JSON parsing fails\n                console.log(`JSON parse error: ${parseError.message}`);\n              }\n            }\n            \n            const response = {\n              status: res.statusCode,\n              statusCode: res.statusCode, // alias for compatibility\n              headers: res.headers,\n              body: body,\n              text: data // raw response text\n            };\n            \n            console.log(`makeRequest is returning response with status ${response.status}`); // log completion\n            resolve(response);\n            \n          } catch (error) {\n            console.log(`makeRequest response parsing error ${error.message}`); // log error\n            reject(error);\n          }\n        });\n      });\n      \n      // Handle request errors\n      req.on('error', (error) => {\n        console.log(`makeRequest request error ${error.message}`); // log error\n        reject(error);\n      });\n      \n      // Send request body if present\n      if (this.body !== undefined) {\n        const bodyData = typeof this.body === 'string' \n          ? this.body \n          : JSON.stringify(this.body);\n        req.write(bodyData);\n      }\n      \n      req.end(); // finalize request\n    });\n  }\n}\n\n/**\n * Create Express-style application mock for testing\n * \n * This utility creates a simple Express-compatible application mock that\n * can be used with the supertest client. It provides basic routing and\n * middleware support for testing HTTP endpoints.\n * \n * @returns {Function} Express-style application function\n * \n * @example\n * const app = createMockApp();\n * app.get('/test', (req, res) => res.json({ success: true }));\n * const response = await supertest(app).get('/test').end();\n */\nfunction createMockApp() {\n  console.log(`createMockApp is running with none`); // log app creation\n  \n  try {\n    const routes = []; // store route definitions\n    \n    // Express-style application function\n    function app(req, res) {\n      console.log(`mockApp is running with ${req.method} ${req.url}`); // log request\n      \n      try {\n        // Find matching route with parameter support\n        const route = routes.find(r => {\n          const methodMatch = r.method === 'ALL' || r.method === req.method;\n          \n          // Support exact match, regex, and Express-style parameters\n          let pathMatch = false;\n          if (r.path === req.url) {\n            pathMatch = true;\n          } else if (r.path instanceof RegExp && r.path.test(req.url)) {\n            pathMatch = true;\n          } else if (typeof r.path === 'string' && r.path.includes(':')) {\n            // Convert Express-style parameters to regex\n            const regexPath = r.path.replace(/:[\\w]+/g, '[^/]+');\n            const regex = new RegExp(`^${regexPath}$`);\n            pathMatch = regex.test(req.url);\n          }\n          \n          return methodMatch && pathMatch;\n        });\n        \n        if (route) {\n          // Execute route handler\n          route.handler(req, res);\n        } else {\n          // Return 404 for unmatched routes\n          res.statusCode = 404;\n          res.setHeader('Content-Type', 'application/json');\n          res.end(JSON.stringify({ error: 'Not Found' }));\n        }\n        \n        console.log(`mockApp handled ${req.method} ${req.url}`); // log completion\n        \n      } catch (error) {\n        console.log(`mockApp error ${error.message}`); // log error\n        res.statusCode = 500;\n        res.setHeader('Content-Type', 'application/json');\n        res.end(JSON.stringify({ error: 'Internal Server Error' }));\n      }\n    }\n    \n    // Add HTTP method helpers\n    app.get = (path, handler) => {\n      routes.push({ method: 'GET', path, handler });\n      return app;\n    };\n    \n    app.post = (path, handler) => {\n      routes.push({ method: 'POST', path, handler });\n      return app;\n    };\n    \n    app.put = (path, handler) => {\n      routes.push({ method: 'PUT', path, handler });\n      return app;\n    };\n    \n    app.delete = (path, handler) => {\n      routes.push({ method: 'DELETE', path, handler });\n      return app;\n    };\n    \n    app.patch = (path, handler) => {\n      routes.push({ method: 'PATCH', path, handler });\n      return app;\n    };\n    \n    app.all = (path, handler) => {\n      routes.push({ method: 'ALL', path, handler });\n      return app;\n    };\n    \n    console.log(`createMockApp is returning app`); // log return\n    return app; // return configured mock app\n    \n  } catch (error) {\n    console.log(`createMockApp error ${error.message}`); // log failure\n    throw error; // rethrow for caller\n  }\n}\n\n// Export HTTP testing utilities at bottom per requirements\nmodule.exports = {\n  supertest, // lightweight supertest alternative\n  createMockApp // Express-style app mock for testing\n};"],"mappings":"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","ignoreList":[]}