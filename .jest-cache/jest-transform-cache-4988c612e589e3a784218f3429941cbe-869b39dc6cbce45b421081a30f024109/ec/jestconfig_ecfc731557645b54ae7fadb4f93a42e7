5a31b9704d0999b0a218dd9a1e09b568
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  setupFiles: ['<rootDir>/test/testSetup.js'],
  // (invoke exported setup for jest)

  // Advanced Performance optimizations
  maxWorkers: '100%',
  // Use all available CPU cores for maximum speed
  cache: true,
  cacheDirectory: '<rootDir>/.jest-cache',
  clearMocks: true,
  resetMocks: false,
  restoreMocks: false,
  // Balanced memory and execution optimizations
  workerIdleMemoryLimit: '768MB',
  // Balanced worker memory for stability
  detectLeaks: false,
  // Skip leak detection for speed
  logHeapUsage: false,
  // Disable heap logging for speed
  forceExit: true,
  // Force exit for faster cleanup

  // Fast test execution (balanced for stability)
  verbose: false,
  silent: false,
  // Keep some output for debugging, qtests-runner handles display
  bail: false,
  // Don't stop on first failure for parallel efficiency
  passWithNoTests: true,
  // Don't fail on empty test suites

  testPathIgnorePatterns: ['/node_modules/', '/demo/', '/examples/', '/docs/', '/stubs/', '/utils/axiosStub.js', '/utils/winstonStub.js'],
  testMatch: ['<rootDir>/test/**/*.test.js', '<rootDir>/tests/**/*.test.js', '<rootDir>/tests/**/*.test.ts', '<rootDir>/**/*.test.js', '<rootDir>/**/*.test.ts'],
  transform: {
    '^.+\\.tsx?$': ['ts-jest', {
      isolatedModules: true,
      // Faster TypeScript compilation
      tsconfig: {
        compilerOptions: {
          sourceMap: false,
          // Skip source maps for speed
          declaration: false,
          declarationMap: false,
          skipLibCheck: true // Skip lib checking for speed
        }
      }
    }],
    '^.+\\.jsx?$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
  collectCoverageFrom: ['lib/**/*.js', 'utils/**/*.js', 'index.js', '!lib/stubs.js', '!utils/*Stub.js']
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicHJlc2V0IiwidGVzdEVudmlyb25tZW50Iiwic2V0dXBGaWxlcyIsIm1heFdvcmtlcnMiLCJjYWNoZSIsImNhY2hlRGlyZWN0b3J5IiwiY2xlYXJNb2NrcyIsInJlc2V0TW9ja3MiLCJyZXN0b3JlTW9ja3MiLCJ3b3JrZXJJZGxlTWVtb3J5TGltaXQiLCJkZXRlY3RMZWFrcyIsImxvZ0hlYXBVc2FnZSIsImZvcmNlRXhpdCIsInZlcmJvc2UiLCJzaWxlbnQiLCJiYWlsIiwicGFzc1dpdGhOb1Rlc3RzIiwidGVzdFBhdGhJZ25vcmVQYXR0ZXJucyIsInRlc3RNYXRjaCIsInRyYW5zZm9ybSIsImlzb2xhdGVkTW9kdWxlcyIsInRzY29uZmlnIiwiY29tcGlsZXJPcHRpb25zIiwic291cmNlTWFwIiwiZGVjbGFyYXRpb24iLCJkZWNsYXJhdGlvbk1hcCIsInNraXBMaWJDaGVjayIsIm1vZHVsZUZpbGVFeHRlbnNpb25zIiwiY29sbGVjdENvdmVyYWdlRnJvbSJdLCJzb3VyY2VzIjpbImplc3QuY29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICBwcmVzZXQ6ICd0cy1qZXN0JyxcbiAgdGVzdEVudmlyb25tZW50OiAnbm9kZScsXG4gIHNldHVwRmlsZXM6IFsnPHJvb3REaXI+L3Rlc3QvdGVzdFNldHVwLmpzJ10sIC8vIChpbnZva2UgZXhwb3J0ZWQgc2V0dXAgZm9yIGplc3QpXG4gIFxuICAvLyBBZHZhbmNlZCBQZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25zXG4gIG1heFdvcmtlcnM6ICcxMDAlJywgLy8gVXNlIGFsbCBhdmFpbGFibGUgQ1BVIGNvcmVzIGZvciBtYXhpbXVtIHNwZWVkXG4gIGNhY2hlOiB0cnVlLFxuICBjYWNoZURpcmVjdG9yeTogJzxyb290RGlyPi8uamVzdC1jYWNoZScsXG4gIGNsZWFyTW9ja3M6IHRydWUsXG4gIHJlc2V0TW9ja3M6IGZhbHNlLFxuICByZXN0b3JlTW9ja3M6IGZhbHNlLFxuICBcbiAgLy8gQmFsYW5jZWQgbWVtb3J5IGFuZCBleGVjdXRpb24gb3B0aW1pemF0aW9uc1xuICB3b3JrZXJJZGxlTWVtb3J5TGltaXQ6ICc3NjhNQicsIC8vIEJhbGFuY2VkIHdvcmtlciBtZW1vcnkgZm9yIHN0YWJpbGl0eVxuICBkZXRlY3RMZWFrczogZmFsc2UsIC8vIFNraXAgbGVhayBkZXRlY3Rpb24gZm9yIHNwZWVkXG4gIGxvZ0hlYXBVc2FnZTogZmFsc2UsIC8vIERpc2FibGUgaGVhcCBsb2dnaW5nIGZvciBzcGVlZFxuICBmb3JjZUV4aXQ6IHRydWUsIC8vIEZvcmNlIGV4aXQgZm9yIGZhc3RlciBjbGVhbnVwXG4gIFxuICAvLyBGYXN0IHRlc3QgZXhlY3V0aW9uIChiYWxhbmNlZCBmb3Igc3RhYmlsaXR5KVxuICB2ZXJib3NlOiBmYWxzZSxcbiAgc2lsZW50OiBmYWxzZSwgLy8gS2VlcCBzb21lIG91dHB1dCBmb3IgZGVidWdnaW5nLCBxdGVzdHMtcnVubmVyIGhhbmRsZXMgZGlzcGxheVxuICBiYWlsOiBmYWxzZSwgLy8gRG9uJ3Qgc3RvcCBvbiBmaXJzdCBmYWlsdXJlIGZvciBwYXJhbGxlbCBlZmZpY2llbmN5XG4gIHBhc3NXaXRoTm9UZXN0czogdHJ1ZSwgLy8gRG9uJ3QgZmFpbCBvbiBlbXB0eSB0ZXN0IHN1aXRlc1xuICBcbiAgdGVzdFBhdGhJZ25vcmVQYXR0ZXJuczogW1xuICAgICcvbm9kZV9tb2R1bGVzLycsXG4gICAgJy9kZW1vLycsXG4gICAgJy9leGFtcGxlcy8nLFxuICAgICcvZG9jcy8nLFxuICAgICcvc3R1YnMvJyxcbiAgICAnL3V0aWxzL2F4aW9zU3R1Yi5qcycsXG4gICAgJy91dGlscy93aW5zdG9uU3R1Yi5qcydcbiAgXSxcbiAgdGVzdE1hdGNoOiBbXG4gICAgJzxyb290RGlyPi90ZXN0LyoqLyoudGVzdC5qcycsXG4gICAgJzxyb290RGlyPi90ZXN0cy8qKi8qLnRlc3QuanMnLFxuICAgICc8cm9vdERpcj4vdGVzdHMvKiovKi50ZXN0LnRzJyxcbiAgICAnPHJvb3REaXI+LyoqLyoudGVzdC5qcycsXG4gICAgJzxyb290RGlyPi8qKi8qLnRlc3QudHMnXG4gIF0sXG4gIHRyYW5zZm9ybToge1xuICAgICdeLitcXFxcLnRzeD8kJzogWyd0cy1qZXN0Jywge1xuICAgICAgaXNvbGF0ZWRNb2R1bGVzOiB0cnVlLCAvLyBGYXN0ZXIgVHlwZVNjcmlwdCBjb21waWxhdGlvblxuICAgICAgdHNjb25maWc6IHtcbiAgICAgICAgY29tcGlsZXJPcHRpb25zOiB7XG4gICAgICAgICAgc291cmNlTWFwOiBmYWxzZSwgLy8gU2tpcCBzb3VyY2UgbWFwcyBmb3Igc3BlZWRcbiAgICAgICAgICBkZWNsYXJhdGlvbjogZmFsc2UsXG4gICAgICAgICAgZGVjbGFyYXRpb25NYXA6IGZhbHNlLFxuICAgICAgICAgIHNraXBMaWJDaGVjazogdHJ1ZSAvLyBTa2lwIGxpYiBjaGVja2luZyBmb3Igc3BlZWRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dLFxuICAgICdeLitcXFxcLmpzeD8kJzogJ2JhYmVsLWplc3QnXG4gIH0sXG4gIG1vZHVsZUZpbGVFeHRlbnNpb25zOiBbJ3RzJywgJ3RzeCcsICdqcycsICdqc3gnLCAnanNvbicsICdub2RlJ10sXG4gIGNvbGxlY3RDb3ZlcmFnZUZyb206IFtcbiAgICAnbGliLyoqLyouanMnLFxuICAgICd1dGlscy8qKi8qLmpzJyxcbiAgICAnaW5kZXguanMnLFxuICAgICchbGliL3N0dWJzLmpzJyxcbiAgICAnIXV0aWxzLypTdHViLmpzJ1xuICBdXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkMsTUFBTSxFQUFFLFNBQVM7RUFDakJDLGVBQWUsRUFBRSxNQUFNO0VBQ3ZCQyxVQUFVLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQztFQUFFOztFQUU3QztFQUNBQyxVQUFVLEVBQUUsTUFBTTtFQUFFO0VBQ3BCQyxLQUFLLEVBQUUsSUFBSTtFQUNYQyxjQUFjLEVBQUUsdUJBQXVCO0VBQ3ZDQyxVQUFVLEVBQUUsSUFBSTtFQUNoQkMsVUFBVSxFQUFFLEtBQUs7RUFDakJDLFlBQVksRUFBRSxLQUFLO0VBRW5CO0VBQ0FDLHFCQUFxQixFQUFFLE9BQU87RUFBRTtFQUNoQ0MsV0FBVyxFQUFFLEtBQUs7RUFBRTtFQUNwQkMsWUFBWSxFQUFFLEtBQUs7RUFBRTtFQUNyQkMsU0FBUyxFQUFFLElBQUk7RUFBRTs7RUFFakI7RUFDQUMsT0FBTyxFQUFFLEtBQUs7RUFDZEMsTUFBTSxFQUFFLEtBQUs7RUFBRTtFQUNmQyxJQUFJLEVBQUUsS0FBSztFQUFFO0VBQ2JDLGVBQWUsRUFBRSxJQUFJO0VBQUU7O0VBRXZCQyxzQkFBc0IsRUFBRSxDQUN0QixnQkFBZ0IsRUFDaEIsUUFBUSxFQUNSLFlBQVksRUFDWixRQUFRLEVBQ1IsU0FBUyxFQUNULHFCQUFxQixFQUNyQix1QkFBdUIsQ0FDeEI7RUFDREMsU0FBUyxFQUFFLENBQ1QsNkJBQTZCLEVBQzdCLDhCQUE4QixFQUM5Qiw4QkFBOEIsRUFDOUIsd0JBQXdCLEVBQ3hCLHdCQUF3QixDQUN6QjtFQUNEQyxTQUFTLEVBQUU7SUFDVCxhQUFhLEVBQUUsQ0FBQyxTQUFTLEVBQUU7TUFDekJDLGVBQWUsRUFBRSxJQUFJO01BQUU7TUFDdkJDLFFBQVEsRUFBRTtRQUNSQyxlQUFlLEVBQUU7VUFDZkMsU0FBUyxFQUFFLEtBQUs7VUFBRTtVQUNsQkMsV0FBVyxFQUFFLEtBQUs7VUFDbEJDLGNBQWMsRUFBRSxLQUFLO1VBQ3JCQyxZQUFZLEVBQUUsSUFBSSxDQUFDO1FBQ3JCO01BQ0Y7SUFDRixDQUFDLENBQUM7SUFDRixhQUFhLEVBQUU7RUFDakIsQ0FBQztFQUNEQyxvQkFBb0IsRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO0VBQ2hFQyxtQkFBbUIsRUFBRSxDQUNuQixhQUFhLEVBQ2IsZUFBZSxFQUNmLFVBQVUsRUFDVixlQUFlLEVBQ2YsaUJBQWlCO0FBRXJCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=