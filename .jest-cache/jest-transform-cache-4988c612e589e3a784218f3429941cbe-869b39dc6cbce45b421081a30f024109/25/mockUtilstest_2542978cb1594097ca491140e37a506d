a621d5d50e7bfc5c66665f9668c27813
const {
  attachMockSpies,
  makeLoggedMock
} = require('../utils/testEnv'); // (import spy helpers)
const vm = require('vm'); // (node vm for isolated context)
const {
  withMockConsole
} = require('../utils/testHelpers'); // (helper for log spies)

// Ensure attachMockSpies provides jest.fn helpers when jest is present
test('attachMockSpies uses jest spies when available', () => {
  const mock = function () {}; // (simple mock target)
  attachMockSpies(mock); // (enhance mock)
  expect(typeof mock.mockClear).toBe('function'); // (mockClear present)
  expect(typeof mock.mockReset).toBe('function'); // (mockReset present)
  expect(mock.mockClear.mock).toBeDefined(); // (jest.fn applied)
  expect(mock.mockReset.mock).toBeDefined(); // (jest.fn applied)
});

// Ensure attachMockSpies falls back to plain functions when jest is missing
test('attachMockSpies adds noops without jest', () => {
  const saved = global.jest; // (backup jest global)
  delete global.jest; // (simulate non-jest env)
  const attachIsolated = vm.runInNewContext(`(${attachMockSpies.toString()})`, {
    jest: undefined,
    logStart: () => {},
    logReturn: () => {}
  }); // (recreate helper without jest)
  const mock = function () {}; // (mock to enhance)
  attachIsolated(mock); // (apply helper in vm context)
  expect(typeof mock.mockClear).toBe('function'); // (mockClear created)
  expect(typeof mock.mockReset).toBe('function'); // (mockReset created)
  expect(mock.mockClear.mock).toBeUndefined(); // (not a jest.fn)
  expect(mock.mockReset.mock).toBeUndefined(); // (not a jest.fn)
  global.jest = saved; // (restore jest global)
});

// Verify makeLoggedMock logs execution and returns enhanced mock
test('makeLoggedMock logs and returns mock with spies', () => withMockConsole('log', spy => {
  const mock = makeLoggedMock('sample', () => ({})); // (create logged mock)
  const logs = spy.mock.calls.map(c => c[0]); // (capture log lines)
  expect(logs.some(log => log.includes('makeLoggedMock is running'))).toBe(true); // (start log present)
  expect(logs.some(log => log.includes('makeLoggedMock is returning'))).toBe(true); // (end log present)
  expect(typeof mock.mockClear).toBe('function'); // (mockClear exists)
  expect(typeof mock.mockReset).toBe('function'); // (mockReset exists)
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhdHRhY2hNb2NrU3BpZXMiLCJtYWtlTG9nZ2VkTW9jayIsInJlcXVpcmUiLCJ2bSIsIndpdGhNb2NrQ29uc29sZSIsInRlc3QiLCJtb2NrIiwiZXhwZWN0IiwibW9ja0NsZWFyIiwidG9CZSIsIm1vY2tSZXNldCIsInRvQmVEZWZpbmVkIiwic2F2ZWQiLCJnbG9iYWwiLCJqZXN0IiwiYXR0YWNoSXNvbGF0ZWQiLCJydW5Jbk5ld0NvbnRleHQiLCJ0b1N0cmluZyIsInVuZGVmaW5lZCIsImxvZ1N0YXJ0IiwibG9nUmV0dXJuIiwidG9CZVVuZGVmaW5lZCIsInNweSIsImxvZ3MiLCJjYWxscyIsIm1hcCIsImMiLCJzb21lIiwibG9nIiwiaW5jbHVkZXMiXSwic291cmNlcyI6WyJtb2NrVXRpbHMudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGF0dGFjaE1vY2tTcGllcywgbWFrZUxvZ2dlZE1vY2sgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL3Rlc3RFbnYnKTsgLy8gKGltcG9ydCBzcHkgaGVscGVycylcbmNvbnN0IHZtID0gcmVxdWlyZSgndm0nKTsgLy8gKG5vZGUgdm0gZm9yIGlzb2xhdGVkIGNvbnRleHQpXG5jb25zdCB7IHdpdGhNb2NrQ29uc29sZSB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvdGVzdEhlbHBlcnMnKTsgLy8gKGhlbHBlciBmb3IgbG9nIHNwaWVzKVxuXG4vLyBFbnN1cmUgYXR0YWNoTW9ja1NwaWVzIHByb3ZpZGVzIGplc3QuZm4gaGVscGVycyB3aGVuIGplc3QgaXMgcHJlc2VudFxudGVzdCgnYXR0YWNoTW9ja1NwaWVzIHVzZXMgamVzdCBzcGllcyB3aGVuIGF2YWlsYWJsZScsICgpID0+IHtcbiAgY29uc3QgbW9jayA9IGZ1bmN0aW9uKCl7fTsgLy8gKHNpbXBsZSBtb2NrIHRhcmdldClcbiAgYXR0YWNoTW9ja1NwaWVzKG1vY2spOyAvLyAoZW5oYW5jZSBtb2NrKVxuICBleHBlY3QodHlwZW9mIG1vY2subW9ja0NsZWFyKS50b0JlKCdmdW5jdGlvbicpOyAvLyAobW9ja0NsZWFyIHByZXNlbnQpXG4gIGV4cGVjdCh0eXBlb2YgbW9jay5tb2NrUmVzZXQpLnRvQmUoJ2Z1bmN0aW9uJyk7IC8vIChtb2NrUmVzZXQgcHJlc2VudClcbiAgZXhwZWN0KG1vY2subW9ja0NsZWFyLm1vY2spLnRvQmVEZWZpbmVkKCk7IC8vIChqZXN0LmZuIGFwcGxpZWQpXG4gIGV4cGVjdChtb2NrLm1vY2tSZXNldC5tb2NrKS50b0JlRGVmaW5lZCgpOyAvLyAoamVzdC5mbiBhcHBsaWVkKVxufSk7XG5cbi8vIEVuc3VyZSBhdHRhY2hNb2NrU3BpZXMgZmFsbHMgYmFjayB0byBwbGFpbiBmdW5jdGlvbnMgd2hlbiBqZXN0IGlzIG1pc3NpbmdcbnRlc3QoJ2F0dGFjaE1vY2tTcGllcyBhZGRzIG5vb3BzIHdpdGhvdXQgamVzdCcsICgpID0+IHtcbiAgY29uc3Qgc2F2ZWQgPSBnbG9iYWwuamVzdDsgLy8gKGJhY2t1cCBqZXN0IGdsb2JhbClcbiAgZGVsZXRlIGdsb2JhbC5qZXN0OyAvLyAoc2ltdWxhdGUgbm9uLWplc3QgZW52KVxuICBjb25zdCBhdHRhY2hJc29sYXRlZCA9IHZtLnJ1bkluTmV3Q29udGV4dChgKCR7YXR0YWNoTW9ja1NwaWVzLnRvU3RyaW5nKCl9KWAsIHsgamVzdDogdW5kZWZpbmVkLCBsb2dTdGFydDogKCkgPT4ge30sIGxvZ1JldHVybjogKCkgPT4ge30gfSk7IC8vIChyZWNyZWF0ZSBoZWxwZXIgd2l0aG91dCBqZXN0KVxuICBjb25zdCBtb2NrID0gZnVuY3Rpb24oKXt9OyAvLyAobW9jayB0byBlbmhhbmNlKVxuICBhdHRhY2hJc29sYXRlZChtb2NrKTsgLy8gKGFwcGx5IGhlbHBlciBpbiB2bSBjb250ZXh0KVxuICBleHBlY3QodHlwZW9mIG1vY2subW9ja0NsZWFyKS50b0JlKCdmdW5jdGlvbicpOyAvLyAobW9ja0NsZWFyIGNyZWF0ZWQpXG4gIGV4cGVjdCh0eXBlb2YgbW9jay5tb2NrUmVzZXQpLnRvQmUoJ2Z1bmN0aW9uJyk7IC8vIChtb2NrUmVzZXQgY3JlYXRlZClcbiAgZXhwZWN0KG1vY2subW9ja0NsZWFyLm1vY2spLnRvQmVVbmRlZmluZWQoKTsgLy8gKG5vdCBhIGplc3QuZm4pXG4gIGV4cGVjdChtb2NrLm1vY2tSZXNldC5tb2NrKS50b0JlVW5kZWZpbmVkKCk7IC8vIChub3QgYSBqZXN0LmZuKVxuICBnbG9iYWwuamVzdCA9IHNhdmVkOyAvLyAocmVzdG9yZSBqZXN0IGdsb2JhbClcbn0pO1xuXG4vLyBWZXJpZnkgbWFrZUxvZ2dlZE1vY2sgbG9ncyBleGVjdXRpb24gYW5kIHJldHVybnMgZW5oYW5jZWQgbW9ja1xudGVzdCgnbWFrZUxvZ2dlZE1vY2sgbG9ncyBhbmQgcmV0dXJucyBtb2NrIHdpdGggc3BpZXMnLCAoKSA9PiB3aXRoTW9ja0NvbnNvbGUoJ2xvZycsIHNweSA9PiB7XG4gIGNvbnN0IG1vY2sgPSBtYWtlTG9nZ2VkTW9jaygnc2FtcGxlJywgKCkgPT4gKHt9KSk7IC8vIChjcmVhdGUgbG9nZ2VkIG1vY2spXG4gIGNvbnN0IGxvZ3MgPSBzcHkubW9jay5jYWxscy5tYXAoYyA9PiBjWzBdKTsgLy8gKGNhcHR1cmUgbG9nIGxpbmVzKVxuICBleHBlY3QobG9ncy5zb21lKGxvZyA9PiBsb2cuaW5jbHVkZXMoJ21ha2VMb2dnZWRNb2NrIGlzIHJ1bm5pbmcnKSkpLnRvQmUodHJ1ZSk7IC8vIChzdGFydCBsb2cgcHJlc2VudClcbiAgZXhwZWN0KGxvZ3Muc29tZShsb2cgPT4gbG9nLmluY2x1ZGVzKCdtYWtlTG9nZ2VkTW9jayBpcyByZXR1cm5pbmcnKSkpLnRvQmUodHJ1ZSk7IC8vIChlbmQgbG9nIHByZXNlbnQpXG4gIGV4cGVjdCh0eXBlb2YgbW9jay5tb2NrQ2xlYXIpLnRvQmUoJ2Z1bmN0aW9uJyk7IC8vIChtb2NrQ2xlYXIgZXhpc3RzKVxuICBleHBlY3QodHlwZW9mIG1vY2subW9ja1Jlc2V0KS50b0JlKCdmdW5jdGlvbicpOyAvLyAobW9ja1Jlc2V0IGV4aXN0cylcbn0pKTtcbiJdLCJt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