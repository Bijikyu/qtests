{"version":3,"names":["Module","require","path","stubsPath","join","__dirname","STUB_REGISTRY","axios","winston","currentNodePath","process","env","NODE_PATH","separator","platform","_initPaths","origLoad","_load","request","parent","isMain","stubFile","originalResolveFilename","_resolveFilename","options","hasOwnProperty","resolvedStubPath","resolve","call"],"sources":["setup.js"],"sourcesContent":["/**\n * qtests Setup Module - Global Node.js Module Resolution Modification\n * \n * This module modifies Node.js's global module resolution behavior to automatically\n * substitute stub implementations for real modules during testing. It's a critical\n * piece of the qtests framework that enables seamless testing without changing\n * application code.\n * \n * Core functionality:\n * When this module is required, it patches Node.js's Module._resolveFilename method\n * to intercept require() calls and redirect them to stub implementations when\n * appropriate. This allows test code to use the same require() statements as\n * production code while getting test-appropriate implementations.\n * \n * Design philosophy:\n * - Transparent operation: Application code doesn't need to change\n * - Automatic stub resolution: No manual require() path changes needed\n * - Safe operation: Only affects specific modules, others work normally\n * - Performance conscious: Minimal overhead on module resolution\n * \n * Why global module resolution modification is necessary:\n * 1. Application code uses standard require() statements (require('axios'))\n * 2. Tests need different implementations (stub instead of real axios)\n * 3. Changing application code to use different requires breaks production\n * 4. Manual injection is complex and error-prone\n * 5. Automatic substitution enables testing without code changes\n * \n * Alternative approaches considered:\n * - Dependency injection: Too complex, requires major application changes\n * - Manual stub imports: Error-prone, doesn't test real require paths\n * - Test-specific builds: Complex tooling, maintenance overhead\n * - Proxy objects: Performance impact, incomplete API coverage\n * \n * Current approach benefits:\n * - Zero application code changes required\n * - Tests verify actual require() paths used in production\n * - Simple setup and configuration\n * - High compatibility with existing codebases\n * - Minimal performance overhead\n * \n * Security and safety considerations:\n * - Only affects modules in the predefined stub registry\n * - Original Node.js behavior preserved for unlisted modules\n * - Changes are temporary and isolated to test execution\n * - No permanent modifications to Node.js installation\n * - Easy to disable by not requiring this module\n */\n\n// Import Node.js Module constructor for accessing module resolution internals\n// This gives us access to the private _resolveFilename method that controls\n// how Node.js resolves module names to file paths\nconst Module = require('module');\n\n// Import path utilities for robust path manipulation and comparison\n// Path operations must be cross-platform compatible and handle edge cases\n// like symbolic links, relative paths, and case sensitivity\nconst path = require('path');\nconst stubsPath = path.join(__dirname, 'stubs'); // (single absolute path for stub modules after duplicate removal)\n\n// path to stubs directory resolved above //(single comment after removal)\n\n/**\n * Module stub registry - defines which modules should be replaced with stubs\n * \n * This object maps real module names to their stub implementation paths.\n * When Node.js attempts to resolve a module listed in this registry,\n * the stub path will be returned instead of the real module path.\n * \n * Registry design rationale:\n * - Explicit mapping provides clear control over which modules are stubbed\n * - Relative paths ensure stubs are loaded from qtests directory structure\n * - Simple object structure is easy to understand and modify\n * - No regex or pattern matching reduces complexity and potential errors\n * \n * Path resolution strategy:\n * - Stub paths are relative to this setup.js file location\n * - This ensures stubs are found regardless of where qtests is installed\n * - Relative paths prevent absolute path brittleness across environments\n * - Path normalization handles cross-platform differences automatically\n * \n * Module selection criteria:\n * - axios: Most common HTTP client library, frequently needs stubbing\n * - winston: Popular logging library, often needs silencing in tests\n * - Easy to extend with additional modules as needed\n * \n * Why not automatic discovery:\n * - Explicit registry prevents accidental stubbing of unexpected modules\n * - Clear intention - developers can see exactly what gets stubbed\n * - No file system scanning overhead during module resolution\n * - Prevents security issues from auto-discovering and loading arbitrary stubs\n */\nconst STUB_REGISTRY = {\n  axios: 'axios.js', // HTTP client library stub file name for quick lookup\n  winston: 'winston.js' // logging library stub file name for quick lookup\n}; //(close registry mapping)\n// (registry end for stub mappings)\n\n  // Additional stubs can be added here following the same pattern:\n  // 'module-name': './stubs/module-name'\n\n\n// Preserve existing NODE_PATH if it exists\n// Some environments or tools may have already set NODE_PATH\nconst currentNodePath = process.env.NODE_PATH || '';\n\n// Determine correct path separator for current platform\n// Windows uses semicolons, Unix-like systems use colons\nconst separator = process.platform === 'win32' ? ';' : ':';\n\n// Prepend our stubs directory to NODE_PATH\n// Prepending (not appending) ensures our stubs take precedence\n// Only add separator if there's existing NODE_PATH content\nprocess.env.NODE_PATH = stubsPath + (currentNodePath ? separator + currentNodePath : '');\n\n// Force Node.js to recognize the updated NODE_PATH for dynamic module resolution\n// _initPaths() is Node.js internal function that reads NODE_PATH and updates module search paths\n// Normally NODE_PATH is only read at Node.js startup, but we need to apply changes mid-execution\n// This updates Module._nodeModulePaths and other internal resolution state to include our stubs directory\nrequire('module')._initPaths();\n\n// Store original Module._load function for delegation to maintain normal module loading behavior\n// _load is the core module loading function that handles actual file reading and module instantiation\n// We preserve this to ensure non-stubbed modules load exactly as they would without qtests\nconst origLoad = Module._load;\n\n// STUB_REGISTRY lookup used below for quick stub resolution on every require\n\n// Override Node.js Module._load to intercept and redirect specific module loads\n// _load is chosen over _resolveFilename because it handles the complete loading process\n// Function signature must match Node.js internal API exactly for compatibility\nModule._load = function(request, parent, isMain){\n  // Look up stub file via shared registry to avoid duplicate maps\n  const stubFile = STUB_REGISTRY[request]; // single source of truth for stubs\n\n  if(stubFile){\n    // Build absolute stub path and delegate load to Node's original loader\n    return origLoad(path.join(stubsPath, stubFile), parent, isMain); // ensure cross platform path resolution\n  }\n  \n  // Delegate to original loader for all non-stubbed modules\n  // This ensures qtests doesn't interfere with normal Node.js module resolution\n  // Maintains full compatibility with existing codebases and module ecosystem\n  return origLoad(request, parent, isMain);\n};\n\n/**\n * Store reference to original Node.js module resolution function\n * \n * We save the original _resolveFilename method before modifying it so that:\n * 1. We can call the original implementation for non-stubbed modules\n * 2. We can restore original behavior if needed (though qtests doesn't currently do this)\n * 3. We maintain proper Node.js resolution semantics for all other modules\n * 4. Our modification is transparent and doesn't break existing functionality\n * \n * Why save before modification:\n * - Once we replace Module._resolveFilename, the original is lost\n * - We need the original to handle normal module resolution\n * - This pattern ensures we enhance rather than replace Node.js functionality\n * - Follows standard monkey-patching best practices\n */\nconst originalResolveFilename = Module._resolveFilename;\n\n/**\n * Enhanced module resolution function with automatic stub substitution\n * \n * This function replaces Node.js's Module._resolveFilename to intercept\n * module resolution and redirect specific modules to stub implementations.\n * For modules not in the stub registry, it delegates to the original\n * Node.js resolution function to maintain normal behavior.\n * \n * Function signature matches Node.js Module._resolveFilename exactly:\n * - request: The module name being resolved (e.g., 'axios')\n * - parent: The module object that initiated the require call\n * - isMain: Boolean indicating if this is the main module\n * - options: Additional resolution options (Node.js internal)\n * \n * Resolution algorithm:\n * 1. Check if requested module is in stub registry\n * 2. If yes, resolve stub path relative to this file and return it\n * 3. If no, delegate to original Node.js resolution function\n * 4. Handle any resolution errors gracefully\n * \n * Why intercept at _resolveFilename level:\n * - This is the lowest level where module names are converted to paths\n * - Intercepting here catches all require() calls, including transitive ones\n * - We can modify path resolution without affecting other module loading steps\n * - This approach is used by other popular Node.js testing tools\n * \n * Error handling strategy:\n * - Always delegate to original function for non-stub modules\n * - Let Node.js handle all error cases for non-stub modules\n * - Only handle stub-specific errors (missing stub files, etc.)\n * - Maintain full compatibility with Node.js error reporting\n * \n * @param {string} request - Module name being resolved\n * @param {Object} parent - Parent module object that initiated the require\n * @param {boolean} isMain - Whether this is the main module\n * @param {Object} options - Additional Node.js resolution options\n * @returns {string} Resolved file path (either stub or original module)\n */\nModule._resolveFilename = function(request, parent, isMain, options) {\n  // Check if the requested module is in our stub registry\n  // This is the key decision point - stub or delegate to original resolution\n  if (STUB_REGISTRY.hasOwnProperty(request)) {\n    // Module is in stub registry - resolve stub path\n\n    // Get stub file name from registry and resolve using stubsPath directory\n    const stubFile = STUB_REGISTRY[request];\n    const resolvedStubPath = path.resolve(stubsPath, stubFile); // compute absolute stub path\n\n    // Return the resolved stub path\n    // Node.js will load this file instead of the real module\n    return resolvedStubPath;\n  }\n\n  // Module is not in stub registry - use original Node.js resolution\n  // This maintains normal Node.js behavior for all other modules\n  // The original function handles all the complex resolution logic\n  // including node_modules searching, file extension resolution, etc.\n  return originalResolveFilename.call(this, request, parent, isMain, options);\n};\n\n// Note: This module performs setup through side effects when required\n// There is no explicit function to call - simply requiring this module\n// activates the stub resolution behavior\n// \n// This approach was chosen because:\n// 1. Setup must happen before any modules are required\n// 2. Side-effect-on-require is a common Node.js pattern for setup modules\n// 3. It prevents timing issues where setup might be called too late\n// 4. The behavior is predictable and follows Node.js conventions\n//\n// Usage pattern:\n// require('qtests/setup'); // Must be first line in test files\n// const myModule = require('./myModule'); // May use stubbed dependencies"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAEhC;AACA;AACA;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,SAAS,GAAGD,IAAI,CAACE,IAAI,CAACC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;;AAEjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG;EACpBC,KAAK,EAAE,UAAU;EAAE;EACnBC,OAAO,EAAE,YAAY,CAAC;AACxB,CAAC,CAAC,CAAC;AACH;;AAEE;AACA;;AAGF;AACA;AACA,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAG,CAACC,SAAS,IAAI,EAAE;;AAEnD;AACA;AACA,MAAMC,SAAS,GAAGH,OAAO,CAACI,QAAQ,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;;AAE1D;AACA;AACA;AACAJ,OAAO,CAACC,GAAG,CAACC,SAAS,GAAGT,SAAS,IAAIM,eAAe,GAAGI,SAAS,GAAGJ,eAAe,GAAG,EAAE,CAAC;;AAExF;AACA;AACA;AACA;AACAR,OAAO,CAAC,QAAQ,CAAC,CAACc,UAAU,CAAC,CAAC;;AAE9B;AACA;AACA;AACA,MAAMC,QAAQ,GAAGhB,MAAM,CAACiB,KAAK;;AAE7B;;AAEA;AACA;AACA;AACAjB,MAAM,CAACiB,KAAK,GAAG,UAASC,OAAO,EAAEC,MAAM,EAAEC,MAAM,EAAC;EAC9C;EACA,MAAMC,QAAQ,GAAGf,aAAa,CAACY,OAAO,CAAC,CAAC,CAAC;;EAEzC,IAAGG,QAAQ,EAAC;IACV;IACA,OAAOL,QAAQ,CAACd,IAAI,CAACE,IAAI,CAACD,SAAS,EAAEkB,QAAQ,CAAC,EAAEF,MAAM,EAAEC,MAAM,CAAC,CAAC,CAAC;EACnE;;EAEA;EACA;EACA;EACA,OAAOJ,QAAQ,CAACE,OAAO,EAAEC,MAAM,EAAEC,MAAM,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,uBAAuB,GAAGtB,MAAM,CAACuB,gBAAgB;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAvB,MAAM,CAACuB,gBAAgB,GAAG,UAASL,OAAO,EAAEC,MAAM,EAAEC,MAAM,EAAEI,OAAO,EAAE;EACnE;EACA;EACA,IAAIlB,aAAa,CAACmB,cAAc,CAACP,OAAO,CAAC,EAAE;IACzC;;IAEA;IACA,MAAMG,QAAQ,GAAGf,aAAa,CAACY,OAAO,CAAC;IACvC,MAAMQ,gBAAgB,GAAGxB,IAAI,CAACyB,OAAO,CAACxB,SAAS,EAAEkB,QAAQ,CAAC,CAAC,CAAC;;IAE5D;IACA;IACA,OAAOK,gBAAgB;EACzB;;EAEA;EACA;EACA;EACA;EACA,OAAOJ,uBAAuB,CAACM,IAAI,CAAC,IAAI,EAAEV,OAAO,EAAEC,MAAM,EAAEC,MAAM,EAAEI,OAAO,CAAC;AAC7E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]}