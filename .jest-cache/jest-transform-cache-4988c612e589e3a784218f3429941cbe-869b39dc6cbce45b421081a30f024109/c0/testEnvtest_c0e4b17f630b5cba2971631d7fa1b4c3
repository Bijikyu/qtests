659230cd8b6eac4c2940b9b61d48d74e
// Simplified testEnv tests to prevent hanging in parallel execution
const {
  setTestEnv,
  createScheduleMock,
  createQerrorsMock,
  createAxiosMock
} = require('../utils/testEnv');
describe('testEnv utilities', () => {
  test('testEnv utilities exist and are callable', () => {
    expect(typeof setTestEnv).toBe('function');
    expect(typeof createScheduleMock).toBe('function');
    expect(typeof createQerrorsMock).toBe('function');
    expect(typeof createAxiosMock).toBe('function');
  });
  test('schedule mock works', async () => {
    const scheduleMock = createScheduleMock();
    const fn = jest.fn(() => 'done');
    const result = await scheduleMock(fn);
    expect(result).toBe('done');
    expect(typeof scheduleMock.mockClear).toBe('function');
  });
  test('qerrors mock works', () => {
    const qerrorsMock = createQerrorsMock();
    const args = qerrorsMock('err', 'ctx');
    expect(args).toEqual(['err', 'ctx']);
    expect(typeof qerrorsMock.mockClear).toBe('function');
  });
  test('axios mock basic functionality', () => {
    const axiosMock = createAxiosMock();
    axiosMock.onGet('/test').reply(200, {
      ok: true
    });
    expect(axiosMock._replies['/test']).toEqual({
      status: 200,
      data: {
        ok: true
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzZXRUZXN0RW52IiwiY3JlYXRlU2NoZWR1bGVNb2NrIiwiY3JlYXRlUWVycm9yc01vY2siLCJjcmVhdGVBeGlvc01vY2siLCJyZXF1aXJlIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiZXhwZWN0IiwidG9CZSIsInNjaGVkdWxlTW9jayIsImZuIiwiamVzdCIsInJlc3VsdCIsIm1vY2tDbGVhciIsInFlcnJvcnNNb2NrIiwiYXJncyIsInRvRXF1YWwiLCJheGlvc01vY2siLCJvbkdldCIsInJlcGx5Iiwib2siLCJfcmVwbGllcyIsInN0YXR1cyIsImRhdGEiXSwic291cmNlcyI6WyJ0ZXN0RW52LnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBTaW1wbGlmaWVkIHRlc3RFbnYgdGVzdHMgdG8gcHJldmVudCBoYW5naW5nIGluIHBhcmFsbGVsIGV4ZWN1dGlvblxuY29uc3QgeyBzZXRUZXN0RW52LCBjcmVhdGVTY2hlZHVsZU1vY2ssIGNyZWF0ZVFlcnJvcnNNb2NrLCBjcmVhdGVBeGlvc01vY2sgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL3Rlc3RFbnYnKTtcblxuZGVzY3JpYmUoJ3Rlc3RFbnYgdXRpbGl0aWVzJywgKCkgPT4ge1xuICB0ZXN0KCd0ZXN0RW52IHV0aWxpdGllcyBleGlzdCBhbmQgYXJlIGNhbGxhYmxlJywgKCkgPT4ge1xuICAgIGV4cGVjdCh0eXBlb2Ygc2V0VGVzdEVudikudG9CZSgnZnVuY3Rpb24nKTtcbiAgICBleHBlY3QodHlwZW9mIGNyZWF0ZVNjaGVkdWxlTW9jaykudG9CZSgnZnVuY3Rpb24nKTtcbiAgICBleHBlY3QodHlwZW9mIGNyZWF0ZVFlcnJvcnNNb2NrKS50b0JlKCdmdW5jdGlvbicpO1xuICAgIGV4cGVjdCh0eXBlb2YgY3JlYXRlQXhpb3NNb2NrKS50b0JlKCdmdW5jdGlvbicpO1xuICB9KTtcblxuICB0ZXN0KCdzY2hlZHVsZSBtb2NrIHdvcmtzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNjaGVkdWxlTW9jayA9IGNyZWF0ZVNjaGVkdWxlTW9jaygpO1xuICAgIGNvbnN0IGZuID0gamVzdC5mbigoKSA9PiAnZG9uZScpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNjaGVkdWxlTW9jayhmbik7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZSgnZG9uZScpO1xuICAgIGV4cGVjdCh0eXBlb2Ygc2NoZWR1bGVNb2NrLm1vY2tDbGVhcikudG9CZSgnZnVuY3Rpb24nKTtcbiAgfSk7XG5cbiAgdGVzdCgncWVycm9ycyBtb2NrIHdvcmtzJywgKCkgPT4ge1xuICAgIGNvbnN0IHFlcnJvcnNNb2NrID0gY3JlYXRlUWVycm9yc01vY2soKTtcbiAgICBjb25zdCBhcmdzID0gcWVycm9yc01vY2soJ2VycicsICdjdHgnKTtcbiAgICBleHBlY3QoYXJncykudG9FcXVhbChbJ2VycicsICdjdHgnXSk7XG4gICAgZXhwZWN0KHR5cGVvZiBxZXJyb3JzTW9jay5tb2NrQ2xlYXIpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2F4aW9zIG1vY2sgYmFzaWMgZnVuY3Rpb25hbGl0eScsICgpID0+IHtcbiAgICBjb25zdCBheGlvc01vY2sgPSBjcmVhdGVBeGlvc01vY2soKTtcbiAgICBheGlvc01vY2sub25HZXQoJy90ZXN0JykucmVwbHkoMjAwLCB7IG9rOiB0cnVlIH0pO1xuICAgIGV4cGVjdChheGlvc01vY2suX3JlcGxpZXNbJy90ZXN0J10pLnRvRXF1YWwoeyBzdGF0dXM6IDIwMCwgZGF0YTogeyBvazogdHJ1ZSB9IH0pO1xuICB9KTtcbn0pO1xuXG4iXSwibWFwcGluZ3MiOiJBQUNBO0FBQ0EsTUFBTTtFQUFFQSxVQUFVO0VBQUVDLGtCQUFrQjtFQUFFQyxpQkFBaUI7RUFBRUM7QUFBZ0IsQ0FBQyxHQUFHQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFFMUdDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNO0VBQ2xDQyxJQUFJLENBQUMsMENBQTBDLEVBQUUsTUFBTTtJQUNyREMsTUFBTSxDQUFDLE9BQU9QLFVBQVUsQ0FBQyxDQUFDUSxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzFDRCxNQUFNLENBQUMsT0FBT04sa0JBQWtCLENBQUMsQ0FBQ08sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUNsREQsTUFBTSxDQUFDLE9BQU9MLGlCQUFpQixDQUFDLENBQUNNLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDakRELE1BQU0sQ0FBQyxPQUFPSixlQUFlLENBQUMsQ0FBQ0ssSUFBSSxDQUFDLFVBQVUsQ0FBQztFQUNqRCxDQUFDLENBQUM7RUFFRkYsSUFBSSxDQUFDLHFCQUFxQixFQUFFLFlBQVk7SUFDdEMsTUFBTUcsWUFBWSxHQUFHUixrQkFBa0IsQ0FBQyxDQUFDO0lBQ3pDLE1BQU1TLEVBQUUsR0FBR0MsSUFBSSxDQUFDRCxFQUFFLENBQUMsTUFBTSxNQUFNLENBQUM7SUFDaEMsTUFBTUUsTUFBTSxHQUFHLE1BQU1ILFlBQVksQ0FBQ0MsRUFBRSxDQUFDO0lBQ3JDSCxNQUFNLENBQUNLLE1BQU0sQ0FBQyxDQUFDSixJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzNCRCxNQUFNLENBQUMsT0FBT0UsWUFBWSxDQUFDSSxTQUFTLENBQUMsQ0FBQ0wsSUFBSSxDQUFDLFVBQVUsQ0FBQztFQUN4RCxDQUFDLENBQUM7RUFFRkYsSUFBSSxDQUFDLG9CQUFvQixFQUFFLE1BQU07SUFDL0IsTUFBTVEsV0FBVyxHQUFHWixpQkFBaUIsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU1hLElBQUksR0FBR0QsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUM7SUFDdENQLE1BQU0sQ0FBQ1EsSUFBSSxDQUFDLENBQUNDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwQ1QsTUFBTSxDQUFDLE9BQU9PLFdBQVcsQ0FBQ0QsU0FBUyxDQUFDLENBQUNMLElBQUksQ0FBQyxVQUFVLENBQUM7RUFDdkQsQ0FBQyxDQUFDO0VBRUZGLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxNQUFNO0lBQzNDLE1BQU1XLFNBQVMsR0FBR2QsZUFBZSxDQUFDLENBQUM7SUFDbkNjLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDQyxLQUFLLENBQUMsR0FBRyxFQUFFO01BQUVDLEVBQUUsRUFBRTtJQUFLLENBQUMsQ0FBQztJQUNqRGIsTUFBTSxDQUFDVSxTQUFTLENBQUNJLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDTCxPQUFPLENBQUM7TUFBRU0sTUFBTSxFQUFFLEdBQUc7TUFBRUMsSUFBSSxFQUFFO1FBQUVILEVBQUUsRUFBRTtNQUFLO0lBQUUsQ0FBQyxDQUFDO0VBQ2xGLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==