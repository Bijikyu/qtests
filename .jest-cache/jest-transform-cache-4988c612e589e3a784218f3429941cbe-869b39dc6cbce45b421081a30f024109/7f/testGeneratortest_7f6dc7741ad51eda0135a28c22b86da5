20aba6b6f8a90fc9d6b6d7de4508e0d1
// Simplified TestGenerator test to prevent timeout issues
describe('TestGenerator basic tests', () => {
  test('TestGenerator module loads without errors', () => {
    expect(() => require('../lib/testGenerator')).not.toThrow();
    const {
      TestGenerator
    } = require('../lib/testGenerator');
    expect(TestGenerator).toBeDefined();
    expect(typeof TestGenerator).toBe('function');
  });
  test('CLI script exists', () => {
    const fs = require('fs');
    const path = require('path');
    const cliPath = path.join(__dirname, '..', 'bin', 'qtests-generate');
    expect(fs.existsSync(cliPath)).toBe(true);
  });
  it('should show help when requested', () => {
    const result = execSync('node bin/qtests-generate --help', {
      cwd: path.join(__dirname, '..'),
      encoding: 'utf8',
      stdio: 'pipe'
    });
    expect(result).toContain('USAGE');
    expect(result).toContain('OPTIONS');
    expect(result).toContain('qtests-generate');
  });
  it('should show version when requested', () => {
    const result = execSync('node bin/qtests-generate --version', {
      cwd: path.join(__dirname, '..'),
      encoding: 'utf8',
      stdio: 'pipe'
    });
    expect(result).toContain('qtests v');
  });
});
describe('TestGenerator Content Generation', () => {
  it('should generate unit test content', () => {
    const generator = new TestGenerator();
    const exports = ['calculate', 'Calculator'];
    const usesQtests = false;
    const mocks = ['axios'];
    const testContent = generator.createUnitTest('calculator.js', exports, usesQtests, mocks);
    expect(testContent).toContain('calculate');
    expect(testContent).toContain('Calculator');
    expect(testContent).toContain('describe');
  });
  it('should generate API test content', () => {
    const generator = new TestGenerator();
    const method = 'get';
    const route = '/api/users';
    const testContent = generator.createApiTest(method, route);
    expect(testContent).toContain('/api/users');
    expect(testContent).toContain('GET');
    expect(testContent).toContain('request');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsInRlc3QiLCJleHBlY3QiLCJyZXF1aXJlIiwibm90IiwidG9UaHJvdyIsIlRlc3RHZW5lcmF0b3IiLCJ0b0JlRGVmaW5lZCIsInRvQmUiLCJmcyIsInBhdGgiLCJjbGlQYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsImV4aXN0c1N5bmMiLCJpdCIsInJlc3VsdCIsImV4ZWNTeW5jIiwiY3dkIiwiZW5jb2RpbmciLCJzdGRpbyIsInRvQ29udGFpbiIsImdlbmVyYXRvciIsImV4cG9ydHMiLCJ1c2VzUXRlc3RzIiwibW9ja3MiLCJ0ZXN0Q29udGVudCIsImNyZWF0ZVVuaXRUZXN0IiwibWV0aG9kIiwicm91dGUiLCJjcmVhdGVBcGlUZXN0Il0sInNvdXJjZXMiOlsidGVzdEdlbmVyYXRvci50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNpbXBsaWZpZWQgVGVzdEdlbmVyYXRvciB0ZXN0IHRvIHByZXZlbnQgdGltZW91dCBpc3N1ZXNcbmRlc2NyaWJlKCdUZXN0R2VuZXJhdG9yIGJhc2ljIHRlc3RzJywgKCkgPT4ge1xuICB0ZXN0KCdUZXN0R2VuZXJhdG9yIG1vZHVsZSBsb2FkcyB3aXRob3V0IGVycm9ycycsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4gcmVxdWlyZSgnLi4vbGliL3Rlc3RHZW5lcmF0b3InKSkubm90LnRvVGhyb3coKTtcbiAgICBjb25zdCB7IFRlc3RHZW5lcmF0b3IgfSA9IHJlcXVpcmUoJy4uL2xpYi90ZXN0R2VuZXJhdG9yJyk7XG4gICAgZXhwZWN0KFRlc3RHZW5lcmF0b3IpLnRvQmVEZWZpbmVkKCk7XG4gICAgZXhwZWN0KHR5cGVvZiBUZXN0R2VuZXJhdG9yKS50b0JlKCdmdW5jdGlvbicpO1xuICB9KTtcblxuICB0ZXN0KCdDTEkgc2NyaXB0IGV4aXN0cycsICgpID0+IHtcbiAgICBjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gICAgY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbiAgICBjb25zdCBjbGlQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJ2JpbicsICdxdGVzdHMtZ2VuZXJhdGUnKTtcbiAgICBleHBlY3QoZnMuZXhpc3RzU3luYyhjbGlQYXRoKSkudG9CZSh0cnVlKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzaG93IGhlbHAgd2hlbiByZXF1ZXN0ZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gZXhlY1N5bmMoJ25vZGUgYmluL3F0ZXN0cy1nZW5lcmF0ZSAtLWhlbHAnLCB7IFxuICAgICAgY3dkOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nKSxcbiAgICAgIGVuY29kaW5nOiAndXRmOCcsXG4gICAgICBzdGRpbzogJ3BpcGUnXG4gICAgfSk7XG4gICAgXG4gICAgZXhwZWN0KHJlc3VsdCkudG9Db250YWluKCdVU0FHRScpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbignT1BUSU9OUycpO1xuICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbigncXRlc3RzLWdlbmVyYXRlJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgc2hvdyB2ZXJzaW9uIHdoZW4gcmVxdWVzdGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGV4ZWNTeW5jKCdub2RlIGJpbi9xdGVzdHMtZ2VuZXJhdGUgLS12ZXJzaW9uJywgeyBcbiAgICAgIGN3ZDogcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJyksXG4gICAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICAgICAgc3RkaW86ICdwaXBlJ1xuICAgIH0pO1xuICAgIFxuICAgIGV4cGVjdChyZXN1bHQpLnRvQ29udGFpbigncXRlc3RzIHYnKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ1Rlc3RHZW5lcmF0b3IgQ29udGVudCBHZW5lcmF0aW9uJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGdlbmVyYXRlIHVuaXQgdGVzdCBjb250ZW50JywgKCkgPT4ge1xuICAgIGNvbnN0IGdlbmVyYXRvciA9IG5ldyBUZXN0R2VuZXJhdG9yKCk7XG4gICAgY29uc3QgZXhwb3J0cyA9IFsnY2FsY3VsYXRlJywgJ0NhbGN1bGF0b3InXTtcbiAgICBjb25zdCB1c2VzUXRlc3RzID0gZmFsc2U7XG4gICAgY29uc3QgbW9ja3MgPSBbJ2F4aW9zJ107XG4gICAgXG4gICAgY29uc3QgdGVzdENvbnRlbnQgPSBnZW5lcmF0b3IuY3JlYXRlVW5pdFRlc3QoJ2NhbGN1bGF0b3IuanMnLCBleHBvcnRzLCB1c2VzUXRlc3RzLCBtb2Nrcyk7XG4gICAgXG4gICAgZXhwZWN0KHRlc3RDb250ZW50KS50b0NvbnRhaW4oJ2NhbGN1bGF0ZScpO1xuICAgIGV4cGVjdCh0ZXN0Q29udGVudCkudG9Db250YWluKCdDYWxjdWxhdG9yJyk7XG4gICAgZXhwZWN0KHRlc3RDb250ZW50KS50b0NvbnRhaW4oJ2Rlc2NyaWJlJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2VuZXJhdGUgQVBJIHRlc3QgY29udGVudCcsICgpID0+IHtcbiAgICBjb25zdCBnZW5lcmF0b3IgPSBuZXcgVGVzdEdlbmVyYXRvcigpO1xuICAgIGNvbnN0IG1ldGhvZCA9ICdnZXQnO1xuICAgIGNvbnN0IHJvdXRlID0gJy9hcGkvdXNlcnMnO1xuICAgIFxuICAgIGNvbnN0IHRlc3RDb250ZW50ID0gZ2VuZXJhdG9yLmNyZWF0ZUFwaVRlc3QobWV0aG9kLCByb3V0ZSk7XG4gICAgXG4gICAgZXhwZWN0KHRlc3RDb250ZW50KS50b0NvbnRhaW4oJy9hcGkvdXNlcnMnKTtcbiAgICBleHBlY3QodGVzdENvbnRlbnQpLnRvQ29udGFpbignR0VUJyk7XG4gICAgZXhwZWN0KHRlc3RDb250ZW50KS50b0NvbnRhaW4oJ3JlcXVlc3QnKTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0FBLFFBQVEsQ0FBQywyQkFBMkIsRUFBRSxNQUFNO0VBQzFDQyxJQUFJLENBQUMsMkNBQTJDLEVBQUUsTUFBTTtJQUN0REMsTUFBTSxDQUFDLE1BQU1DLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUNDLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLENBQUM7SUFDM0QsTUFBTTtNQUFFQztJQUFjLENBQUMsR0FBR0gsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0lBQ3pERCxNQUFNLENBQUNJLGFBQWEsQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQztJQUNuQ0wsTUFBTSxDQUFDLE9BQU9JLGFBQWEsQ0FBQyxDQUFDRSxJQUFJLENBQUMsVUFBVSxDQUFDO0VBQy9DLENBQUMsQ0FBQztFQUVGUCxJQUFJLENBQUMsbUJBQW1CLEVBQUUsTUFBTTtJQUM5QixNQUFNUSxFQUFFLEdBQUdOLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDeEIsTUFBTU8sSUFBSSxHQUFHUCxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQzVCLE1BQU1RLE9BQU8sR0FBR0QsSUFBSSxDQUFDRSxJQUFJLENBQUNDLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixDQUFDO0lBQ3BFWCxNQUFNLENBQUNPLEVBQUUsQ0FBQ0ssVUFBVSxDQUFDSCxPQUFPLENBQUMsQ0FBQyxDQUFDSCxJQUFJLENBQUMsSUFBSSxDQUFDO0VBQzNDLENBQUMsQ0FBQztFQUVGTyxFQUFFLENBQUMsaUNBQWlDLEVBQUUsTUFBTTtJQUMxQyxNQUFNQyxNQUFNLEdBQUdDLFFBQVEsQ0FBQyxpQ0FBaUMsRUFBRTtNQUN6REMsR0FBRyxFQUFFUixJQUFJLENBQUNFLElBQUksQ0FBQ0MsU0FBUyxFQUFFLElBQUksQ0FBQztNQUMvQk0sUUFBUSxFQUFFLE1BQU07TUFDaEJDLEtBQUssRUFBRTtJQUNULENBQUMsQ0FBQztJQUVGbEIsTUFBTSxDQUFDYyxNQUFNLENBQUMsQ0FBQ0ssU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNqQ25CLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDLENBQUNLLFNBQVMsQ0FBQyxTQUFTLENBQUM7SUFDbkNuQixNQUFNLENBQUNjLE1BQU0sQ0FBQyxDQUFDSyxTQUFTLENBQUMsaUJBQWlCLENBQUM7RUFDN0MsQ0FBQyxDQUFDO0VBRUZOLEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRSxNQUFNO0lBQzdDLE1BQU1DLE1BQU0sR0FBR0MsUUFBUSxDQUFDLG9DQUFvQyxFQUFFO01BQzVEQyxHQUFHLEVBQUVSLElBQUksQ0FBQ0UsSUFBSSxDQUFDQyxTQUFTLEVBQUUsSUFBSSxDQUFDO01BQy9CTSxRQUFRLEVBQUUsTUFBTTtNQUNoQkMsS0FBSyxFQUFFO0lBQ1QsQ0FBQyxDQUFDO0lBRUZsQixNQUFNLENBQUNjLE1BQU0sQ0FBQyxDQUFDSyxTQUFTLENBQUMsVUFBVSxDQUFDO0VBQ3RDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGckIsUUFBUSxDQUFDLGtDQUFrQyxFQUFFLE1BQU07RUFDakRlLEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRSxNQUFNO0lBQzVDLE1BQU1PLFNBQVMsR0FBRyxJQUFJaEIsYUFBYSxDQUFDLENBQUM7SUFDckMsTUFBTWlCLE9BQU8sR0FBRyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUM7SUFDM0MsTUFBTUMsVUFBVSxHQUFHLEtBQUs7SUFDeEIsTUFBTUMsS0FBSyxHQUFHLENBQUMsT0FBTyxDQUFDO0lBRXZCLE1BQU1DLFdBQVcsR0FBR0osU0FBUyxDQUFDSyxjQUFjLENBQUMsZUFBZSxFQUFFSixPQUFPLEVBQUVDLFVBQVUsRUFBRUMsS0FBSyxDQUFDO0lBRXpGdkIsTUFBTSxDQUFDd0IsV0FBVyxDQUFDLENBQUNMLFNBQVMsQ0FBQyxXQUFXLENBQUM7SUFDMUNuQixNQUFNLENBQUN3QixXQUFXLENBQUMsQ0FBQ0wsU0FBUyxDQUFDLFlBQVksQ0FBQztJQUMzQ25CLE1BQU0sQ0FBQ3dCLFdBQVcsQ0FBQyxDQUFDTCxTQUFTLENBQUMsVUFBVSxDQUFDO0VBQzNDLENBQUMsQ0FBQztFQUVGTixFQUFFLENBQUMsa0NBQWtDLEVBQUUsTUFBTTtJQUMzQyxNQUFNTyxTQUFTLEdBQUcsSUFBSWhCLGFBQWEsQ0FBQyxDQUFDO0lBQ3JDLE1BQU1zQixNQUFNLEdBQUcsS0FBSztJQUNwQixNQUFNQyxLQUFLLEdBQUcsWUFBWTtJQUUxQixNQUFNSCxXQUFXLEdBQUdKLFNBQVMsQ0FBQ1EsYUFBYSxDQUFDRixNQUFNLEVBQUVDLEtBQUssQ0FBQztJQUUxRDNCLE1BQU0sQ0FBQ3dCLFdBQVcsQ0FBQyxDQUFDTCxTQUFTLENBQUMsWUFBWSxDQUFDO0lBQzNDbkIsTUFBTSxDQUFDd0IsV0FBVyxDQUFDLENBQUNMLFNBQVMsQ0FBQyxLQUFLLENBQUM7SUFDcENuQixNQUFNLENBQUN3QixXQUFXLENBQUMsQ0FBQ0wsU0FBUyxDQUFDLFNBQVMsQ0FBQztFQUMxQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=