db5eb688275753f0f105f9a3e084ebe0
const index = require('..'); // (load main exports)
const directStubMethod = require('../utils/stubMethod'); // (direct stubMethod for comparison)
const {
  mockConsole: directMockConsole
} = require('../utils/mockConsole'); // (direct mockConsole for comparison)
const {
  withMockConsole
} = require('../utils/testHelpers'); //(helper for console spies)

// Jest-style test verifying export presence
test('index exports expected modules', () => {
  expect(typeof index.stubMethod).toBe('function'); // (stubMethod export must be a function)
  expect(typeof index.mockConsole).toBe('function'); // (mockConsole export must be a function)
  expect(typeof index.testEnv).toBe('object'); // (testEnv export should be an object)
  expect(typeof index.setup).toBe('function'); // (setup export is a callable helper)
  expect(typeof index.stubs).toBe('object'); // (stubs namespace object)
  expect(typeof index.stubs.axios).toBe('object'); // (axios stub object)
  expect(typeof index.stubs.winston).toBe('object'); // (winston stub object)
});

// Verify stubMethod behaves same via index
test('stubMethod via index works like direct import', () => {
  const obj = {
    greet: () => 'hello'
  }; // (sample object with method)
  const restore = index.stubMethod(obj, 'greet', () => 'stub'); // (use index export)
  const result = obj.greet(); // (call stubbed method)
  restore(); // (restore original)
  expect(result).toBe('stub'); // (stubbed call result)
  expect(obj.greet()).toBe('hello'); // (restoration check)
  expect(index.stubMethod).toBe(directStubMethod); // (same function reference)
});

// Verify mockConsole behaves same via index
test('mockConsole via index works like direct import', () => withMockConsole('log', spy => {
  //(use helper for spy lifecycle)
  console.log('test'); // (emit log to be captured)
  expect(spy.mock.calls.length).toBe(3); // (expect creation log and test log)
  expect(spy.mock.calls[2][0]).toBe('test'); // (verify captured argument)
  expect(index.mockConsole).toBe(directMockConsole); // (same function reference)
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbmRleCIsInJlcXVpcmUiLCJkaXJlY3RTdHViTWV0aG9kIiwibW9ja0NvbnNvbGUiLCJkaXJlY3RNb2NrQ29uc29sZSIsIndpdGhNb2NrQ29uc29sZSIsInRlc3QiLCJleHBlY3QiLCJzdHViTWV0aG9kIiwidG9CZSIsInRlc3RFbnYiLCJzZXR1cCIsInN0dWJzIiwiYXhpb3MiLCJ3aW5zdG9uIiwib2JqIiwiZ3JlZXQiLCJyZXN0b3JlIiwicmVzdWx0Iiwic3B5IiwiY29uc29sZSIsImxvZyIsIm1vY2siLCJjYWxscyIsImxlbmd0aCJdLCJzb3VyY2VzIjpbImluZGV4RXhwb3J0cy50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuLicpOyAvLyAobG9hZCBtYWluIGV4cG9ydHMpXG5jb25zdCBkaXJlY3RTdHViTWV0aG9kID0gcmVxdWlyZSgnLi4vdXRpbHMvc3R1Yk1ldGhvZCcpOyAvLyAoZGlyZWN0IHN0dWJNZXRob2QgZm9yIGNvbXBhcmlzb24pXG5jb25zdCB7IG1vY2tDb25zb2xlOiBkaXJlY3RNb2NrQ29uc29sZSB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvbW9ja0NvbnNvbGUnKTsgLy8gKGRpcmVjdCBtb2NrQ29uc29sZSBmb3IgY29tcGFyaXNvbilcbmNvbnN0IHsgd2l0aE1vY2tDb25zb2xlIH0gPSByZXF1aXJlKCcuLi91dGlscy90ZXN0SGVscGVycycpOyAvLyhoZWxwZXIgZm9yIGNvbnNvbGUgc3BpZXMpXG5cbi8vIEplc3Qtc3R5bGUgdGVzdCB2ZXJpZnlpbmcgZXhwb3J0IHByZXNlbmNlXG4gdGVzdCgnaW5kZXggZXhwb3J0cyBleHBlY3RlZCBtb2R1bGVzJywgKCkgPT4ge1xuICBleHBlY3QodHlwZW9mIGluZGV4LnN0dWJNZXRob2QpLnRvQmUoJ2Z1bmN0aW9uJyk7IC8vIChzdHViTWV0aG9kIGV4cG9ydCBtdXN0IGJlIGEgZnVuY3Rpb24pXG4gIGV4cGVjdCh0eXBlb2YgaW5kZXgubW9ja0NvbnNvbGUpLnRvQmUoJ2Z1bmN0aW9uJyk7IC8vIChtb2NrQ29uc29sZSBleHBvcnQgbXVzdCBiZSBhIGZ1bmN0aW9uKVxuICBleHBlY3QodHlwZW9mIGluZGV4LnRlc3RFbnYpLnRvQmUoJ29iamVjdCcpOyAvLyAodGVzdEVudiBleHBvcnQgc2hvdWxkIGJlIGFuIG9iamVjdClcbiAgZXhwZWN0KHR5cGVvZiBpbmRleC5zZXR1cCkudG9CZSgnZnVuY3Rpb24nKTsgLy8gKHNldHVwIGV4cG9ydCBpcyBhIGNhbGxhYmxlIGhlbHBlcilcbiAgZXhwZWN0KHR5cGVvZiBpbmRleC5zdHVicykudG9CZSgnb2JqZWN0Jyk7IC8vIChzdHVicyBuYW1lc3BhY2Ugb2JqZWN0KVxuICBleHBlY3QodHlwZW9mIGluZGV4LnN0dWJzLmF4aW9zKS50b0JlKCdvYmplY3QnKTsgLy8gKGF4aW9zIHN0dWIgb2JqZWN0KVxuICBleHBlY3QodHlwZW9mIGluZGV4LnN0dWJzLndpbnN0b24pLnRvQmUoJ29iamVjdCcpOyAvLyAod2luc3RvbiBzdHViIG9iamVjdClcbn0pO1xuXG4vLyBWZXJpZnkgc3R1Yk1ldGhvZCBiZWhhdmVzIHNhbWUgdmlhIGluZGV4XG4gdGVzdCgnc3R1Yk1ldGhvZCB2aWEgaW5kZXggd29ya3MgbGlrZSBkaXJlY3QgaW1wb3J0JywgKCkgPT4ge1xuICBjb25zdCBvYmogPSB7IGdyZWV0OiAoKSA9PiAnaGVsbG8nIH07IC8vIChzYW1wbGUgb2JqZWN0IHdpdGggbWV0aG9kKVxuICBjb25zdCByZXN0b3JlID0gaW5kZXguc3R1Yk1ldGhvZChvYmosICdncmVldCcsICgpID0+ICdzdHViJyk7IC8vICh1c2UgaW5kZXggZXhwb3J0KVxuICBjb25zdCByZXN1bHQgPSBvYmouZ3JlZXQoKTsgLy8gKGNhbGwgc3R1YmJlZCBtZXRob2QpXG4gIHJlc3RvcmUoKTsgLy8gKHJlc3RvcmUgb3JpZ2luYWwpXG4gIGV4cGVjdChyZXN1bHQpLnRvQmUoJ3N0dWInKTsgLy8gKHN0dWJiZWQgY2FsbCByZXN1bHQpXG4gIGV4cGVjdChvYmouZ3JlZXQoKSkudG9CZSgnaGVsbG8nKTsgLy8gKHJlc3RvcmF0aW9uIGNoZWNrKVxuICBleHBlY3QoaW5kZXguc3R1Yk1ldGhvZCkudG9CZShkaXJlY3RTdHViTWV0aG9kKTsgLy8gKHNhbWUgZnVuY3Rpb24gcmVmZXJlbmNlKVxufSk7XG5cbi8vIFZlcmlmeSBtb2NrQ29uc29sZSBiZWhhdmVzIHNhbWUgdmlhIGluZGV4XG50ZXN0KCdtb2NrQ29uc29sZSB2aWEgaW5kZXggd29ya3MgbGlrZSBkaXJlY3QgaW1wb3J0JywgKCkgPT4gd2l0aE1vY2tDb25zb2xlKCdsb2cnLCBzcHkgPT4geyAvLyh1c2UgaGVscGVyIGZvciBzcHkgbGlmZWN5Y2xlKVxuICBjb25zb2xlLmxvZygndGVzdCcpOyAvLyAoZW1pdCBsb2cgdG8gYmUgY2FwdHVyZWQpXG4gIGV4cGVjdChzcHkubW9jay5jYWxscy5sZW5ndGgpLnRvQmUoMyk7IC8vIChleHBlY3QgY3JlYXRpb24gbG9nIGFuZCB0ZXN0IGxvZylcbiAgZXhwZWN0KHNweS5tb2NrLmNhbGxzWzJdWzBdKS50b0JlKCd0ZXN0Jyk7IC8vICh2ZXJpZnkgY2FwdHVyZWQgYXJndW1lbnQpXG4gIGV4cGVjdChpbmRleC5tb2NrQ29uc29sZSkudG9CZShkaXJlY3RNb2NrQ29uc29sZSk7IC8vIChzYW1lIGZ1bmN0aW9uIHJlZmVyZW5jZSlcbn0pKTtcblxuIl0sIm1hcHBpbmdzIjoiQUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzdCLE1BQU1DLGdCQUFnQixHQUFHRCxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0FBQ3pELE1BQU07RUFBRUUsV0FBVyxFQUFFQztBQUFrQixDQUFDLEdBQUdILE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7QUFDNUUsTUFBTTtFQUFFSTtBQUFnQixDQUFDLEdBQUdKLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7O0FBRTdEO0FBQ0NL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