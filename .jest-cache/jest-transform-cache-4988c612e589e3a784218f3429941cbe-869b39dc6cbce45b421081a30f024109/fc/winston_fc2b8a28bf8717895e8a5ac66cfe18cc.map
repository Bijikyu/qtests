{"version":3,"names":["noop","winstonStub","createLogger","error","warn","info","format","combine","timestamp","errors","splat","json","printf","transports","File","Console","module","exports"],"sources":["winston.js"],"sourcesContent":["/**\n * Winston Logging Library Stub for Testing\n * \n * This module provides a complete no-op replacement for the winston logging\n * library. When tests require('winston') after qtests/setup, they get this\n * stub instead of real winston, preventing log output during test execution.\n * \n * Design philosophy:\n * - Complete interface coverage: implements all commonly used winston APIs\n * - Silent operation: no console output or file writing\n * - Memory efficient: no log storage or processing\n * - Fast execution: all operations are no-ops\n * \n * Why stub winston specifically:\n * - Extremely popular logging library in Node.js ecosystem\n * - Log output pollutes test output and makes debugging harder\n * - File logging during tests can cause permission issues\n * - Tests should focus on business logic, not logging side effects\n * \n * Implementation strategy:\n * - Mirror winston's API structure exactly\n * - All functions are no-ops (do nothing, return nothing meaningful)\n * - Maintain object structure for property access compatibility\n * - No state storage to keep memory usage minimal\n */\n\nconst noop = () => {}; // shared no-op function for all stub methods\n\nconst winstonStub = {\n  /**\n   * Creates a no-op logger instance\n   * \n   * This replaces winston.createLogger() with a function that returns\n   * an object containing silent implementations of all common logging methods.\n   * \n   * Why return an object with methods:\n   * - Code expects to call logger.info(), logger.error(), etc.\n   * - Must provide these methods to prevent \"function not found\" errors\n   * - All methods are no-ops to eliminate log output\n   * \n   * Method selection:\n   * - error, warn, info: Most common logging levels\n   * - Can be extended with debug, verbose, silly, etc. as needed\n   * - Each method accepts any arguments but does nothing\n   * \n   * @returns {Object} Logger-like object with no-op logging methods\n   */\n  createLogger: () => ({\n    /**\n     * No-op error logging\n     * Replaces logger.error() calls with silent operation\n     * @param {...any} args - Any logging arguments (ignored)\n     */\n    error: noop, // Silent - no error output during tests\n\n    /**\n     * No-op warning logging  \n     * Replaces logger.warn() calls with silent operation\n     * @param {...any} args - Any logging arguments (ignored)\n     */\n    warn: noop,  // Silent - no warning output during tests\n\n    /**\n     * No-op info logging\n     * Replaces logger.info() calls with silent operation\n     * @param {...any} args - Any logging arguments (ignored)\n     */\n    info: noop   // Silent - no info output during tests\n  }),\n\n  /**\n   * Winston format utilities stub\n   * \n   * Winston's format object provides utilities for formatting log messages.\n   * This stub provides no-op implementations of the most commonly used\n   * formatting functions to prevent errors when code configures loggers.\n   * \n   * Why stub format utilities:\n   * - Logger configuration often chains format calls\n   * - Code like winston.format.combine(winston.format.timestamp()) is common\n   * - Without stubs, these calls would throw \"function not found\" errors\n   * - No-op implementations allow configuration code to run without effect\n   */\n  format: {\n    /**\n     * No-op format combiner\n     * Replaces winston.format.combine() for chaining formatters\n     * @returns {Function} No-op function\n     */\n    combine: noop,    // Silent - no format combination\n\n    /**\n     * No-op timestamp formatter\n     * Replaces winston.format.timestamp() for adding timestamps\n     * @returns {Function} No-op function  \n     */\n    timestamp: noop,  // Silent - no timestamp formatting\n\n    /**\n     * No-op error formatter\n     * Replaces winston.format.errors() for error object formatting\n     * @returns {Function} No-op function\n     */\n    errors: noop,     // Silent - no error formatting\n\n    /**\n     * No-op splat formatter\n     * Replaces winston.format.splat() for string interpolation\n     * @returns {Function} No-op function\n     */\n    splat: noop,      // Silent - no string interpolation\n\n    /**\n     * No-op JSON formatter\n     * Replaces winston.format.json() for JSON output formatting\n     * @returns {Function} No-op function\n     */\n    json: noop,       // Silent - no JSON formatting\n\n    /**\n     * No-op printf formatter\n     * Replaces winston.format.printf() for custom formatting\n     * @returns {Function} No-op function\n     */\n    printf: noop      // Silent - no custom formatting\n  },\n\n  /**\n   * Winston transport utilities stub\n   * \n   * Winston transports define where log messages go (files, console, etc.).\n   * This stub provides no-op constructor functions for the most common\n   * transport types to prevent errors during logger configuration.\n   * \n   * Why stub transports:\n   * - Logger configuration typically specifies output destinations\n   * - Code like new winston.transports.File({filename: 'app.log'}) is common\n   * - Without stubs, transport construction would fail\n   * - No-op constructors allow configuration without creating real outputs\n   */\n  transports: {\n    /**\n     * No-op file transport constructor\n     * Replaces winston.transports.File for file logging configuration\n     * @param {Object} options - Transport configuration (ignored)\n     */\n    File: noop,    // Silent - no file transport creation\n\n    /**\n     * No-op console transport constructor  \n     * Replaces winston.transports.Console for console logging configuration\n     * @param {Object} options - Transport configuration (ignored)\n     */\n    Console: noop  // Silent - no console transport creation\n  }\n};\n\nmodule.exports = winstonStub;\n\n/**\n * Usage in tests:\n * \n * After requiring 'qtests/setup', any code that does:\n *   const winston = require('winston');\n *   const logger = winston.createLogger({\n *     format: winston.format.combine(\n *       winston.format.timestamp(),\n *       winston.format.json()\n *     ),\n *     transports: [\n *       new winston.transports.File({ filename: 'app.log' })\n *     ]\n *   });\n *   logger.info('Test message');\n * \n * Will use this stub instead, which:\n * - Creates a silent logger that outputs nothing\n * - Allows all configuration calls to succeed\n * - Prevents any file I/O or console output\n * - Maintains the same API surface as real winston\n * \n * This enables testing of logging-dependent code without log pollution.\n */"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGA,CAAA,KAAM,CAAC,CAAC,CAAC,CAAC;;AAEvB,MAAMC,WAAW,GAAG;EAClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,YAAY,EAAEA,CAAA,MAAO;IACnB;AACJ;AACA;AACA;AACA;IACIC,KAAK,EAAEH,IAAI;IAAE;;IAEb;AACJ;AACA;AACA;AACA;IACII,IAAI,EAAEJ,IAAI;IAAG;;IAEb;AACJ;AACA;AACA;AACA;IACIK,IAAI,EAAEL,IAAI,CAAG;EACf,CAAC,CAAC;EAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEM,MAAM,EAAE;IACN;AACJ;AACA;AACA;AACA;IACIC,OAAO,EAAEP,IAAI;IAAK;;IAElB;AACJ;AACA;AACA;AACA;IACIQ,SAAS,EAAER,IAAI;IAAG;;IAElB;AACJ;AACA;AACA;AACA;IACIS,MAAM,EAAET,IAAI;IAAM;;IAElB;AACJ;AACA;AACA;AACA;IACIU,KAAK,EAAEV,IAAI;IAAO;;IAElB;AACJ;AACA;AACA;AACA;IACIW,IAAI,EAAEX,IAAI;IAAQ;;IAElB;AACJ;AACA;AACA;AACA;IACIY,MAAM,EAAEZ,IAAI,CAAM;EACpB,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEa,UAAU,EAAE;IACV;AACJ;AACA;AACA;AACA;IACIC,IAAI,EAAEd,IAAI;IAAK;;IAEf;AACJ;AACA;AACA;AACA;IACIe,OAAO,EAAEf,IAAI,CAAE;EACjB;AACF,CAAC;AAEDgB,MAAM,CAACC,OAAO,GAAGhB,WAAW;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]}