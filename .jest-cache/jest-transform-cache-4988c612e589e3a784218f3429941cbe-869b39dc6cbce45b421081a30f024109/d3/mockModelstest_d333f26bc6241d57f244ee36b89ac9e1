9a7a02028c0878a6bcb7a5558de7e529
/**
 * Mock Models Integration Tests - Focused functionality verification
 */

const {
  BaseMockModel,
  ApiKey,
  createMockModel,
  resetAllCollections
} = require('../utils/mockModels');
describe('Mock Models Integration', () => {
  beforeEach(() => {
    resetAllCollections();
  });
  test('BaseMockModel creates and saves instances', async () => {
    const TestModel = createMockModel('TestModel');
    const instance = new TestModel({
      name: 'test',
      value: 123
    });
    expect(instance.name).toBe('test');
    expect(instance._id).toBeDefined();
    const saved = await instance.save();
    expect(saved).toBe(instance);
    expect(TestModel.getCollection()).toHaveLength(1);
  });
  test('ApiKey model works correctly', () => {
    const apiKey = new ApiKey({
      key: 'test-key',
      name: 'Test API Key',
      permissions: ['read', 'write']
    });
    expect(apiKey.key).toBe('test-key');
    expect(apiKey.name).toBe('Test API Key');
    expect(apiKey.permissions).toEqual(['read', 'write']);
    expect(apiKey._id).toBeDefined();
  });
  test('resetAllCollections clears data', async () => {
    const TestModel = createMockModel('TestModel');
    await new TestModel({
      name: 'test'
    }).save();
    expect(TestModel.getCollection()).toHaveLength(1);
    resetAllCollections();
    expect(TestModel.getCollection()).toHaveLength(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCYXNlTW9ja01vZGVsIiwiQXBpS2V5IiwiY3JlYXRlTW9ja01vZGVsIiwicmVzZXRBbGxDb2xsZWN0aW9ucyIsInJlcXVpcmUiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJ0ZXN0IiwiVGVzdE1vZGVsIiwiaW5zdGFuY2UiLCJuYW1lIiwidmFsdWUiLCJleHBlY3QiLCJ0b0JlIiwiX2lkIiwidG9CZURlZmluZWQiLCJzYXZlZCIsInNhdmUiLCJnZXRDb2xsZWN0aW9uIiwidG9IYXZlTGVuZ3RoIiwiYXBpS2V5Iiwia2V5IiwicGVybWlzc2lvbnMiLCJ0b0VxdWFsIl0sInNvdXJjZXMiOlsibW9ja01vZGVscy50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9jayBNb2RlbHMgSW50ZWdyYXRpb24gVGVzdHMgLSBGb2N1c2VkIGZ1bmN0aW9uYWxpdHkgdmVyaWZpY2F0aW9uXG4gKi9cblxuY29uc3Qge1xuICBCYXNlTW9ja01vZGVsLFxuICBBcGlLZXksXG4gIGNyZWF0ZU1vY2tNb2RlbCxcbiAgcmVzZXRBbGxDb2xsZWN0aW9uc1xufSA9IHJlcXVpcmUoJy4uL3V0aWxzL21vY2tNb2RlbHMnKTtcblxuZGVzY3JpYmUoJ01vY2sgTW9kZWxzIEludGVncmF0aW9uJywgKCkgPT4ge1xuICBcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgcmVzZXRBbGxDb2xsZWN0aW9ucygpO1xuICB9KTtcbiAgXG4gIHRlc3QoJ0Jhc2VNb2NrTW9kZWwgY3JlYXRlcyBhbmQgc2F2ZXMgaW5zdGFuY2VzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IFRlc3RNb2RlbCA9IGNyZWF0ZU1vY2tNb2RlbCgnVGVzdE1vZGVsJyk7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgVGVzdE1vZGVsKHsgbmFtZTogJ3Rlc3QnLCB2YWx1ZTogMTIzIH0pO1xuICAgIFxuICAgIGV4cGVjdChpbnN0YW5jZS5uYW1lKS50b0JlKCd0ZXN0Jyk7XG4gICAgZXhwZWN0KGluc3RhbmNlLl9pZCkudG9CZURlZmluZWQoKTtcbiAgICBcbiAgICBjb25zdCBzYXZlZCA9IGF3YWl0IGluc3RhbmNlLnNhdmUoKTtcbiAgICBleHBlY3Qoc2F2ZWQpLnRvQmUoaW5zdGFuY2UpO1xuICAgIGV4cGVjdChUZXN0TW9kZWwuZ2V0Q29sbGVjdGlvbigpKS50b0hhdmVMZW5ndGgoMSk7XG4gIH0pO1xuICBcbiAgdGVzdCgnQXBpS2V5IG1vZGVsIHdvcmtzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCBhcGlLZXkgPSBuZXcgQXBpS2V5KHsgXG4gICAgICBrZXk6ICd0ZXN0LWtleScsIFxuICAgICAgbmFtZTogJ1Rlc3QgQVBJIEtleScsXG4gICAgICBwZXJtaXNzaW9uczogWydyZWFkJywgJ3dyaXRlJ11cbiAgICB9KTtcbiAgICBcbiAgICBleHBlY3QoYXBpS2V5LmtleSkudG9CZSgndGVzdC1rZXknKTtcbiAgICBleHBlY3QoYXBpS2V5Lm5hbWUpLnRvQmUoJ1Rlc3QgQVBJIEtleScpO1xuICAgIGV4cGVjdChhcGlLZXkucGVybWlzc2lvbnMpLnRvRXF1YWwoWydyZWFkJywgJ3dyaXRlJ10pO1xuICAgIGV4cGVjdChhcGlLZXkuX2lkKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICB0ZXN0KCdyZXNldEFsbENvbGxlY3Rpb25zIGNsZWFycyBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IFRlc3RNb2RlbCA9IGNyZWF0ZU1vY2tNb2RlbCgnVGVzdE1vZGVsJyk7XG4gICAgYXdhaXQgbmV3IFRlc3RNb2RlbCh7IG5hbWU6ICd0ZXN0JyB9KS5zYXZlKCk7XG4gICAgXG4gICAgZXhwZWN0KFRlc3RNb2RlbC5nZXRDb2xsZWN0aW9uKCkpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICBcbiAgICByZXNldEFsbENvbGxlY3Rpb25zKCk7XG4gICAgZXhwZWN0KFRlc3RNb2RlbC5nZXRDb2xsZWN0aW9uKCkpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3Mi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