{"version":3,"names":["TestGenerator","require","fs","path","execSync","describe","it","defaultGen","expect","config","SRC_DIR","toBe","TEST_DIR","KNOWN_MOCKS","toContain","VALID_EXTS","customGen","uniqueId","process","hrtime","bigint","Math","random","toString","substr","tempDir","join","__dirname","mkdirSync","recursive","srcDir","writeFileSync","generator","files","walk","length","toBeGreaterThanOrEqual","some","f","endsWith","rmSync","force","cliPath","existsSync","stats","statSync","mode","toBeTruthy","result","cwd","encoding","stdio","exports","usesQtests","mocks","testContent","createUnitTest","method","route","createApiTest"],"sources":["testGenerator.test.js"],"sourcesContent":["/**\n * Test Suite for Test Generator\n * \n * Comprehensive testing of the TestGenerator class and CLI functionality.\n * Tests file scanning, code analysis, test generation, and CLI interface.\n */\n\nconst { TestGenerator } = require('../lib/testGenerator');\nconst fs = require('fs');\nconst path = require('path');\nconst { execSync } = require('child_process');\n\ndescribe('TestGenerator Configuration', () => {\n  it('should use default configuration', () => {\n    const defaultGen = new TestGenerator();\n    expect(defaultGen.config.SRC_DIR).toBe('src');\n    expect(defaultGen.config.TEST_DIR).toBe('tests/integration');\n    expect(defaultGen.config.KNOWN_MOCKS).toContain('axios');\n    expect(defaultGen.config.VALID_EXTS).toContain('.js');\n  });\n\n  it('should accept custom configuration', () => {\n    const customGen = new TestGenerator({\n      SRC_DIR: 'lib',\n      TEST_DIR: 'spec',\n      KNOWN_MOCKS: ['custom-lib']\n    });\n    \n    expect(customGen.config.SRC_DIR).toBe('lib');\n    expect(customGen.config.TEST_DIR).toBe('spec');\n    expect(customGen.config.KNOWN_MOCKS).toContain('custom-lib');\n  });\n});\n\ndescribe('TestGenerator File System', () => {\n  it('should walk directory structure', () => {\n    // PARALLEL-SAFE: Use unique temp dir and absolute paths, no process.chdir()\n    const uniqueId = `${process.hrtime.bigint()}-${Math.random().toString(36).substr(2, 9)}`;\n    const tempDir = path.join(__dirname, `temp-test-${uniqueId}`);\n    fs.mkdirSync(tempDir, { recursive: true });\n    \n    try {\n      // Create test files with absolute paths\n      const srcDir = path.join(tempDir, 'src');\n      fs.mkdirSync(srcDir, { recursive: true });\n      fs.writeFileSync(path.join(srcDir, 'utils.js'), 'export const helper = () => {};');\n      fs.mkdirSync(path.join(srcDir, 'components'), { recursive: true });\n      fs.writeFileSync(path.join(srcDir, 'components', 'Button.tsx'), 'export const Button = () => {};');\n      \n      // PARALLEL-SAFE: Use absolute paths instead of changing working directory\n      const generator = new TestGenerator({ \n        SRC_DIR: srcDir, \n        TEST_DIR: path.join(tempDir, 'tests') \n      });\n      const files = generator.walk(srcDir);\n      \n      expect(files.length).toBeGreaterThanOrEqual(2);\n      expect(files.some(f => f.endsWith('utils.js'))).toBe(true);\n      expect(files.some(f => f.endsWith('Button.tsx'))).toBe(true);\n    } finally {\n      // Cleanup\n      fs.rmSync(tempDir, { recursive: true, force: true });\n    }\n  });\n});\n\ndescribe('TestGenerator CLI', () => {\n  it('should have executable CLI script', () => {\n    const cliPath = path.join(__dirname, '..', 'bin', 'qtests-generate');\n    expect(fs.existsSync(cliPath)).toBe(true);\n    \n    const stats = fs.statSync(cliPath);\n    expect(stats.mode & 0o111).toBeTruthy(); // Check executable bit\n  });\n\n  it('should show help when requested', () => {\n    const result = execSync('node bin/qtests-generate --help', { \n      cwd: path.join(__dirname, '..'),\n      encoding: 'utf8',\n      stdio: 'pipe'\n    });\n    \n    expect(result).toContain('USAGE');\n    expect(result).toContain('OPTIONS');\n    expect(result).toContain('qtests-generate');\n  });\n\n  it('should show version when requested', () => {\n    const result = execSync('node bin/qtests-generate --version', { \n      cwd: path.join(__dirname, '..'),\n      encoding: 'utf8',\n      stdio: 'pipe'\n    });\n    \n    expect(result).toContain('qtests v');\n  });\n});\n\ndescribe('TestGenerator Content Generation', () => {\n  it('should generate unit test content', () => {\n    const generator = new TestGenerator();\n    const exports = ['calculate', 'Calculator'];\n    const usesQtests = false;\n    const mocks = ['axios'];\n    \n    const testContent = generator.createUnitTest('calculator.js', exports, usesQtests, mocks);\n    \n    expect(testContent).toContain('calculate');\n    expect(testContent).toContain('Calculator');\n    expect(testContent).toContain('describe');\n  });\n\n  it('should generate API test content', () => {\n    const generator = new TestGenerator();\n    const method = 'get';\n    const route = '/api/users';\n    \n    const testContent = generator.createApiTest(method, route);\n    \n    expect(testContent).toContain('/api/users');\n    expect(testContent).toContain('GET');\n    expect(testContent).toContain('request');\n  });\n});"],"mappings":"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","ignoreList":[]}