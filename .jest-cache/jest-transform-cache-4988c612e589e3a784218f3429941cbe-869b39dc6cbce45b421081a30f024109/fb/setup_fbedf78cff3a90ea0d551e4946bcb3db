6461af2d71a81c7e8f3a1eb29f72c4fd
"use strict";
/**
 * qtests Setup Module - Global Node.js Module Resolution Modification - TypeScript Implementation
 *
 * This module modifies Node.js's global module resolution behavior to automatically
 * substitute stub implementations for real modules during testing. It's a critical
 * piece of the qtests framework that enables seamless testing without changing
 * application code.
 *
 * Core functionality:
 * When this module is required, it patches Node.js's Module._resolveFilename method
 * to intercept require() calls and redirect them to stub implementations when
 * appropriate. This allows test code to use the same require() statements as
 * production code while getting test-appropriate implementations.
 *
 * Design philosophy:
 * - Transparent operation: Application code doesn't need to change
 * - Automatic stub resolution: No manual require() path changes needed
 * - Safe operation: Only affects specific modules, others work normally
 * - Performance conscious: Minimal overhead on module resolution
 *
 * Security and safety considerations:
 * - Only affects modules in the predefined stub registry
 * - Original Node.js behavior preserved for unlisted modules
 * - Changes are temporary and isolated to test execution
 * - No permanent modifications to Node.js installation
 * - Easy to disable by not requiring this module
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupComplete = void 0;
// Import Node.js Module constructor for accessing module resolution internals
// This gives us access to the private _resolveFilename method that controls
// how Node.js resolves module names to file paths
const module_1 = __importDefault(require("module"));
const path_1 = __importDefault(require("path"));
const url_1 = require("url");
// Get current directory for ES modules
const __dirname = path_1.default.dirname((0, url_1.fileURLToPath)(import.meta.url));
const stubsPath = path_1.default.join(__dirname, 'stubs');
const STUB_REGISTRY = {
    axios: 'axios.js', // HTTP client library stub file name for quick lookup
    winston: 'winston.js' // logging library stub file name for quick lookup
};
// Preserve existing NODE_PATH if it exists
const currentNodePath = process.env.NODE_PATH || '';
// Determine correct path separator for current platform
const separator = process.platform === 'win32' ? ';' : ':';
// Prepend our stubs directory to NODE_PATH
process.env.NODE_PATH = stubsPath + (currentNodePath ? separator + currentNodePath : '');
// Force Node.js to recognize the updated NODE_PATH for dynamic module resolution
module_1.default._initPaths();
// Store original Module._load function for delegation to maintain normal module loading behavior
const origLoad = module_1.default._load;
/**
 * Enhanced Module._load replacement that handles stub substitution
 *
 * This function intercepts all module loading requests and redirects known
 * modules to their stub implementations when appropriate.
 */
module_1.default._load = function (id, parent, isMain) {
    // Check if this module should be stubbed
    if (STUB_REGISTRY[id]) {
        const stubPath = path_1.default.join(stubsPath, STUB_REGISTRY[id]);
        try {
            // Load the stub module instead of the real one
            return origLoad.call(this, stubPath, parent, isMain);
        }
        catch (error) {
            console.log(`qtests: Failed to load stub for ${id} from ${stubPath}, falling back to original`);
            // Fall back to original module if stub loading fails
            return origLoad.call(this, id, parent, isMain);
        }
    }
    // For non-stubbed modules, use original behavior
    return origLoad.call(this, id, parent, isMain);
};
console.log('qtests: Global module resolution patching activated');
console.log(`qtests: Stub registry contains: ${Object.keys(STUB_REGISTRY).join(', ')}`);
console.log(`qtests: Stubs directory: ${stubsPath}`);
// Export setup completion indicator
exports.setupComplete = true;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9zZXR1cC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMEJHOzs7Ozs7QUFFSCw4RUFBOEU7QUFDOUUsNEVBQTRFO0FBQzVFLGtEQUFrRDtBQUNsRCxvREFBNEI7QUFDNUIsZ0RBQXdCO0FBQ3hCLDZCQUFvQztBQUVwQyx1Q0FBdUM7QUFDdkMsTUFBTSxTQUFTLEdBQUcsY0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFBLG1CQUFhLEVBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQy9ELE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBYWhELE1BQU0sYUFBYSxHQUFpQjtJQUNsQyxLQUFLLEVBQUUsVUFBVSxFQUFFLHNEQUFzRDtJQUN6RSxPQUFPLEVBQUUsWUFBWSxDQUFDLGtEQUFrRDtDQUN6RSxDQUFDO0FBRUYsMkNBQTJDO0FBQzNDLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztBQUVwRCx3REFBd0Q7QUFDeEQsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0FBRTNELDJDQUEyQztBQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxTQUFTLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRXpGLGlGQUFpRjtBQUNoRixnQkFBYyxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBRTdCLGlHQUFpRztBQUNqRyxNQUFNLFFBQVEsR0FBSSxnQkFBYyxDQUFDLEtBQUssQ0FBQztBQUV2Qzs7Ozs7R0FLRztBQUNGLGdCQUFjLENBQUMsS0FBSyxHQUFHLFVBQVMsRUFBVSxFQUFFLE1BQVcsRUFBRSxNQUFnQjtJQUN4RSx5Q0FBeUM7SUFDekMsSUFBSSxhQUFhLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN0QixNQUFNLFFBQVEsR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUM7WUFDSCwrQ0FBK0M7WUFDL0MsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZELENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsRUFBRSxTQUFTLFFBQVEsNEJBQTRCLENBQUMsQ0FBQztZQUNoRyxxREFBcUQ7WUFDckQsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELENBQUM7SUFDSCxDQUFDO0lBRUQsaURBQWlEO0lBQ2pELE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNqRCxDQUFDLENBQUM7QUFFRixPQUFPLENBQUMsR0FBRyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hGLE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLFNBQVMsRUFBRSxDQUFDLENBQUM7QUFFckQsb0NBQW9DO0FBQ3ZCLFFBQUEsYUFBYSxHQUFHLElBQUksQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL3NldHVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogcXRlc3RzIFNldHVwIE1vZHVsZSAtIEdsb2JhbCBOb2RlLmpzIE1vZHVsZSBSZXNvbHV0aW9uIE1vZGlmaWNhdGlvbiAtIFR5cGVTY3JpcHQgSW1wbGVtZW50YXRpb25cbiAqIFxuICogVGhpcyBtb2R1bGUgbW9kaWZpZXMgTm9kZS5qcydzIGdsb2JhbCBtb2R1bGUgcmVzb2x1dGlvbiBiZWhhdmlvciB0byBhdXRvbWF0aWNhbGx5XG4gKiBzdWJzdGl0dXRlIHN0dWIgaW1wbGVtZW50YXRpb25zIGZvciByZWFsIG1vZHVsZXMgZHVyaW5nIHRlc3RpbmcuIEl0J3MgYSBjcml0aWNhbFxuICogcGllY2Ugb2YgdGhlIHF0ZXN0cyBmcmFtZXdvcmsgdGhhdCBlbmFibGVzIHNlYW1sZXNzIHRlc3Rpbmcgd2l0aG91dCBjaGFuZ2luZ1xuICogYXBwbGljYXRpb24gY29kZS5cbiAqIFxuICogQ29yZSBmdW5jdGlvbmFsaXR5OlxuICogV2hlbiB0aGlzIG1vZHVsZSBpcyByZXF1aXJlZCwgaXQgcGF0Y2hlcyBOb2RlLmpzJ3MgTW9kdWxlLl9yZXNvbHZlRmlsZW5hbWUgbWV0aG9kXG4gKiB0byBpbnRlcmNlcHQgcmVxdWlyZSgpIGNhbGxzIGFuZCByZWRpcmVjdCB0aGVtIHRvIHN0dWIgaW1wbGVtZW50YXRpb25zIHdoZW5cbiAqIGFwcHJvcHJpYXRlLiBUaGlzIGFsbG93cyB0ZXN0IGNvZGUgdG8gdXNlIHRoZSBzYW1lIHJlcXVpcmUoKSBzdGF0ZW1lbnRzIGFzXG4gKiBwcm9kdWN0aW9uIGNvZGUgd2hpbGUgZ2V0dGluZyB0ZXN0LWFwcHJvcHJpYXRlIGltcGxlbWVudGF0aW9ucy5cbiAqIFxuICogRGVzaWduIHBoaWxvc29waHk6XG4gKiAtIFRyYW5zcGFyZW50IG9wZXJhdGlvbjogQXBwbGljYXRpb24gY29kZSBkb2Vzbid0IG5lZWQgdG8gY2hhbmdlXG4gKiAtIEF1dG9tYXRpYyBzdHViIHJlc29sdXRpb246IE5vIG1hbnVhbCByZXF1aXJlKCkgcGF0aCBjaGFuZ2VzIG5lZWRlZFxuICogLSBTYWZlIG9wZXJhdGlvbjogT25seSBhZmZlY3RzIHNwZWNpZmljIG1vZHVsZXMsIG90aGVycyB3b3JrIG5vcm1hbGx5XG4gKiAtIFBlcmZvcm1hbmNlIGNvbnNjaW91czogTWluaW1hbCBvdmVyaGVhZCBvbiBtb2R1bGUgcmVzb2x1dGlvblxuICogXG4gKiBTZWN1cml0eSBhbmQgc2FmZXR5IGNvbnNpZGVyYXRpb25zOlxuICogLSBPbmx5IGFmZmVjdHMgbW9kdWxlcyBpbiB0aGUgcHJlZGVmaW5lZCBzdHViIHJlZ2lzdHJ5XG4gKiAtIE9yaWdpbmFsIE5vZGUuanMgYmVoYXZpb3IgcHJlc2VydmVkIGZvciB1bmxpc3RlZCBtb2R1bGVzXG4gKiAtIENoYW5nZXMgYXJlIHRlbXBvcmFyeSBhbmQgaXNvbGF0ZWQgdG8gdGVzdCBleGVjdXRpb25cbiAqIC0gTm8gcGVybWFuZW50IG1vZGlmaWNhdGlvbnMgdG8gTm9kZS5qcyBpbnN0YWxsYXRpb25cbiAqIC0gRWFzeSB0byBkaXNhYmxlIGJ5IG5vdCByZXF1aXJpbmcgdGhpcyBtb2R1bGVcbiAqL1xuXG4vLyBJbXBvcnQgTm9kZS5qcyBNb2R1bGUgY29uc3RydWN0b3IgZm9yIGFjY2Vzc2luZyBtb2R1bGUgcmVzb2x1dGlvbiBpbnRlcm5hbHNcbi8vIFRoaXMgZ2l2ZXMgdXMgYWNjZXNzIHRvIHRoZSBwcml2YXRlIF9yZXNvbHZlRmlsZW5hbWUgbWV0aG9kIHRoYXQgY29udHJvbHNcbi8vIGhvdyBOb2RlLmpzIHJlc29sdmVzIG1vZHVsZSBuYW1lcyB0byBmaWxlIHBhdGhzXG5pbXBvcnQgTW9kdWxlIGZyb20gJ21vZHVsZSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICd1cmwnO1xuXG4vLyBHZXQgY3VycmVudCBkaXJlY3RvcnkgZm9yIEVTIG1vZHVsZXNcbmNvbnN0IF9fZGlybmFtZSA9IHBhdGguZGlybmFtZShmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCkpO1xuY29uc3Qgc3R1YnNQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ3N0dWJzJyk7XG5cbi8qKlxuICogTW9kdWxlIHN0dWIgcmVnaXN0cnkgLSBkZWZpbmVzIHdoaWNoIG1vZHVsZXMgc2hvdWxkIGJlIHJlcGxhY2VkIHdpdGggc3R1YnNcbiAqIFxuICogVGhpcyBvYmplY3QgbWFwcyByZWFsIG1vZHVsZSBuYW1lcyB0byB0aGVpciBzdHViIGltcGxlbWVudGF0aW9uIHBhdGhzLlxuICogV2hlbiBOb2RlLmpzIGF0dGVtcHRzIHRvIHJlc29sdmUgYSBtb2R1bGUgbGlzdGVkIGluIHRoaXMgcmVnaXN0cnksXG4gKiB0aGUgc3R1YiBwYXRoIHdpbGwgYmUgcmV0dXJuZWQgaW5zdGVhZCBvZiB0aGUgcmVhbCBtb2R1bGUgcGF0aC5cbiAqL1xuaW50ZXJmYWNlIFN0dWJSZWdpc3RyeSB7XG4gIFttb2R1bGVOYW1lOiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbmNvbnN0IFNUVUJfUkVHSVNUUlk6IFN0dWJSZWdpc3RyeSA9IHtcbiAgYXhpb3M6ICdheGlvcy5qcycsIC8vIEhUVFAgY2xpZW50IGxpYnJhcnkgc3R1YiBmaWxlIG5hbWUgZm9yIHF1aWNrIGxvb2t1cFxuICB3aW5zdG9uOiAnd2luc3Rvbi5qcycgLy8gbG9nZ2luZyBsaWJyYXJ5IHN0dWIgZmlsZSBuYW1lIGZvciBxdWljayBsb29rdXBcbn07XG5cbi8vIFByZXNlcnZlIGV4aXN0aW5nIE5PREVfUEFUSCBpZiBpdCBleGlzdHNcbmNvbnN0IGN1cnJlbnROb2RlUGF0aCA9IHByb2Nlc3MuZW52Lk5PREVfUEFUSCB8fCAnJztcblxuLy8gRGV0ZXJtaW5lIGNvcnJlY3QgcGF0aCBzZXBhcmF0b3IgZm9yIGN1cnJlbnQgcGxhdGZvcm1cbmNvbnN0IHNlcGFyYXRvciA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicgPyAnOycgOiAnOic7XG5cbi8vIFByZXBlbmQgb3VyIHN0dWJzIGRpcmVjdG9yeSB0byBOT0RFX1BBVEhcbnByb2Nlc3MuZW52Lk5PREVfUEFUSCA9IHN0dWJzUGF0aCArIChjdXJyZW50Tm9kZVBhdGggPyBzZXBhcmF0b3IgKyBjdXJyZW50Tm9kZVBhdGggOiAnJyk7XG5cbi8vIEZvcmNlIE5vZGUuanMgdG8gcmVjb2duaXplIHRoZSB1cGRhdGVkIE5PREVfUEFUSCBmb3IgZHluYW1pYyBtb2R1bGUgcmVzb2x1dGlvblxuKE1vZHVsZSBhcyBhbnkpLl9pbml0UGF0aHMoKTtcblxuLy8gU3RvcmUgb3JpZ2luYWwgTW9kdWxlLl9sb2FkIGZ1bmN0aW9uIGZvciBkZWxlZ2F0aW9uIHRvIG1haW50YWluIG5vcm1hbCBtb2R1bGUgbG9hZGluZyBiZWhhdmlvclxuY29uc3Qgb3JpZ0xvYWQgPSAoTW9kdWxlIGFzIGFueSkuX2xvYWQ7XG5cbi8qKlxuICogRW5oYW5jZWQgTW9kdWxlLl9sb2FkIHJlcGxhY2VtZW50IHRoYXQgaGFuZGxlcyBzdHViIHN1YnN0aXR1dGlvblxuICogXG4gKiBUaGlzIGZ1bmN0aW9uIGludGVyY2VwdHMgYWxsIG1vZHVsZSBsb2FkaW5nIHJlcXVlc3RzIGFuZCByZWRpcmVjdHMga25vd25cbiAqIG1vZHVsZXMgdG8gdGhlaXIgc3R1YiBpbXBsZW1lbnRhdGlvbnMgd2hlbiBhcHByb3ByaWF0ZS5cbiAqL1xuKE1vZHVsZSBhcyBhbnkpLl9sb2FkID0gZnVuY3Rpb24oaWQ6IHN0cmluZywgcGFyZW50OiBhbnksIGlzTWFpbj86IGJvb2xlYW4pOiBhbnkge1xuICAvLyBDaGVjayBpZiB0aGlzIG1vZHVsZSBzaG91bGQgYmUgc3R1YmJlZFxuICBpZiAoU1RVQl9SRUdJU1RSWVtpZF0pIHtcbiAgICBjb25zdCBzdHViUGF0aCA9IHBhdGguam9pbihzdHVic1BhdGgsIFNUVUJfUkVHSVNUUllbaWRdKTtcbiAgICB0cnkge1xuICAgICAgLy8gTG9hZCB0aGUgc3R1YiBtb2R1bGUgaW5zdGVhZCBvZiB0aGUgcmVhbCBvbmVcbiAgICAgIHJldHVybiBvcmlnTG9hZC5jYWxsKHRoaXMsIHN0dWJQYXRoLCBwYXJlbnQsIGlzTWFpbik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBxdGVzdHM6IEZhaWxlZCB0byBsb2FkIHN0dWIgZm9yICR7aWR9IGZyb20gJHtzdHViUGF0aH0sIGZhbGxpbmcgYmFjayB0byBvcmlnaW5hbGApO1xuICAgICAgLy8gRmFsbCBiYWNrIHRvIG9yaWdpbmFsIG1vZHVsZSBpZiBzdHViIGxvYWRpbmcgZmFpbHNcbiAgICAgIHJldHVybiBvcmlnTG9hZC5jYWxsKHRoaXMsIGlkLCBwYXJlbnQsIGlzTWFpbik7XG4gICAgfVxuICB9XG4gIFxuICAvLyBGb3Igbm9uLXN0dWJiZWQgbW9kdWxlcywgdXNlIG9yaWdpbmFsIGJlaGF2aW9yXG4gIHJldHVybiBvcmlnTG9hZC5jYWxsKHRoaXMsIGlkLCBwYXJlbnQsIGlzTWFpbik7XG59O1xuXG5jb25zb2xlLmxvZygncXRlc3RzOiBHbG9iYWwgbW9kdWxlIHJlc29sdXRpb24gcGF0Y2hpbmcgYWN0aXZhdGVkJyk7XG5jb25zb2xlLmxvZyhgcXRlc3RzOiBTdHViIHJlZ2lzdHJ5IGNvbnRhaW5zOiAke09iamVjdC5rZXlzKFNUVUJfUkVHSVNUUlkpLmpvaW4oJywgJyl9YCk7XG5jb25zb2xlLmxvZyhgcXRlc3RzOiBTdHVicyBkaXJlY3Rvcnk6ICR7c3R1YnNQYXRofWApO1xuXG4vLyBFeHBvcnQgc2V0dXAgY29tcGxldGlvbiBpbmRpY2F0b3JcbmV4cG9ydCBjb25zdCBzZXR1cENvbXBsZXRlID0gdHJ1ZTsiXSwidmVyc2lvbiI6M30=