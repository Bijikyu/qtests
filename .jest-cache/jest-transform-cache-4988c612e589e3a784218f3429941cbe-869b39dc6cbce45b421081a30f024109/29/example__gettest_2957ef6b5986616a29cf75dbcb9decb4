c685a44026e9b8a4da2df19c487f3659
"use strict";
// Auto-generated API test for GET /api/status - TypeScript ES module
// PARALLEL-SAFE DESIGN: This test avoids race conditions
Object.defineProperty(exports, "__esModule", { value: true });
// Unique API test session for parallel execution safety
const apiTestSession = `${process.hrtime.bigint()}-${Math.random().toString(36).substr(2, 9)}`;
const uniqueRoute = '/api/status' + (/api/status.includes('?') ? '&' : '?') + 'testSession=' + apiTestSession;
const envUtils_1 = require("qtests/lib/envUtils");
describe(`GET /api/status [API-${apiTestSession}]`, () => {
    // Test data factory for unique request/response data
    const createUniqueTestData = () => ({
        sessionId: apiTestSession,
        requestId: `req-${Date.now()}-${Math.random().toString(36).substr(2, 6)}`,
        timestamp: new Date().toISOString(),
    });
    test('should succeed with unique test data', async () => {
        const testData = createUniqueTestData();
        const app = envUtils_1.httpTest.createMockApp();
        app.get(uniqueRoute, (req, res) => {
            res.statusCode = 200;
            res.setHeader('content-type', 'application/json');
            res.end(JSON.stringify({
                success: true,
                testSession: apiTestSession,
                requestId: testData.requestId
            }));
        });
        const res = await envUtils_1.httpTest.supertest(app)
            .get(uniqueRoute)
            .send(testData)
            .expect(200);
        expect(res.body.success).toBe(true);
        expect(res.body.testSession).toBe(apiTestSession);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9nZW5lcmF0ZWQtdGVzdHMvZXhhbXBsZV9fZ2V0LnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBLHFFQUFxRTtBQUNyRSx5REFBeUQ7O0FBRXpELHdEQUF3RDtBQUN4RCxNQUFNLGNBQWMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDL0YsTUFBTSxXQUFXLEdBQUcsYUFBYSxHQUFHLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxjQUFjLEdBQUcsY0FBYyxDQUFDO0FBRTlHLGtEQUErQztBQUUvQyxRQUFRLENBQUMsd0JBQXdCLGNBQWMsR0FBRyxFQUFFLEdBQUcsRUFBRTtJQUN2RCxxREFBcUQ7SUFDckQsTUFBTSxvQkFBb0IsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ2xDLFNBQVMsRUFBRSxjQUFjO1FBQ3pCLFNBQVMsRUFBRSxPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7UUFDekUsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO0tBQ3BDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxzQ0FBc0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN0RCxNQUFNLFFBQVEsR0FBRyxvQkFBb0IsRUFBRSxDQUFDO1FBQ3hDLE1BQU0sR0FBRyxHQUFHLG1CQUFRLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFckMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDaEMsR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7WUFDckIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztZQUNsRCxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ3JCLE9BQU8sRUFBRSxJQUFJO2dCQUNiLFdBQVcsRUFBRSxjQUFjO2dCQUMzQixTQUFTLEVBQUUsUUFBUSxDQUFDLFNBQVM7YUFDOUIsQ0FBQyxDQUFDLENBQUM7UUFDTixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sR0FBRyxHQUFHLE1BQU0sbUJBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO2FBQ3RDLEdBQUcsQ0FBQyxXQUFXLENBQUM7YUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQzthQUNkLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVmLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDcEQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL2dlbmVyYXRlZC10ZXN0cy9leGFtcGxlX19nZXQudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBdXRvLWdlbmVyYXRlZCBBUEkgdGVzdCBmb3IgR0VUIC9hcGkvc3RhdHVzIC0gVHlwZVNjcmlwdCBFUyBtb2R1bGVcbi8vIFBBUkFMTEVMLVNBRkUgREVTSUdOOiBUaGlzIHRlc3QgYXZvaWRzIHJhY2UgY29uZGl0aW9uc1xuXG4vLyBVbmlxdWUgQVBJIHRlc3Qgc2Vzc2lvbiBmb3IgcGFyYWxsZWwgZXhlY3V0aW9uIHNhZmV0eVxuY29uc3QgYXBpVGVzdFNlc3Npb24gPSBgJHtwcm9jZXNzLmhydGltZS5iaWdpbnQoKX0tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9YDtcbmNvbnN0IHVuaXF1ZVJvdXRlID0gJy9hcGkvc3RhdHVzJyArICgvYXBpL3N0YXR1cy5pbmNsdWRlcygnPycpID8gJyYnIDogJz8nKSArICd0ZXN0U2Vzc2lvbj0nICsgYXBpVGVzdFNlc3Npb247XG5cbmltcG9ydCB7IGh0dHBUZXN0IH0gZnJvbSAncXRlc3RzL2xpYi9lbnZVdGlscyc7XG5cbmRlc2NyaWJlKGBHRVQgL2FwaS9zdGF0dXMgW0FQSS0ke2FwaVRlc3RTZXNzaW9ufV1gLCAoKSA9PiB7XG4gIC8vIFRlc3QgZGF0YSBmYWN0b3J5IGZvciB1bmlxdWUgcmVxdWVzdC9yZXNwb25zZSBkYXRhXG4gIGNvbnN0IGNyZWF0ZVVuaXF1ZVRlc3REYXRhID0gKCkgPT4gKHtcbiAgICBzZXNzaW9uSWQ6IGFwaVRlc3RTZXNzaW9uLFxuICAgIHJlcXVlc3RJZDogYHJlcS0ke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDYpfWAsXG4gICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBzdWNjZWVkIHdpdGggdW5pcXVlIHRlc3QgZGF0YScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB0ZXN0RGF0YSA9IGNyZWF0ZVVuaXF1ZVRlc3REYXRhKCk7XG4gICAgY29uc3QgYXBwID0gaHR0cFRlc3QuY3JlYXRlTW9ja0FwcCgpO1xuICAgIFxuICAgIGFwcC5nZXQodW5pcXVlUm91dGUsIChyZXEsIHJlcykgPT4ge1xuICAgICAgcmVzLnN0YXR1c0NvZGUgPSAyMDA7XG4gICAgICByZXMuc2V0SGVhZGVyKCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgcmVzLmVuZChKU09OLnN0cmluZ2lmeSh7IFxuICAgICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgICAgdGVzdFNlc3Npb246IGFwaVRlc3RTZXNzaW9uLFxuICAgICAgICByZXF1ZXN0SWQ6IHRlc3REYXRhLnJlcXVlc3RJZFxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIFxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGh0dHBUZXN0LnN1cGVydGVzdChhcHApXG4gICAgICAuZ2V0KHVuaXF1ZVJvdXRlKVxuICAgICAgLnNlbmQodGVzdERhdGEpXG4gICAgICAuZXhwZWN0KDIwMCk7XG4gICAgXG4gICAgZXhwZWN0KHJlcy5ib2R5LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KHJlcy5ib2R5LnRlc3RTZXNzaW9uKS50b0JlKGFwaVRlc3RTZXNzaW9uKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==