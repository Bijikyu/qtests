9b7311bbf4da28169df3ce3e9d85a0a8
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  setupFiles: ['<rootDir>/test/testSetup.js'],
  // (invoke exported setup for jest)

  // Advanced Performance optimizations
  maxWorkers: '100%',
  // Use all available CPU cores for maximum speed
  cache: true,
  cacheDirectory: '<rootDir>/.jest-cache',
  clearMocks: true,
  resetMocks: false,
  restoreMocks: false,
  // Memory and execution optimizations
  workerIdleMemoryLimit: '512MB',
  // Keep worker memory low for more concurrency
  detectLeaks: false,
  // Skip leak detection for speed
  logHeapUsage: false,
  // Disable heap logging for speed
  forceExit: true,
  // Force exit for faster cleanup

  // Fast test execution (balanced for stability)
  verbose: false,
  silent: false,
  // Keep some output for debugging, qtests-runner handles display
  bail: false,
  // Don't stop on first failure for parallel efficiency
  passWithNoTests: true,
  // Don't fail on empty test suites

  testPathIgnorePatterns: ['/node_modules/', '/demo/', '/examples/', '/docs/', '/stubs/', '/utils/axiosStub.js', '/utils/winstonStub.js'],
  testMatch: ['<rootDir>/test/**/*.test.js', '<rootDir>/tests/**/*.test.js', '<rootDir>/tests/**/*.test.ts', '<rootDir>/**/*.test.js', '<rootDir>/**/*.test.ts'],
  transform: {
    '^.+\\.tsx?$': ['ts-jest', {
      isolatedModules: true,
      // Faster TypeScript compilation
      tsconfig: {
        compilerOptions: {
          sourceMap: false,
          // Skip source maps for speed
          declaration: false,
          declarationMap: false,
          skipLibCheck: true // Skip lib checking for speed
        }
      }
    }],
    '^.+\\.jsx?$': 'babel-jest'
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
  collectCoverageFrom: ['lib/**/*.js', 'utils/**/*.js', 'index.js', '!lib/stubs.js', '!utils/*Stub.js']
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicHJlc2V0IiwidGVzdEVudmlyb25tZW50Iiwic2V0dXBGaWxlcyIsIm1heFdvcmtlcnMiLCJjYWNoZSIsImNhY2hlRGlyZWN0b3J5IiwiY2xlYXJNb2NrcyIsInJlc2V0TW9ja3MiLCJyZXN0b3JlTW9ja3MiLCJ3b3JrZXJJZGxlTWVtb3J5TGltaXQiLCJkZXRlY3RMZWFrcyIsImxvZ0hlYXBVc2FnZSIsImZvcmNlRXhpdCIsInZlcmJvc2UiLCJzaWxlbnQiLCJiYWlsIiwicGFzc1dpdGhOb1Rlc3RzIiwidGVzdFBhdGhJZ25vcmVQYXR0ZXJucyIsInRlc3RNYXRjaCIsInRyYW5zZm9ybSIsImlzb2xhdGVkTW9kdWxlcyIsInRzY29uZmlnIiwiY29tcGlsZXJPcHRpb25zIiwic291cmNlTWFwIiwiZGVjbGFyYXRpb24iLCJkZWNsYXJhdGlvbk1hcCIsInNraXBMaWJDaGVjayIsIm1vZHVsZUZpbGVFeHRlbnNpb25zIiwiY29sbGVjdENvdmVyYWdlRnJvbSJdLCJzb3VyY2VzIjpbImplc3QuY29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICBwcmVzZXQ6ICd0cy1qZXN0JyxcbiAgdGVzdEVudmlyb25tZW50OiAnbm9kZScsXG4gIHNldHVwRmlsZXM6IFsnPHJvb3REaXI+L3Rlc3QvdGVzdFNldHVwLmpzJ10sIC8vIChpbnZva2UgZXhwb3J0ZWQgc2V0dXAgZm9yIGplc3QpXG4gIFxuICAvLyBBZHZhbmNlZCBQZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25zXG4gIG1heFdvcmtlcnM6ICcxMDAlJywgLy8gVXNlIGFsbCBhdmFpbGFibGUgQ1BVIGNvcmVzIGZvciBtYXhpbXVtIHNwZWVkXG4gIGNhY2hlOiB0cnVlLFxuICBjYWNoZURpcmVjdG9yeTogJzxyb290RGlyPi8uamVzdC1jYWNoZScsXG4gIGNsZWFyTW9ja3M6IHRydWUsXG4gIHJlc2V0TW9ja3M6IGZhbHNlLFxuICByZXN0b3JlTW9ja3M6IGZhbHNlLFxuICBcbiAgLy8gTWVtb3J5IGFuZCBleGVjdXRpb24gb3B0aW1pemF0aW9uc1xuICB3b3JrZXJJZGxlTWVtb3J5TGltaXQ6ICc1MTJNQicsIC8vIEtlZXAgd29ya2VyIG1lbW9yeSBsb3cgZm9yIG1vcmUgY29uY3VycmVuY3lcbiAgZGV0ZWN0TGVha3M6IGZhbHNlLCAvLyBTa2lwIGxlYWsgZGV0ZWN0aW9uIGZvciBzcGVlZFxuICBsb2dIZWFwVXNhZ2U6IGZhbHNlLCAvLyBEaXNhYmxlIGhlYXAgbG9nZ2luZyBmb3Igc3BlZWRcbiAgZm9yY2VFeGl0OiB0cnVlLCAvLyBGb3JjZSBleGl0IGZvciBmYXN0ZXIgY2xlYW51cFxuICBcbiAgLy8gRmFzdCB0ZXN0IGV4ZWN1dGlvbiAoYmFsYW5jZWQgZm9yIHN0YWJpbGl0eSlcbiAgdmVyYm9zZTogZmFsc2UsXG4gIHNpbGVudDogZmFsc2UsIC8vIEtlZXAgc29tZSBvdXRwdXQgZm9yIGRlYnVnZ2luZywgcXRlc3RzLXJ1bm5lciBoYW5kbGVzIGRpc3BsYXlcbiAgYmFpbDogZmFsc2UsIC8vIERvbid0IHN0b3Agb24gZmlyc3QgZmFpbHVyZSBmb3IgcGFyYWxsZWwgZWZmaWNpZW5jeVxuICBwYXNzV2l0aE5vVGVzdHM6IHRydWUsIC8vIERvbid0IGZhaWwgb24gZW1wdHkgdGVzdCBzdWl0ZXNcbiAgXG4gIHRlc3RQYXRoSWdub3JlUGF0dGVybnM6IFtcbiAgICAnL25vZGVfbW9kdWxlcy8nLFxuICAgICcvZGVtby8nLFxuICAgICcvZXhhbXBsZXMvJyxcbiAgICAnL2RvY3MvJyxcbiAgICAnL3N0dWJzLycsXG4gICAgJy91dGlscy9heGlvc1N0dWIuanMnLFxuICAgICcvdXRpbHMvd2luc3RvblN0dWIuanMnXG4gIF0sXG4gIHRlc3RNYXRjaDogW1xuICAgICc8cm9vdERpcj4vdGVzdC8qKi8qLnRlc3QuanMnLFxuICAgICc8cm9vdERpcj4vdGVzdHMvKiovKi50ZXN0LmpzJyxcbiAgICAnPHJvb3REaXI+L3Rlc3RzLyoqLyoudGVzdC50cycsXG4gICAgJzxyb290RGlyPi8qKi8qLnRlc3QuanMnLFxuICAgICc8cm9vdERpcj4vKiovKi50ZXN0LnRzJ1xuICBdLFxuICB0cmFuc2Zvcm06IHtcbiAgICAnXi4rXFxcXC50c3g/JCc6IFsndHMtamVzdCcsIHtcbiAgICAgIGlzb2xhdGVkTW9kdWxlczogdHJ1ZSwgLy8gRmFzdGVyIFR5cGVTY3JpcHQgY29tcGlsYXRpb25cbiAgICAgIHRzY29uZmlnOiB7XG4gICAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xuICAgICAgICAgIHNvdXJjZU1hcDogZmFsc2UsIC8vIFNraXAgc291cmNlIG1hcHMgZm9yIHNwZWVkXG4gICAgICAgICAgZGVjbGFyYXRpb246IGZhbHNlLFxuICAgICAgICAgIGRlY2xhcmF0aW9uTWFwOiBmYWxzZSxcbiAgICAgICAgICBza2lwTGliQ2hlY2s6IHRydWUgLy8gU2tpcCBsaWIgY2hlY2tpbmcgZm9yIHNwZWVkXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSxcbiAgICAnXi4rXFxcXC5qc3g/JCc6ICdiYWJlbC1qZXN0J1xuICB9LFxuICBtb2R1bGVGaWxlRXh0ZW5zaW9uczogWyd0cycsICd0c3gnLCAnanMnLCAnanN4JywgJ2pzb24nLCAnbm9kZSddLFxuICBjb2xsZWN0Q292ZXJhZ2VGcm9tOiBbXG4gICAgJ2xpYi8qKi8qLmpzJyxcbiAgICAndXRpbHMvKiovKi5qcycsXG4gICAgJ2luZGV4LmpzJyxcbiAgICAnIWxpYi9zdHVicy5qcycsXG4gICAgJyF1dGlscy8qU3R1Yi5qcydcbiAgXVxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZDLE1BQU0sRUFBRSxTQUFTO0VBQ2pCQyxlQUFlLEVBQUUsTUFBTTtFQUN2QkMsVUFBVSxFQUFFLENBQUMsNkJBQTZCLENBQUM7RUFBRTs7RUFFN0M7RUFDQUMsVUFBVSxFQUFFLE1BQU07RUFBRTtFQUNwQkMsS0FBSyxFQUFFLElBQUk7RUFDWEMsY0FBYyxFQUFFLHVCQUF1QjtFQUN2Q0MsVUFBVSxFQUFFLElBQUk7RUFDaEJDLFVBQVUsRUFBRSxLQUFLO0VBQ2pCQyxZQUFZLEVBQUUsS0FBSztFQUVuQjtFQUNBQyxxQkFBcUIsRUFBRSxPQUFPO0VBQUU7RUFDaENDLFdBQVcsRUFBRSxLQUFLO0VBQUU7RUFDcEJDLFlBQVksRUFBRSxLQUFLO0VBQUU7RUFDckJDLFNBQVMsRUFBRSxJQUFJO0VBQUU7O0VBRWpCO0VBQ0FDLE9BQU8sRUFBRSxLQUFLO0VBQ2RDLE1BQU0sRUFBRSxLQUFLO0VBQUU7RUFDZkMsSUFBSSxFQUFFLEtBQUs7RUFBRTtFQUNiQyxlQUFlLEVBQUUsSUFBSTtFQUFFOztFQUV2QkMsc0JBQXNCLEVBQUUsQ0FDdEIsZ0JBQWdCLEVBQ2hCLFFBQVEsRUFDUixZQUFZLEVBQ1osUUFBUSxFQUNSLFNBQVMsRUFDVCxxQkFBcUIsRUFDckIsdUJBQXVCLENBQ3hCO0VBQ0RDLFNBQVMsRUFBRSxDQUNULDZCQUE2QixFQUM3Qiw4QkFBOEIsRUFDOUIsOEJBQThCLEVBQzlCLHdCQUF3QixFQUN4Qix3QkFBd0IsQ0FDekI7RUFDREMsU0FBUyxFQUFFO0lBQ1QsYUFBYSxFQUFFLENBQUMsU0FBUyxFQUFFO01BQ3pCQyxlQUFlLEVBQUUsSUFBSTtNQUFFO01BQ3ZCQyxRQUFRLEVBQUU7UUFDUkMsZUFBZSxFQUFFO1VBQ2ZDLFNBQVMsRUFBRSxLQUFLO1VBQUU7VUFDbEJDLFdBQVcsRUFBRSxLQUFLO1VBQ2xCQyxjQUFjLEVBQUUsS0FBSztVQUNyQkMsWUFBWSxFQUFFLElBQUksQ0FBQztRQUNyQjtNQUNGO0lBQ0YsQ0FBQyxDQUFDO0lBQ0YsYUFBYSxFQUFFO0VBQ2pCLENBQUM7RUFDREMsb0JBQW9CLEVBQUUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQztFQUNoRUMsbUJBQW1CLEVBQUUsQ0FDbkIsYUFBYSxFQUNiLGVBQWUsRUFDZixVQUFVLEVBQ1YsZUFBZSxFQUNmLGlCQUFpQjtBQUVyQixDQUFDIiwiaWdub3JlTGlzdCI6W119