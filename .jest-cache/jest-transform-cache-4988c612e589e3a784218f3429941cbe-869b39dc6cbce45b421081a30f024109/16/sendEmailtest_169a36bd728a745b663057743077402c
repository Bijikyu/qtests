9df26a5b8cab38aef8c15c6688cb7a1b
/**
 * Send Email Integration Tests - Core functionality
 */

const {
  sendEmail,
  getEmailHistory,
  clearEmailHistory
} = require('../utils/sendEmail');
describe('Send Email Integration', () => {
  beforeEach(() => {
    clearEmailHistory();
  });
  test('sendEmail captures email data', async () => {
    const emailData = {
      to: 'test@example.com',
      subject: 'Test Email',
      text: 'This is a test email'
    };
    const result = await sendEmail(emailData);
    expect(result.success).toBe(true);
    expect(result.messageId).toBeDefined();
    expect(result.to).toBe('test@example.com');
  });
  test('getEmailHistory tracks sent emails', async () => {
    await sendEmail({
      to: 'user1@example.com',
      subject: 'Email 1',
      text: 'First email'
    });
    await sendEmail({
      to: 'user2@example.com',
      subject: 'Email 2',
      text: 'Second email'
    });
    const history = getEmailHistory();
    expect(history).toHaveLength(2);
    expect(history[0].to).toBe('user1@example.com');
    expect(history[1].to).toBe('user2@example.com');
  });
  test('clearEmailHistory resets tracking', async () => {
    await sendEmail({
      to: 'test@example.com',
      subject: 'Test',
      text: 'Test email'
    });
    expect(getEmailHistory()).toHaveLength(1);
    clearEmailHistory();
    expect(getEmailHistory()).toHaveLength(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzZW5kRW1haWwiLCJnZXRFbWFpbEhpc3RvcnkiLCJjbGVhckVtYWlsSGlzdG9yeSIsInJlcXVpcmUiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJ0ZXN0IiwiZW1haWxEYXRhIiwidG8iLCJzdWJqZWN0IiwidGV4dCIsInJlc3VsdCIsImV4cGVjdCIsInN1Y2Nlc3MiLCJ0b0JlIiwibWVzc2FnZUlkIiwidG9CZURlZmluZWQiLCJoaXN0b3J5IiwidG9IYXZlTGVuZ3RoIl0sInNvdXJjZXMiOlsic2VuZEVtYWlsLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTZW5kIEVtYWlsIEludGVncmF0aW9uIFRlc3RzIC0gQ29yZSBmdW5jdGlvbmFsaXR5XG4gKi9cblxuY29uc3QgeyBzZW5kRW1haWwsIGdldEVtYWlsSGlzdG9yeSwgY2xlYXJFbWFpbEhpc3RvcnkgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL3NlbmRFbWFpbCcpO1xuXG5kZXNjcmliZSgnU2VuZCBFbWFpbCBJbnRlZ3JhdGlvbicsICgpID0+IHtcbiAgXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGNsZWFyRW1haWxIaXN0b3J5KCk7XG4gIH0pO1xuICBcbiAgdGVzdCgnc2VuZEVtYWlsIGNhcHR1cmVzIGVtYWlsIGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZW1haWxEYXRhID0ge1xuICAgICAgdG86ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICAgIHN1YmplY3Q6ICdUZXN0IEVtYWlsJyxcbiAgICAgIHRleHQ6ICdUaGlzIGlzIGEgdGVzdCBlbWFpbCdcbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlbmRFbWFpbChlbWFpbERhdGEpO1xuICAgIFxuICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICBleHBlY3QocmVzdWx0Lm1lc3NhZ2VJZCkudG9CZURlZmluZWQoKTtcbiAgICBleHBlY3QocmVzdWx0LnRvKS50b0JlKCd0ZXN0QGV4YW1wbGUuY29tJyk7XG4gIH0pO1xuICBcbiAgdGVzdCgnZ2V0RW1haWxIaXN0b3J5IHRyYWNrcyBzZW50IGVtYWlscycsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBzZW5kRW1haWwoe1xuICAgICAgdG86ICd1c2VyMUBleGFtcGxlLmNvbScsXG4gICAgICBzdWJqZWN0OiAnRW1haWwgMScsXG4gICAgICB0ZXh0OiAnRmlyc3QgZW1haWwnXG4gICAgfSk7XG4gICAgXG4gICAgYXdhaXQgc2VuZEVtYWlsKHtcbiAgICAgIHRvOiAndXNlcjJAZXhhbXBsZS5jb20nLCBcbiAgICAgIHN1YmplY3Q6ICdFbWFpbCAyJyxcbiAgICAgIHRleHQ6ICdTZWNvbmQgZW1haWwnXG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgaGlzdG9yeSA9IGdldEVtYWlsSGlzdG9yeSgpO1xuICAgIGV4cGVjdChoaXN0b3J5KS50b0hhdmVMZW5ndGgoMik7XG4gICAgZXhwZWN0KGhpc3RvcnlbMF0udG8pLnRvQmUoJ3VzZXIxQGV4YW1wbGUuY29tJyk7XG4gICAgZXhwZWN0KGhpc3RvcnlbMV0udG8pLnRvQmUoJ3VzZXIyQGV4YW1wbGUuY29tJyk7XG4gIH0pO1xuICBcbiAgdGVzdCgnY2xlYXJFbWFpbEhpc3RvcnkgcmVzZXRzIHRyYWNraW5nJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHNlbmRFbWFpbCh7XG4gICAgICB0bzogJ3Rlc3RAZXhhbXBsZS5jb20nLFxuICAgICAgc3ViamVjdDogJ1Rlc3QnLFxuICAgICAgdGV4dDogJ1Rlc3QgZW1haWwnXG4gICAgfSk7XG4gICAgXG4gICAgZXhwZWN0KGdldEVtYWlsSGlzdG9yeSgpKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgXG4gICAgY2xlYXJFbWFpbEhpc3RvcnkoKTtcbiAgICBleHBlY3QoZ2V0RW1haWxIaXN0b3J5KCkpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNO0VBQUVBLFNBQVM7RUFBRUMsZUFBZTtFQUFFQztBQUFrQixDQUFDLEdBQUdDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztBQUV2RkMsUUFBUSxDQUFDLHdCQUF3QixFQUFFLE1BQU07RUFFdkNDLFVBQVUsQ0FBQyxNQUFNO0lBQ2ZILGlCQUFpQixDQUFDLENBQUM7RUFDckIsQ0FBQyxDQUFDO0VBRUZJLElBQUksQ0FBQywrQkFBK0IsRUFBRSxZQUFZO0lBQ2hELE1BQU1DLFNBQVMsR0FBRztNQUNoQkMsRUFBRSxFQUFFLGtCQUFrQjtNQUN0QkMsT0FBTyxFQUFFLFlBQVk7TUFDckJDLElBQUksRUFBRTtJQUNSLENBQUM7SUFFRCxNQUFNQyxNQUFNLEdBQUcsTUFBTVgsU0FBUyxDQUFDTyxTQUFTLENBQUM7SUFFekNLLE1BQU0sQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNqQ0YsTUFBTSxDQUFDRCxNQUFNLENBQUNJLFNBQVMsQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQztJQUN0Q0osTUFBTSxDQUFDRCxNQUFNLENBQUNILEVBQUUsQ0FBQyxDQUFDTSxJQUFJLENBQUMsa0JBQWtCLENBQUM7RUFDNUMsQ0FBQyxDQUFDO0VBRUZSLElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxZQUFZO0lBQ3JELE1BQU1OLFNBQVMsQ0FBQztNQUNkUSxFQUFFLEVBQUUsbUJBQW1CO01BQ3ZCQyxPQUFPLEVBQUUsU0FBUztNQUNsQkMsSUFBSSxFQUFFO0lBQ1IsQ0FBQyxDQUFDO0lBRUYsTUFBTVYsU0FBUyxDQUFDO01BQ2RRLEVBQUUsRUFBRSxtQkFBbUI7TUFDdkJDLE9BQU8sRUFBRSxTQUFTO01BQ2xCQyxJQUFJLEVBQUU7SUFDUixDQUFDLENBQUM7SUFFRixNQUFNTyxPQUFPLEdBQUdoQixlQUFlLENBQUMsQ0FBQztJQUNqQ1csTUFBTSxDQUFDSyxPQUFPLENBQUMsQ0FBQ0MsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUMvQk4sTUFBTSxDQUFDSyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUNULEVBQUUsQ0FBQyxDQUFDTSxJQUFJLENBQUMsbUJBQW1CLENBQUM7SUFDL0NGLE1BQU0sQ0FBQ0ssT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDVCxFQUFFLENBQUMsQ0FBQ00sSUFBSSxDQUFDLG1CQUFtQixDQUFDO0VBQ2pELENBQUMsQ0FBQztFQUVGUixJQUFJLENBQUMsbUNBQW1DLEVBQUUsWUFBWTtJQUNwRCxNQUFNTixTQUFTLENBQUM7TUFDZFEsRUFBRSxFQUFFLGtCQUFrQjtNQUN0QkMsT0FBTyxFQUFFLE1BQU07TUFDZkMsSUFBSSxFQUFFO0lBQ1IsQ0FBQyxDQUFDO0lBRUZFLE1BQU0sQ0FBQ1gsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDaUIsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUV6Q2hCLGlCQUFpQixDQUFDLENBQUM7SUFDbkJVLE1BQU0sQ0FBQ1gsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDaUIsWUFBWSxDQUFDLENBQUMsQ0FBQztFQUMzQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=