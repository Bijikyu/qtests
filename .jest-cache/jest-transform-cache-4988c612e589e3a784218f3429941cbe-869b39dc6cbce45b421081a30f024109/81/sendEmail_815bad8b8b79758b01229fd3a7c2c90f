afe011e72096d41b77dc2301eb9bb4a2
/**
 * Email Mock Utility for Testing - Working Implementation
 */

const {
  executeWithLogs
} = require('../lib/logUtils');

// Simple email history storage
let emailHistory = [];

/**
 * Mock email sending function
 */
function sendEmail(emailData) {
  return executeWithLogs('sendEmail', async () => {
    // Validate basic email structure
    if (!emailData || !emailData.to) {
      throw new Error('Email requires "to" field');
    }

    // Create mock result
    const result = {
      success: true,
      messageId: `mock-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      to: emailData.to,
      subject: emailData.subject || '',
      timestamp: new Date().toISOString()
    };

    // Store in history
    emailHistory.push({
      ...emailData,
      ...result
    });
    return result;
  }, emailData);
}

/**
 * Get email history
 */
function getEmailHistory() {
  return [...emailHistory]; // Return copy
}

/**
 * Clear email history
 */
function clearEmailHistory() {
  return executeWithLogs('clearEmailHistory', () => {
    const cleared = emailHistory.length;
    emailHistory = [];
    return cleared;
  });
}

/**
 * Validate email data
 */
function validateEmail(emailData) {
  return executeWithLogs('validateEmail', () => {
    if (!emailData) return false;
    if (!emailData.to) return false;
    if (typeof emailData.to !== 'string') return false;
    return emailData.to.includes('@');
  }, emailData);
}
module.exports = {
  sendEmail,
  getEmailHistory,
  clearEmailHistory,
  validateEmail,
  emailHistory: () => emailHistory // Function to access for debugging
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleGVjdXRlV2l0aExvZ3MiLCJyZXF1aXJlIiwiZW1haWxIaXN0b3J5Iiwic2VuZEVtYWlsIiwiZW1haWxEYXRhIiwidG8iLCJFcnJvciIsInJlc3VsdCIsInN1Y2Nlc3MiLCJtZXNzYWdlSWQiLCJEYXRlIiwibm93IiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwic3ViamVjdCIsInRpbWVzdGFtcCIsInRvSVNPU3RyaW5nIiwicHVzaCIsImdldEVtYWlsSGlzdG9yeSIsImNsZWFyRW1haWxIaXN0b3J5IiwiY2xlYXJlZCIsImxlbmd0aCIsInZhbGlkYXRlRW1haWwiLCJpbmNsdWRlcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJzZW5kRW1haWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFbWFpbCBNb2NrIFV0aWxpdHkgZm9yIFRlc3RpbmcgLSBXb3JraW5nIEltcGxlbWVudGF0aW9uXG4gKi9cblxuY29uc3QgeyBleGVjdXRlV2l0aExvZ3MgfSA9IHJlcXVpcmUoJy4uL2xpYi9sb2dVdGlscycpO1xuXG4vLyBTaW1wbGUgZW1haWwgaGlzdG9yeSBzdG9yYWdlXG5sZXQgZW1haWxIaXN0b3J5ID0gW107XG5cbi8qKlxuICogTW9jayBlbWFpbCBzZW5kaW5nIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHNlbmRFbWFpbChlbWFpbERhdGEpIHtcbiAgcmV0dXJuIGV4ZWN1dGVXaXRoTG9ncygnc2VuZEVtYWlsJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIFZhbGlkYXRlIGJhc2ljIGVtYWlsIHN0cnVjdHVyZVxuICAgIGlmICghZW1haWxEYXRhIHx8ICFlbWFpbERhdGEudG8pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRW1haWwgcmVxdWlyZXMgXCJ0b1wiIGZpZWxkJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIENyZWF0ZSBtb2NrIHJlc3VsdFxuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBtZXNzYWdlSWQ6IGBtb2NrLSR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9YCxcbiAgICAgIHRvOiBlbWFpbERhdGEudG8sXG4gICAgICBzdWJqZWN0OiBlbWFpbERhdGEuc3ViamVjdCB8fCAnJyxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfTtcbiAgICBcbiAgICAvLyBTdG9yZSBpbiBoaXN0b3J5XG4gICAgZW1haWxIaXN0b3J5LnB1c2goe1xuICAgICAgLi4uZW1haWxEYXRhLFxuICAgICAgLi4ucmVzdWx0XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgZW1haWxEYXRhKTtcbn1cblxuLyoqXG4gKiBHZXQgZW1haWwgaGlzdG9yeVxuICovXG5mdW5jdGlvbiBnZXRFbWFpbEhpc3RvcnkoKSB7XG4gIHJldHVybiBbLi4uZW1haWxIaXN0b3J5XTsgLy8gUmV0dXJuIGNvcHlcbn1cblxuLyoqXG4gKiBDbGVhciBlbWFpbCBoaXN0b3J5XG4gKi9cbmZ1bmN0aW9uIGNsZWFyRW1haWxIaXN0b3J5KCkge1xuICByZXR1cm4gZXhlY3V0ZVdpdGhMb2dzKCdjbGVhckVtYWlsSGlzdG9yeScsICgpID0+IHtcbiAgICBjb25zdCBjbGVhcmVkID0gZW1haWxIaXN0b3J5Lmxlbmd0aDtcbiAgICBlbWFpbEhpc3RvcnkgPSBbXTtcbiAgICByZXR1cm4gY2xlYXJlZDtcbiAgfSk7XG59XG5cbi8qKlxuICogVmFsaWRhdGUgZW1haWwgZGF0YVxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUVtYWlsKGVtYWlsRGF0YSkge1xuICByZXR1cm4gZXhlY3V0ZVdpdGhMb2dzKCd2YWxpZGF0ZUVtYWlsJywgKCkgPT4ge1xuICAgIGlmICghZW1haWxEYXRhKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFlbWFpbERhdGEudG8pIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIGVtYWlsRGF0YS50byAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gZW1haWxEYXRhLnRvLmluY2x1ZGVzKCdAJyk7XG4gIH0sIGVtYWlsRGF0YSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZW5kRW1haWwsXG4gIGdldEVtYWlsSGlzdG9yeSxcbiAgY2xlYXJFbWFpbEhpc3RvcnksXG4gIHZhbGlkYXRlRW1haWwsXG4gIGVtYWlsSGlzdG9yeTogKCkgPT4gZW1haWxIaXN0b3J5IC8vIEZ1bmN0aW9uIHRvIGFjY2VzcyBmb3IgZGVidWdnaW5nXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBLE1BQU07RUFBRUE7QUFBZ0IsQ0FBQyxHQUFHQyxPQUFPLENBQUMsaUJBQWlCLENBQUM7O0FBRXREO0FBQ0EsSUFBSUMsWUFBWSxHQUFHLEVBQUU7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFNBQVNBLENBQUNDLFNBQVMsRUFBRTtFQUM1QixPQUFPSixlQUFlLENBQUMsV0FBVyxFQUFFLFlBQVk7SUFDOUM7SUFDQSxJQUFJLENBQUNJLFNBQVMsSUFBSSxDQUFDQSxTQUFTLENBQUNDLEVBQUUsRUFBRTtNQUMvQixNQUFNLElBQUlDLEtBQUssQ0FBQywyQkFBMkIsQ0FBQztJQUM5Qzs7SUFFQTtJQUNBLE1BQU1DLE1BQU0sR0FBRztNQUNiQyxPQUFPLEVBQUUsSUFBSTtNQUNiQyxTQUFTLEVBQUUsUUFBUUMsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxJQUFJQyxJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtNQUMxRVYsRUFBRSxFQUFFRCxTQUFTLENBQUNDLEVBQUU7TUFDaEJXLE9BQU8sRUFBRVosU0FBUyxDQUFDWSxPQUFPLElBQUksRUFBRTtNQUNoQ0MsU0FBUyxFQUFFLElBQUlQLElBQUksQ0FBQyxDQUFDLENBQUNRLFdBQVcsQ0FBQztJQUNwQyxDQUFDOztJQUVEO0lBQ0FoQixZQUFZLENBQUNpQixJQUFJLENBQUM7TUFDaEIsR0FBR2YsU0FBUztNQUNaLEdBQUdHO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsT0FBT0EsTUFBTTtFQUNmLENBQUMsRUFBRUgsU0FBUyxDQUFDO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU2dCLGVBQWVBLENBQUEsRUFBRztFQUN6QixPQUFPLENBQUMsR0FBR2xCLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDNUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU21CLGlCQUFpQkEsQ0FBQSxFQUFHO0VBQzNCLE9BQU9yQixlQUFlLENBQUMsbUJBQW1CLEVBQUUsTUFBTTtJQUNoRCxNQUFNc0IsT0FBTyxHQUFHcEIsWUFBWSxDQUFDcUIsTUFBTTtJQUNuQ3JCLFlBQVksR0FBRyxFQUFFO0lBQ2pCLE9BQU9vQixPQUFPO0VBQ2hCLENBQUMsQ0FBQztBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNFLGFBQWFBLENBQUNwQixTQUFTLEVBQUU7RUFDaEMsT0FBT0osZUFBZSxDQUFDLGVBQWUsRUFBRSxNQUFNO0lBQzVDLElBQUksQ0FBQ0ksU0FBUyxFQUFFLE9BQU8sS0FBSztJQUM1QixJQUFJLENBQUNBLFNBQVMsQ0FBQ0MsRUFBRSxFQUFFLE9BQU8sS0FBSztJQUMvQixJQUFJLE9BQU9ELFNBQVMsQ0FBQ0MsRUFBRSxLQUFLLFFBQVEsRUFBRSxPQUFPLEtBQUs7SUFDbEQsT0FBT0QsU0FBUyxDQUFDQyxFQUFFLENBQUNvQixRQUFRLENBQUMsR0FBRyxDQUFDO0VBQ25DLENBQUMsRUFBRXJCLFNBQVMsQ0FBQztBQUNmO0FBRUFzQixNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmeEIsU0FBUztFQUNUaUIsZUFBZTtFQUNmQyxpQkFBaUI7RUFDakJHLGFBQWE7RUFDYnRCLFlBQVksRUFBRUEsQ0FBQSxLQUFNQSxZQUFZLENBQUM7QUFDbkMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==