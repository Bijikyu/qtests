bf716354644525e7252e815b395c8b67
"use strict";
/**
 * Email History Management Utility - TypeScript Implementation
 *
 * This module manages email history for testing and verification purposes.
 * It provides a clean separation of history management from email sending logic.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.emailHistory = void 0;
exports.clearEmailHistory = clearEmailHistory;
exports.getEmailHistory = getEmailHistory;
exports.addToHistory = addToHistory;
const logUtils_js_1 = require("../../lib/logUtils.js");
// In-memory storage for email history during testing
const emailHistory = [];
exports.emailHistory = emailHistory;
/**
 * Clear email history for test isolation
 *
 * This function provides a clean slate for each test by removing all previously
 * mocked email records. Essential for test isolation and preventing test
 * interference when running multiple email-related test suites.
 */
function clearEmailHistory() {
    (0, logUtils_js_1.logStart)('clearEmailHistory');
    const cleared = emailHistory.length;
    emailHistory.length = 0;
    (0, logUtils_js_1.logReturn)('clearEmailHistory', cleared);
    return cleared;
}
/**
 * Get email history for test verification
 *
 * This function provides access to all emails that have been "sent" through
 * the sendEmail function. Returns a copy to prevent accidental modification.
 */
function getEmailHistory() {
    (0, logUtils_js_1.logStart)('getEmailHistory');
    const history = [...emailHistory];
    (0, logUtils_js_1.logReturn)('getEmailHistory', `${history.length} emails`);
    return history;
}
/**
 * Add email to history
 *
 * Internal function to add an email to the history tracking.
 */
function addToHistory(emailData) {
    emailHistory.push(emailData);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS91dGlscy9lbWFpbC9lbWFpbEhpc3RvcnkudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHOzs7QUF5REQsOENBQWlCO0FBQ2pCLDBDQUFlO0FBQ2Ysb0NBQVk7QUF6RGQsdURBQTREO0FBYTVELHFEQUFxRDtBQUNyRCxNQUFNLFlBQVksR0FBd0IsRUFBRSxDQUFDO0FBNEMzQyxvQ0FBWTtBQTFDZDs7Ozs7O0dBTUc7QUFDSCxTQUFTLGlCQUFpQjtJQUN4QixJQUFBLHNCQUFRLEVBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUM5QixNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO0lBQ3BDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLElBQUEsdUJBQVMsRUFBQyxtQkFBbUIsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN4QyxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFTLGVBQWU7SUFDdEIsSUFBQSxzQkFBUSxFQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDNUIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFDO0lBQ2xDLElBQUEsdUJBQVMsRUFBQyxpQkFBaUIsRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLFNBQVMsQ0FBQyxDQUFDO0lBQ3pELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBUyxZQUFZLENBQUMsU0FBNEI7SUFDaEQsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvdXRpbHMvZW1haWwvZW1haWxIaXN0b3J5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRW1haWwgSGlzdG9yeSBNYW5hZ2VtZW50IFV0aWxpdHkgLSBUeXBlU2NyaXB0IEltcGxlbWVudGF0aW9uXG4gKiBcbiAqIFRoaXMgbW9kdWxlIG1hbmFnZXMgZW1haWwgaGlzdG9yeSBmb3IgdGVzdGluZyBhbmQgdmVyaWZpY2F0aW9uIHB1cnBvc2VzLlxuICogSXQgcHJvdmlkZXMgYSBjbGVhbiBzZXBhcmF0aW9uIG9mIGhpc3RvcnkgbWFuYWdlbWVudCBmcm9tIGVtYWlsIHNlbmRpbmcgbG9naWMuXG4gKi9cblxuaW1wb3J0IHsgbG9nU3RhcnQsIGxvZ1JldHVybiB9IGZyb20gJy4uLy4uL2xpYi9sb2dVdGlscy5qcyc7XG5cbi8vIFR5cGUgZGVmaW5pdGlvbnNcbmludGVyZmFjZSBFbWFpbEhpc3RvcnlFbnRyeSB7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIGVtYWlsRGF0YT86IGFueTtcbiAgbWVzc2FnZTogc3RyaW5nO1xuICB0aW1lc3RhbXA6IERhdGU7XG4gIGlkPzogc3RyaW5nO1xuICBlcnJvcj86IHN0cmluZztcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG4vLyBJbi1tZW1vcnkgc3RvcmFnZSBmb3IgZW1haWwgaGlzdG9yeSBkdXJpbmcgdGVzdGluZ1xuY29uc3QgZW1haWxIaXN0b3J5OiBFbWFpbEhpc3RvcnlFbnRyeVtdID0gW107XG5cbi8qKlxuICogQ2xlYXIgZW1haWwgaGlzdG9yeSBmb3IgdGVzdCBpc29sYXRpb25cbiAqIFxuICogVGhpcyBmdW5jdGlvbiBwcm92aWRlcyBhIGNsZWFuIHNsYXRlIGZvciBlYWNoIHRlc3QgYnkgcmVtb3ZpbmcgYWxsIHByZXZpb3VzbHlcbiAqIG1vY2tlZCBlbWFpbCByZWNvcmRzLiBFc3NlbnRpYWwgZm9yIHRlc3QgaXNvbGF0aW9uIGFuZCBwcmV2ZW50aW5nIHRlc3RcbiAqIGludGVyZmVyZW5jZSB3aGVuIHJ1bm5pbmcgbXVsdGlwbGUgZW1haWwtcmVsYXRlZCB0ZXN0IHN1aXRlcy5cbiAqL1xuZnVuY3Rpb24gY2xlYXJFbWFpbEhpc3RvcnkoKTogbnVtYmVyIHtcbiAgbG9nU3RhcnQoJ2NsZWFyRW1haWxIaXN0b3J5Jyk7XG4gIGNvbnN0IGNsZWFyZWQgPSBlbWFpbEhpc3RvcnkubGVuZ3RoO1xuICBlbWFpbEhpc3RvcnkubGVuZ3RoID0gMDtcbiAgbG9nUmV0dXJuKCdjbGVhckVtYWlsSGlzdG9yeScsIGNsZWFyZWQpO1xuICByZXR1cm4gY2xlYXJlZDtcbn1cblxuLyoqXG4gKiBHZXQgZW1haWwgaGlzdG9yeSBmb3IgdGVzdCB2ZXJpZmljYXRpb25cbiAqIFxuICogVGhpcyBmdW5jdGlvbiBwcm92aWRlcyBhY2Nlc3MgdG8gYWxsIGVtYWlscyB0aGF0IGhhdmUgYmVlbiBcInNlbnRcIiB0aHJvdWdoXG4gKiB0aGUgc2VuZEVtYWlsIGZ1bmN0aW9uLiBSZXR1cm5zIGEgY29weSB0byBwcmV2ZW50IGFjY2lkZW50YWwgbW9kaWZpY2F0aW9uLlxuICovXG5mdW5jdGlvbiBnZXRFbWFpbEhpc3RvcnkoKTogRW1haWxIaXN0b3J5RW50cnlbXSB7XG4gIGxvZ1N0YXJ0KCdnZXRFbWFpbEhpc3RvcnknKTtcbiAgY29uc3QgaGlzdG9yeSA9IFsuLi5lbWFpbEhpc3RvcnldO1xuICBsb2dSZXR1cm4oJ2dldEVtYWlsSGlzdG9yeScsIGAke2hpc3RvcnkubGVuZ3RofSBlbWFpbHNgKTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbi8qKlxuICogQWRkIGVtYWlsIHRvIGhpc3RvcnlcbiAqIFxuICogSW50ZXJuYWwgZnVuY3Rpb24gdG8gYWRkIGFuIGVtYWlsIHRvIHRoZSBoaXN0b3J5IHRyYWNraW5nLlxuICovXG5mdW5jdGlvbiBhZGRUb0hpc3RvcnkoZW1haWxEYXRhOiBFbWFpbEhpc3RvcnlFbnRyeSk6IHZvaWQge1xuICBlbWFpbEhpc3RvcnkucHVzaChlbWFpbERhdGEpO1xufVxuXG4vLyBFeHBvcnQgdXNpbmcgRVMgbW9kdWxlIHN5bnRheFxuZXhwb3J0IHsgXG4gIGNsZWFyRW1haWxIaXN0b3J5LCBcbiAgZ2V0RW1haWxIaXN0b3J5LCBcbiAgYWRkVG9IaXN0b3J5LCBcbiAgZW1haWxIaXN0b3J5IC8vIEV4cG9ydCBmb3IgZGlyZWN0IGFjY2VzcyBpbiBhZHZhbmNlZCB0ZXN0aW5nIHNjZW5hcmlvc1xufTsiXSwidmVyc2lvbiI6M30=