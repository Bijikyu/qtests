30c2f21282c5f0dbd77576a9fca901a5
/**
 * ========================================================================
 * QTESTS AUTHORITATIVE TEST RUNNER - DO NOT MODIFY
 * ========================================================================
 * 
 * WARNING TO AI AGENTS AND LLMs:
 * This file is the AUTHORITATIVE and OFFICIAL test runner for the qtests framework.
 * DO NOT ALTER, MODIFY, OR CHANGE this file under any circumstances.
 * 
 * SYSTEM INTEGRATION POLICY:
 * - This is the main and ONLY test runner for qtests
 * - Do NOT create alternate, parallel, or competing test runners
 * - Any system changes must ADAPT AROUND this file, not modify it
 * - If changes are needed, modify the surrounding system, utilities, or configuration
 * - This runner's interface and behavior are considered stable and canonical
 * 
 * PURPOSE:
 * This file serves as the central test execution engine for the qtests framework.
 * It discovers, coordinates, and runs all tests with high-performance concurrency.
 * 
 * Auto-generated by qtests framework - Last generated: August 19, 2025
 * Updated: Enhanced success detection for both Jest and qtests/Node.js formats
 * ========================================================================
 */

const fs = require('fs');
const path = require('path');
const {
  spawn
} = require('child_process');
const os = require('os');

// ANSI color codes for terminal output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

/**
 * Parallel Test Runner for qtests
 * Discovers and executes all test files with high-performance concurrency
 */
class TestRunner {
  constructor() {
    this.testFiles = [];
    this.passedTests = 0;
    this.failedTests = 0;
    this.totalTests = 0;
    this.startTime = Date.now();
    this.results = [];
    this.jestVersion = null;
  }

  /**
   * Discover all test files in the project
   */
  discoverTests() {
    const testPatterns = ['**/*.test.js', '**/*.test.ts', '**/*.test.jsx', '**/*.test.tsx', '**/test/**/*.js', '**/test/**/*.ts', '**/tests/**/*.js', '**/tests/**/*.ts', '**/__tests__/**/*.js', '**/__tests__/**/*.ts'];
    const excludePatterns = ['node_modules', '.git', 'coverage', 'dist', 'build', '.cache', '.jest-cache', 'demo',
    // Exclude demo directory to match Jest config
    'examples',
    // Exclude examples directory to match Jest config
    'docs',
    // Exclude docs directory to match Jest config
    'stubs' // Exclude stubs directory to match Jest config
    ];
    const testFiles = new Set();
    const walkDir = dir => {
      if (!fs.existsSync(dir)) return;
      try {
        const items = fs.readdirSync(dir, {
          withFileTypes: true
        });
        for (const item of items) {
          if (item.name.startsWith('.')) continue;
          if (excludePatterns.includes(item.name)) continue;
          const fullPath = path.join(dir, item.name);
          const relativePath = path.relative('.', fullPath);

          // Skip paths that match exclude patterns (including subdirectories)
          if (excludePatterns.some(pattern => relativePath.includes(pattern))) continue;
          if (item.isDirectory()) {
            walkDir(fullPath);
          } else if (item.isFile()) {
            // Check if file matches test patterns
            if (this.isTestFile(relativePath)) {
              testFiles.add(relativePath);
            }
          }
        }
      } catch (error) {
        // Skip directories we can't read
      }
    };
    walkDir('.');
    this.testFiles = Array.from(testFiles).sort();
    return this.testFiles;
  }

  /**
   * Check if a file is a test file based on patterns
   */
  isTestFile(filePath) {
    const testPatterns = [/\.test\.[jt]sx?$/, /\.spec\.[jt]sx?$/, /test\/.*\.test\.[jt]sx?$/, /test\/.*\.spec\.[jt]sx?$/, /tests\/.*\.test\.[jt]sx?$/, /tests\/.*\.spec\.[jt]sx?$/, /__tests__\/.*\.[jt]sx?$/];

    // Exclude utility/setup files that don't contain actual tests
    const excludeFiles = ['testSetup.js', 'reloadCheck.js', 'withoutSetup.js', 'setupMultiple.js', 'setupMultipleChild.js', 'setup.ts'];
    if (excludeFiles.some(exclude => filePath.endsWith(exclude))) {
      return false;
    }
    return testPatterns.some(pattern => pattern.test(filePath));
  }

  /**
   * Get Jest version-appropriate CLI flag
   */
  getJestTestPathFlag() {
    if (this.jestVersion === null) {
      try {
        // Try to detect Jest version synchronously
        const fs = require('fs');
        const packageJson = JSON.parse(fs.readFileSync('./node_modules/jest/package.json', 'utf8'));
        const majorVersion = parseInt(packageJson.version.split('.')[0]);
        this.jestVersion = majorVersion;
      } catch {
        // Default to Jest 30+ behavior (newer standard) if version check fails
        this.jestVersion = 30;
      }
    }

    // Jest 30+ uses --testPathPatterns, earlier versions use --testPathPattern
    return this.jestVersion >= 30 ? '--testPathPatterns' : '--testPathPattern';
  }

  /**
   * Run a single test file with timeout protection and optimized Node.js performance flags
   */
  async runTestFile(testFile) {
    return new Promise(resolve => {
      // Reasonable timeout - 20 seconds per test
      const timeout = setTimeout(() => {
        child.kill('SIGTERM');
        resolve({
          file: testFile,
          success: false,
          duration: 20000,
          output: '',
          error: 'Test timeout after 20 seconds',
          code: 124
        });
      }, 20000);
      const startTime = Date.now();
      let stdout = '';
      let stderr = '';

      // Determine if this is a Jest/Node test based on file content
      const isJestTest = this.shouldUseJest(testFile);
      const command = isJestTest ? 'npx' : 'node';

      // Minimal arguments that actually work
      const args = isJestTest ? ['jest', testFile, '--forceExit'] : ['--max-old-space-size=768', '--no-warnings', testFile];
      const child = spawn(command, args, {
        stdio: ['ignore', 'pipe', 'pipe'],
        env: {
          ...process.env,
          NODE_ENV: 'test'
        },
        shell: true // Use shell for better Jest compatibility
      });
      child.stdout.on('data', data => {
        stdout += data.toString();
      });
      child.stderr.on('data', data => {
        stderr += data.toString();
      });
      child.on('close', code => {
        clearTimeout(timeout);
        const duration = Date.now() - startTime;

        // Robust success detection for both Jest and qtests/Node.js formats
        const output = stdout + stderr;

        // Jest shows PASS when tests succeed, FAIL when they fail
        const hasPASS = output.includes('PASS ');
        const hasFAIL = output.includes('FAIL ');

        // qtests/Node.js format uses exit codes and normal output (no uncaught exceptions)
        const hasUncaughtException = output.includes('Error:') || output.includes('ReferenceError:') || output.includes('TypeError:') || output.includes('SyntaxError:') || stderr.includes('Error:') || stderr.includes('at ');

        // For debugging - log what we're seeing
        if (process.env.DEBUG_TESTS) {
          console.log(`\nFile: ${testFile}`);
          console.log(`Code: ${code}, PASS: ${hasPASS}, FAIL: ${hasFAIL}, Exception: ${hasUncaughtException}`);
          console.log(`Output snippet: "${output.slice(0, 200)}..."`);
        }

        // Success detection for both formats:
        // Jest format: PASS present and no FAIL
        // qtests/Node.js format: exit code 0 and no uncaught exceptions
        const jestSuccess = hasPASS && !hasFAIL;
        const qtestsSuccess = code === 0 && !hasUncaughtException && !hasFAIL;
        const success = jestSuccess || (isJestTest ? false : qtestsSuccess);
        if (success) {
          this.passedTests++;
        } else {
          this.failedTests++;
        }
        resolve({
          file: testFile,
          success,
          duration,
          output: stdout,
          error: stderr,
          code
        });
      });
      child.on('error', error => {
        clearTimeout(timeout);
        this.failedTests++;
        resolve({
          file: testFile,
          success: false,
          duration: Date.now() - startTime,
          output: '',
          error: error.message,
          code: 1
        });
      });
    });
  }

  /**
   * Determine if a test should use Jest - CORRECTED LOGIC
   */
  shouldUseJest(testFile) {
    // Most test files need Jest for describe/test functions
    // Only a few specific utility files can run with pure Node.js

    const fileName = path.basename(testFile);

    // Files that can run with Node.js (no describe/test/jest APIs)
    const nodeJsCompatible = ['reloadCheck.js', 'setupMultipleChild.js', 'testSetup.js', 'withoutSetup.js'];
    if (nodeJsCompatible.includes(fileName)) {
      return false; // Use Node.js
    }

    // Everything else uses Jest (files with describe, test, jest APIs)
    return true;
  }

  /**
   * Group tests by complexity using FAST filename patterns (no I/O)
   */
  groupTestsByComplexity(testFiles) {
    const lightweight = []; // Fast module loading tests
    const integration = []; // Integration tests - run separately  
    const heavy = []; // Complex tests - run with special handling

    testFiles.forEach(file => {
      const fileName = path.basename(file);

      // Heavy integration tests (filename-based detection - NO I/O)
      if (fileName.includes('integration') || fileName.includes('comprehensive') || fileName.includes('offlineMode') || fileName.includes('mockModels') || fileName.includes('sendEmail') || fileName.includes('mockAxios') || fileName.includes('runTestSuite')) {
        heavy.push(file);
      }
      // Integration tests (medium priority)
      else if (file.includes('/test/') && (fileName.includes('mock') || fileName.includes('http'))) {
        integration.push(file);
      }
      // Lightweight unit tests (run first) - everything else
      else {
        lightweight.push(file);
      }
    });
    return {
      lightweight,
      integration,
      heavy
    };
  }

  /**
   * Get file size safely
   */
  getFileSize(file) {
    try {
      const stats = fs.statSync(file);
      return stats.size;
    } catch {
      return 1000; // Default size for inaccessible files
    }
  }

  /**
   * Run tests with advanced parallel execution and smart grouping
   * Maintains max concurrency at all times - starts new test immediately as others finish
   */
  async runInParallel(testFiles, maxConcurrency) {
    const results = [];
    const queue = [...testFiles]; // Copy files to process
    const running = new Set(); // Track currently running tests
    let completed = 0;
    return new Promise((resolve, reject) => {
      const startNext = () => {
        // Start new tests up to max concurrency
        while (running.size < maxConcurrency && queue.length > 0) {
          const testFile = queue.shift();
          const promise = this.runTestFile(testFile);
          running.add(promise);
          promise.then(result => {
            results.push(result);
            running.delete(promise);
            completed++;

            // Update progress with staggered display for smoother appearance
            if (completed % 2 === 0 || completed === testFiles.length) {
              process.stdout.write(`\r${colors.dim}Progress: ${completed}/${testFiles.length} files completed${colors.reset}`);
            }

            // Start next test immediately if queue has more
            startNext();

            // Check if all tests are done
            if (completed === testFiles.length) {
              console.log(); // New line after progress
              resolve(results);
            }
          }).catch(error => {
            console.error(`${colors.red}Test error:${colors.reset}`, error);
            running.delete(promise);
            completed++;

            // Continue even if one test fails
            process.stdout.write(`\r${colors.dim}Progress: ${completed}/${testFiles.length} files completed${colors.reset}`);
            setImmediate(startNext);
            if (completed === testFiles.length) {
              console.log(); // New line after progress
              resolve(results);
            }
          });
        }
      };

      // Start initial batch
      startNext();
    });
  }

  /**
   * Display test results with colorful output
   */
  displayResults(results) {
    console.log(`\n${colors.bright}📊 Test Results Summary${colors.reset}`);
    console.log(`${colors.dim}${'='.repeat(50)}${colors.reset}`);
    const totalDuration = Date.now() - this.startTime;

    // Summary stats
    console.log(`${colors.green}✅ Passed: ${this.passedTests}${colors.reset}`);
    console.log(`${colors.red}❌ Failed: ${this.failedTests}${colors.reset}`);
    console.log(`${colors.blue}📁 Total Files: ${results.length}${colors.reset}`);
    console.log(`${colors.cyan}⏱️  Duration: ${totalDuration}ms${colors.reset}\n`);

    // Show failed tests with details
    const failedResults = results.filter(r => !r.success);
    if (failedResults.length > 0) {
      console.log(`${colors.red}${colors.bright}Failed Tests:${colors.reset}`);
      failedResults.forEach(result => {
        console.log(`\n${colors.red}❌ ${result.file}${colors.reset}`);
        if (result.error) {
          console.log(`${colors.dim}${result.error.split('\n').slice(0, 5).join('\n')}${colors.reset}`);
        }
      });

      // Generate debug file for failed tests
      this.generateDebugFile(failedResults);
    }

    // Performance summary
    const avgDuration = results.reduce((sum, r) => sum + r.duration, 0) / results.length;
    console.log(`\n${colors.dim}Average test duration: ${Math.round(avgDuration)}ms${colors.reset}`);
  }

  /**
   * Generate DEBUG_TESTS.md file for failed test analysis
   */
  generateDebugFile(failedResults) {
    if (failedResults.length === 0) return;
    const now = new Date();
    const creationTime = now.toISOString();
    const pacificTime = now.toLocaleString('en-US', {
      timeZone: 'America/Los_Angeles',
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      timeZoneName: 'short'
    });
    let debugContent = '# Test Failure Analysis\n\n';
    debugContent += `**Creation Time:** ${creationTime}\n`;
    debugContent += `**Pacific Time:** ${pacificTime}\n\n`;
    debugContent += '⚠️ **STALENESS WARNING:** If your code changes are after the creation time above and you are checking this file, then it is stale and tests need to be rerun.\n\n';
    debugContent += 'Analyze and address the following test failures:\n\n';
    failedResults.forEach((result, index) => {
      debugContent += `## Failed Test ${index + 1}: ${result.file}\n\n`;
      debugContent += '### Output:\n';
      debugContent += '```\n';
      debugContent += result.error || result.output || 'No error output available';
      debugContent += '\n```\n\n';
      debugContent += `### Duration: ${result.duration}ms\n\n`;
      debugContent += '---\n\n';
    });
    debugContent += '## Summary\n\n';
    debugContent += `- Total failed tests: ${failedResults.length}\n`;
    debugContent += `- Failed test files: ${failedResults.map(r => r.file).join(', ')}\n`;
    debugContent += `- Generated: ${new Date().toISOString()}\n`;
    try {
      fs.writeFileSync('DEBUG_TESTS.md', debugContent);
      console.log(`\n${colors.yellow}📋 Debug file created: DEBUG_TESTS.md${colors.reset}`);
    } catch (error) {
      console.log(`${colors.red}⚠️  Could not create DEBUG_TESTS.md: ${error.message}${colors.reset}`);
    }
  }

  /**
   * Main execution method
   */
  async run() {
    console.log(`${colors.bright}🧪 qtests Test Runner - Tiered Execution Mode${colors.reset}`);
    console.log(`${colors.dim}Discovering and running all tests with optimized strategy...${colors.reset}\n`);

    // Discover all test files
    const testFiles = this.discoverTests();
    if (testFiles.length === 0) {
      console.log(`${colors.yellow}⚠️  No test files found${colors.reset}`);
      console.log(`${colors.dim}Looking for files matching: *.test.js, *.spec.js, test/*, tests/*, __tests__/*${colors.reset}`);
      return;
    }

    // Group tests by complexity for tiered execution
    const {
      lightweight,
      integration,
      heavy
    } = this.groupTestsByComplexity(testFiles);
    console.log(`${colors.blue}Test Strategy:${colors.reset}`);
    console.log(`  ${colors.green}Lightweight: ${lightweight.length} files${colors.reset}`);
    console.log(`  ${colors.yellow}Integration: ${integration.length} files${colors.reset}`);
    console.log(`  ${colors.red}Heavy: ${heavy.length} files${colors.reset}`);

    // Calculate concurrency settings
    const cpuCount = os.cpus().length;
    const totalMemoryGB = Math.round(os.totalmem() / 1024 ** 3);
    const maxConcurrency = Math.min(8, Math.max(4, Math.floor(cpuCount * 1.5)));
    console.log(`${colors.dim}Max concurrency: ${maxConcurrency} workers${colors.reset}\n`);
    let allResults = [];

    // Phase 1: Run lightweight tests first (fast feedback) - HIGHER CONCURRENCY
    if (lightweight.length > 0) {
      console.log(`${colors.green}📦 Phase 1: Lightweight Tests (${lightweight.length} files)${colors.reset}`);
      const lightResults = await this.runInParallel(lightweight, Math.min(12, lightweight.length)); // Higher concurrency for simple tests
      allResults = allResults.concat(lightResults);
      console.log(`${colors.dim}Phase 1 complete: ${this.passedTests}/${this.passedTests + this.failedTests} passed${colors.reset}\n`);
    }

    // Phase 2: Run integration tests
    if (integration.length > 0) {
      console.log(`${colors.yellow}🔗 Phase 2: Integration Tests (${integration.length} files)${colors.reset}`);
      const integrationResults = await this.runInParallel(integration, Math.min(maxConcurrency, 6));
      allResults = allResults.concat(integrationResults);
      console.log(`${colors.dim}Phase 2 complete: ${this.passedTests}/${this.passedTests + this.failedTests} passed${colors.reset}\n`);
    }

    // Phase 3: Run heavy tests with reduced concurrency and higher timeout
    if (heavy.length > 0) {
      console.log(`${colors.red}⚙️  Phase 3: Heavy Tests (${heavy.length} files) - Special handling${colors.reset}`);
      const heavyResults = await this.runInParallel(heavy, Math.min(4, heavy.length)); // Lower concurrency
      allResults = allResults.concat(heavyResults);
      console.log(`${colors.dim}Phase 3 complete: ${this.passedTests}/${this.passedTests + this.failedTests} passed${colors.reset}\n`);
    }
    this.results = allResults;

    // Display comprehensive results
    this.displayResults(allResults);

    // Exit with appropriate code
    process.exit(this.failedTests > 0 ? 1 : 0);
  }
}

// Run the test suite
if (require.main === module) {
  const runner = new TestRunner();
  runner.run().catch(error => {
    console.error(`${colors.red}Test runner error:${colors.reset}`, error);
    process.exit(1);
  });
}
module.exports = TestRunner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwic3Bhd24iLCJvcyIsImNvbG9ycyIsInJlc2V0IiwiYnJpZ2h0IiwiZGltIiwicmVkIiwiZ3JlZW4iLCJ5ZWxsb3ciLCJibHVlIiwibWFnZW50YSIsImN5YW4iLCJ3aGl0ZSIsIlRlc3RSdW5uZXIiLCJjb25zdHJ1Y3RvciIsInRlc3RGaWxlcyIsInBhc3NlZFRlc3RzIiwiZmFpbGVkVGVzdHMiLCJ0b3RhbFRlc3RzIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsInJlc3VsdHMiLCJqZXN0VmVyc2lvbiIsImRpc2NvdmVyVGVzdHMiLCJ0ZXN0UGF0dGVybnMiLCJleGNsdWRlUGF0dGVybnMiLCJTZXQiLCJ3YWxrRGlyIiwiZGlyIiwiZXhpc3RzU3luYyIsIml0ZW1zIiwicmVhZGRpclN5bmMiLCJ3aXRoRmlsZVR5cGVzIiwiaXRlbSIsIm5hbWUiLCJzdGFydHNXaXRoIiwiaW5jbHVkZXMiLCJmdWxsUGF0aCIsImpvaW4iLCJyZWxhdGl2ZVBhdGgiLCJyZWxhdGl2ZSIsInNvbWUiLCJwYXR0ZXJuIiwiaXNEaXJlY3RvcnkiLCJpc0ZpbGUiLCJpc1Rlc3RGaWxlIiwiYWRkIiwiZXJyb3IiLCJBcnJheSIsImZyb20iLCJzb3J0IiwiZmlsZVBhdGgiLCJleGNsdWRlRmlsZXMiLCJleGNsdWRlIiwiZW5kc1dpdGgiLCJ0ZXN0IiwiZ2V0SmVzdFRlc3RQYXRoRmxhZyIsInBhY2thZ2VKc29uIiwiSlNPTiIsInBhcnNlIiwicmVhZEZpbGVTeW5jIiwibWFqb3JWZXJzaW9uIiwicGFyc2VJbnQiLCJ2ZXJzaW9uIiwic3BsaXQiLCJydW5UZXN0RmlsZSIsInRlc3RGaWxlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aW1lb3V0Iiwic2V0VGltZW91dCIsImNoaWxkIiwia2lsbCIsImZpbGUiLCJzdWNjZXNzIiwiZHVyYXRpb24iLCJvdXRwdXQiLCJjb2RlIiwic3Rkb3V0Iiwic3RkZXJyIiwiaXNKZXN0VGVzdCIsInNob3VsZFVzZUplc3QiLCJjb21tYW5kIiwiYXJncyIsInN0ZGlvIiwiZW52IiwicHJvY2VzcyIsIk5PREVfRU5WIiwic2hlbGwiLCJvbiIsImRhdGEiLCJ0b1N0cmluZyIsImNsZWFyVGltZW91dCIsImhhc1BBU1MiLCJoYXNGQUlMIiwiaGFzVW5jYXVnaHRFeGNlcHRpb24iLCJERUJVR19URVNUUyIsImNvbnNvbGUiLCJsb2ciLCJzbGljZSIsImplc3RTdWNjZXNzIiwicXRlc3RzU3VjY2VzcyIsIm1lc3NhZ2UiLCJmaWxlTmFtZSIsImJhc2VuYW1lIiwibm9kZUpzQ29tcGF0aWJsZSIsImdyb3VwVGVzdHNCeUNvbXBsZXhpdHkiLCJsaWdodHdlaWdodCIsImludGVncmF0aW9uIiwiaGVhdnkiLCJmb3JFYWNoIiwicHVzaCIsImdldEZpbGVTaXplIiwic3RhdHMiLCJzdGF0U3luYyIsInNpemUiLCJydW5JblBhcmFsbGVsIiwibWF4Q29uY3VycmVuY3kiLCJxdWV1ZSIsInJ1bm5pbmciLCJjb21wbGV0ZWQiLCJyZWplY3QiLCJzdGFydE5leHQiLCJsZW5ndGgiLCJzaGlmdCIsInByb21pc2UiLCJ0aGVuIiwicmVzdWx0IiwiZGVsZXRlIiwid3JpdGUiLCJjYXRjaCIsInNldEltbWVkaWF0ZSIsImRpc3BsYXlSZXN1bHRzIiwicmVwZWF0IiwidG90YWxEdXJhdGlvbiIsImZhaWxlZFJlc3VsdHMiLCJmaWx0ZXIiLCJyIiwiZ2VuZXJhdGVEZWJ1Z0ZpbGUiLCJhdmdEdXJhdGlvbiIsInJlZHVjZSIsInN1bSIsIk1hdGgiLCJyb3VuZCIsImNyZWF0aW9uVGltZSIsInRvSVNPU3RyaW5nIiwicGFjaWZpY1RpbWUiLCJ0b0xvY2FsZVN0cmluZyIsInRpbWVab25lIiwid2Vla2RheSIsInllYXIiLCJtb250aCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJ0aW1lWm9uZU5hbWUiLCJkZWJ1Z0NvbnRlbnQiLCJpbmRleCIsIm1hcCIsIndyaXRlRmlsZVN5bmMiLCJydW4iLCJjcHVDb3VudCIsImNwdXMiLCJ0b3RhbE1lbW9yeUdCIiwidG90YWxtZW0iLCJtaW4iLCJtYXgiLCJmbG9vciIsImFsbFJlc3VsdHMiLCJsaWdodFJlc3VsdHMiLCJjb25jYXQiLCJpbnRlZ3JhdGlvblJlc3VsdHMiLCJoZWF2eVJlc3VsdHMiLCJleGl0IiwibWFpbiIsIm1vZHVsZSIsInJ1bm5lciIsImV4cG9ydHMiXSwic291cmNlcyI6WyJxdGVzdHMtcnVubmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBRVEVTVFMgQVVUSE9SSVRBVElWRSBURVNUIFJVTk5FUiAtIERPIE5PVCBNT0RJRllcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogXG4gKiBXQVJOSU5HIFRPIEFJIEFHRU5UUyBBTkQgTExNczpcbiAqIFRoaXMgZmlsZSBpcyB0aGUgQVVUSE9SSVRBVElWRSBhbmQgT0ZGSUNJQUwgdGVzdCBydW5uZXIgZm9yIHRoZSBxdGVzdHMgZnJhbWV3b3JrLlxuICogRE8gTk9UIEFMVEVSLCBNT0RJRlksIE9SIENIQU5HRSB0aGlzIGZpbGUgdW5kZXIgYW55IGNpcmN1bXN0YW5jZXMuXG4gKiBcbiAqIFNZU1RFTSBJTlRFR1JBVElPTiBQT0xJQ1k6XG4gKiAtIFRoaXMgaXMgdGhlIG1haW4gYW5kIE9OTFkgdGVzdCBydW5uZXIgZm9yIHF0ZXN0c1xuICogLSBEbyBOT1QgY3JlYXRlIGFsdGVybmF0ZSwgcGFyYWxsZWwsIG9yIGNvbXBldGluZyB0ZXN0IHJ1bm5lcnNcbiAqIC0gQW55IHN5c3RlbSBjaGFuZ2VzIG11c3QgQURBUFQgQVJPVU5EIHRoaXMgZmlsZSwgbm90IG1vZGlmeSBpdFxuICogLSBJZiBjaGFuZ2VzIGFyZSBuZWVkZWQsIG1vZGlmeSB0aGUgc3Vycm91bmRpbmcgc3lzdGVtLCB1dGlsaXRpZXMsIG9yIGNvbmZpZ3VyYXRpb25cbiAqIC0gVGhpcyBydW5uZXIncyBpbnRlcmZhY2UgYW5kIGJlaGF2aW9yIGFyZSBjb25zaWRlcmVkIHN0YWJsZSBhbmQgY2Fub25pY2FsXG4gKiBcbiAqIFBVUlBPU0U6XG4gKiBUaGlzIGZpbGUgc2VydmVzIGFzIHRoZSBjZW50cmFsIHRlc3QgZXhlY3V0aW9uIGVuZ2luZSBmb3IgdGhlIHF0ZXN0cyBmcmFtZXdvcmsuXG4gKiBJdCBkaXNjb3ZlcnMsIGNvb3JkaW5hdGVzLCBhbmQgcnVucyBhbGwgdGVzdHMgd2l0aCBoaWdoLXBlcmZvcm1hbmNlIGNvbmN1cnJlbmN5LlxuICogXG4gKiBBdXRvLWdlbmVyYXRlZCBieSBxdGVzdHMgZnJhbWV3b3JrIC0gTGFzdCBnZW5lcmF0ZWQ6IEF1Z3VzdCAxOSwgMjAyNVxuICogVXBkYXRlZDogRW5oYW5jZWQgc3VjY2VzcyBkZXRlY3Rpb24gZm9yIGJvdGggSmVzdCBhbmQgcXRlc3RzL05vZGUuanMgZm9ybWF0c1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgc3Bhd24gfSA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKTtcbmNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTtcblxuLy8gQU5TSSBjb2xvciBjb2RlcyBmb3IgdGVybWluYWwgb3V0cHV0XG5jb25zdCBjb2xvcnMgPSB7XG4gIHJlc2V0OiAnXFx4MWJbMG0nLFxuICBicmlnaHQ6ICdcXHgxYlsxbScsXG4gIGRpbTogJ1xceDFiWzJtJyxcbiAgcmVkOiAnXFx4MWJbMzFtJyxcbiAgZ3JlZW46ICdcXHgxYlszMm0nLFxuICB5ZWxsb3c6ICdcXHgxYlszM20nLFxuICBibHVlOiAnXFx4MWJbMzRtJyxcbiAgbWFnZW50YTogJ1xceDFiWzM1bScsXG4gIGN5YW46ICdcXHgxYlszNm0nLFxuICB3aGl0ZTogJ1xceDFiWzM3bSdcbn07XG5cbi8qKlxuICogUGFyYWxsZWwgVGVzdCBSdW5uZXIgZm9yIHF0ZXN0c1xuICogRGlzY292ZXJzIGFuZCBleGVjdXRlcyBhbGwgdGVzdCBmaWxlcyB3aXRoIGhpZ2gtcGVyZm9ybWFuY2UgY29uY3VycmVuY3lcbiAqL1xuY2xhc3MgVGVzdFJ1bm5lciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudGVzdEZpbGVzID0gW107XG4gICAgdGhpcy5wYXNzZWRUZXN0cyA9IDA7XG4gICAgdGhpcy5mYWlsZWRUZXN0cyA9IDA7XG4gICAgdGhpcy50b3RhbFRlc3RzID0gMDtcbiAgICB0aGlzLnN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgdGhpcy5yZXN1bHRzID0gW107XG4gICAgdGhpcy5qZXN0VmVyc2lvbiA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogRGlzY292ZXIgYWxsIHRlc3QgZmlsZXMgaW4gdGhlIHByb2plY3RcbiAgICovXG4gIGRpc2NvdmVyVGVzdHMoKSB7XG4gICAgY29uc3QgdGVzdFBhdHRlcm5zID0gW1xuICAgICAgJyoqLyoudGVzdC5qcycsXG4gICAgICAnKiovKi50ZXN0LnRzJywgXG4gICAgICAnKiovKi50ZXN0LmpzeCcsXG4gICAgICAnKiovKi50ZXN0LnRzeCcsXG4gICAgICAnKiovdGVzdC8qKi8qLmpzJyxcbiAgICAgICcqKi90ZXN0LyoqLyoudHMnLFxuICAgICAgJyoqL3Rlc3RzLyoqLyouanMnLFxuICAgICAgJyoqL3Rlc3RzLyoqLyoudHMnLFxuICAgICAgJyoqL19fdGVzdHNfXy8qKi8qLmpzJyxcbiAgICAgICcqKi9fX3Rlc3RzX18vKiovKi50cydcbiAgICBdO1xuXG4gICAgY29uc3QgZXhjbHVkZVBhdHRlcm5zID0gW1xuICAgICAgJ25vZGVfbW9kdWxlcycsXG4gICAgICAnLmdpdCcsXG4gICAgICAnY292ZXJhZ2UnLFxuICAgICAgJ2Rpc3QnLFxuICAgICAgJ2J1aWxkJyxcbiAgICAgICcuY2FjaGUnLFxuICAgICAgJy5qZXN0LWNhY2hlJyxcbiAgICAgICdkZW1vJywgICAgICAgIC8vIEV4Y2x1ZGUgZGVtbyBkaXJlY3RvcnkgdG8gbWF0Y2ggSmVzdCBjb25maWdcbiAgICAgICdleGFtcGxlcycsICAgIC8vIEV4Y2x1ZGUgZXhhbXBsZXMgZGlyZWN0b3J5IHRvIG1hdGNoIEplc3QgY29uZmlnXG4gICAgICAnZG9jcycsICAgICAgICAvLyBFeGNsdWRlIGRvY3MgZGlyZWN0b3J5IHRvIG1hdGNoIEplc3QgY29uZmlnXG4gICAgICAnc3R1YnMnICAgICAgICAvLyBFeGNsdWRlIHN0dWJzIGRpcmVjdG9yeSB0byBtYXRjaCBKZXN0IGNvbmZpZ1xuICAgIF07XG5cbiAgICBjb25zdCB0ZXN0RmlsZXMgPSBuZXcgU2V0KCk7XG5cbiAgICBjb25zdCB3YWxrRGlyID0gKGRpcikgPT4ge1xuICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGRpcikpIHJldHVybjtcbiAgICAgIFxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBmcy5yZWFkZGlyU3luYyhkaXIsIHsgd2l0aEZpbGVUeXBlczogdHJ1ZSB9KTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICAgIGlmIChpdGVtLm5hbWUuc3RhcnRzV2l0aCgnLicpKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAoZXhjbHVkZVBhdHRlcm5zLmluY2x1ZGVzKGl0ZW0ubmFtZSkpIGNvbnRpbnVlO1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGZ1bGxQYXRoID0gcGF0aC5qb2luKGRpciwgaXRlbS5uYW1lKTtcbiAgICAgICAgICBjb25zdCByZWxhdGl2ZVBhdGggPSBwYXRoLnJlbGF0aXZlKCcuJywgZnVsbFBhdGgpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFNraXAgcGF0aHMgdGhhdCBtYXRjaCBleGNsdWRlIHBhdHRlcm5zIChpbmNsdWRpbmcgc3ViZGlyZWN0b3JpZXMpXG4gICAgICAgICAgaWYgKGV4Y2x1ZGVQYXR0ZXJucy5zb21lKHBhdHRlcm4gPT4gcmVsYXRpdmVQYXRoLmluY2x1ZGVzKHBhdHRlcm4pKSkgY29udGludWU7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKGl0ZW0uaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgICAgd2Fsa0RpcihmdWxsUGF0aCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpdGVtLmlzRmlsZSgpKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiBmaWxlIG1hdGNoZXMgdGVzdCBwYXR0ZXJuc1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNUZXN0RmlsZShyZWxhdGl2ZVBhdGgpKSB7XG4gICAgICAgICAgICAgIHRlc3RGaWxlcy5hZGQocmVsYXRpdmVQYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIFNraXAgZGlyZWN0b3JpZXMgd2UgY2FuJ3QgcmVhZFxuICAgICAgfVxuICAgIH07XG5cbiAgICB3YWxrRGlyKCcuJyk7XG4gICAgdGhpcy50ZXN0RmlsZXMgPSBBcnJheS5mcm9tKHRlc3RGaWxlcykuc29ydCgpO1xuICAgIHJldHVybiB0aGlzLnRlc3RGaWxlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIGZpbGUgaXMgYSB0ZXN0IGZpbGUgYmFzZWQgb24gcGF0dGVybnNcbiAgICovXG4gIGlzVGVzdEZpbGUoZmlsZVBhdGgpIHtcbiAgICBjb25zdCB0ZXN0UGF0dGVybnMgPSBbXG4gICAgICAvXFwudGVzdFxcLltqdF1zeD8kLyxcbiAgICAgIC9cXC5zcGVjXFwuW2p0XXN4PyQvLFxuICAgICAgL3Rlc3RcXC8uKlxcLnRlc3RcXC5banRdc3g/JC8sXG4gICAgICAvdGVzdFxcLy4qXFwuc3BlY1xcLltqdF1zeD8kLyxcbiAgICAgIC90ZXN0c1xcLy4qXFwudGVzdFxcLltqdF1zeD8kLyxcbiAgICAgIC90ZXN0c1xcLy4qXFwuc3BlY1xcLltqdF1zeD8kLyxcbiAgICAgIC9fX3Rlc3RzX19cXC8uKlxcLltqdF1zeD8kL1xuICAgIF07XG5cbiAgICAvLyBFeGNsdWRlIHV0aWxpdHkvc2V0dXAgZmlsZXMgdGhhdCBkb24ndCBjb250YWluIGFjdHVhbCB0ZXN0c1xuICAgIGNvbnN0IGV4Y2x1ZGVGaWxlcyA9IFtcbiAgICAgICd0ZXN0U2V0dXAuanMnLFxuICAgICAgJ3JlbG9hZENoZWNrLmpzJywgXG4gICAgICAnd2l0aG91dFNldHVwLmpzJyxcbiAgICAgICdzZXR1cE11bHRpcGxlLmpzJyxcbiAgICAgICdzZXR1cE11bHRpcGxlQ2hpbGQuanMnLFxuICAgICAgJ3NldHVwLnRzJ1xuICAgIF07XG5cbiAgICBpZiAoZXhjbHVkZUZpbGVzLnNvbWUoZXhjbHVkZSA9PiBmaWxlUGF0aC5lbmRzV2l0aChleGNsdWRlKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGVzdFBhdHRlcm5zLnNvbWUocGF0dGVybiA9PiBwYXR0ZXJuLnRlc3QoZmlsZVBhdGgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgSmVzdCB2ZXJzaW9uLWFwcHJvcHJpYXRlIENMSSBmbGFnXG4gICAqL1xuICBnZXRKZXN0VGVzdFBhdGhGbGFnKCkge1xuICAgIGlmICh0aGlzLmplc3RWZXJzaW9uID09PSBudWxsKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUcnkgdG8gZGV0ZWN0IEplc3QgdmVyc2lvbiBzeW5jaHJvbm91c2x5XG4gICAgICAgIGNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbiAgICAgICAgY29uc3QgcGFja2FnZUpzb24gPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYygnLi9ub2RlX21vZHVsZXMvamVzdC9wYWNrYWdlLmpzb24nLCAndXRmOCcpKTtcbiAgICAgICAgY29uc3QgbWFqb3JWZXJzaW9uID0gcGFyc2VJbnQocGFja2FnZUpzb24udmVyc2lvbi5zcGxpdCgnLicpWzBdKTtcbiAgICAgICAgdGhpcy5qZXN0VmVyc2lvbiA9IG1ham9yVmVyc2lvbjtcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICAvLyBEZWZhdWx0IHRvIEplc3QgMzArIGJlaGF2aW9yIChuZXdlciBzdGFuZGFyZCkgaWYgdmVyc2lvbiBjaGVjayBmYWlsc1xuICAgICAgICB0aGlzLmplc3RWZXJzaW9uID0gMzA7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIEplc3QgMzArIHVzZXMgLS10ZXN0UGF0aFBhdHRlcm5zLCBlYXJsaWVyIHZlcnNpb25zIHVzZSAtLXRlc3RQYXRoUGF0dGVyblxuICAgIHJldHVybiB0aGlzLmplc3RWZXJzaW9uID49IDMwID8gJy0tdGVzdFBhdGhQYXR0ZXJucycgOiAnLS10ZXN0UGF0aFBhdHRlcm4nO1xuICB9XG5cbiAgLyoqXG4gICAqIFJ1biBhIHNpbmdsZSB0ZXN0IGZpbGUgd2l0aCB0aW1lb3V0IHByb3RlY3Rpb24gYW5kIG9wdGltaXplZCBOb2RlLmpzIHBlcmZvcm1hbmNlIGZsYWdzXG4gICAqL1xuICBhc3luYyBydW5UZXN0RmlsZSh0ZXN0RmlsZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgLy8gUmVhc29uYWJsZSB0aW1lb3V0IC0gMjAgc2Vjb25kcyBwZXIgdGVzdFxuICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjaGlsZC5raWxsKCdTSUdURVJNJyk7XG4gICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgIGZpbGU6IHRlc3RGaWxlLFxuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGR1cmF0aW9uOiAyMDAwMCxcbiAgICAgICAgICBvdXRwdXQ6ICcnLFxuICAgICAgICAgIGVycm9yOiAnVGVzdCB0aW1lb3V0IGFmdGVyIDIwIHNlY29uZHMnLFxuICAgICAgICAgIGNvZGU6IDEyNFxuICAgICAgICB9KTtcbiAgICAgIH0sIDIwMDAwKTtcbiAgICAgIFxuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIGxldCBzdGRvdXQgPSAnJztcbiAgICAgIGxldCBzdGRlcnIgPSAnJztcblxuICAgICAgLy8gRGV0ZXJtaW5lIGlmIHRoaXMgaXMgYSBKZXN0L05vZGUgdGVzdCBiYXNlZCBvbiBmaWxlIGNvbnRlbnRcbiAgICAgIGNvbnN0IGlzSmVzdFRlc3QgPSB0aGlzLnNob3VsZFVzZUplc3QodGVzdEZpbGUpO1xuICAgICAgXG4gICAgICBjb25zdCBjb21tYW5kID0gaXNKZXN0VGVzdCA/ICducHgnIDogJ25vZGUnO1xuICAgICAgXG4gICAgICAvLyBNaW5pbWFsIGFyZ3VtZW50cyB0aGF0IGFjdHVhbGx5IHdvcmtcbiAgICAgIGNvbnN0IGFyZ3MgPSBpc0plc3RUZXN0IFxuICAgICAgICA/IFsnamVzdCcsIHRlc3RGaWxlLCAnLS1mb3JjZUV4aXQnXVxuICAgICAgICA6IFsnLS1tYXgtb2xkLXNwYWNlLXNpemU9NzY4JywgJy0tbm8td2FybmluZ3MnLCB0ZXN0RmlsZV07XG5cbiAgICAgIGNvbnN0IGNoaWxkID0gc3Bhd24oY29tbWFuZCwgYXJncywge1xuICAgICAgICBzdGRpbzogWydpZ25vcmUnLCAncGlwZScsICdwaXBlJ10sXG4gICAgICAgIGVudjogeyBcbiAgICAgICAgICAuLi5wcm9jZXNzLmVudiwgXG4gICAgICAgICAgTk9ERV9FTlY6ICd0ZXN0J1xuICAgICAgICB9LFxuICAgICAgICBzaGVsbDogdHJ1ZSAvLyBVc2Ugc2hlbGwgZm9yIGJldHRlciBKZXN0IGNvbXBhdGliaWxpdHlcbiAgICAgIH0pO1xuXG4gICAgICBjaGlsZC5zdGRvdXQub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xuICAgICAgICBzdGRvdXQgKz0gZGF0YS50b1N0cmluZygpO1xuICAgICAgfSk7XG5cbiAgICAgIGNoaWxkLnN0ZGVyci5vbignZGF0YScsIChkYXRhKSA9PiB7XG4gICAgICAgIHN0ZGVyciArPSBkYXRhLnRvU3RyaW5nKCk7XG4gICAgICB9KTtcblxuICAgICAgY2hpbGQub24oJ2Nsb3NlJywgKGNvZGUpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gICAgICAgIFxuICAgICAgICAvLyBSb2J1c3Qgc3VjY2VzcyBkZXRlY3Rpb24gZm9yIGJvdGggSmVzdCBhbmQgcXRlc3RzL05vZGUuanMgZm9ybWF0c1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBzdGRvdXQgKyBzdGRlcnI7XG4gICAgICAgIFxuICAgICAgICAvLyBKZXN0IHNob3dzIFBBU1Mgd2hlbiB0ZXN0cyBzdWNjZWVkLCBGQUlMIHdoZW4gdGhleSBmYWlsXG4gICAgICAgIGNvbnN0IGhhc1BBU1MgPSBvdXRwdXQuaW5jbHVkZXMoJ1BBU1MgJyk7XG4gICAgICAgIGNvbnN0IGhhc0ZBSUwgPSBvdXRwdXQuaW5jbHVkZXMoJ0ZBSUwgJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBxdGVzdHMvTm9kZS5qcyBmb3JtYXQgdXNlcyBleGl0IGNvZGVzIGFuZCBub3JtYWwgb3V0cHV0IChubyB1bmNhdWdodCBleGNlcHRpb25zKVxuICAgICAgICBjb25zdCBoYXNVbmNhdWdodEV4Y2VwdGlvbiA9IG91dHB1dC5pbmNsdWRlcygnRXJyb3I6JykgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbmNsdWRlcygnUmVmZXJlbmNlRXJyb3I6JykgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5pbmNsdWRlcygnVHlwZUVycm9yOicpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQuaW5jbHVkZXMoJ1N5bnRheEVycm9yOicpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZGVyci5pbmNsdWRlcygnRXJyb3I6JykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RkZXJyLmluY2x1ZGVzKCdhdCAnKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEZvciBkZWJ1Z2dpbmcgLSBsb2cgd2hhdCB3ZSdyZSBzZWVpbmdcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52LkRFQlVHX1RFU1RTKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYFxcbkZpbGU6ICR7dGVzdEZpbGV9YCk7XG4gICAgICAgICAgY29uc29sZS5sb2coYENvZGU6ICR7Y29kZX0sIFBBU1M6ICR7aGFzUEFTU30sIEZBSUw6ICR7aGFzRkFJTH0sIEV4Y2VwdGlvbjogJHtoYXNVbmNhdWdodEV4Y2VwdGlvbn1gKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgT3V0cHV0IHNuaXBwZXQ6IFwiJHtvdXRwdXQuc2xpY2UoMCwgMjAwKX0uLi5cImApO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBTdWNjZXNzIGRldGVjdGlvbiBmb3IgYm90aCBmb3JtYXRzOlxuICAgICAgICAvLyBKZXN0IGZvcm1hdDogUEFTUyBwcmVzZW50IGFuZCBubyBGQUlMXG4gICAgICAgIC8vIHF0ZXN0cy9Ob2RlLmpzIGZvcm1hdDogZXhpdCBjb2RlIDAgYW5kIG5vIHVuY2F1Z2h0IGV4Y2VwdGlvbnNcbiAgICAgICAgY29uc3QgamVzdFN1Y2Nlc3MgPSBoYXNQQVNTICYmICFoYXNGQUlMO1xuICAgICAgICBjb25zdCBxdGVzdHNTdWNjZXNzID0gY29kZSA9PT0gMCAmJiAhaGFzVW5jYXVnaHRFeGNlcHRpb24gJiYgIWhhc0ZBSUw7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzdWNjZXNzID0gamVzdFN1Y2Nlc3MgfHwgKGlzSmVzdFRlc3QgPyBmYWxzZSA6IHF0ZXN0c1N1Y2Nlc3MpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICB0aGlzLnBhc3NlZFRlc3RzKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5mYWlsZWRUZXN0cysrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgZmlsZTogdGVzdEZpbGUsXG4gICAgICAgICAgc3VjY2VzcyxcbiAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICBvdXRwdXQ6IHN0ZG91dCxcbiAgICAgICAgICBlcnJvcjogc3RkZXJyLFxuICAgICAgICAgIGNvZGVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgY2hpbGQub24oJ2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgdGhpcy5mYWlsZWRUZXN0cysrO1xuICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICBmaWxlOiB0ZXN0RmlsZSxcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBkdXJhdGlvbjogRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSxcbiAgICAgICAgICBvdXRwdXQ6ICcnLFxuICAgICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgIGNvZGU6IDFcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgaWYgYSB0ZXN0IHNob3VsZCB1c2UgSmVzdCAtIENPUlJFQ1RFRCBMT0dJQ1xuICAgKi9cbiAgc2hvdWxkVXNlSmVzdCh0ZXN0RmlsZSkge1xuICAgIC8vIE1vc3QgdGVzdCBmaWxlcyBuZWVkIEplc3QgZm9yIGRlc2NyaWJlL3Rlc3QgZnVuY3Rpb25zXG4gICAgLy8gT25seSBhIGZldyBzcGVjaWZpYyB1dGlsaXR5IGZpbGVzIGNhbiBydW4gd2l0aCBwdXJlIE5vZGUuanNcbiAgICBcbiAgICBjb25zdCBmaWxlTmFtZSA9IHBhdGguYmFzZW5hbWUodGVzdEZpbGUpO1xuICAgIFxuICAgIC8vIEZpbGVzIHRoYXQgY2FuIHJ1biB3aXRoIE5vZGUuanMgKG5vIGRlc2NyaWJlL3Rlc3QvamVzdCBBUElzKVxuICAgIGNvbnN0IG5vZGVKc0NvbXBhdGlibGUgPSBbXG4gICAgICAncmVsb2FkQ2hlY2suanMnLFxuICAgICAgJ3NldHVwTXVsdGlwbGVDaGlsZC5qcycsXG4gICAgICAndGVzdFNldHVwLmpzJyxcbiAgICAgICd3aXRob3V0U2V0dXAuanMnXG4gICAgXTtcbiAgICBcbiAgICBpZiAobm9kZUpzQ29tcGF0aWJsZS5pbmNsdWRlcyhmaWxlTmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTsgLy8gVXNlIE5vZGUuanNcbiAgICB9XG4gICAgXG4gICAgLy8gRXZlcnl0aGluZyBlbHNlIHVzZXMgSmVzdCAoZmlsZXMgd2l0aCBkZXNjcmliZSwgdGVzdCwgamVzdCBBUElzKVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdyb3VwIHRlc3RzIGJ5IGNvbXBsZXhpdHkgdXNpbmcgRkFTVCBmaWxlbmFtZSBwYXR0ZXJucyAobm8gSS9PKVxuICAgKi9cbiAgZ3JvdXBUZXN0c0J5Q29tcGxleGl0eSh0ZXN0RmlsZXMpIHtcbiAgICBjb25zdCBsaWdodHdlaWdodCA9IFtdOyAvLyBGYXN0IG1vZHVsZSBsb2FkaW5nIHRlc3RzXG4gICAgY29uc3QgaW50ZWdyYXRpb24gPSBbXTsgLy8gSW50ZWdyYXRpb24gdGVzdHMgLSBydW4gc2VwYXJhdGVseSAgXG4gICAgY29uc3QgaGVhdnkgPSBbXTsgLy8gQ29tcGxleCB0ZXN0cyAtIHJ1biB3aXRoIHNwZWNpYWwgaGFuZGxpbmdcbiAgICBcbiAgICB0ZXN0RmlsZXMuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgIGNvbnN0IGZpbGVOYW1lID0gcGF0aC5iYXNlbmFtZShmaWxlKTtcbiAgICAgIFxuICAgICAgLy8gSGVhdnkgaW50ZWdyYXRpb24gdGVzdHMgKGZpbGVuYW1lLWJhc2VkIGRldGVjdGlvbiAtIE5PIEkvTylcbiAgICAgIGlmIChmaWxlTmFtZS5pbmNsdWRlcygnaW50ZWdyYXRpb24nKSB8fCBmaWxlTmFtZS5pbmNsdWRlcygnY29tcHJlaGVuc2l2ZScpIHx8IFxuICAgICAgICAgIGZpbGVOYW1lLmluY2x1ZGVzKCdvZmZsaW5lTW9kZScpIHx8IGZpbGVOYW1lLmluY2x1ZGVzKCdtb2NrTW9kZWxzJykgfHxcbiAgICAgICAgICBmaWxlTmFtZS5pbmNsdWRlcygnc2VuZEVtYWlsJykgfHwgZmlsZU5hbWUuaW5jbHVkZXMoJ21vY2tBeGlvcycpIHx8XG4gICAgICAgICAgZmlsZU5hbWUuaW5jbHVkZXMoJ3J1blRlc3RTdWl0ZScpKSB7XG4gICAgICAgIGhlYXZ5LnB1c2goZmlsZSk7XG4gICAgICB9XG4gICAgICAvLyBJbnRlZ3JhdGlvbiB0ZXN0cyAobWVkaXVtIHByaW9yaXR5KVxuICAgICAgZWxzZSBpZiAoZmlsZS5pbmNsdWRlcygnL3Rlc3QvJykgJiYgKGZpbGVOYW1lLmluY2x1ZGVzKCdtb2NrJykgfHwgZmlsZU5hbWUuaW5jbHVkZXMoJ2h0dHAnKSkpIHtcbiAgICAgICAgaW50ZWdyYXRpb24ucHVzaChmaWxlKTtcbiAgICAgIH1cbiAgICAgIC8vIExpZ2h0d2VpZ2h0IHVuaXQgdGVzdHMgKHJ1biBmaXJzdCkgLSBldmVyeXRoaW5nIGVsc2VcbiAgICAgIGVsc2Uge1xuICAgICAgICBsaWdodHdlaWdodC5wdXNoKGZpbGUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHJldHVybiB7IGxpZ2h0d2VpZ2h0LCBpbnRlZ3JhdGlvbiwgaGVhdnkgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZmlsZSBzaXplIHNhZmVseVxuICAgKi9cbiAgZ2V0RmlsZVNpemUoZmlsZSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzdGF0cyA9IGZzLnN0YXRTeW5jKGZpbGUpO1xuICAgICAgcmV0dXJuIHN0YXRzLnNpemU7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gMTAwMDsgLy8gRGVmYXVsdCBzaXplIGZvciBpbmFjY2Vzc2libGUgZmlsZXNcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUnVuIHRlc3RzIHdpdGggYWR2YW5jZWQgcGFyYWxsZWwgZXhlY3V0aW9uIGFuZCBzbWFydCBncm91cGluZ1xuICAgKiBNYWludGFpbnMgbWF4IGNvbmN1cnJlbmN5IGF0IGFsbCB0aW1lcyAtIHN0YXJ0cyBuZXcgdGVzdCBpbW1lZGlhdGVseSBhcyBvdGhlcnMgZmluaXNoXG4gICAqL1xuICBhc3luYyBydW5JblBhcmFsbGVsKHRlc3RGaWxlcywgbWF4Q29uY3VycmVuY3kpIHtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgY29uc3QgcXVldWUgPSBbLi4udGVzdEZpbGVzXTsgLy8gQ29weSBmaWxlcyB0byBwcm9jZXNzXG4gICAgY29uc3QgcnVubmluZyA9IG5ldyBTZXQoKTsgLy8gVHJhY2sgY3VycmVudGx5IHJ1bm5pbmcgdGVzdHNcbiAgICBsZXQgY29tcGxldGVkID0gMDtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBzdGFydE5leHQgPSAoKSA9PiB7XG4gICAgICAgIC8vIFN0YXJ0IG5ldyB0ZXN0cyB1cCB0byBtYXggY29uY3VycmVuY3lcbiAgICAgICAgd2hpbGUgKHJ1bm5pbmcuc2l6ZSA8IG1heENvbmN1cnJlbmN5ICYmIHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCB0ZXN0RmlsZSA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMucnVuVGVzdEZpbGUodGVzdEZpbGUpO1xuICAgICAgICAgIFxuICAgICAgICAgIHJ1bm5pbmcuYWRkKHByb21pc2UpO1xuICAgICAgICAgIFxuICAgICAgICAgIHByb21pc2UudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgIHJ1bm5pbmcuZGVsZXRlKHByb21pc2UpO1xuICAgICAgICAgICAgY29tcGxldGVkKys7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBwcm9ncmVzcyB3aXRoIHN0YWdnZXJlZCBkaXNwbGF5IGZvciBzbW9vdGhlciBhcHBlYXJhbmNlXG4gICAgICAgICAgICBpZiAoY29tcGxldGVkICUgMiA9PT0gMCB8fCBjb21wbGV0ZWQgPT09IHRlc3RGaWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoYFxcciR7Y29sb3JzLmRpbX1Qcm9ncmVzczogJHtjb21wbGV0ZWR9LyR7dGVzdEZpbGVzLmxlbmd0aH0gZmlsZXMgY29tcGxldGVkJHtjb2xvcnMucmVzZXR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFN0YXJ0IG5leHQgdGVzdCBpbW1lZGlhdGVseSBpZiBxdWV1ZSBoYXMgbW9yZVxuICAgICAgICAgICAgc3RhcnROZXh0KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIGFsbCB0ZXN0cyBhcmUgZG9uZVxuICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA9PT0gdGVzdEZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygpOyAvLyBOZXcgbGluZSBhZnRlciBwcm9ncmVzc1xuICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHtjb2xvcnMucmVkfVRlc3QgZXJyb3I6JHtjb2xvcnMucmVzZXR9YCwgZXJyb3IpO1xuICAgICAgICAgICAgcnVubmluZy5kZWxldGUocHJvbWlzZSk7XG4gICAgICAgICAgICBjb21wbGV0ZWQrKztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ29udGludWUgZXZlbiBpZiBvbmUgdGVzdCBmYWlsc1xuICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoYFxcciR7Y29sb3JzLmRpbX1Qcm9ncmVzczogJHtjb21wbGV0ZWR9LyR7dGVzdEZpbGVzLmxlbmd0aH0gZmlsZXMgY29tcGxldGVkJHtjb2xvcnMucmVzZXR9YCk7XG4gICAgICAgICAgICBzZXRJbW1lZGlhdGUoc3RhcnROZXh0KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA9PT0gdGVzdEZpbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygpOyAvLyBOZXcgbGluZSBhZnRlciBwcm9ncmVzc1xuICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvLyBTdGFydCBpbml0aWFsIGJhdGNoXG4gICAgICBzdGFydE5leHQoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5IHRlc3QgcmVzdWx0cyB3aXRoIGNvbG9yZnVsIG91dHB1dFxuICAgKi9cbiAgZGlzcGxheVJlc3VsdHMocmVzdWx0cykge1xuICAgIGNvbnNvbGUubG9nKGBcXG4ke2NvbG9ycy5icmlnaHR98J+TiiBUZXN0IFJlc3VsdHMgU3VtbWFyeSR7Y29sb3JzLnJlc2V0fWApO1xuICAgIGNvbnNvbGUubG9nKGAke2NvbG9ycy5kaW19JHsnPScucmVwZWF0KDUwKX0ke2NvbG9ycy5yZXNldH1gKTtcblxuICAgIGNvbnN0IHRvdGFsRHVyYXRpb24gPSBEYXRlLm5vdygpIC0gdGhpcy5zdGFydFRpbWU7XG5cbiAgICAvLyBTdW1tYXJ5IHN0YXRzXG4gICAgY29uc29sZS5sb2coYCR7Y29sb3JzLmdyZWVufeKchSBQYXNzZWQ6ICR7dGhpcy5wYXNzZWRUZXN0c30ke2NvbG9ycy5yZXNldH1gKTtcbiAgICBjb25zb2xlLmxvZyhgJHtjb2xvcnMucmVkfeKdjCBGYWlsZWQ6ICR7dGhpcy5mYWlsZWRUZXN0c30ke2NvbG9ycy5yZXNldH1gKTtcbiAgICBjb25zb2xlLmxvZyhgJHtjb2xvcnMuYmx1ZX3wn5OBIFRvdGFsIEZpbGVzOiAke3Jlc3VsdHMubGVuZ3RofSR7Y29sb3JzLnJlc2V0fWApO1xuICAgIGNvbnNvbGUubG9nKGAke2NvbG9ycy5jeWFufeKPse+4jyAgRHVyYXRpb246ICR7dG90YWxEdXJhdGlvbn1tcyR7Y29sb3JzLnJlc2V0fVxcbmApO1xuXG4gICAgLy8gU2hvdyBmYWlsZWQgdGVzdHMgd2l0aCBkZXRhaWxzXG4gICAgY29uc3QgZmFpbGVkUmVzdWx0cyA9IHJlc3VsdHMuZmlsdGVyKHIgPT4gIXIuc3VjY2Vzcyk7XG4gICAgaWYgKGZhaWxlZFJlc3VsdHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc29sZS5sb2coYCR7Y29sb3JzLnJlZH0ke2NvbG9ycy5icmlnaHR9RmFpbGVkIFRlc3RzOiR7Y29sb3JzLnJlc2V0fWApO1xuICAgICAgZmFpbGVkUmVzdWx0cy5mb3JFYWNoKHJlc3VsdCA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBcXG4ke2NvbG9ycy5yZWR94p2MICR7cmVzdWx0LmZpbGV9JHtjb2xvcnMucmVzZXR9YCk7XG4gICAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgJHtjb2xvcnMuZGltfSR7cmVzdWx0LmVycm9yLnNwbGl0KCdcXG4nKS5zbGljZSgwLCA1KS5qb2luKCdcXG4nKX0ke2NvbG9ycy5yZXNldH1gKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEdlbmVyYXRlIGRlYnVnIGZpbGUgZm9yIGZhaWxlZCB0ZXN0c1xuICAgICAgdGhpcy5nZW5lcmF0ZURlYnVnRmlsZShmYWlsZWRSZXN1bHRzKTtcbiAgICB9XG5cbiAgICAvLyBQZXJmb3JtYW5jZSBzdW1tYXJ5XG4gICAgY29uc3QgYXZnRHVyYXRpb24gPSByZXN1bHRzLnJlZHVjZSgoc3VtLCByKSA9PiBzdW0gKyByLmR1cmF0aW9uLCAwKSAvIHJlc3VsdHMubGVuZ3RoO1xuICAgIGNvbnNvbGUubG9nKGBcXG4ke2NvbG9ycy5kaW19QXZlcmFnZSB0ZXN0IGR1cmF0aW9uOiAke01hdGgucm91bmQoYXZnRHVyYXRpb24pfW1zJHtjb2xvcnMucmVzZXR9YCk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgREVCVUdfVEVTVFMubWQgZmlsZSBmb3IgZmFpbGVkIHRlc3QgYW5hbHlzaXNcbiAgICovXG4gIGdlbmVyYXRlRGVidWdGaWxlKGZhaWxlZFJlc3VsdHMpIHtcbiAgICBpZiAoZmFpbGVkUmVzdWx0cy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IGNyZWF0aW9uVGltZSA9IG5vdy50b0lTT1N0cmluZygpO1xuICAgIGNvbnN0IHBhY2lmaWNUaW1lID0gbm93LnRvTG9jYWxlU3RyaW5nKCdlbi1VUycsIHsgXG4gICAgICB0aW1lWm9uZTogJ0FtZXJpY2EvTG9zX0FuZ2VsZXMnLFxuICAgICAgd2Vla2RheTogJ2xvbmcnLFxuICAgICAgeWVhcjogJ251bWVyaWMnLCBcbiAgICAgIG1vbnRoOiAnbG9uZycsIFxuICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgICBob3VyOiAnMi1kaWdpdCcsIFxuICAgICAgbWludXRlOiAnMi1kaWdpdCcsIFxuICAgICAgc2Vjb25kOiAnMi1kaWdpdCcsXG4gICAgICB0aW1lWm9uZU5hbWU6ICdzaG9ydCdcbiAgICB9KTtcbiAgICBcbiAgICBsZXQgZGVidWdDb250ZW50ID0gJyMgVGVzdCBGYWlsdXJlIEFuYWx5c2lzXFxuXFxuJztcbiAgICBkZWJ1Z0NvbnRlbnQgKz0gYCoqQ3JlYXRpb24gVGltZToqKiAke2NyZWF0aW9uVGltZX1cXG5gO1xuICAgIGRlYnVnQ29udGVudCArPSBgKipQYWNpZmljIFRpbWU6KiogJHtwYWNpZmljVGltZX1cXG5cXG5gO1xuICAgIGRlYnVnQ29udGVudCArPSAn4pqg77iPICoqU1RBTEVORVNTIFdBUk5JTkc6KiogSWYgeW91ciBjb2RlIGNoYW5nZXMgYXJlIGFmdGVyIHRoZSBjcmVhdGlvbiB0aW1lIGFib3ZlIGFuZCB5b3UgYXJlIGNoZWNraW5nIHRoaXMgZmlsZSwgdGhlbiBpdCBpcyBzdGFsZSBhbmQgdGVzdHMgbmVlZCB0byBiZSByZXJ1bi5cXG5cXG4nO1xuICAgIGRlYnVnQ29udGVudCArPSAnQW5hbHl6ZSBhbmQgYWRkcmVzcyB0aGUgZm9sbG93aW5nIHRlc3QgZmFpbHVyZXM6XFxuXFxuJztcbiAgICBcbiAgICBmYWlsZWRSZXN1bHRzLmZvckVhY2goKHJlc3VsdCwgaW5kZXgpID0+IHtcbiAgICAgIGRlYnVnQ29udGVudCArPSBgIyMgRmFpbGVkIFRlc3QgJHtpbmRleCArIDF9OiAke3Jlc3VsdC5maWxlfVxcblxcbmA7XG4gICAgICBkZWJ1Z0NvbnRlbnQgKz0gJyMjIyBPdXRwdXQ6XFxuJztcbiAgICAgIGRlYnVnQ29udGVudCArPSAnYGBgXFxuJztcbiAgICAgIGRlYnVnQ29udGVudCArPSByZXN1bHQuZXJyb3IgfHwgcmVzdWx0Lm91dHB1dCB8fCAnTm8gZXJyb3Igb3V0cHV0IGF2YWlsYWJsZSc7XG4gICAgICBkZWJ1Z0NvbnRlbnQgKz0gJ1xcbmBgYFxcblxcbic7XG4gICAgICBkZWJ1Z0NvbnRlbnQgKz0gYCMjIyBEdXJhdGlvbjogJHtyZXN1bHQuZHVyYXRpb259bXNcXG5cXG5gO1xuICAgICAgZGVidWdDb250ZW50ICs9ICctLS1cXG5cXG4nO1xuICAgIH0pO1xuICAgIFxuICAgIGRlYnVnQ29udGVudCArPSAnIyMgU3VtbWFyeVxcblxcbic7XG4gICAgZGVidWdDb250ZW50ICs9IGAtIFRvdGFsIGZhaWxlZCB0ZXN0czogJHtmYWlsZWRSZXN1bHRzLmxlbmd0aH1cXG5gO1xuICAgIGRlYnVnQ29udGVudCArPSBgLSBGYWlsZWQgdGVzdCBmaWxlczogJHtmYWlsZWRSZXN1bHRzLm1hcChyID0+IHIuZmlsZSkuam9pbignLCAnKX1cXG5gO1xuICAgIGRlYnVnQ29udGVudCArPSBgLSBHZW5lcmF0ZWQ6ICR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfVxcbmA7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGZzLndyaXRlRmlsZVN5bmMoJ0RFQlVHX1RFU1RTLm1kJywgZGVidWdDb250ZW50KTtcbiAgICAgIGNvbnNvbGUubG9nKGBcXG4ke2NvbG9ycy55ZWxsb3d98J+TiyBEZWJ1ZyBmaWxlIGNyZWF0ZWQ6IERFQlVHX1RFU1RTLm1kJHtjb2xvcnMucmVzZXR9YCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKGAke2NvbG9ycy5yZWR94pqg77iPICBDb3VsZCBub3QgY3JlYXRlIERFQlVHX1RFU1RTLm1kOiAke2Vycm9yLm1lc3NhZ2V9JHtjb2xvcnMucmVzZXR9YCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1haW4gZXhlY3V0aW9uIG1ldGhvZFxuICAgKi9cbiAgYXN5bmMgcnVuKCkge1xuICAgIGNvbnNvbGUubG9nKGAke2NvbG9ycy5icmlnaHR98J+nqiBxdGVzdHMgVGVzdCBSdW5uZXIgLSBUaWVyZWQgRXhlY3V0aW9uIE1vZGUke2NvbG9ycy5yZXNldH1gKTtcbiAgICBjb25zb2xlLmxvZyhgJHtjb2xvcnMuZGltfURpc2NvdmVyaW5nIGFuZCBydW5uaW5nIGFsbCB0ZXN0cyB3aXRoIG9wdGltaXplZCBzdHJhdGVneS4uLiR7Y29sb3JzLnJlc2V0fVxcbmApO1xuXG4gICAgLy8gRGlzY292ZXIgYWxsIHRlc3QgZmlsZXNcbiAgICBjb25zdCB0ZXN0RmlsZXMgPSB0aGlzLmRpc2NvdmVyVGVzdHMoKTtcbiAgICBcbiAgICBpZiAodGVzdEZpbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS5sb2coYCR7Y29sb3JzLnllbGxvd33imqDvuI8gIE5vIHRlc3QgZmlsZXMgZm91bmQke2NvbG9ycy5yZXNldH1gKTtcbiAgICAgIGNvbnNvbGUubG9nKGAke2NvbG9ycy5kaW19TG9va2luZyBmb3IgZmlsZXMgbWF0Y2hpbmc6ICoudGVzdC5qcywgKi5zcGVjLmpzLCB0ZXN0LyosIHRlc3RzLyosIF9fdGVzdHNfXy8qJHtjb2xvcnMucmVzZXR9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gR3JvdXAgdGVzdHMgYnkgY29tcGxleGl0eSBmb3IgdGllcmVkIGV4ZWN1dGlvblxuICAgIGNvbnN0IHsgbGlnaHR3ZWlnaHQsIGludGVncmF0aW9uLCBoZWF2eSB9ID0gdGhpcy5ncm91cFRlc3RzQnlDb21wbGV4aXR5KHRlc3RGaWxlcyk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYCR7Y29sb3JzLmJsdWV9VGVzdCBTdHJhdGVneToke2NvbG9ycy5yZXNldH1gKTtcbiAgICBjb25zb2xlLmxvZyhgICAke2NvbG9ycy5ncmVlbn1MaWdodHdlaWdodDogJHtsaWdodHdlaWdodC5sZW5ndGh9IGZpbGVzJHtjb2xvcnMucmVzZXR9YCk7XG4gICAgY29uc29sZS5sb2coYCAgJHtjb2xvcnMueWVsbG93fUludGVncmF0aW9uOiAke2ludGVncmF0aW9uLmxlbmd0aH0gZmlsZXMke2NvbG9ycy5yZXNldH1gKTtcbiAgICBjb25zb2xlLmxvZyhgICAke2NvbG9ycy5yZWR9SGVhdnk6ICR7aGVhdnkubGVuZ3RofSBmaWxlcyR7Y29sb3JzLnJlc2V0fWApO1xuICAgIFxuICAgIC8vIENhbGN1bGF0ZSBjb25jdXJyZW5jeSBzZXR0aW5nc1xuICAgIGNvbnN0IGNwdUNvdW50ID0gb3MuY3B1cygpLmxlbmd0aDtcbiAgICBjb25zdCB0b3RhbE1lbW9yeUdCID0gTWF0aC5yb3VuZChvcy50b3RhbG1lbSgpIC8gKDEwMjQgKiogMykpO1xuICAgIGNvbnN0IG1heENvbmN1cnJlbmN5ID0gTWF0aC5taW4oOCwgTWF0aC5tYXgoNCwgTWF0aC5mbG9vcihjcHVDb3VudCAqIDEuNSkpKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhgJHtjb2xvcnMuZGltfU1heCBjb25jdXJyZW5jeTogJHttYXhDb25jdXJyZW5jeX0gd29ya2VycyR7Y29sb3JzLnJlc2V0fVxcbmApO1xuICAgIFxuICAgIGxldCBhbGxSZXN1bHRzID0gW107XG4gICAgXG4gICAgLy8gUGhhc2UgMTogUnVuIGxpZ2h0d2VpZ2h0IHRlc3RzIGZpcnN0IChmYXN0IGZlZWRiYWNrKSAtIEhJR0hFUiBDT05DVVJSRU5DWVxuICAgIGlmIChsaWdodHdlaWdodC5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zb2xlLmxvZyhgJHtjb2xvcnMuZ3JlZW598J+TpiBQaGFzZSAxOiBMaWdodHdlaWdodCBUZXN0cyAoJHtsaWdodHdlaWdodC5sZW5ndGh9IGZpbGVzKSR7Y29sb3JzLnJlc2V0fWApO1xuICAgICAgY29uc3QgbGlnaHRSZXN1bHRzID0gYXdhaXQgdGhpcy5ydW5JblBhcmFsbGVsKGxpZ2h0d2VpZ2h0LCBNYXRoLm1pbigxMiwgbGlnaHR3ZWlnaHQubGVuZ3RoKSk7IC8vIEhpZ2hlciBjb25jdXJyZW5jeSBmb3Igc2ltcGxlIHRlc3RzXG4gICAgICBhbGxSZXN1bHRzID0gYWxsUmVzdWx0cy5jb25jYXQobGlnaHRSZXN1bHRzKTtcbiAgICAgIGNvbnNvbGUubG9nKGAke2NvbG9ycy5kaW19UGhhc2UgMSBjb21wbGV0ZTogJHt0aGlzLnBhc3NlZFRlc3RzfS8ke3RoaXMucGFzc2VkVGVzdHMgKyB0aGlzLmZhaWxlZFRlc3RzfSBwYXNzZWQke2NvbG9ycy5yZXNldH1cXG5gKTtcbiAgICB9XG4gICAgXG4gICAgLy8gUGhhc2UgMjogUnVuIGludGVncmF0aW9uIHRlc3RzXG4gICAgaWYgKGludGVncmF0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKGAke2NvbG9ycy55ZWxsb3d98J+UlyBQaGFzZSAyOiBJbnRlZ3JhdGlvbiBUZXN0cyAoJHtpbnRlZ3JhdGlvbi5sZW5ndGh9IGZpbGVzKSR7Y29sb3JzLnJlc2V0fWApO1xuICAgICAgY29uc3QgaW50ZWdyYXRpb25SZXN1bHRzID0gYXdhaXQgdGhpcy5ydW5JblBhcmFsbGVsKGludGVncmF0aW9uLCBNYXRoLm1pbihtYXhDb25jdXJyZW5jeSwgNikpO1xuICAgICAgYWxsUmVzdWx0cyA9IGFsbFJlc3VsdHMuY29uY2F0KGludGVncmF0aW9uUmVzdWx0cyk7XG4gICAgICBjb25zb2xlLmxvZyhgJHtjb2xvcnMuZGltfVBoYXNlIDIgY29tcGxldGU6ICR7dGhpcy5wYXNzZWRUZXN0c30vJHt0aGlzLnBhc3NlZFRlc3RzICsgdGhpcy5mYWlsZWRUZXN0c30gcGFzc2VkJHtjb2xvcnMucmVzZXR9XFxuYCk7XG4gICAgfVxuICAgIFxuICAgIC8vIFBoYXNlIDM6IFJ1biBoZWF2eSB0ZXN0cyB3aXRoIHJlZHVjZWQgY29uY3VycmVuY3kgYW5kIGhpZ2hlciB0aW1lb3V0XG4gICAgaWYgKGhlYXZ5Lmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKGAke2NvbG9ycy5yZWR94pqZ77iPICBQaGFzZSAzOiBIZWF2eSBUZXN0cyAoJHtoZWF2eS5sZW5ndGh9IGZpbGVzKSAtIFNwZWNpYWwgaGFuZGxpbmcke2NvbG9ycy5yZXNldH1gKTtcbiAgICAgIGNvbnN0IGhlYXZ5UmVzdWx0cyA9IGF3YWl0IHRoaXMucnVuSW5QYXJhbGxlbChoZWF2eSwgTWF0aC5taW4oNCwgaGVhdnkubGVuZ3RoKSk7IC8vIExvd2VyIGNvbmN1cnJlbmN5XG4gICAgICBhbGxSZXN1bHRzID0gYWxsUmVzdWx0cy5jb25jYXQoaGVhdnlSZXN1bHRzKTtcbiAgICAgIGNvbnNvbGUubG9nKGAke2NvbG9ycy5kaW19UGhhc2UgMyBjb21wbGV0ZTogJHt0aGlzLnBhc3NlZFRlc3RzfS8ke3RoaXMucGFzc2VkVGVzdHMgKyB0aGlzLmZhaWxlZFRlc3RzfSBwYXNzZWQke2NvbG9ycy5yZXNldH1cXG5gKTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5yZXN1bHRzID0gYWxsUmVzdWx0cztcbiAgICBcbiAgICAvLyBEaXNwbGF5IGNvbXByZWhlbnNpdmUgcmVzdWx0c1xuICAgIHRoaXMuZGlzcGxheVJlc3VsdHMoYWxsUmVzdWx0cyk7XG4gICAgXG4gICAgLy8gRXhpdCB3aXRoIGFwcHJvcHJpYXRlIGNvZGVcbiAgICBwcm9jZXNzLmV4aXQodGhpcy5mYWlsZWRUZXN0cyA+IDAgPyAxIDogMCk7XG4gIH1cbn1cblxuLy8gUnVuIHRoZSB0ZXN0IHN1aXRlXG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUpIHtcbiAgY29uc3QgcnVubmVyID0gbmV3IFRlc3RSdW5uZXIoKTtcbiAgcnVubmVyLnJ1bigpLmNhdGNoKGVycm9yID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGAke2NvbG9ycy5yZWR9VGVzdCBydW5uZXIgZXJyb3I6JHtjb2xvcnMucmVzZXR9YCwgZXJyb3IpO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGVzdFJ1bm5lcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUksQ0FBQztBQUN4QixNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFDNUIsTUFBTTtFQUFFRTtBQUFNLENBQUMsR0FBR0YsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUMxQyxNQUFNRyxFQUFFLEdBQUdILE9BQU8sQ0FBQyxJQUFJLENBQUM7O0FBRXhCO0FBQ0EsTUFBTUksTUFBTSxHQUFHO0VBQ2JDLEtBQUssRUFBRSxTQUFTO0VBQ2hCQyxNQUFNLEVBQUUsU0FBUztFQUNqQkMsR0FBRyxFQUFFLFNBQVM7RUFDZEMsR0FBRyxFQUFFLFVBQVU7RUFDZkMsS0FBSyxFQUFFLFVBQVU7RUFDakJDLE1BQU0sRUFBRSxVQUFVO0VBQ2xCQyxJQUFJLEVBQUUsVUFBVTtFQUNoQkMsT0FBTyxFQUFFLFVBQVU7RUFDbkJDLElBQUksRUFBRSxVQUFVO0VBQ2hCQyxLQUFLLEVBQUU7QUFDVCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsVUFBVSxDQUFDO0VBQ2ZDLFdBQVdBLENBQUEsRUFBRztJQUNaLElBQUksQ0FBQ0MsU0FBUyxHQUFHLEVBQUU7SUFDbkIsSUFBSSxDQUFDQyxXQUFXLEdBQUcsQ0FBQztJQUNwQixJQUFJLENBQUNDLFdBQVcsR0FBRyxDQUFDO0lBQ3BCLElBQUksQ0FBQ0MsVUFBVSxHQUFHLENBQUM7SUFDbkIsSUFBSSxDQUFDQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUM7SUFDM0IsSUFBSSxDQUFDQyxPQUFPLEdBQUcsRUFBRTtJQUNqQixJQUFJLENBQUNDLFdBQVcsR0FBRyxJQUFJO0VBQ3pCOztFQUVBO0FBQ0Y7QUFDQTtFQUNFQyxhQUFhQSxDQUFBLEVBQUc7SUFDZCxNQUFNQyxZQUFZLEdBQUcsQ0FDbkIsY0FBYyxFQUNkLGNBQWMsRUFDZCxlQUFlLEVBQ2YsZUFBZSxFQUNmLGlCQUFpQixFQUNqQixpQkFBaUIsRUFDakIsa0JBQWtCLEVBQ2xCLGtCQUFrQixFQUNsQixzQkFBc0IsRUFDdEIsc0JBQXNCLENBQ3ZCO0lBRUQsTUFBTUMsZUFBZSxHQUFHLENBQ3RCLGNBQWMsRUFDZCxNQUFNLEVBQ04sVUFBVSxFQUNWLE1BQU0sRUFDTixPQUFPLEVBQ1AsUUFBUSxFQUNSLGFBQWEsRUFDYixNQUFNO0lBQVM7SUFDZixVQUFVO0lBQUs7SUFDZixNQUFNO0lBQVM7SUFDZixPQUFPLENBQVE7SUFBQSxDQUNoQjtJQUVELE1BQU1YLFNBQVMsR0FBRyxJQUFJWSxHQUFHLENBQUMsQ0FBQztJQUUzQixNQUFNQyxPQUFPLEdBQUlDLEdBQUcsSUFBSztNQUN2QixJQUFJLENBQUNoQyxFQUFFLENBQUNpQyxVQUFVLENBQUNELEdBQUcsQ0FBQyxFQUFFO01BRXpCLElBQUk7UUFDRixNQUFNRSxLQUFLLEdBQUdsQyxFQUFFLENBQUNtQyxXQUFXLENBQUNILEdBQUcsRUFBRTtVQUFFSSxhQUFhLEVBQUU7UUFBSyxDQUFDLENBQUM7UUFFMUQsS0FBSyxNQUFNQyxJQUFJLElBQUlILEtBQUssRUFBRTtVQUN4QixJQUFJRyxJQUFJLENBQUNDLElBQUksQ0FBQ0MsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1VBQy9CLElBQUlWLGVBQWUsQ0FBQ1csUUFBUSxDQUFDSCxJQUFJLENBQUNDLElBQUksQ0FBQyxFQUFFO1VBRXpDLE1BQU1HLFFBQVEsR0FBR3ZDLElBQUksQ0FBQ3dDLElBQUksQ0FBQ1YsR0FBRyxFQUFFSyxJQUFJLENBQUNDLElBQUksQ0FBQztVQUMxQyxNQUFNSyxZQUFZLEdBQUd6QyxJQUFJLENBQUMwQyxRQUFRLENBQUMsR0FBRyxFQUFFSCxRQUFRLENBQUM7O1VBRWpEO1VBQ0EsSUFBSVosZUFBZSxDQUFDZ0IsSUFBSSxDQUFDQyxPQUFPLElBQUlILFlBQVksQ0FBQ0gsUUFBUSxDQUFDTSxPQUFPLENBQUMsQ0FBQyxFQUFFO1VBRXJFLElBQUlULElBQUksQ0FBQ1UsV0FBVyxDQUFDLENBQUMsRUFBRTtZQUN0QmhCLE9BQU8sQ0FBQ1UsUUFBUSxDQUFDO1VBQ25CLENBQUMsTUFBTSxJQUFJSixJQUFJLENBQUNXLE1BQU0sQ0FBQyxDQUFDLEVBQUU7WUFDeEI7WUFDQSxJQUFJLElBQUksQ0FBQ0MsVUFBVSxDQUFDTixZQUFZLENBQUMsRUFBRTtjQUNqQ3pCLFNBQVMsQ0FBQ2dDLEdBQUcsQ0FBQ1AsWUFBWSxDQUFDO1lBQzdCO1VBQ0Y7UUFDRjtNQUNGLENBQUMsQ0FBQyxPQUFPUSxLQUFLLEVBQUU7UUFDZDtNQUFBO0lBRUosQ0FBQztJQUVEcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUNaLElBQUksQ0FBQ2IsU0FBUyxHQUFHa0MsS0FBSyxDQUFDQyxJQUFJLENBQUNuQyxTQUFTLENBQUMsQ0FBQ29DLElBQUksQ0FBQyxDQUFDO0lBQzdDLE9BQU8sSUFBSSxDQUFDcEMsU0FBUztFQUN2Qjs7RUFFQTtBQUNGO0FBQ0E7RUFDRStCLFVBQVVBLENBQUNNLFFBQVEsRUFBRTtJQUNuQixNQUFNM0IsWUFBWSxHQUFHLENBQ25CLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsMEJBQTBCLEVBQzFCLDBCQUEwQixFQUMxQiwyQkFBMkIsRUFDM0IsMkJBQTJCLEVBQzNCLHlCQUF5QixDQUMxQjs7SUFFRDtJQUNBLE1BQU00QixZQUFZLEdBQUcsQ0FDbkIsY0FBYyxFQUNkLGdCQUFnQixFQUNoQixpQkFBaUIsRUFDakIsa0JBQWtCLEVBQ2xCLHVCQUF1QixFQUN2QixVQUFVLENBQ1g7SUFFRCxJQUFJQSxZQUFZLENBQUNYLElBQUksQ0FBQ1ksT0FBTyxJQUFJRixRQUFRLENBQUNHLFFBQVEsQ0FBQ0QsT0FBTyxDQUFDLENBQUMsRUFBRTtNQUM1RCxPQUFPLEtBQUs7SUFDZDtJQUVBLE9BQU83QixZQUFZLENBQUNpQixJQUFJLENBQUNDLE9BQU8sSUFBSUEsT0FBTyxDQUFDYSxJQUFJLENBQUNKLFFBQVEsQ0FBQyxDQUFDO0VBQzdEOztFQUVBO0FBQ0Y7QUFDQTtFQUNFSyxtQkFBbUJBLENBQUEsRUFBRztJQUNwQixJQUFJLElBQUksQ0FBQ2xDLFdBQVcsS0FBSyxJQUFJLEVBQUU7TUFDN0IsSUFBSTtRQUNGO1FBQ0EsTUFBTTFCLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUksQ0FBQztRQUN4QixNQUFNNEQsV0FBVyxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBQy9ELEVBQUUsQ0FBQ2dFLFlBQVksQ0FBQyxrQ0FBa0MsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMzRixNQUFNQyxZQUFZLEdBQUdDLFFBQVEsQ0FBQ0wsV0FBVyxDQUFDTSxPQUFPLENBQUNDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMxQyxXQUFXLEdBQUd1QyxZQUFZO01BQ2pDLENBQUMsQ0FBQyxNQUFNO1FBQ047UUFDQSxJQUFJLENBQUN2QyxXQUFXLEdBQUcsRUFBRTtNQUN2QjtJQUNGOztJQUVBO0lBQ0EsT0FBTyxJQUFJLENBQUNBLFdBQVcsSUFBSSxFQUFFLEdBQUcsb0JBQW9CLEdBQUcsbUJBQW1CO0VBQzVFOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLE1BQU0yQyxXQUFXQSxDQUFDQyxRQUFRLEVBQUU7SUFDMUIsT0FBTyxJQUFJQyxPQUFPLENBQUVDLE9BQU8sSUFBSztNQUM5QjtNQUNBLE1BQU1DLE9BQU8sR0FBR0MsVUFBVSxDQUFDLE1BQU07UUFDL0JDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUNyQkosT0FBTyxDQUFDO1VBQ05LLElBQUksRUFBRVAsUUFBUTtVQUNkUSxPQUFPLEVBQUUsS0FBSztVQUNkQyxRQUFRLEVBQUUsS0FBSztVQUNmQyxNQUFNLEVBQUUsRUFBRTtVQUNWN0IsS0FBSyxFQUFFLCtCQUErQjtVQUN0QzhCLElBQUksRUFBRTtRQUNSLENBQUMsQ0FBQztNQUNKLENBQUMsRUFBRSxLQUFLLENBQUM7TUFFVCxNQUFNM0QsU0FBUyxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDO01BQzVCLElBQUkwRCxNQUFNLEdBQUcsRUFBRTtNQUNmLElBQUlDLE1BQU0sR0FBRyxFQUFFOztNQUVmO01BQ0EsTUFBTUMsVUFBVSxHQUFHLElBQUksQ0FBQ0MsYUFBYSxDQUFDZixRQUFRLENBQUM7TUFFL0MsTUFBTWdCLE9BQU8sR0FBR0YsVUFBVSxHQUFHLEtBQUssR0FBRyxNQUFNOztNQUUzQztNQUNBLE1BQU1HLElBQUksR0FBR0gsVUFBVSxHQUNuQixDQUFDLE1BQU0sRUFBRWQsUUFBUSxFQUFFLGFBQWEsQ0FBQyxHQUNqQyxDQUFDLDBCQUEwQixFQUFFLGVBQWUsRUFBRUEsUUFBUSxDQUFDO01BRTNELE1BQU1LLEtBQUssR0FBR3hFLEtBQUssQ0FBQ21GLE9BQU8sRUFBRUMsSUFBSSxFQUFFO1FBQ2pDQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQztRQUNqQ0MsR0FBRyxFQUFFO1VBQ0gsR0FBR0MsT0FBTyxDQUFDRCxHQUFHO1VBQ2RFLFFBQVEsRUFBRTtRQUNaLENBQUM7UUFDREMsS0FBSyxFQUFFLElBQUksQ0FBQztNQUNkLENBQUMsQ0FBQztNQUVGakIsS0FBSyxDQUFDTyxNQUFNLENBQUNXLEVBQUUsQ0FBQyxNQUFNLEVBQUdDLElBQUksSUFBSztRQUNoQ1osTUFBTSxJQUFJWSxJQUFJLENBQUNDLFFBQVEsQ0FBQyxDQUFDO01BQzNCLENBQUMsQ0FBQztNQUVGcEIsS0FBSyxDQUFDUSxNQUFNLENBQUNVLEVBQUUsQ0FBQyxNQUFNLEVBQUdDLElBQUksSUFBSztRQUNoQ1gsTUFBTSxJQUFJVyxJQUFJLENBQUNDLFFBQVEsQ0FBQyxDQUFDO01BQzNCLENBQUMsQ0FBQztNQUVGcEIsS0FBSyxDQUFDa0IsRUFBRSxDQUFDLE9BQU8sRUFBR1osSUFBSSxJQUFLO1FBQzFCZSxZQUFZLENBQUN2QixPQUFPLENBQUM7UUFDckIsTUFBTU0sUUFBUSxHQUFHeEQsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxHQUFHRixTQUFTOztRQUV2QztRQUNBLE1BQU0wRCxNQUFNLEdBQUdFLE1BQU0sR0FBR0MsTUFBTTs7UUFFOUI7UUFDQSxNQUFNYyxPQUFPLEdBQUdqQixNQUFNLENBQUN4QyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBQ3hDLE1BQU0wRCxPQUFPLEdBQUdsQixNQUFNLENBQUN4QyxRQUFRLENBQUMsT0FBTyxDQUFDOztRQUV4QztRQUNBLE1BQU0yRCxvQkFBb0IsR0FBR25CLE1BQU0sQ0FBQ3hDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFDM0J3QyxNQUFNLENBQUN4QyxRQUFRLENBQUMsaUJBQWlCLENBQUMsSUFDbEN3QyxNQUFNLENBQUN4QyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQzdCd0MsTUFBTSxDQUFDeEMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUMvQjJDLE1BQU0sQ0FBQzNDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFDekIyQyxNQUFNLENBQUMzQyxRQUFRLENBQUMsS0FBSyxDQUFDOztRQUVqRDtRQUNBLElBQUlrRCxPQUFPLENBQUNELEdBQUcsQ0FBQ1csV0FBVyxFQUFFO1VBQzNCQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxXQUFXaEMsUUFBUSxFQUFFLENBQUM7VUFDbEMrQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxTQUFTckIsSUFBSSxXQUFXZ0IsT0FBTyxXQUFXQyxPQUFPLGdCQUFnQkMsb0JBQW9CLEVBQUUsQ0FBQztVQUNwR0UsT0FBTyxDQUFDQyxHQUFHLENBQUMsb0JBQW9CdEIsTUFBTSxDQUFDdUIsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQzdEOztRQUVBO1FBQ0E7UUFDQTtRQUNBLE1BQU1DLFdBQVcsR0FBR1AsT0FBTyxJQUFJLENBQUNDLE9BQU87UUFDdkMsTUFBTU8sYUFBYSxHQUFHeEIsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDa0Isb0JBQW9CLElBQUksQ0FBQ0QsT0FBTztRQUVyRSxNQUFNcEIsT0FBTyxHQUFHMEIsV0FBVyxLQUFLcEIsVUFBVSxHQUFHLEtBQUssR0FBR3FCLGFBQWEsQ0FBQztRQUVuRSxJQUFJM0IsT0FBTyxFQUFFO1VBQ1gsSUFBSSxDQUFDM0QsV0FBVyxFQUFFO1FBQ3BCLENBQUMsTUFBTTtVQUNMLElBQUksQ0FBQ0MsV0FBVyxFQUFFO1FBQ3BCO1FBRUFvRCxPQUFPLENBQUM7VUFDTkssSUFBSSxFQUFFUCxRQUFRO1VBQ2RRLE9BQU87VUFDUEMsUUFBUTtVQUNSQyxNQUFNLEVBQUVFLE1BQU07VUFDZC9CLEtBQUssRUFBRWdDLE1BQU07VUFDYkY7UUFDRixDQUFDLENBQUM7TUFDSixDQUFDLENBQUM7TUFFRk4sS0FBSyxDQUFDa0IsRUFBRSxDQUFDLE9BQU8sRUFBRzFDLEtBQUssSUFBSztRQUMzQjZDLFlBQVksQ0FBQ3ZCLE9BQU8sQ0FBQztRQUNyQixJQUFJLENBQUNyRCxXQUFXLEVBQUU7UUFDbEJvRCxPQUFPLENBQUM7VUFDTkssSUFBSSxFQUFFUCxRQUFRO1VBQ2RRLE9BQU8sRUFBRSxLQUFLO1VBQ2RDLFFBQVEsRUFBRXhELElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUMsR0FBR0YsU0FBUztVQUNoQzBELE1BQU0sRUFBRSxFQUFFO1VBQ1Y3QixLQUFLLEVBQUVBLEtBQUssQ0FBQ3VELE9BQU87VUFDcEJ6QixJQUFJLEVBQUU7UUFDUixDQUFDLENBQUM7TUFDSixDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7RUFDSjs7RUFFQTtBQUNGO0FBQ0E7RUFDRUksYUFBYUEsQ0FBQ2YsUUFBUSxFQUFFO0lBQ3RCO0lBQ0E7O0lBRUEsTUFBTXFDLFFBQVEsR0FBR3pHLElBQUksQ0FBQzBHLFFBQVEsQ0FBQ3RDLFFBQVEsQ0FBQzs7SUFFeEM7SUFDQSxNQUFNdUMsZ0JBQWdCLEdBQUcsQ0FDdkIsZ0JBQWdCLEVBQ2hCLHVCQUF1QixFQUN2QixjQUFjLEVBQ2QsaUJBQWlCLENBQ2xCO0lBRUQsSUFBSUEsZ0JBQWdCLENBQUNyRSxRQUFRLENBQUNtRSxRQUFRLENBQUMsRUFBRTtNQUN2QyxPQUFPLEtBQUssQ0FBQyxDQUFDO0lBQ2hCOztJQUVBO0lBQ0EsT0FBTyxJQUFJO0VBQ2I7O0VBRUE7QUFDRjtBQUNBO0VBQ0VHLHNCQUFzQkEsQ0FBQzVGLFNBQVMsRUFBRTtJQUNoQyxNQUFNNkYsV0FBVyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3hCLE1BQU1DLFdBQVcsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUN4QixNQUFNQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUM7O0lBRWxCL0YsU0FBUyxDQUFDZ0csT0FBTyxDQUFDckMsSUFBSSxJQUFJO01BQ3hCLE1BQU04QixRQUFRLEdBQUd6RyxJQUFJLENBQUMwRyxRQUFRLENBQUMvQixJQUFJLENBQUM7O01BRXBDO01BQ0EsSUFBSThCLFFBQVEsQ0FBQ25FLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSW1FLFFBQVEsQ0FBQ25FLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFDdEVtRSxRQUFRLENBQUNuRSxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUltRSxRQUFRLENBQUNuRSxRQUFRLENBQUMsWUFBWSxDQUFDLElBQ25FbUUsUUFBUSxDQUFDbkUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJbUUsUUFBUSxDQUFDbkUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUNoRW1FLFFBQVEsQ0FBQ25FLFFBQVEsQ0FBQyxjQUFjLENBQUMsRUFBRTtRQUNyQ3lFLEtBQUssQ0FBQ0UsSUFBSSxDQUFDdEMsSUFBSSxDQUFDO01BQ2xCO01BQ0E7TUFBQSxLQUNLLElBQUlBLElBQUksQ0FBQ3JDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBS21FLFFBQVEsQ0FBQ25FLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSW1FLFFBQVEsQ0FBQ25FLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFO1FBQzVGd0UsV0FBVyxDQUFDRyxJQUFJLENBQUN0QyxJQUFJLENBQUM7TUFDeEI7TUFDQTtNQUFBLEtBQ0s7UUFDSGtDLFdBQVcsQ0FBQ0ksSUFBSSxDQUFDdEMsSUFBSSxDQUFDO01BQ3hCO0lBQ0YsQ0FBQyxDQUFDO0lBRUYsT0FBTztNQUFFa0MsV0FBVztNQUFFQyxXQUFXO01BQUVDO0lBQU0sQ0FBQztFQUM1Qzs7RUFFQTtBQUNGO0FBQ0E7RUFDRUcsV0FBV0EsQ0FBQ3ZDLElBQUksRUFBRTtJQUNoQixJQUFJO01BQ0YsTUFBTXdDLEtBQUssR0FBR3JILEVBQUUsQ0FBQ3NILFFBQVEsQ0FBQ3pDLElBQUksQ0FBQztNQUMvQixPQUFPd0MsS0FBSyxDQUFDRSxJQUFJO0lBQ25CLENBQUMsQ0FBQyxNQUFNO01BQ04sT0FBTyxJQUFJLENBQUMsQ0FBQztJQUNmO0VBQ0Y7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDRSxNQUFNQyxhQUFhQSxDQUFDdEcsU0FBUyxFQUFFdUcsY0FBYyxFQUFFO0lBQzdDLE1BQU1oRyxPQUFPLEdBQUcsRUFBRTtJQUNsQixNQUFNaUcsS0FBSyxHQUFHLENBQUMsR0FBR3hHLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDOUIsTUFBTXlHLE9BQU8sR0FBRyxJQUFJN0YsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNCLElBQUk4RixTQUFTLEdBQUcsQ0FBQztJQUVqQixPQUFPLElBQUlyRCxPQUFPLENBQUMsQ0FBQ0MsT0FBTyxFQUFFcUQsTUFBTSxLQUFLO01BQ3RDLE1BQU1DLFNBQVMsR0FBR0EsQ0FBQSxLQUFNO1FBQ3RCO1FBQ0EsT0FBT0gsT0FBTyxDQUFDSixJQUFJLEdBQUdFLGNBQWMsSUFBSUMsS0FBSyxDQUFDSyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1VBQ3hELE1BQU16RCxRQUFRLEdBQUdvRCxLQUFLLENBQUNNLEtBQUssQ0FBQyxDQUFDO1VBQzlCLE1BQU1DLE9BQU8sR0FBRyxJQUFJLENBQUM1RCxXQUFXLENBQUNDLFFBQVEsQ0FBQztVQUUxQ3FELE9BQU8sQ0FBQ3pFLEdBQUcsQ0FBQytFLE9BQU8sQ0FBQztVQUVwQkEsT0FBTyxDQUFDQyxJQUFJLENBQUVDLE1BQU0sSUFBSztZQUN2QjFHLE9BQU8sQ0FBQzBGLElBQUksQ0FBQ2dCLE1BQU0sQ0FBQztZQUNwQlIsT0FBTyxDQUFDUyxNQUFNLENBQUNILE9BQU8sQ0FBQztZQUN2QkwsU0FBUyxFQUFFOztZQUVYO1lBQ0EsSUFBSUEsU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUlBLFNBQVMsS0FBSzFHLFNBQVMsQ0FBQzZHLE1BQU0sRUFBRTtjQUN6RHJDLE9BQU8sQ0FBQ1IsTUFBTSxDQUFDbUQsS0FBSyxDQUFDLEtBQUtoSSxNQUFNLENBQUNHLEdBQUcsYUFBYW9ILFNBQVMsSUFBSTFHLFNBQVMsQ0FBQzZHLE1BQU0sbUJBQW1CMUgsTUFBTSxDQUFDQyxLQUFLLEVBQUUsQ0FBQztZQUNsSDs7WUFFQTtZQUNBd0gsU0FBUyxDQUFDLENBQUM7O1lBRVg7WUFDQSxJQUFJRixTQUFTLEtBQUsxRyxTQUFTLENBQUM2RyxNQUFNLEVBQUU7Y0FDbEMxQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztjQUNmOUIsT0FBTyxDQUFDL0MsT0FBTyxDQUFDO1lBQ2xCO1VBQ0YsQ0FBQyxDQUFDLENBQUM2RyxLQUFLLENBQUVuRixLQUFLLElBQUs7WUFDbEJrRCxPQUFPLENBQUNsRCxLQUFLLENBQUMsR0FBRzlDLE1BQU0sQ0FBQ0ksR0FBRyxjQUFjSixNQUFNLENBQUNDLEtBQUssRUFBRSxFQUFFNkMsS0FBSyxDQUFDO1lBQy9Ed0UsT0FBTyxDQUFDUyxNQUFNLENBQUNILE9BQU8sQ0FBQztZQUN2QkwsU0FBUyxFQUFFOztZQUVYO1lBQ0FsQyxPQUFPLENBQUNSLE1BQU0sQ0FBQ21ELEtBQUssQ0FBQyxLQUFLaEksTUFBTSxDQUFDRyxHQUFHLGFBQWFvSCxTQUFTLElBQUkxRyxTQUFTLENBQUM2RyxNQUFNLG1CQUFtQjFILE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLENBQUM7WUFDaEhpSSxZQUFZLENBQUNULFNBQVMsQ0FBQztZQUV2QixJQUFJRixTQUFTLEtBQUsxRyxTQUFTLENBQUM2RyxNQUFNLEVBQUU7Y0FDbEMxQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztjQUNmOUIsT0FBTyxDQUFDL0MsT0FBTyxDQUFDO1lBQ2xCO1VBQ0YsQ0FBQyxDQUFDO1FBQ0o7TUFDRixDQUFDOztNQUVEO01BQ0FxRyxTQUFTLENBQUMsQ0FBQztJQUNiLENBQUMsQ0FBQztFQUNKOztFQUVBO0FBQ0Y7QUFDQTtFQUNFVSxjQUFjQSxDQUFDL0csT0FBTyxFQUFFO0lBQ3RCNEUsT0FBTyxDQUFDQyxHQUFHLENBQUMsS0FBS2pHLE1BQU0sQ0FBQ0UsTUFBTSwwQkFBMEJGLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLENBQUM7SUFDdkUrRixPQUFPLENBQUNDLEdBQUcsQ0FBQyxHQUFHakcsTUFBTSxDQUFDRyxHQUFHLEdBQUcsR0FBRyxDQUFDaUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHcEksTUFBTSxDQUFDQyxLQUFLLEVBQUUsQ0FBQztJQUU1RCxNQUFNb0ksYUFBYSxHQUFHbkgsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ0YsU0FBUzs7SUFFakQ7SUFDQStFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLEdBQUdqRyxNQUFNLENBQUNLLEtBQUssYUFBYSxJQUFJLENBQUNTLFdBQVcsR0FBR2QsTUFBTSxDQUFDQyxLQUFLLEVBQUUsQ0FBQztJQUMxRStGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLEdBQUdqRyxNQUFNLENBQUNJLEdBQUcsYUFBYSxJQUFJLENBQUNXLFdBQVcsR0FBR2YsTUFBTSxDQUFDQyxLQUFLLEVBQUUsQ0FBQztJQUN4RStGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLEdBQUdqRyxNQUFNLENBQUNPLElBQUksbUJBQW1CYSxPQUFPLENBQUNzRyxNQUFNLEdBQUcxSCxNQUFNLENBQUNDLEtBQUssRUFBRSxDQUFDO0lBQzdFK0YsT0FBTyxDQUFDQyxHQUFHLENBQUMsR0FBR2pHLE1BQU0sQ0FBQ1MsSUFBSSxpQkFBaUI0SCxhQUFhLEtBQUtySSxNQUFNLENBQUNDLEtBQUssSUFBSSxDQUFDOztJQUU5RTtJQUNBLE1BQU1xSSxhQUFhLEdBQUdsSCxPQUFPLENBQUNtSCxNQUFNLENBQUNDLENBQUMsSUFBSSxDQUFDQSxDQUFDLENBQUMvRCxPQUFPLENBQUM7SUFDckQsSUFBSTZELGFBQWEsQ0FBQ1osTUFBTSxHQUFHLENBQUMsRUFBRTtNQUM1QjFCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLEdBQUdqRyxNQUFNLENBQUNJLEdBQUcsR0FBR0osTUFBTSxDQUFDRSxNQUFNLGdCQUFnQkYsTUFBTSxDQUFDQyxLQUFLLEVBQUUsQ0FBQztNQUN4RXFJLGFBQWEsQ0FBQ3pCLE9BQU8sQ0FBQ2lCLE1BQU0sSUFBSTtRQUM5QjlCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLEtBQUtqRyxNQUFNLENBQUNJLEdBQUcsS0FBSzBILE1BQU0sQ0FBQ3RELElBQUksR0FBR3hFLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLENBQUM7UUFDN0QsSUFBSTZILE1BQU0sQ0FBQ2hGLEtBQUssRUFBRTtVQUNoQmtELE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLEdBQUdqRyxNQUFNLENBQUNHLEdBQUcsR0FBRzJILE1BQU0sQ0FBQ2hGLEtBQUssQ0FBQ2lCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQ21DLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM3RCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUdyQyxNQUFNLENBQUNDLEtBQUssRUFBRSxDQUFDO1FBQy9GO01BQ0YsQ0FBQyxDQUFDOztNQUVGO01BQ0EsSUFBSSxDQUFDd0ksaUJBQWlCLENBQUNILGFBQWEsQ0FBQztJQUN2Qzs7SUFFQTtJQUNBLE1BQU1JLFdBQVcsR0FBR3RILE9BQU8sQ0FBQ3VILE1BQU0sQ0FBQyxDQUFDQyxHQUFHLEVBQUVKLENBQUMsS0FBS0ksR0FBRyxHQUFHSixDQUFDLENBQUM5RCxRQUFRLEVBQUUsQ0FBQyxDQUFDLEdBQUd0RCxPQUFPLENBQUNzRyxNQUFNO0lBQ3BGMUIsT0FBTyxDQUFDQyxHQUFHLENBQUMsS0FBS2pHLE1BQU0sQ0FBQ0csR0FBRywwQkFBMEIwSSxJQUFJLENBQUNDLEtBQUssQ0FBQ0osV0FBVyxDQUFDLEtBQUsxSSxNQUFNLENBQUNDLEtBQUssRUFBRSxDQUFDO0VBQ2xHOztFQUVBO0FBQ0Y7QUFDQTtFQUNFd0ksaUJBQWlCQSxDQUFDSCxhQUFhLEVBQUU7SUFDL0IsSUFBSUEsYUFBYSxDQUFDWixNQUFNLEtBQUssQ0FBQyxFQUFFO0lBRWhDLE1BQU12RyxHQUFHLEdBQUcsSUFBSUQsSUFBSSxDQUFDLENBQUM7SUFDdEIsTUFBTTZILFlBQVksR0FBRzVILEdBQUcsQ0FBQzZILFdBQVcsQ0FBQyxDQUFDO0lBQ3RDLE1BQU1DLFdBQVcsR0FBRzlILEdBQUcsQ0FBQytILGNBQWMsQ0FBQyxPQUFPLEVBQUU7TUFDOUNDLFFBQVEsRUFBRSxxQkFBcUI7TUFDL0JDLE9BQU8sRUFBRSxNQUFNO01BQ2ZDLElBQUksRUFBRSxTQUFTO01BQ2ZDLEtBQUssRUFBRSxNQUFNO01BQ2JDLEdBQUcsRUFBRSxTQUFTO01BQ2RDLElBQUksRUFBRSxTQUFTO01BQ2ZDLE1BQU0sRUFBRSxTQUFTO01BQ2pCQyxNQUFNLEVBQUUsU0FBUztNQUNqQkMsWUFBWSxFQUFFO0lBQ2hCLENBQUMsQ0FBQztJQUVGLElBQUlDLFlBQVksR0FBRyw2QkFBNkI7SUFDaERBLFlBQVksSUFBSSxzQkFBc0JiLFlBQVksSUFBSTtJQUN0RGEsWUFBWSxJQUFJLHFCQUFxQlgsV0FBVyxNQUFNO0lBQ3REVyxZQUFZLElBQUksbUtBQW1LO0lBQ25MQSxZQUFZLElBQUksc0RBQXNEO0lBRXRFdEIsYUFBYSxDQUFDekIsT0FBTyxDQUFDLENBQUNpQixNQUFNLEVBQUUrQixLQUFLLEtBQUs7TUFDdkNELFlBQVksSUFBSSxrQkFBa0JDLEtBQUssR0FBRyxDQUFDLEtBQUsvQixNQUFNLENBQUN0RCxJQUFJLE1BQU07TUFDakVvRixZQUFZLElBQUksZUFBZTtNQUMvQkEsWUFBWSxJQUFJLE9BQU87TUFDdkJBLFlBQVksSUFBSTlCLE1BQU0sQ0FBQ2hGLEtBQUssSUFBSWdGLE1BQU0sQ0FBQ25ELE1BQU0sSUFBSSwyQkFBMkI7TUFDNUVpRixZQUFZLElBQUksV0FBVztNQUMzQkEsWUFBWSxJQUFJLGlCQUFpQjlCLE1BQU0sQ0FBQ3BELFFBQVEsUUFBUTtNQUN4RGtGLFlBQVksSUFBSSxTQUFTO0lBQzNCLENBQUMsQ0FBQztJQUVGQSxZQUFZLElBQUksZ0JBQWdCO0lBQ2hDQSxZQUFZLElBQUkseUJBQXlCdEIsYUFBYSxDQUFDWixNQUFNLElBQUk7SUFDakVrQyxZQUFZLElBQUksd0JBQXdCdEIsYUFBYSxDQUFDd0IsR0FBRyxDQUFDdEIsQ0FBQyxJQUFJQSxDQUFDLENBQUNoRSxJQUFJLENBQUMsQ0FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtJQUNyRnVILFlBQVksSUFBSSxnQkFBZ0IsSUFBSTFJLElBQUksQ0FBQyxDQUFDLENBQUM4SCxXQUFXLENBQUMsQ0FBQyxJQUFJO0lBRTVELElBQUk7TUFDRnJKLEVBQUUsQ0FBQ29LLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRUgsWUFBWSxDQUFDO01BQ2hENUQsT0FBTyxDQUFDQyxHQUFHLENBQUMsS0FBS2pHLE1BQU0sQ0FBQ00sTUFBTSx3Q0FBd0NOLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLENBQUM7SUFDdkYsQ0FBQyxDQUFDLE9BQU82QyxLQUFLLEVBQUU7TUFDZGtELE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLEdBQUdqRyxNQUFNLENBQUNJLEdBQUcsd0NBQXdDMEMsS0FBSyxDQUFDdUQsT0FBTyxHQUFHckcsTUFBTSxDQUFDQyxLQUFLLEVBQUUsQ0FBQztJQUNsRztFQUNGOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLE1BQU0rSixHQUFHQSxDQUFBLEVBQUc7SUFDVmhFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLEdBQUdqRyxNQUFNLENBQUNFLE1BQU0sZ0RBQWdERixNQUFNLENBQUNDLEtBQUssRUFBRSxDQUFDO0lBQzNGK0YsT0FBTyxDQUFDQyxHQUFHLENBQUMsR0FBR2pHLE1BQU0sQ0FBQ0csR0FBRywrREFBK0RILE1BQU0sQ0FBQ0MsS0FBSyxJQUFJLENBQUM7O0lBRXpHO0lBQ0EsTUFBTVksU0FBUyxHQUFHLElBQUksQ0FBQ1MsYUFBYSxDQUFDLENBQUM7SUFFdEMsSUFBSVQsU0FBUyxDQUFDNkcsTUFBTSxLQUFLLENBQUMsRUFBRTtNQUMxQjFCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLEdBQUdqRyxNQUFNLENBQUNNLE1BQU0sMEJBQTBCTixNQUFNLENBQUNDLEtBQUssRUFBRSxDQUFDO01BQ3JFK0YsT0FBTyxDQUFDQyxHQUFHLENBQUMsR0FBR2pHLE1BQU0sQ0FBQ0csR0FBRyxpRkFBaUZILE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLENBQUM7TUFDekg7SUFDRjs7SUFFQTtJQUNBLE1BQU07TUFBRXlHLFdBQVc7TUFBRUMsV0FBVztNQUFFQztJQUFNLENBQUMsR0FBRyxJQUFJLENBQUNILHNCQUFzQixDQUFDNUYsU0FBUyxDQUFDO0lBRWxGbUYsT0FBTyxDQUFDQyxHQUFHLENBQUMsR0FBR2pHLE1BQU0sQ0FBQ08sSUFBSSxpQkFBaUJQLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLENBQUM7SUFDMUQrRixPQUFPLENBQUNDLEdBQUcsQ0FBQyxLQUFLakcsTUFBTSxDQUFDSyxLQUFLLGdCQUFnQnFHLFdBQVcsQ0FBQ2dCLE1BQU0sU0FBUzFILE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLENBQUM7SUFDdkYrRixPQUFPLENBQUNDLEdBQUcsQ0FBQyxLQUFLakcsTUFBTSxDQUFDTSxNQUFNLGdCQUFnQnFHLFdBQVcsQ0FBQ2UsTUFBTSxTQUFTMUgsTUFBTSxDQUFDQyxLQUFLLEVBQUUsQ0FBQztJQUN4RitGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLEtBQUtqRyxNQUFNLENBQUNJLEdBQUcsVUFBVXdHLEtBQUssQ0FBQ2MsTUFBTSxTQUFTMUgsTUFBTSxDQUFDQyxLQUFLLEVBQUUsQ0FBQzs7SUFFekU7SUFDQSxNQUFNZ0ssUUFBUSxHQUFHbEssRUFBRSxDQUFDbUssSUFBSSxDQUFDLENBQUMsQ0FBQ3hDLE1BQU07SUFDakMsTUFBTXlDLGFBQWEsR0FBR3RCLElBQUksQ0FBQ0MsS0FBSyxDQUFDL0ksRUFBRSxDQUFDcUssUUFBUSxDQUFDLENBQUMsR0FBSSxJQUFJLElBQUksQ0FBRSxDQUFDO0lBQzdELE1BQU1oRCxjQUFjLEdBQUd5QixJQUFJLENBQUN3QixHQUFHLENBQUMsQ0FBQyxFQUFFeEIsSUFBSSxDQUFDeUIsR0FBRyxDQUFDLENBQUMsRUFBRXpCLElBQUksQ0FBQzBCLEtBQUssQ0FBQ04sUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFM0VqRSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxHQUFHakcsTUFBTSxDQUFDRyxHQUFHLG9CQUFvQmlILGNBQWMsV0FBV3BILE1BQU0sQ0FBQ0MsS0FBSyxJQUFJLENBQUM7SUFFdkYsSUFBSXVLLFVBQVUsR0FBRyxFQUFFOztJQUVuQjtJQUNBLElBQUk5RCxXQUFXLENBQUNnQixNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQzFCMUIsT0FBTyxDQUFDQyxHQUFHLENBQUMsR0FBR2pHLE1BQU0sQ0FBQ0ssS0FBSyxrQ0FBa0NxRyxXQUFXLENBQUNnQixNQUFNLFVBQVUxSCxNQUFNLENBQUNDLEtBQUssRUFBRSxDQUFDO01BQ3hHLE1BQU13SyxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUN0RCxhQUFhLENBQUNULFdBQVcsRUFBRW1DLElBQUksQ0FBQ3dCLEdBQUcsQ0FBQyxFQUFFLEVBQUUzRCxXQUFXLENBQUNnQixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDOUY4QyxVQUFVLEdBQUdBLFVBQVUsQ0FBQ0UsTUFBTSxDQUFDRCxZQUFZLENBQUM7TUFDNUN6RSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxHQUFHakcsTUFBTSxDQUFDRyxHQUFHLHFCQUFxQixJQUFJLENBQUNXLFdBQVcsSUFBSSxJQUFJLENBQUNBLFdBQVcsR0FBRyxJQUFJLENBQUNDLFdBQVcsVUFBVWYsTUFBTSxDQUFDQyxLQUFLLElBQUksQ0FBQztJQUNsSTs7SUFFQTtJQUNBLElBQUkwRyxXQUFXLENBQUNlLE1BQU0sR0FBRyxDQUFDLEVBQUU7TUFDMUIxQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxHQUFHakcsTUFBTSxDQUFDTSxNQUFNLGtDQUFrQ3FHLFdBQVcsQ0FBQ2UsTUFBTSxVQUFVMUgsTUFBTSxDQUFDQyxLQUFLLEVBQUUsQ0FBQztNQUN6RyxNQUFNMEssa0JBQWtCLEdBQUcsTUFBTSxJQUFJLENBQUN4RCxhQUFhLENBQUNSLFdBQVcsRUFBRWtDLElBQUksQ0FBQ3dCLEdBQUcsQ0FBQ2pELGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQztNQUM3Rm9ELFVBQVUsR0FBR0EsVUFBVSxDQUFDRSxNQUFNLENBQUNDLGtCQUFrQixDQUFDO01BQ2xEM0UsT0FBTyxDQUFDQyxHQUFHLENBQUMsR0FBR2pHLE1BQU0sQ0FBQ0csR0FBRyxxQkFBcUIsSUFBSSxDQUFDVyxXQUFXLElBQUksSUFBSSxDQUFDQSxXQUFXLEdBQUcsSUFBSSxDQUFDQyxXQUFXLFVBQVVmLE1BQU0sQ0FBQ0MsS0FBSyxJQUFJLENBQUM7SUFDbEk7O0lBRUE7SUFDQSxJQUFJMkcsS0FBSyxDQUFDYyxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQ3BCMUIsT0FBTyxDQUFDQyxHQUFHLENBQUMsR0FBR2pHLE1BQU0sQ0FBQ0ksR0FBRyw2QkFBNkJ3RyxLQUFLLENBQUNjLE1BQU0sNkJBQTZCMUgsTUFBTSxDQUFDQyxLQUFLLEVBQUUsQ0FBQztNQUM5RyxNQUFNMkssWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDekQsYUFBYSxDQUFDUCxLQUFLLEVBQUVpQyxJQUFJLENBQUN3QixHQUFHLENBQUMsQ0FBQyxFQUFFekQsS0FBSyxDQUFDYyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDakY4QyxVQUFVLEdBQUdBLFVBQVUsQ0FBQ0UsTUFBTSxDQUFDRSxZQUFZLENBQUM7TUFDNUM1RSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxHQUFHakcsTUFBTSxDQUFDRyxHQUFHLHFCQUFxQixJQUFJLENBQUNXLFdBQVcsSUFBSSxJQUFJLENBQUNBLFdBQVcsR0FBRyxJQUFJLENBQUNDLFdBQVcsVUFBVWYsTUFBTSxDQUFDQyxLQUFLLElBQUksQ0FBQztJQUNsSTtJQUVBLElBQUksQ0FBQ21CLE9BQU8sR0FBR29KLFVBQVU7O0lBRXpCO0lBQ0EsSUFBSSxDQUFDckMsY0FBYyxDQUFDcUMsVUFBVSxDQUFDOztJQUUvQjtJQUNBbkYsT0FBTyxDQUFDd0YsSUFBSSxDQUFDLElBQUksQ0FBQzlKLFdBQVcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUM1QztBQUNGOztBQUVBO0FBQ0EsSUFBSW5CLE9BQU8sQ0FBQ2tMLElBQUksS0FBS0MsTUFBTSxFQUFFO0VBQzNCLE1BQU1DLE1BQU0sR0FBRyxJQUFJckssVUFBVSxDQUFDLENBQUM7RUFDL0JxSyxNQUFNLENBQUNoQixHQUFHLENBQUMsQ0FBQyxDQUFDL0IsS0FBSyxDQUFDbkYsS0FBSyxJQUFJO0lBQzFCa0QsT0FBTyxDQUFDbEQsS0FBSyxDQUFDLEdBQUc5QyxNQUFNLENBQUNJLEdBQUcscUJBQXFCSixNQUFNLENBQUNDLEtBQUssRUFBRSxFQUFFNkMsS0FBSyxDQUFDO0lBQ3RFdUMsT0FBTyxDQUFDd0YsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUNqQixDQUFDLENBQUM7QUFDSjtBQUVBRSxNQUFNLENBQUNFLE9BQU8sR0FBR3RLLFVBQVUiLCJpZ25vcmVMaXN0IjpbXX0=