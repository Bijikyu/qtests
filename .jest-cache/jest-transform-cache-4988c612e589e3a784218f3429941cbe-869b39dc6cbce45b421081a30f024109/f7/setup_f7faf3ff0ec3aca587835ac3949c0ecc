82998f8c8946681a6005dfb457308014
"use strict";
/**
 * qtests Setup Module - Global Node.js Module Resolution Modification - TypeScript Implementation
 *
 * This module modifies Node.js's global module resolution behavior to automatically
 * substitute stub implementations for real modules during testing. It's a critical
 * piece of the qtests framework that enables seamless testing without changing
 * application code.
 *
 * Core functionality:
 * When this module is required, it patches Node.js's Module._resolveFilename method
 * to intercept require() calls and redirect them to stub implementations when
 * appropriate. This allows test code to use the same require() statements as
 * production code while getting test-appropriate implementations.
 *
 * Design philosophy:
 * - Transparent operation: Application code doesn't need to change
 * - Automatic stub resolution: No manual require() path changes needed
 * - Safe operation: Only affects specific modules, others work normally
 * - Performance conscious: Minimal overhead on module resolution
 *
 * Security and safety considerations:
 * - Only affects modules in the predefined stub registry
 * - Original Node.js behavior preserved for unlisted modules
 * - Changes are temporary and isolated to test execution
 * - No permanent modifications to Node.js installation
 * - Easy to disable by not requiring this module
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupComplete = void 0;
// Import Node.js Module constructor for accessing module resolution internals
// This gives us access to the private _resolveFilename method that controls
// how Node.js resolves module names to file paths
const module_1 = require("module");
const path_1 = __importDefault(require("path"));
const url_1 = require("url");
const require = (0, module_1.createRequire)(import.meta.url);
const Module = require('module');
// Get current directory for ES modules
const __dirname = path_1.default.dirname((0, url_1.fileURLToPath)(import.meta.url));
const stubsPath = path_1.default.join(__dirname, 'stubs');
const STUB_REGISTRY = {
    axios: 'axios.js', // HTTP client library stub file name for quick lookup
    winston: 'winston.js' // logging library stub file name for quick lookup
};
// Preserve existing NODE_PATH if it exists
const currentNodePath = process.env.NODE_PATH || '';
// Determine correct path separator for current platform
const separator = process.platform === 'win32' ? ';' : ':';
// Prepend our stubs directory to NODE_PATH
process.env.NODE_PATH = stubsPath + (currentNodePath ? separator + currentNodePath : '');
// Force Node.js to recognize the updated NODE_PATH for dynamic module resolution
require('module')._initPaths();
// Store original Module._load function for delegation to maintain normal module loading behavior
const origLoad = Module._load;
/**
 * Enhanced Module._load replacement that handles stub substitution
 *
 * This function intercepts all module loading requests and redirects known
 * modules to their stub implementations when appropriate.
 */
Module._load = function (id, parent, isMain) {
    // Check if this module should be stubbed
    if (STUB_REGISTRY[id]) {
        const stubPath = path_1.default.join(stubsPath, STUB_REGISTRY[id]);
        try {
            // Load the stub module instead of the real one
            return origLoad.call(this, stubPath, parent, isMain);
        }
        catch (error) {
            console.log(`qtests: Failed to load stub for ${id} from ${stubPath}, falling back to original`);
            // Fall back to original module if stub loading fails
            return origLoad.call(this, id, parent, isMain);
        }
    }
    // For non-stubbed modules, use original behavior
    return origLoad.call(this, id, parent, isMain);
};
console.log('qtests: Global module resolution patching activated');
console.log(`qtests: Stub registry contains: ${Object.keys(STUB_REGISTRY).join(', ')}`);
console.log(`qtests: Stubs directory: ${stubsPath}`);
// Export setup completion indicator
exports.setupComplete = true;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,