{"version":3,"names":["BaseMockModel","ApiKey","createMockModel","resetAllCollections","require","describe","beforeEach","test","TestModel","instance","name","value","expect","toBe","_id","toBeDefined","saved","save","getCollection","toHaveLength","apiKey","key","permissions","toEqual"],"sources":["mockModels.test.js"],"sourcesContent":["/**\n * Mock Models Integration Tests - Focused functionality verification\n */\n\nconst {\n  BaseMockModel,\n  ApiKey,\n  createMockModel,\n  resetAllCollections\n} = require('../utils/mockModels');\n\ndescribe('Mock Models Integration', () => {\n  \n  beforeEach(() => {\n    resetAllCollections();\n  });\n  \n  test('BaseMockModel creates and saves instances', async () => {\n    const TestModel = createMockModel('TestModel');\n    const instance = new TestModel({ name: 'test', value: 123 });\n    \n    expect(instance.name).toBe('test');\n    expect(instance._id).toBeDefined();\n    \n    const saved = await instance.save();\n    expect(saved).toBe(instance);\n    expect(TestModel.getCollection()).toHaveLength(1);\n  });\n  \n  test('ApiKey model works correctly', () => {\n    const apiKey = new ApiKey({ \n      key: 'test-key', \n      name: 'Test API Key',\n      permissions: ['read', 'write']\n    });\n    \n    expect(apiKey.key).toBe('test-key');\n    expect(apiKey.name).toBe('Test API Key');\n    expect(apiKey.permissions).toEqual(['read', 'write']);\n    expect(apiKey._id).toBeDefined();\n  });\n\n  test('resetAllCollections clears data', async () => {\n    const TestModel = createMockModel('TestModel');\n    await new TestModel({ name: 'test' }).save();\n    \n    expect(TestModel.getCollection()).toHaveLength(1);\n    \n    resetAllCollections();\n    expect(TestModel.getCollection()).toHaveLength(0);\n  });\n});"],"mappings":"AAAA;AACA;AACA;;AAEA,MAAM;EACJA,aAAa;EACbC,MAAM;EACNC,eAAe;EACfC;AACF,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAElCC,QAAQ,CAAC,yBAAyB,EAAE,MAAM;EAExCC,UAAU,CAAC,MAAM;IACfH,mBAAmB,CAAC,CAAC;EACvB,CAAC,CAAC;EAEFI,IAAI,CAAC,2CAA2C,EAAE,YAAY;IAC5D,MAAMC,SAAS,GAAGN,eAAe,CAAC,WAAW,CAAC;IAC9C,MAAMO,QAAQ,GAAG,IAAID,SAAS,CAAC;MAAEE,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAI,CAAC,CAAC;IAE5DC,MAAM,CAACH,QAAQ,CAACC,IAAI,CAAC,CAACG,IAAI,CAAC,MAAM,CAAC;IAClCD,MAAM,CAACH,QAAQ,CAACK,GAAG,CAAC,CAACC,WAAW,CAAC,CAAC;IAElC,MAAMC,KAAK,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IACnCL,MAAM,CAACI,KAAK,CAAC,CAACH,IAAI,CAACJ,QAAQ,CAAC;IAC5BG,MAAM,CAACJ,SAAS,CAACU,aAAa,CAAC,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC;EACnD,CAAC,CAAC;EAEFZ,IAAI,CAAC,8BAA8B,EAAE,MAAM;IACzC,MAAMa,MAAM,GAAG,IAAInB,MAAM,CAAC;MACxBoB,GAAG,EAAE,UAAU;MACfX,IAAI,EAAE,cAAc;MACpBY,WAAW,EAAE,CAAC,MAAM,EAAE,OAAO;IAC/B,CAAC,CAAC;IAEFV,MAAM,CAACQ,MAAM,CAACC,GAAG,CAAC,CAACR,IAAI,CAAC,UAAU,CAAC;IACnCD,MAAM,CAACQ,MAAM,CAACV,IAAI,CAAC,CAACG,IAAI,CAAC,cAAc,CAAC;IACxCD,MAAM,CAACQ,MAAM,CAACE,WAAW,CAAC,CAACC,OAAO,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACrDX,MAAM,CAACQ,MAAM,CAACN,GAAG,CAAC,CAACC,WAAW,CAAC,CAAC;EAClC,CAAC,CAAC;EAEFR,IAAI,CAAC,iCAAiC,EAAE,YAAY;IAClD,MAAMC,SAAS,GAAGN,eAAe,CAAC,WAAW,CAAC;IAC9C,MAAM,IAAIM,SAAS,CAAC;MAAEE,IAAI,EAAE;IAAO,CAAC,CAAC,CAACO,IAAI,CAAC,CAAC;IAE5CL,MAAM,CAACJ,SAAS,CAACU,aAAa,CAAC,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC;IAEjDhB,mBAAmB,CAAC,CAAC;IACrBS,MAAM,CAACJ,SAAS,CAACU,aAAa,CAAC,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC,CAAC;EACnD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}