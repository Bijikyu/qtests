5842c1ee5ba8245f3a56006163cba922
/**
 * qtests - Main Entry Point
 * 
 * This module serves as the unified export point for all qtests functionality.
 * The architecture is designed to provide a clean, intuitive API where users
 * can access all testing utilities through a single import.
 * 
 * Design rationale:
 * - Single entry point reduces cognitive load for users
 * - Organized by functionality (core, environment, setup, stubs) for clarity
 * - Each category is kept in separate lib files for maintainability
 * - Maintains backward compatibility with existing API
 */

// Import organized utility categories from lib directory
const {
  stubMethod,
  mockConsole
} = require('./lib/coreUtils');
const {
  testEnv,
  offlineMode,
  testHelpers
} = require('./lib/envUtils');
const {
  setup
} = require('./lib/setup');
const stubs = require('./lib/stubs');
const {
  TestGenerator
} = require('./lib/testGenerator');
const {
  runTestSuite,
  runTestSuites,
  createAssertions
} = require('./utils/runTestSuite');

// export main module utilities at bottom per requirements
module.exports = {
  stubMethod,
  // method replacement utility for isolating dependencies
  mockConsole,
  // console output capture for testing logging behavior
  testEnv,
  // environment and mock management for complex test scenarios
  offlineMode,
  // offline/online mode utility with automatic switching
  testHelpers,
  // advanced testing utilities for module reloading and mocking
  TestGenerator,
  // automatic test generation from source code analysis
  runTestSuite,
  // lightweight test runner for simple test scenarios
  runTestSuites,
  // run multiple test suites with overall summary
  createAssertions,
  // basic assertion helpers for test writing
  setup,
  // call this to activate stubs when desired
  stubs // stub library organized under namespace
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdHViTWV0aG9kIiwibW9ja0NvbnNvbGUiLCJyZXF1aXJlIiwidGVzdEVudiIsIm9mZmxpbmVNb2RlIiwidGVzdEhlbHBlcnMiLCJzZXR1cCIsInN0dWJzIiwiVGVzdEdlbmVyYXRvciIsInJ1blRlc3RTdWl0ZSIsInJ1blRlc3RTdWl0ZXMiLCJjcmVhdGVBc3NlcnRpb25zIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogcXRlc3RzIC0gTWFpbiBFbnRyeSBQb2ludFxuICogXG4gKiBUaGlzIG1vZHVsZSBzZXJ2ZXMgYXMgdGhlIHVuaWZpZWQgZXhwb3J0IHBvaW50IGZvciBhbGwgcXRlc3RzIGZ1bmN0aW9uYWxpdHkuXG4gKiBUaGUgYXJjaGl0ZWN0dXJlIGlzIGRlc2lnbmVkIHRvIHByb3ZpZGUgYSBjbGVhbiwgaW50dWl0aXZlIEFQSSB3aGVyZSB1c2Vyc1xuICogY2FuIGFjY2VzcyBhbGwgdGVzdGluZyB1dGlsaXRpZXMgdGhyb3VnaCBhIHNpbmdsZSBpbXBvcnQuXG4gKiBcbiAqIERlc2lnbiByYXRpb25hbGU6XG4gKiAtIFNpbmdsZSBlbnRyeSBwb2ludCByZWR1Y2VzIGNvZ25pdGl2ZSBsb2FkIGZvciB1c2Vyc1xuICogLSBPcmdhbml6ZWQgYnkgZnVuY3Rpb25hbGl0eSAoY29yZSwgZW52aXJvbm1lbnQsIHNldHVwLCBzdHVicykgZm9yIGNsYXJpdHlcbiAqIC0gRWFjaCBjYXRlZ29yeSBpcyBrZXB0IGluIHNlcGFyYXRlIGxpYiBmaWxlcyBmb3IgbWFpbnRhaW5hYmlsaXR5XG4gKiAtIE1haW50YWlucyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggZXhpc3RpbmcgQVBJXG4gKi9cblxuXG4vLyBJbXBvcnQgb3JnYW5pemVkIHV0aWxpdHkgY2F0ZWdvcmllcyBmcm9tIGxpYiBkaXJlY3RvcnlcbmNvbnN0IHsgc3R1Yk1ldGhvZCwgbW9ja0NvbnNvbGUgfSA9IHJlcXVpcmUoJy4vbGliL2NvcmVVdGlscycpO1xuY29uc3QgeyB0ZXN0RW52LCBvZmZsaW5lTW9kZSwgdGVzdEhlbHBlcnMgfSA9IHJlcXVpcmUoJy4vbGliL2VudlV0aWxzJyk7XG5jb25zdCB7IHNldHVwIH0gPSByZXF1aXJlKCcuL2xpYi9zZXR1cCcpO1xuY29uc3Qgc3R1YnMgPSByZXF1aXJlKCcuL2xpYi9zdHVicycpO1xuY29uc3QgeyBUZXN0R2VuZXJhdG9yIH0gPSByZXF1aXJlKCcuL2xpYi90ZXN0R2VuZXJhdG9yJyk7XG5jb25zdCB7IHJ1blRlc3RTdWl0ZSwgcnVuVGVzdFN1aXRlcywgY3JlYXRlQXNzZXJ0aW9ucyB9ID0gcmVxdWlyZSgnLi91dGlscy9ydW5UZXN0U3VpdGUnKTtcblxuXG4vLyBleHBvcnQgbWFpbiBtb2R1bGUgdXRpbGl0aWVzIGF0IGJvdHRvbSBwZXIgcmVxdWlyZW1lbnRzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3R1Yk1ldGhvZCwgLy8gbWV0aG9kIHJlcGxhY2VtZW50IHV0aWxpdHkgZm9yIGlzb2xhdGluZyBkZXBlbmRlbmNpZXNcbiAgbW9ja0NvbnNvbGUsIC8vIGNvbnNvbGUgb3V0cHV0IGNhcHR1cmUgZm9yIHRlc3RpbmcgbG9nZ2luZyBiZWhhdmlvclxuICB0ZXN0RW52LCAvLyBlbnZpcm9ubWVudCBhbmQgbW9jayBtYW5hZ2VtZW50IGZvciBjb21wbGV4IHRlc3Qgc2NlbmFyaW9zXG4gIG9mZmxpbmVNb2RlLCAvLyBvZmZsaW5lL29ubGluZSBtb2RlIHV0aWxpdHkgd2l0aCBhdXRvbWF0aWMgc3dpdGNoaW5nXG4gIHRlc3RIZWxwZXJzLCAvLyBhZHZhbmNlZCB0ZXN0aW5nIHV0aWxpdGllcyBmb3IgbW9kdWxlIHJlbG9hZGluZyBhbmQgbW9ja2luZ1xuICBUZXN0R2VuZXJhdG9yLCAvLyBhdXRvbWF0aWMgdGVzdCBnZW5lcmF0aW9uIGZyb20gc291cmNlIGNvZGUgYW5hbHlzaXNcbiAgcnVuVGVzdFN1aXRlLCAvLyBsaWdodHdlaWdodCB0ZXN0IHJ1bm5lciBmb3Igc2ltcGxlIHRlc3Qgc2NlbmFyaW9zXG4gIHJ1blRlc3RTdWl0ZXMsIC8vIHJ1biBtdWx0aXBsZSB0ZXN0IHN1aXRlcyB3aXRoIG92ZXJhbGwgc3VtbWFyeVxuICBjcmVhdGVBc3NlcnRpb25zLCAvLyBiYXNpYyBhc3NlcnRpb24gaGVscGVycyBmb3IgdGVzdCB3cml0aW5nXG4gIHNldHVwLCAvLyBjYWxsIHRoaXMgdG8gYWN0aXZhdGUgc3R1YnMgd2hlbiBkZXNpcmVkXG4gIHN0dWJzIC8vIHN0dWIgbGlicmFyeSBvcmdhbml6ZWQgdW5kZXIgbmFtZXNwYWNlXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFDQSxNQUFNO0VBQUVBLFVBQVU7RUFBRUM7QUFBWSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztBQUM5RCxNQUFNO0VBQUVDLE9BQU87RUFBRUMsV0FBVztFQUFFQztBQUFZLENBQUMsR0FBR0gsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0FBQ3ZFLE1BQU07RUFBRUk7QUFBTSxDQUFDLEdBQUdKLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFDeEMsTUFBTUssS0FBSyxHQUFHTCxPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ3BDLE1BQU07RUFBRU07QUFBYyxDQUFDLEdBQUdOLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztBQUN4RCxNQUFNO0VBQUVPLFlBQVk7RUFBRUMsYUFBYTtFQUFFQztBQUFpQixDQUFDLEdBQUdULE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQzs7QUFHekY7QUFDQVUsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZmIsVUFBVTtFQUFFO0VBQ1pDLFdBQVc7RUFBRTtFQUNiRSxPQUFPO0VBQUU7RUFDVEMsV0FBVztFQUFFO0VBQ2JDLFdBQVc7RUFBRTtFQUNiRyxhQUFhO0VBQUU7RUFDZkMsWUFBWTtFQUFFO0VBQ2RDLGFBQWE7RUFBRTtFQUNmQyxnQkFBZ0I7RUFBRTtFQUNsQkwsS0FBSztFQUFFO0VBQ1BDLEtBQUssQ0FBQztBQUNSLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=