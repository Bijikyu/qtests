// Comprehensive testing utilities for eliminating duplicate patterns across test suites
// Centralizes setup, teardown, mocking, and assertion patterns for consistent testing
// Provides reusable helpers for database, API, and component testing scenarios

import { beforeEach, afterEach, vi, expect } from 'vitest';
import { MongoMemoryServer } from 'mongodb-memory-server';
import mongoose from 'mongoose';
import { MongoStorage } from '../../server/storage';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { render, RenderOptions } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import React from 'react';

/**
 * Centralized database testing utilities for MongoDB Memory Server management
 * Eliminates duplicate beforeEach/afterEach patterns across storage tests
 */
export class DatabaseTestHelper {
  private mongoServer: MongoMemoryServer | null = null;
  public storage: MongoStorage | null = null;

  /**
   * Sets up MongoDB Memory Server and storage instance
   * Call this in beforeEach hooks for consistent database setup
   */
  async setup(): Promise<void> {
    this.mongoServer = await MongoMemoryServer.create();
    const mongoUri = this.mongoServer.getUri();
    await mongoose.connect(mongoUri);
    this.storage = new MongoStorage();
  }

  /**
   * Tears down MongoDB connection and server
   * Call this in afterEach hooks for proper cleanup
   */
  async teardown(): Promise<void> {
    if (mongoose.connection.readyState !== 0) {
      await mongoose.disconnect();
    }
    if (this.mongoServer) {
      await this.mongoServer.stop();
      this.mongoServer = null;
    }
    this.storage = null;
  }

  /**
   * Creates a complete test suite setup with automatic cleanup
   * Reduces boilerplate in test files by handling setup/teardown automatically
   */
  static createSuite(): DatabaseTestHelper {
    const helper = new DatabaseTestHelper();
    
    beforeEach(async () => {
      await helper.setup();
    });

    afterEach(async () => {
      await helper.teardown();
    });

    return helper;
  }
}

/**
 * Centralized mock management for consistent API and service mocking
 * Eliminates duplicate vi.mock patterns and provides standardized mock responses
 */
export class MockManager {
  private mocks: Map<string, any> = new Map();

  /**
   * Sets up standard API client mocks with configurable responses
   * Provides consistent mock patterns for client-side testing
   */
  setupApiClientMocks(customResponses: Record<string, any> = {}): void {
    const defaultMocks = {
      apiRequest: vi.fn(),
      queryClient: new QueryClient({
        defaultOptions: {
          queries: { retry: false },
          mutations: { retry: false }
        }
      })
    };

    const apiClientMock = { ...defaultMocks, ...customResponses };
    this.mocks.set('apiClient', apiClientMock);

    vi.mock('../../client/src/lib/queryClient', () => apiClientMock);
  }

  /**
   * Sets up toast notification mocks for user feedback testing
   * Standardizes toast mock patterns across component tests
   */
  setupToastMocks(): any {
    const mockToast = vi.fn();
    this.mocks.set('toast', mockToast);

    vi.mock('../../client/src/hooks/use-toast', () => ({
      useToast: () => ({ toast: mockToast })
    }));

    return mockToast;
  }

  /**
   * Sets up external service mocks with realistic response patterns
   * Provides consistent mocking for GitHub, OpenAI, and email services
   */
  setupExternalServiceMocks(): void {
    const githubMock = {
      rest: {
        users: { getAuthenticated: vi.fn().mockResolvedValue({ data: { login: 'testuser' } }) },
        repos: {
          get: vi.fn().mockResolvedValue({ data: { default_branch: 'main' } }),
          createFork: vi.fn().mockResolvedValue({ data: { clone_url: 'https://github.com/user/repo.git' } }),
          getContent: vi.fn().mockResolvedValue({ data: [] })
        },
        pulls: {
          create: vi.fn().mockResolvedValue({ data: { number: 123, html_url: 'https://github.com/user/repo/pull/123' } })
        }
      }
    };

    const openaiMock = {
      chat: {
        completions: {
          create: vi.fn().mockResolvedValue({
            choices: [{ message: { content: '{"tasks": ["task1", "task2"]}' } }]
          })
        }
      }
    };

    this.mocks.set('github', githubMock);
    this.mocks.set('openai', openaiMock);

    vi.mock('@octokit/rest', () => ({ Octokit: vi.fn(() => githubMock) }));
    vi.mock('openai', () => ({ default: vi.fn(() => openaiMock) }));
  }

  /**
   * Sets up fetch mocks with realistic response patterns
   * Provides consistent HTTP mocking for API endpoint testing
   */
  setupFetchMocks(responses: Array<{ data: any; status?: number; ok?: boolean }>): void {
    const mockFetch = vi.fn();
    
    responses.forEach((response, index) => {
      mockFetch.mockResolvedValueOnce({
        ok: response.ok ?? true,
        status: response.status ?? 200,
        json: () => Promise.resolve(response.data)
      });
    });

    global.fetch = mockFetch;
    this.mocks.set('fetch', mockFetch);
  }

  /**
   * Clears all mocks and resets state
   * Call this in beforeEach for clean test isolation
   */
  clearAll(): void {
    vi.clearAllMocks();
    this.mocks.clear();
  }

  /**
   * Gets a specific mock by name for custom assertions
   */
  getMock(name: string): any {
    return this.mocks.get(name);
  }
}

/**
 * React Testing Library utilities with enhanced setup patterns
 * Eliminates duplicate wrapper and provider setup across component tests
 */
export class ComponentTestHelper {
  private queryClient: QueryClient;

  constructor() {
    this.queryClient = new QueryClient({
      defaultOptions: {
        queries: { retry: false },
        mutations: { retry: false }
      }
    });
  }

  /**
   * Creates standardized test wrapper with all required providers
   * Eliminates duplicate wrapper components across test files
   */
  createWrapper(): React.ComponentType<{ children: React.ReactNode }> {
    return ({ children }: { children: React.ReactNode }) => {
      return React.createElement(
        QueryClientProvider,
        { client: this.queryClient },
        children
      );
    };
  }

  /**
   * Enhanced render function with automatic wrapper application
   * Provides consistent rendering setup for all component tests
   */
  render(ui: React.ReactElement, options?: Omit<RenderOptions, 'wrapper'>): ReturnType<typeof render> {
    return render(ui, {
      wrapper: this.createWrapper(),
      ...options
    });
  }

  /**
   * Creates user event instance with standardized configuration
   * Provides consistent user interaction testing setup
   */
  createUser(): ReturnType<typeof userEvent.setup> {
    return userEvent.setup();
  }

  /**
   * Resets query client state between tests
   * Call this in beforeEach for clean test isolation
   */
  reset(): void {
    this.queryClient.clear();
  }
}

/**
 * Assertion utilities for common testing patterns
 * Centralizes repetitive assertion logic with descriptive helpers
 */
export class AssertionHelper {
  /**
   * Asserts that an entity has standard database properties
   * Eliminates repetitive property checks across entity tests
   */
  static assertDatabaseEntity(entity: any, expectedProperties: Record<string, any>): void {
    expect(entity._id).toBeDefined();
    expect(entity.createdAt).toBeInstanceOf(Date);
    
    Object.entries(expectedProperties).forEach(([key, value]) => {
      expect(entity[key]).toBe(value);
    });
  }

  /**
   * Asserts API response structure and status
   * Standardizes API response validation across endpoint tests
   */
  static assertApiResponse(response: any, expectedStatus: number, hasData: boolean = true): void {
    expect(response.status).toBe(expectedStatus);
    
    if (hasData) {
      expect(response.body).toBeDefined();
    }
    
    if (expectedStatus >= 400) {
      expect(response.body.error).toBeDefined();
    }
  }

  /**
   * Asserts form validation behavior
   * Centralizes form testing patterns across component tests
   */
  static async assertFormValidation(
    getByText: (text: string | RegExp) => HTMLElement,
    errorMessage: string | RegExp
  ): Promise<void> {
    expect(getByText(errorMessage)).toBeInTheDocument();
  }

  /**
   * Asserts loading state behavior
   * Standardizes loading state testing across async components
   */
  static assertLoadingState(getByText: (text: string | RegExp) => HTMLElement): void {
    expect(getByText(/loading/i)).toBeInTheDocument();
  }

  /**
   * Asserts error state behavior
   * Standardizes error state testing across components
   */
  static assertErrorState(getByText: (text: string | RegExp) => HTMLElement, errorMessage?: string | RegExp): void {
    const message = errorMessage || /error/i;
    expect(getByText(message)).toBeInTheDocument();
  }
}

/**
 * Test data factory for creating realistic test entities
 * Eliminates duplicate test data creation across test files
 */
export class TestDataFactory {
  /**
   * Creates a test user with realistic properties
   */
  static createUser(overrides: Partial<any> = {}): any {
    return {
      username: 'testuser',
      password: 'hashedpassword123',
      email: 'test@example.com',
      ...overrides
    };
  }

  /**
   * Creates a test prompt list with realistic properties
   */
  static createPromptList(userId: string, overrides: Partial<any> = {}): any {
    return {
      name: 'Test Automation List',
      description: 'A comprehensive list for testing automation workflows',
      userId,
      ...overrides
    };
  }

  /**
   * Creates a test prompt with realistic properties
   */
  static createPrompt(promptListId: string, order: number = 0, overrides: Partial<any> = {}): any {
    return {
      title: 'Test Prompt',
      description: 'A test prompt for automation',
      content: 'Create a comprehensive test suite for the application',
      promptListId,
      order,
      ...overrides
    };
  }

  /**
   * Creates a test repository with realistic properties
   */
  static createRepository(userId: string, overrides: Partial<any> = {}): any {
    return {
      name: 'test-repo',
      url: 'https://github.com/user/test-repo',
      owner: 'user',
      userId,
      isActive: true,
      ...overrides
    };
  }

  /**
   * Creates multiple test entities of the same type
   */
  static createMultiple<T>(factory: () => T, count: number): T[] {
    return Array.from({ length: count }, (_, index) => factory());
  }
}

/**
 * Performance testing utilities for load and timing tests
 * Provides standardized performance measurement across test suites
 */
export class PerformanceTestHelper {
  /**
   * Measures execution time of async operations
   */
  static async measureTime<T>(operation: () => Promise<T>): Promise<{ result: T; duration: number }> {
    const start = Date.now();
    const result = await operation();
    const duration = Date.now() - start;
    return { result, duration };
  }

  /**
   * Asserts operation completes within time limit
   */
  static async assertTimingConstraint<T>(
    operation: () => Promise<T>,
    maxDuration: number
  ): Promise<T> {
    const { result, duration } = await this.measureTime(operation);
    expect(duration).toBeLessThan(maxDuration);
    return result;
  }

  /**
   * Tests concurrent operations for race conditions
   */
  static async testConcurrency<T>(operations: Array<() => Promise<T>>): Promise<T[]> {
    return Promise.all(operations.map(op => op()));
  }
}

/**
 * Unified test suite creator that combines all helper utilities
 * Provides a single entry point for comprehensive test setup
 */
export class TestSuiteBuilder {
  private dbHelper?: DatabaseTestHelper;
  private mockManager: MockManager;
  private componentHelper?: ComponentTestHelper;

  constructor() {
    this.mockManager = new MockManager();
  }

  /**
   * Enables database testing with automatic setup/teardown
   */
  withDatabase(): this {
    this.dbHelper = DatabaseTestHelper.createSuite();
    return this;
  }

  /**
   * Enables component testing with React Testing Library setup
   */
  withComponents(): this {
    this.componentHelper = new ComponentTestHelper();
    return this;
  }

  /**
   * Enables API mocking with standard patterns
   */
  withApiMocks(): this {
    this.mockManager.setupApiClientMocks();
    this.mockManager.setupToastMocks();
    return this;
  }

  /**
   * Enables external service mocking
   */
  withExternalMocks(): this {
    this.mockManager.setupExternalServiceMocks();
    return this;
  }

  /**
   * Gets the configured helpers for use in tests
   */
  build(): {
    db?: DatabaseTestHelper;
    mocks: MockManager;
    components?: ComponentTestHelper;
    assert: typeof AssertionHelper;
    data: typeof TestDataFactory;
    performance: typeof PerformanceTestHelper;
  } {
    // Set up automatic mock clearing
    beforeEach(() => {
      this.mockManager.clearAll();
      this.componentHelper?.reset();
    });

    return {
      db: this.dbHelper,
      mocks: this.mockManager,
      components: this.componentHelper,
      assert: AssertionHelper,
      data: TestDataFactory,
      performance: PerformanceTestHelper
    };
  }
}