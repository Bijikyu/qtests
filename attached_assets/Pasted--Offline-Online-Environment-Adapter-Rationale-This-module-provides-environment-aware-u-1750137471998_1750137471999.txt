/**
 * Offline/Online Environment Adapter
 * 
 * Rationale: This module provides environment-aware utilities that adapt between
 * production (online) and development/testing (offline) environments. It enables
 * the application to function in environments where external dependencies like
 * qerrors module or external HTTP services may not be available.
 * 
 * Key Benefits:
 * 1. Environment Isolation - Development/testing doesn't require external services
 * 2. Graceful Degradation - Application functions even when dependencies are unavailable
 * 3. Testing Support - Enables unit testing with mocked HTTP requests
 * 4. Development Flexibility - Allows development without external API dependencies
 * 
 * Design Pattern: Adapter Pattern
 * This module implements the adapter pattern to provide consistent interfaces
 * for axios (HTTP client) and qerrors (error logging) regardless of environment.
 * 
 * Environment Detection:
 * Uses the CODEX environment variable to determine operating mode. When CODEX=true,
 * the system operates in offline mode with mocked dependencies.
 */

const axiosReal = require('axios'); // Real axios HTTP client for production use
const { createMockAxios } = require('./mockAxios'); // Mock axios factory for testing environments

// Normalize environment variable to boolean for consistent checking
const codexFlag = String(process.env.CODEX).toLowerCase() === 'true';

// Conditionally load qerrors only in online environments to prevent module not found errors
let realQerrors; 
if(!codexFlag){ 
    ({ qerrors: realQerrors } = require('qerrors')); // Dynamic import prevents errors in offline mode
}

// Export environment state for other modules to check
const isOffline = codexFlag;

/**
 * Environment-Aware Utility Configuration
 * 
 * Rationale: Based on the environment detection, this section configures the
 * appropriate implementations for HTTP client and error logging utilities.
 * 
 * Offline Mode (CODEX=true):
 * - Uses mock axios that simulates HTTP responses for testing
 * - Uses no-op qerrors that logs but doesn't attempt external logging
 * 
 * Online Mode (CODEX=false or undefined):
 * - Uses real axios for actual HTTP requests to external APIs
 * - Uses real qerrors for comprehensive error logging and reporting
 */

let axios; // HTTP client interface (real or mock based on environment)
let qerrors; // Error logging interface (real or no-op based on environment)

if(isOffline){
    // Offline configuration for development/testing environments
    axios = createMockAxios(); // Use factory-created mock axios with simulated responses
    
    // No-op qerrors implementation for offline environments
    // Provides same interface as real qerrors but only logs locally
    qerrors = () => { // minimal logger used offline
        console.log(`noopQerrors is running with none`); // Log function entry for debugging
        try {
            console.log(`noopQerrors has run`); // Log successful execution
        } catch(error){
            console.log(`noopQerrors error ${error.message}`); // Log any unexpected errors
        }
    };
} else {
    // Online configuration for production environments
    axios = axiosReal; // Use real axios for actual HTTP requests
    qerrors = realQerrors; // Use real qerrors for comprehensive error logging
}

// Export consistent interface regardless of environment
module.exports = { isOffline, axios, qerrors };