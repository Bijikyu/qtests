✗ /home/runner/workspace/manual-tests/resolveStubPaths.test.ts (14400ms)
  FAIL manual-tests/resolveStubPaths.test.ts
    ● Stub Path Resolution Tests › stubs resolve correctly after setup
      Jest encountered an unexpected token
      Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.
      Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.
      By default "node_modules" folder is ignored by transformers.
      Here's what you can do:
       • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
       • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
       • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
       • If you need a custom transformation, specify a "transform" option in your config.
       • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.
      You'll find more details and examples of these config options in the docs:
      https://jestjs.io/docs/configuration
      For information about custom transformations, see:
      https://jestjs.io/docs/code-transformation
      Details:
      /home/runner/workspace/setup.ts:40
      const require = (0, module_1.createRequire)(import.meta.url);
            ^
      SyntaxError: Identifier 'require' has already been declared
        2 | describe('Stub Path Resolution Tests', () => {
        3 |   test('stubs resolve correctly after setup', async () => {
      > 4 |     await import('../setup.js'); // activate stub resolution
          |     ^
        5 |     
        6 |     // Test that stub paths resolve without throwing
        7 |     expect(() => require('axios')).not.toThrow();
        at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1316:40)
        at manual-tests/resolveStubPaths.test.ts:4:5
        at Object.<anonymous> (manual-tests/resolveStubPaths.test.ts:4:5)
  Test Suites: 1 failed, 1 total
  Tests:       1 failed, 1 passed, 2 total
  Snapshots:   0 total
  Time:        4.691 s
  Ran all test suites matching /home/runner/workspace/manual-tests/resolveStubPaths.test.ts.
  FAIL manual-tests/resolveStubPaths.test.ts
    Stub Path Resolution Tests
      ✕ stubs resolve correctly after setup (11 ms)
      ✓ stub modules provide expected interfaces (103 ms)
    ● Stub Path Resolution Tests › stubs resolve correctly after setup
      Jest encountered an unexpected token
      Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.
      Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.
      By default "node_modules" folder is ignored by transformers.
      Here's what you can do:
       • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
       • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
       • To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
       • If you need a custom transformation, specify a "transform" option in your config.
       • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.
      You'll find more details and examples of these config options in the docs:
      https://jestjs.io/docs/configuration
      For information about custom transformations, see:
      https://jestjs.io/docs/code-transformation
      Details:
      /home/runner/workspace/setup.ts:40
      const require = (0, module_1.createRequire)(import.meta.url);
            ^
      SyntaxError: Identifier 'require' has already been declared
        2 | describe('Stub Path Resolution Tests', () => {
        3 |   test('stubs resolve correctly after setup', async () => {
      > 4 |     await import('../setup.js'); // activate stub resolution
          |     ^
        5 |     
        6 |     // Test that stub paths resolve without throwing
        7 |     expect(() => require('axios')).not.toThrow();
        at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1316:40)
        at manual-tests/resolveStubPaths.test.ts:4:5
        at Object.<anonymous> (manual-tests/resolveStubPaths.test.ts:4:5)
  Test Suites: 1 failed, 1 total
  Tests:       1 failed, 1 passed, 2 total
  Snapshots:   0 total
  Time:        1.766 s, estimated 2 s
  Ran all test suites matching /home/runner/workspace/manual-tests/resolveStubPaths.test.ts.
  node:internal/modules/esm/get_format:189
    throw new ERR_UNKNOWN_FILE_EXTENSION(ext, filepath);
          ^
  TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension ".ts" for /home/runner/workspace/manual-tests/resolveStubPaths.test.ts
      at Object.getFileProtocolModuleFormat [as file:] (node:internal/modules/esm/get_format:189:9)
      at defaultGetFormat (node:internal/modules/esm/get_format:232:36)
      at defaultLoad (node:internal/modules/esm/load:145:22)
      at async ModuleLoader.loadAndTranslate (node:internal/modules/esm/loader:477:45)
      at async ModuleJob._link (node:internal/modules/esm/module_job:110:19) {
    code: 'ERR_UNKNOWN_FILE_EXTENSION'
  }
  Node.js v20.19.3
Completed batch 3, starting next...