#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

const SRC_DIR = 'src';
const TEST_DIR = 'tests/integration';
const KNOWN_MOCKS = ['axios', 'node-fetch', 'pg', 'mongoose', 'fs', 'redis'];
const VALID_EXTS = ['.ts', '.js', '.tsx', '.jsx'];

const qtestsRegex = /from ['"]qtests['"]/;
const apiRegex = /\b(app|router)\.(get|post|put|delete|patch)\s*\(\s*['"`]([^'"`]+)['"`]/gi;
const exportRegex = /^\s*export\s+(?:const|function|class)\s+([a-zA-Z0-9_]+)/gm;
const importRegex = /from ['"]([^'"]+)['"]/g;

let scanned = [];

function walk(dir) {
  return fs.readdirSync(dir, { withFileTypes: true }).flatMap(entry => {
    const full = path.resolve(dir, entry.name);
    return entry.isDirectory() ? walk(full) : full;
  });
}

function getRelativeTestPath(file, type = 'unit') {
  const rel = path.relative(SRC_DIR, file);
  return type === 'unit'
    ? path.join(path.dirname(file), `${path.basename(file, path.extname(file))}.test${path.extname(file)}`)
    : path.join(TEST_DIR, rel.replace(/\.[tj]sx?$/, `.test.ts`).replace(/[\\/]/g, '__'));
}

function createDir(p) {
  const dir = path.dirname(p);
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
}

function writeIfMissing(p, content) {
  if (!fs.existsSync(p)) {
    createDir(p);
    fs.writeFileSync(p, content, 'utf8');
    return true;
  }
  return false;
}

function getUsedModules(content) {
  return [...content.matchAll(importRegex)].map(m => m[1]).filter(x =>
    !x.startsWith('.') && !x.startsWith('/')
  );
}

function createUnitTest(file, exports, usesQtests, mocks) {
  const lines = [`// Auto-generated unit test for ${path.basename(file)}`];
  if (usesQtests) lines.push(`import { test } from 'qtests';`);
  mocks.forEach(lib => lines.push(`jest.mock('${lib}');`));
  lines.push(`import * as mod from './${path.basename(file)}';`, '');
  lines.push(`describe('${path.basename(file)}', () => {`);
  for (const fn of exports) {
    lines.push(`  test('${fn} works', () => {`);
    lines.push(`    // TODO: test mod.${fn}`);
    lines.push('  });');
  }
  lines.push('});\n');
  return lines.join('\n');
}

function createApiTest(method, route) {
  const lines = [`// Auto-generated API test for ${method.toUpperCase()} ${route}`];
  lines.push(`import request from '../../src/app';`, '');
  lines.push(`describe('${method.toUpperCase()} ${route}', () => {`);
  lines.push(`  test('should succeed', async () => {`);
  lines.push(`    const res = await request.${method.toLowerCase()}('${route}');`);
  lines.push(`    expect(res.status).toBe(200);`);
  lines.push('  });', '');
  lines.push('  test(\'should handle failure\', async () => {');
  lines.push(`    const res = await request.${method.toLowerCase()}('${route}').send({ bad: true });`);
  lines.push(`    expect(res.status).toBeGreaterThanOrEqual(400);`);
  lines.push('  });');
  lines.push('});\n');
  return lines.join('\n');
}

function analyze(file) {
  const ext = path.extname(file);
  if (!VALID_EXTS.includes(ext)) return;

  const content = fs.readFileSync(file, 'utf8');
  const usesQtests = qtestsRegex.test(content);
  const imports = getUsedModules(content);
  const mockTargets = imports.filter(i => KNOWN_MOCKS.includes(i) && i !== 'qtests');

  // Unit test
  const exports = [...content.matchAll(exportRegex)].map(m => m[1]);
  if (exports.length > 0) {
    const testPath = getRelativeTestPath(file, 'unit');
    const created = writeIfMissing(testPath, createUnitTest(file, exports, usesQtests, mockTargets));
    if (created) scanned.push({ type: 'unit', file: path.relative('.', testPath) });
  }

  // API
  const apis = [...content.matchAll(apiRegex)];
  for (const [, method, route] of apis) {
    const testPath = getRelativeTestPath(file, 'api').replace(/\.test\.ts$/, `__${method.toLowerCase()}.test.ts`);
    const created = writeIfMissing(testPath, createApiTest(method, route));
    if (created) scanned.push({ type: 'api', file: path.relative('.', testPath) });
  }
}

function scaffoldJestSetup() {
  const config = `
// jest.config.js
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  setupFilesAfterEnv: ['./tests/setup.ts'],
  moduleFileExtensions: ['ts', 'js', 'json'],
  roots: ['<rootDir>/src', '<rootDir>/tests'],
};
`.trim();

  const setup = `
// tests/setup.ts
let server;

beforeAll(async () => {
  const app = require('../src/app').default || require('../src/app');
  server = app.listen(4000, () => console.log('Test server started'));
});

afterAll(async () => {
  if (server) server.close();
});
`.trim();

  writeIfMissing('jest.config.js', config);
  writeIfMissing('tests/setup.ts', setup);
}

function main() {
  walk(SRC_DIR).forEach(analyze);
  scaffoldJestSetup();

  if (scanned.length === 0) {
    console.log('‚úÖ All tests already exist. Nothing to generate.');
  } else {
    console.log(`‚úÖ Generated ${scanned.length} new test files:`);
    scanned.forEach(({ type, file }) => {
      const label = type === 'unit' ? 'üì¶ Unit' : 'üåê API';
      console.log(`  ${label} ‚Üí ${file}`);
    });
  }
}

main();
