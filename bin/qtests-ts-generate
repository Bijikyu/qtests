#!/usr/bin/env tsx

/**
 * qtests Test Generator CLI - TypeScript ES Module Compatible
 * 
 * Command-line interface for generating unit tests and API tests
 * by scanning source code and analyzing exports, imports, and routes.
 */

import { TestGenerator } from '../lib/testGenerator.js';
import { readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import path from 'path';

// Get __dirname equivalent for ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Parse command line arguments
// üö©AI: CLI_FLAGS_WIRING ‚Äî add mode/scope/dry-run/force/include/exclude
function parseArgs(argv) {
  const args = argv.slice(2);
  const options = {
    mode: 'heuristic', // Default mode
    unit: false,       // Generate unit tests only
    integration: false, // Generate integration tests only  
    dryRun: false,     // Show planned files without writing
    force: false,      // Allow overwriting generated files
    include: [],       // Include globs
    exclude: [],       // Exclude globs
    react: false,      // Force React template mode
    // By default we skip generating tests for React components (but still generate for hooks)
    skipReactComponents: true,
    updatePackageScript: false, // Update package.json test script
    withRouter: false   // Optionally wrap with MemoryRouter when React Router detected
  };
  
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    
    switch (arg) {
      case '--src':
      case '-s':
        options.SRC_DIR = args[++i];
        break;
      case '--test-dir':
      case '-t':
        options.TEST_DIR = args[++i];
        break;
      case '--mode':
        const mode = args[++i];
        if (!['heuristic', 'ast'].includes(mode)) {
          console.error(`Invalid mode: ${mode}. Use 'heuristic' or 'ast'`);
          process.exit(1);
        }
        options.mode = mode;
        break;
      case '--unit':
        options.unit = true;
        break;
      case '--integration':
        options.integration = true;
        break;
      case '--dry-run':
        options.dryRun = true;
        break;
      case '--force':
        options.force = true;
        break;
      case '--react':
        options.react = true;
        break;
      case '--react-components':
        // Opt-in to generating React component tests
        options.skipReactComponents = false;
        break;
      case '--no-react-components':
        options.skipReactComponents = true;
        break;
      case '--update-pkg-script':
        options.updatePackageScript = true;
        break;
      case '--with-router':
        options.withRouter = true;
        break;
      case '--migrate-generated-tests':
        options.migrateGeneratedTests = true;
        break;
      case '--include':
        options.include.push(args[++i]);
        break;
      case '--exclude':
        options.exclude.push(args[++i]);
        break;
      case '--help':
      case '-h':
        showHelp();
        process.exit(0);
        break;
      case '--version':
      case '-v':
        showVersion();
        process.exit(0);
        break;

      default:
        if (arg.startsWith('-')) {
          console.error(`Unknown option: ${arg}`);
          process.exit(1);
        }
    }
  }
  
  return options;
}

function showHelp() {
  console.log(`
qtests Test Generator (TypeScript ESM)

USAGE:
  qtests-ts-generate [OPTIONS]

OPTIONS:
  -s, --src <dir>       Source directory to scan (default: .)
  -t, --test-dir <dir>  Generated test directory (default: tests/generated-tests)
      --mode <mode>     Analysis mode: 'heuristic' or 'ast' (default: heuristic)
      --unit           Generate only unit tests
      --integration    Generate only integration tests
      --include <glob> Include files matching glob pattern (can be used multiple times)
      --exclude <glob> Exclude files matching glob pattern (can be used multiple times)
      --dry-run            Show planned files without writing them
      --force              Allow overwriting generated test files
      --react              Force React template mode (use jsdom, React templates)
      --react-components   Opt-in: generate React component tests (hooks are always supported)
      --no-react-components  Skip generating tests for React components (default)
      --with-router        Wrap React tests with MemoryRouter when React Router is detected
      --update-pkg-script  Update package.json test script to use Jest with project config

  -h, --help           Show this help message
  -v, --version        Show version information

EXAMPLES:
  qtests-ts-generate                           # Scan current directory with defaults
  qtests-ts-generate --src lib                 # Scan 'lib' directory instead
  qtests-ts-generate --unit --dry-run          # Preview unit tests only
  qtests-ts-generate --mode ast --force        # Use TypeScript AST analysis, overwrite existing
  qtests-ts-generate --include "**/*.ts"       # Only process TypeScript files
  qtests-ts-generate --exclude "**/demo/**"    # Skip demo directories


DESCRIPTION:
  Automatically generates TypeScript unit tests and API tests by scanning 
  JavaScript/TypeScript source files. Detects exported functions, classes, 
  and Express routes to create appropriate test files with proper mocking setup.

  Generated test files:
  - Unit tests: Created alongside source files with .GeneratedTest.test.ts extension (legacy .GenerateTest supported)
  - API tests: Created in integration test directory with route-specific names
  - Jest configuration: Automatically creates jest.config.js and test setup files
  - Always includes 'import qtests/setup' for proper stubbing

For more information, visit: https://github.com/qtests/qtests
`);
}

function showVersion() {
  try {
    const packageJsonPath = path.join(__dirname, '..', 'package.json');
    const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf8'));
    console.log(`qtests v${packageJson.version}`);
  } catch (error) {
    console.log(`qtests v1.2.0`);
  }
}

async function main() {
  try {
    console.log('üîß qtests Test Generator (TypeScript ES Module)\n');
    
    const options = parseArgs(process.argv);
    
    // Display configuration
    console.log(`Configuration:`);
    console.log(`  Source directory: ${options.SRC_DIR || '.'}`);
  console.log(`  Test directory: ${options.TEST_DIR || 'tests/generated-tests'}`);
    console.log(`  Analysis mode: ${options.mode}`);
    console.log(`  Scope: ${options.unit ? 'unit only' : options.integration ? 'integration only' : 'both'}`);
    console.log(`  Dry run: ${options.dryRun ? 'yes' : 'no'}`);
  console.log(`  Force overwrite: ${options.force ? 'yes' : 'no'}`);
  // Overwrites are considered improvements for generator-owned files
  console.log(`  Force React mode: ${options.react ? 'yes' : 'no'}`);
    console.log(`  Generate component tests: ${options.skipReactComponents === false ? 'yes' : 'no'}`);
  console.log(`  Update package.json script: ${options.updatePackageScript ? 'yes' : 'no'}`);
    if (options.include.length > 0) {
      console.log(`  Include patterns: ${options.include.join(', ')}`);
    }
    if (options.exclude.length > 0) {
      console.log(`  Exclude patterns: ${options.exclude.join(', ')}`);
    }
  console.log(`  Module system: TypeScript ES Modules (only)`);
  console.log(`  Jest config path: config/jest.config.mjs (auto)`);
    console.log('');
    
    const generator = new TestGenerator(options);
    
    // Generate tests with new options
    if (options.dryRun) {
      console.log('üîç Dry run - showing planned test files...\n');
      await generator.generateTestFiles(true); // Pass dry-run flag
    } else {
      await generator.generateTestFiles();
    }
    
    const results = generator.getResults();
    
    // Summary
    console.log('\nüìä Generation Summary:');
    const unitTests = results.filter(r => r.type === 'unit').length;
    const apiTests = results.filter(r => r.type === 'api').length;
    
    console.log(`  Unit tests: ${unitTests}`);
    console.log(`  API tests: ${apiTests}`);
    console.log(`  Total files: ${results.length}`);
    
    if (results.length > 0) {
      console.log('\nüí° Next steps:');
      console.log('  1. Review generated TypeScript test files');
      console.log('  2. Add specific test implementations');
      console.log('  3. Run tests with: npm test');
      
      if (options.mode === 'ast') {
        console.log('  4. AST analysis may have generated more detailed test stubs');
      }
    } else {
      console.log('\n‚úÖ All source files already have corresponding tests');
    }
    
  } catch (error) {
    console.error('‚ùå Error generating tests:', error.message);
    process.exit(1);
  }
}

// Run CLI if this script is executed directly
main().catch(error => {
  console.error('‚ùå Unexpected error:', error.message);
  process.exit(1);
});
